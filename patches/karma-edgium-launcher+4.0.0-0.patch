diff --git a/node_modules/karma-edgium-launcher/index.js b/node_modules/karma-edgium-launcher/index.js
index e7e3b8e..e6a78ab 100644
--- a/node_modules/karma-edgium-launcher/index.js
+++ b/node_modules/karma-edgium-launcher/index.js
@@ -1,258 +1,263 @@
-var fs = require('fs')
-var path = require('path')
-var which = require('which')
+const fs = require('fs')
+const path = require('path')
 
+// #region Common
 function isJSFlags (flag) {
   return flag.indexOf('--js-flags=') === 0
 }
 
 function sanitizeJSFlags (flag) {
-  var test = /--js-flags=(['"])/.exec(flag)
+  const test = /--js-flags=(['"])/.exec(flag)
   if (!test) {
     return flag
   }
-  var escapeChar = test[1]
-  var endExp = new RegExp(escapeChar + '$')
-  var startExp = new RegExp('--js-flags=' + escapeChar)
+  const escapeChar = test[1]
+  const endExp = new RegExp(`${escapeChar}$`)
+  const startExp = new RegExp(`--js-flags=${escapeChar}`)
   return flag.replace(startExp, '--js-flags=').replace(endExp, '')
 }
 
-var EdgeBrowser = function (baseBrowserDecorator, args) {
-  baseBrowserDecorator(this)
-
-  var flags = args.flags || []
-  var userDataDir = args.edgeDataDir || this._tempDir
-
-  this._getOptions = function (url) {
-    // Edge CLI options
-    // http://peter.sh/experiments/chromium-command-line-switches/
-    flags.forEach(function (flag, i) {
-      if (isJSFlags(flag)) {
-        flags[i] = sanitizeJSFlags(flag)
-      }
-    })
-
-    return [
-      '--user-data-dir=' + userDataDir,
-      // https://github.com/GoogleChrome/chrome-launcher/blob/master/docs/chrome-flags-for-tools.md#--enable-automation
-      '--enable-automation',
-      '--no-default-browser-check',
-      '--no-first-run',
-      '--disable-default-apps',
-      '--disable-popup-blocking',
-      '--disable-translate',
-      '--disable-background-timer-throttling',
-      // on macOS, disable-background-timer-throttling is not enough
-      // and we need disable-renderer-backgrounding too
-      // see https://github.com/karma-runner/karma-chrome-launcher/issues/123
-      '--disable-renderer-backgrounding',
-      '--disable-device-discovery-notifications'
-    ].concat(flags, [url])
-  }
-}
-
-// Return location of edge.exe file for a given Edge directory (available: "Edge", "Edge SxS").
+// Return location of msedge.exe file for a given Edge directory.
+// (available: "Edge", "Edge Beta", "Edge Dev", "Edge SxS")
 function getEdgeExe (edgeDirName) {
   // Only run these checks on win32
   if (process.platform !== 'win32') {
     return null
   }
-  var windowsEdgeDirectory, i, prefix
-  var suffix = edgeDirName + '\\Application\\edge.exe'
-  var prefixes = [process.env.LOCALAPPDATA, process.env.PROGRAMFILES, process.env['PROGRAMFILES(X86)']]
-
-  for (i = 0; i < prefixes.length; i++) {
+  let windowsEdgeDirectory
+  let i
+  let
+    prefix
+  const suffix = `Microsoft\\${edgeDirName}\\Application\\msedge.exe`
+  const prefixes = [process.env.LOCALAPPDATA, process.env.PROGRAMFILES, process.env['PROGRAMFILES(X86)']]
+  const errors = []
+
+  for (i = 0; i < prefixes.length; i += 1) {
     prefix = prefixes[i]
     try {
       windowsEdgeDirectory = path.join(prefix, suffix)
       fs.accessSync(windowsEdgeDirectory)
       return windowsEdgeDirectory
-    } catch (e) {}
+    } catch (e) {
+      errors.push(e)
+    }
   }
-
   return windowsEdgeDirectory
 }
 
-var ChromiumBrowser = function (baseBrowserDecorator, args) {
+function getEdgeDarwin (defaultPath) {
+  if (process.platform !== 'darwin') {
+    return null
+  }
+
+  try {
+    const homePath = path.join(process.env.HOME, defaultPath)
+    fs.accessSync(homePath)
+    return homePath
+  } catch (e) {
+    return defaultPath
+  }
+}
+
+function getHeadlessOptions (url, args, parent) {
+  const mergedArgs = parent.call(this, url, args).concat([
+    '--headless',
+    '--disable-gpu',
+    '--disable-dev-shm-usage'
+  ])
+
+  const isRemoteDebuggingFlag = (flag) => (flag || '').indexOf('--remote-debugging-port=') !== -1
+
+  return mergedArgs.some(isRemoteDebuggingFlag) ? mergedArgs : mergedArgs.concat(['--remote-debugging-port=9222'])
+}
+
+function getCanaryOptions (url, args, parent) {
+  // disable crankshaft optimizations, as it causes lot of memory leaks (as of Edge 23.0)
+  const flags = args.flags || []
+  let augmentedFlags
+  const customFlags = '--nocrankshaft --noopt'
+
+  flags.forEach((flag) => {
+    if (isJSFlags(flag)) {
+      augmentedFlags = `${sanitizeJSFlags(flag)} ${customFlags}`
+    }
+  })
+
+  return parent.call(this, url).concat([augmentedFlags || `--js-flags=${customFlags}`])
+}
+// #endregion
+
+// #region Edge
+const EdgeBrowser = function (baseBrowserDecorator, args) {
   baseBrowserDecorator(this)
 
-  var flags = args.flags || []
-  var userDataDir = args.edgeDataDir || this._tempDir
+  const flags = args.flags || []
+  const userDataDir = args.edgeDataDir || this._tempDir
 
   this._getOptions = function (url) {
-    // Chromium CLI options
+    // Edge CLI options
     // http://peter.sh/experiments/chromium-command-line-switches/
-    flags.forEach(function (flag, i) {
+    flags.forEach((flag, i) => {
       if (isJSFlags(flag)) {
         flags[i] = sanitizeJSFlags(flag)
       }
     })
 
     return [
-      '--user-data-dir=' + userDataDir,
+      `--user-data-dir=${userDataDir}`,
+      // https://github.com/GoogleChrome/chrome-launcher/blob/master/docs/chrome-flags-for-tools.md#--enable-automation
+      '--enable-automation',
       '--no-default-browser-check',
       '--no-first-run',
       '--disable-default-apps',
       '--disable-popup-blocking',
       '--disable-translate',
-      '--disable-background-timer-throttling'
+      '--disable-background-timer-throttling',
+      // on macOS, disable-background-timer-throttling is not enough
+      // and we need disable-renderer-backgrounding too
+      // see https://github.com/karma-runner/karma-chrome-launcher/issues/123
+      '--disable-renderer-backgrounding',
+      '--disable-device-discovery-notifications'
     ].concat(flags, [url])
   }
 }
-
-function getBin (commands) {
-  // Don't run these checks on win32
-  if (process.platform !== 'linux') {
-    return null
-  }
-  var bin, i
-  for (i = 0; i < commands.length; i++) {
-    try {
-      if (which.sync(commands[i])) {
-        bin = commands[i]
-        break
-      }
-    } catch (e) {}
-  }
-  return bin
-}
-
-function getEdgeDarwin (defaultPath) {
-  if (process.platform !== 'darwin') {
-    return null
-  }
-
-  try {
-    var homePath = path.join(process.env.HOME, defaultPath)
-    fs.accessSync(homePath)
-    return homePath
-  } catch (e) {
-    return defaultPath
-  }
-}
-
 EdgeBrowser.prototype = {
   name: 'Edge',
 
   DEFAULT_CMD: {
-    linux: getBin(['edge', 'edge-stable']),
-    darwin: getEdgeDarwin('/Applications/Microsoft Edge Beta.app/Contents/MacOS/Microsoft Edge Beta'),
+    darwin: getEdgeDarwin('/Applications/Microsoft Edge.app/Contents/MacOS/Microsoft Edge'),
     win32: getEdgeExe('Edge')
   },
-  ENV_CMD: 'CHROME_BIN'
+  ENV_CMD: 'EDGE_BIN'
 }
-
 EdgeBrowser.$inject = ['baseBrowserDecorator', 'args']
 
-function headlessGetOptions (url, args, parent) {
-  var mergedArgs = parent.call(this, url, args).concat([
-    '--headless',
-    '--disable-gpu',
-    '--disable-dev-shm-usage'
-  ])
-
-  var isRemoteDebuggingFlag = function (flag) {
-    return flag.indexOf('--remote-debugging-port=') !== -1
-  }
+const EdgeHeadlessBrowser = function (...args) {
+  EdgeBrowser.apply(this, args)
+  const parentOptions = this._getOptions
+  this._getOptions = (url) => getHeadlessOptions.call(this, url, args[1], parentOptions)
+}
+EdgeHeadlessBrowser.prototype = {
+  name: 'EdgeHeadless',
 
-  return mergedArgs.some(isRemoteDebuggingFlag)
-    ? mergedArgs
-    : mergedArgs.concat(['--remote-debugging-port=9222'])
+  DEFAULT_CMD: {
+    darwin: getEdgeDarwin('/Applications/Microsoft Edge.app/Contents/MacOS/Microsoft Edge'),
+    win32: getEdgeExe('Edge')
+  },
+  ENV_CMD: 'EDGE_BIN'
 }
+EdgeHeadlessBrowser.$inject = ['baseBrowserDecorator', 'args']
+// #endregion
 
-var EdgeHeadlessBrowser = function (baseBrowserDecorator, args) {
-  EdgeBrowser.apply(this, arguments)
+// #region Edge Beta
+const EdgeBetaBrowser = function (...args) {
+  EdgeBrowser.apply(this, args)
+}
+EdgeBetaBrowser.prototype = {
+  name: 'EdgeBeta',
 
-  var parentOptions = this._getOptions
-  this._getOptions = function (url) {
-    return headlessGetOptions.call(this, url, args, parentOptions)
-  }
+  DEFAULT_CMD: {
+    darwin: getEdgeDarwin('/Applications/Microsoft Edge Beta.app/Contents/MacOS/Microsoft Edge Beta'),
+    win32: getEdgeExe('Edge Beta')
+  },
+  ENV_CMD: 'EDGE_BETA_BIN'
 }
+EdgeBetaBrowser.$inject = ['baseBrowserDecorator', 'args']
 
-EdgeHeadlessBrowser.prototype = {
-  name: 'EdgeHeadless',
+const EdgeBetaHeadlessBrowser = function (...args) {
+  EdgeHeadlessBrowser.apply(this, args)
+}
+EdgeBetaHeadlessBrowser.prototype = {
+  name: 'EdgeBetaHeadless',
 
   DEFAULT_CMD: {
-    linux: getBin(['edge', 'edge-stable']),
     darwin: getEdgeDarwin('/Applications/Microsoft Edge Beta.app/Contents/MacOS/Microsoft Edge Beta'),
-    win32: getEdgeExe('Edge')
+    win32: getEdgeExe('Edge Beta')
   },
-  ENV_CMD: 'EDGE_BIN'
+  ENV_CMD: 'EDGE_BETA_BIN'
 }
-
 EdgeHeadlessBrowser.$inject = ['baseBrowserDecorator', 'args']
+// #endregion
 
-function canaryGetOptions (url, args, parent) {
-  // disable crankshaft optimizations, as it causes lot of memory leaks (as of Edge 23.0)
-  var flags = args.flags || []
-  var augmentedFlags
-  var customFlags = '--nocrankshaft --noopt'
-
-  flags.forEach(function (flag) {
-    if (isJSFlags(flag)) {
-      augmentedFlags = sanitizeJSFlags(flag) + ' ' + customFlags
-    }
-  })
+// #region Edge Dev
+const EdgeDevBrowser = function (...args) {
+  EdgeBrowser.apply(this, args)
+}
+EdgeDevBrowser.prototype = {
+  name: 'EdgeDev',
 
-  return parent.call(this, url).concat([augmentedFlags || '--js-flags=' + customFlags])
+  DEFAULT_CMD: {
+    darwin: getEdgeDarwin('/Applications/Microsoft Edge Dev.app/Contents/MacOS/Microsoft Edge Dev'),
+    win32: getEdgeExe('Edge Dev')
+  },
+  ENV_CMD: 'EDGE_DEV_BIN'
 }
+EdgeDevBrowser.$inject = ['baseBrowserDecorator', 'args']
 
-var EdgeCanaryBrowser = function (baseBrowserDecorator, args) {
-  EdgeBrowser.apply(this, arguments)
+const EdgeDevHeadlessBrowser = function (...args) {
+  EdgeHeadlessBrowser.apply(this, args)
+}
+EdgeDevHeadlessBrowser.prototype = {
+  name: 'EdgeDevHeadless',
 
-  var parentOptions = this._getOptions
-  this._getOptions = function (url) {
-    return canaryGetOptions.call(this, url, args, parentOptions)
-  }
+  DEFAULT_CMD: {
+    darwin: getEdgeDarwin('/Applications/Microsoft Edge Dev.app/Contents/MacOS/Microsoft Edge Dev'),
+    win32: getEdgeExe('Edge Dev')
+  },
+  ENV_CMD: 'EDGE_DEV_BIN'
 }
+EdgeHeadlessBrowser.$inject = ['baseBrowserDecorator', 'args']
+// #endregion
 
+// #region Edge Canary (SxS)
+const EdgeCanaryBrowser = function (...args) {
+  EdgeBrowser.apply(this, args)
+  const parentOptions = this._getOptions
+  this._getOptions = (url) => getCanaryOptions.call(this, url, args[1], parentOptions)
+}
 EdgeCanaryBrowser.prototype = {
   name: 'EdgeCanary',
 
   DEFAULT_CMD: {
-    linux: getBin(['edge-canary', 'edge-unstable']),
     darwin: getEdgeDarwin('/Applications/Microsoft Edge Canary.app/Contents/MacOS/Microsoft Edge Canary'),
     win32: getEdgeExe('Edge SxS')
   },
-  ENV_CMD: 'CHROME_CANARY_BIN'
+  ENV_CMD: 'EDGE_CANARY_BIN'
 }
-
 EdgeCanaryBrowser.$inject = ['baseBrowserDecorator', 'args']
 
-var EdgeCanaryHeadlessBrowser = function (baseBrowserDecorator, args) {
-  EdgeCanaryBrowser.apply(this, arguments)
-
-  var parentOptions = this._getOptions
-  this._getOptions = function (url) {
-    return headlessGetOptions.call(this, url, args, parentOptions)
-  }
+const EdgeCanaryHeadlessBrowser = function (...args) {
+  EdgeCanaryBrowser.apply(this, args)
+  const parentOptions = this._getOptions
+  this._getOptions = (url) => getHeadlessOptions.call(this, url, args[1], parentOptions)
 }
-
 EdgeCanaryHeadlessBrowser.prototype = {
   name: 'EdgeCanaryHeadless',
 
   DEFAULT_CMD: {
-    linux: getBin(['edge-canary', 'edge-unstable']),
     darwin: getEdgeDarwin('/Applications/Microsoft Edge Canary.app/Contents/MacOS/Microsoft Edge Canary'),
     win32: getEdgeExe('Edge SxS')
   },
-  ENV_CMD: 'CHROME_CANARY_BIN'
+  ENV_CMD: 'EDGE_CANARY_BIN'
 }
-
 EdgeCanaryHeadlessBrowser.$inject = ['baseBrowserDecorator', 'args']
+// #endregion
 
 // PUBLISH DI MODULE
 module.exports = {
   'launcher:Edge': ['type', EdgeBrowser],
   'launcher:EdgeHeadless': ['type', EdgeHeadlessBrowser],
+  'launcher:EdgeBeta': ['type', EdgeBetaBrowser],
+  'launcher:EdgeBetaHeadless': ['type', EdgeBetaHeadlessBrowser],
+  'launcher:EdgeDev': ['type', EdgeDevBrowser],
+  'launcher:EdgeDevHeadless': ['type', EdgeDevHeadlessBrowser],
   'launcher:EdgeCanary': ['type', EdgeCanaryBrowser],
-  'launcher:EdgeCanaryHeadless': ['type', EdgeCanaryHeadlessBrowser],
-  'launcher:Chromium': ['type', ChromiumBrowser]
+  'launcher:EdgeCanaryHeadless': ['type', EdgeCanaryHeadlessBrowser]
 }
 
 module.exports.test = {
-  isJSFlags: isJSFlags,
-  sanitizeJSFlags: sanitizeJSFlags,
-  headlessGetOptions: headlessGetOptions,
-  canaryGetOptions: canaryGetOptions
+  isJSFlags,
+  sanitizeJSFlags,
+  headlessGetOptions: getHeadlessOptions,
+  canaryGetOptions: getCanaryOptions
 }
