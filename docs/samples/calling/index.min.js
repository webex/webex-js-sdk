var Calling = (function (exports) {
  'use strict';

  const global = window;

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
      var info = gen[key](arg);
      var value = info.value;
    } catch (error) {
      reject(error);
      return;
    }
    if (info.done) {
      resolve(value);
    } else {
      Promise.resolve(value).then(_next, _throw);
    }
  }
  function _asyncToGenerator(fn) {
    return function () {
      var self = this,
        args = arguments;
      return new Promise(function (resolve, reject) {
        var gen = fn.apply(self, args);
        function _next(value) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
        }
        function _throw(err) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
        }
        _next(undefined);
      });
    };
  }

  function _typeof(obj) {
    "@babel/helpers - typeof";

    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
      return typeof obj;
    } : function (obj) {
      return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    }, _typeof(obj);
  }

  function _toPrimitive(input, hint) {
    if (_typeof(input) !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
      var res = prim.call(input, hint || "default");
      if (_typeof(res) !== "object") return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }

  function _toPropertyKey(arg) {
    var key = _toPrimitive(arg, "string");
    return _typeof(key) === "symbol" ? key : String(key);
  }

  function _defineProperty(obj, key, value) {
    key = _toPropertyKey(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }

  function _classApplyDescriptorGet(receiver, descriptor) {
    if (descriptor.get) {
      return descriptor.get.call(receiver);
    }
    return descriptor.value;
  }

  function _classExtractFieldDescriptor(receiver, privateMap, action) {
    if (!privateMap.has(receiver)) {
      throw new TypeError("attempted to " + action + " private field on non-instance");
    }
    return privateMap.get(receiver);
  }

  function _classPrivateFieldGet(receiver, privateMap) {
    var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "get");
    return _classApplyDescriptorGet(receiver, descriptor);
  }

  function _classApplyDescriptorSet(receiver, descriptor, value) {
    if (descriptor.set) {
      descriptor.set.call(receiver, value);
    } else {
      if (!descriptor.writable) {
        throw new TypeError("attempted to set read only private field");
      }
      descriptor.value = value;
    }
  }

  function _classPrivateFieldSet(receiver, privateMap, value) {
    var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "set");
    _classApplyDescriptorSet(receiver, descriptor, value);
    return value;
  }

  function _mergeNamespaces$1(n, m) {
    m.forEach(function (e) {
      e && typeof e !== 'string' && !Array.isArray(e) && Object.keys(e).forEach(function (k) {
        if (k !== 'default' && !(k in n)) {
          var d = Object.getOwnPropertyDescriptor(e, k);
          Object.defineProperty(n, k, d.get ? d : {
            enumerable: true,
            get: function () { return e[k]; }
          });
        }
      });
    });
    return Object.freeze(n);
  }

  var global$1 = (typeof global !== "undefined" ? global :
    typeof self !== "undefined" ? self :
    typeof window !== "undefined" ? window : {});

  // shim for using process in browser
  // based off https://github.com/defunctzombie/node-process/blob/master/browser.js

  function defaultSetTimout() {
      throw new Error('setTimeout has not been defined');
  }
  function defaultClearTimeout () {
      throw new Error('clearTimeout has not been defined');
  }
  var cachedSetTimeout = defaultSetTimout;
  var cachedClearTimeout = defaultClearTimeout;
  if (typeof global$1.setTimeout === 'function') {
      cachedSetTimeout = setTimeout;
  }
  if (typeof global$1.clearTimeout === 'function') {
      cachedClearTimeout = clearTimeout;
  }

  function runTimeout(fun) {
      if (cachedSetTimeout === setTimeout) {
          //normal enviroments in sane situations
          return setTimeout(fun, 0);
      }
      // if setTimeout wasn't available but was latter defined
      if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
          cachedSetTimeout = setTimeout;
          return setTimeout(fun, 0);
      }
      try {
          // when when somebody has screwed with setTimeout but no I.E. maddness
          return cachedSetTimeout(fun, 0);
      } catch(e){
          try {
              // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
              return cachedSetTimeout.call(null, fun, 0);
          } catch(e){
              // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
              return cachedSetTimeout.call(this, fun, 0);
          }
      }


  }
  function runClearTimeout(marker) {
      if (cachedClearTimeout === clearTimeout) {
          //normal enviroments in sane situations
          return clearTimeout(marker);
      }
      // if clearTimeout wasn't available but was latter defined
      if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
          cachedClearTimeout = clearTimeout;
          return clearTimeout(marker);
      }
      try {
          // when when somebody has screwed with setTimeout but no I.E. maddness
          return cachedClearTimeout(marker);
      } catch (e){
          try {
              // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
              return cachedClearTimeout.call(null, marker);
          } catch (e){
              // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
              // Some versions of I.E. have different rules for clearTimeout vs setTimeout
              return cachedClearTimeout.call(this, marker);
          }
      }



  }
  var queue = [];
  var draining = false;
  var currentQueue;
  var queueIndex = -1;

  function cleanUpNextTick() {
      if (!draining || !currentQueue) {
          return;
      }
      draining = false;
      if (currentQueue.length) {
          queue = currentQueue.concat(queue);
      } else {
          queueIndex = -1;
      }
      if (queue.length) {
          drainQueue();
      }
  }

  function drainQueue() {
      if (draining) {
          return;
      }
      var timeout = runTimeout(cleanUpNextTick);
      draining = true;

      var len = queue.length;
      while(len) {
          currentQueue = queue;
          queue = [];
          while (++queueIndex < len) {
              if (currentQueue) {
                  currentQueue[queueIndex].run();
              }
          }
          queueIndex = -1;
          len = queue.length;
      }
      currentQueue = null;
      draining = false;
      runClearTimeout(timeout);
  }
  function nextTick(fun) {
      var args = new Array(arguments.length - 1);
      if (arguments.length > 1) {
          for (var i = 1; i < arguments.length; i++) {
              args[i - 1] = arguments[i];
          }
      }
      queue.push(new Item(fun, args));
      if (queue.length === 1 && !draining) {
          runTimeout(drainQueue);
      }
  }
  // v8 likes predictible objects
  function Item(fun, array) {
      this.fun = fun;
      this.array = array;
  }
  Item.prototype.run = function () {
      this.fun.apply(null, this.array);
  };
  var title = 'browser';
  var platform$1 = 'browser';
  var browser = true;
  var env = {};
  var argv = [];
  var version$1 = ''; // empty string to avoid regexp issues
  var versions = {};
  var release = {};
  var config = {};

  function noop() {}

  var on$1 = noop;
  var addListener = noop;
  var once$2 = noop;
  var off$1 = noop;
  var removeListener = noop;
  var removeAllListeners = noop;
  var emit = noop;

  function binding(name) {
      throw new Error('process.binding is not supported');
  }

  function cwd () { return '/' }
  function chdir (dir) {
      throw new Error('process.chdir is not supported');
  }function umask() { return 0; }

  // from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js
  var performance$1 = global$1.performance || {};
  var performanceNow =
    performance$1.now        ||
    performance$1.mozNow     ||
    performance$1.msNow      ||
    performance$1.oNow       ||
    performance$1.webkitNow  ||
    function(){ return (new Date()).getTime() };

  // generate timestamp or delta
  // see http://nodejs.org/api/process.html#process_process_hrtime
  function hrtime(previousTimestamp){
    var clocktime = performanceNow.call(performance$1)*1e-3;
    var seconds = Math.floor(clocktime);
    var nanoseconds = Math.floor((clocktime%1)*1e9);
    if (previousTimestamp) {
      seconds = seconds - previousTimestamp[0];
      nanoseconds = nanoseconds - previousTimestamp[1];
      if (nanoseconds<0) {
        seconds--;
        nanoseconds += 1e9;
      }
    }
    return [seconds,nanoseconds]
  }

  var startTime = new Date();
  function uptime() {
    var currentTime = new Date();
    var dif = currentTime - startTime;
    return dif / 1000;
  }

  var browser$1 = {
    nextTick: nextTick,
    title: title,
    browser: browser,
    env: env,
    argv: argv,
    version: version$1,
    versions: versions,
    on: on$1,
    addListener: addListener,
    once: once$2,
    off: off$1,
    removeListener: removeListener,
    removeAllListeners: removeAllListeners,
    emit: emit,
    binding: binding,
    cwd: cwd,
    chdir: chdir,
    umask: umask,
    hrtime: hrtime,
    platform: platform$1,
    release: release,
    config: config,
    uptime: uptime
  };

  var commonjsGlobal$4 = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  var DetectRTC = {exports: {}};

  (function (module) {

    // Last Updated On: 2020-08-12 11:18:41 AM UTC

    // ________________
    // DetectRTC v1.4.1

    // Open-Sourced: https://github.com/muaz-khan/DetectRTC

    // --------------------------------------------------
    // Muaz Khan     - www.MuazKhan.com
    // MIT License   - www.WebRTC-Experiment.com/licence
    // --------------------------------------------------
    (function () {
      var browserFakeUserAgent = 'Fake/5.0 (FakeOS) AppleWebKit/123 (KHTML, like Gecko) Fake/12.3.4567.89 Fake/123.45';
      var isNodejs = typeof browser$1 === 'object' && typeof browser$1.versions === 'object' && browser$1.versions.node && /*node-process*/!browser$1.browser;
      if (isNodejs) {
        var version = browser$1.versions.node.toString().replace('v', '');
        browserFakeUserAgent = 'Nodejs/' + version + ' (NodeOS) AppleWebKit/' + version + ' (KHTML, like Gecko) Nodejs/' + version + ' Nodejs/' + version;
      }
      (function (that) {
        if (typeof window !== 'undefined') {
          return;
        }
        if (typeof window === 'undefined' && typeof commonjsGlobal$4 !== 'undefined') {
          commonjsGlobal$4.navigator = {
            userAgent: browserFakeUserAgent,
            getUserMedia: function getUserMedia() {}
          };

          /*global window:true */
          that.window = commonjsGlobal$4;
        }
        if (typeof location === 'undefined') {
          /*global location:true */
          that.location = {
            protocol: 'file:',
            href: '',
            hash: ''
          };
        }
        if (typeof screen === 'undefined') {
          /*global screen:true */
          that.screen = {
            width: 0,
            height: 0
          };
        }
      })(typeof commonjsGlobal$4 !== 'undefined' ? commonjsGlobal$4 : window);

      /*global navigator:true */
      var navigator = window.navigator;
      if (typeof navigator !== 'undefined') {
        if (typeof navigator.webkitGetUserMedia !== 'undefined') {
          navigator.getUserMedia = navigator.webkitGetUserMedia;
        }
        if (typeof navigator.mozGetUserMedia !== 'undefined') {
          navigator.getUserMedia = navigator.mozGetUserMedia;
        }
      } else {
        navigator = {
          getUserMedia: function getUserMedia() {},
          userAgent: browserFakeUserAgent
        };
      }
      var isMobileDevice = !!/Android|webOS|iPhone|iPad|iPod|BB10|BlackBerry|IEMobile|Opera Mini|Mobile|mobile/i.test(navigator.userAgent || '');
      var isEdge = navigator.userAgent.indexOf('Edge') !== -1 && (!!navigator.msSaveOrOpenBlob || !!navigator.msSaveBlob);
      var isOpera = !!window.opera || navigator.userAgent.indexOf(' OPR/') >= 0;
      var isFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') > -1 && 'netscape' in window && / rv:/.test(navigator.userAgent);
      var isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
      var isChrome = !!window.chrome && !isOpera;
      var isIE = typeof document !== 'undefined' && !!document.documentMode && !isEdge;

      // this one can also be used:
      // https://www.websocket.org/js/stuff.js (DetectBrowser.js)

      function getBrowserInfo() {
        navigator.appVersion;
        var nAgt = navigator.userAgent;
        var browserName = navigator.appName;
        var fullVersion = '' + parseFloat(navigator.appVersion);
        var majorVersion = parseInt(navigator.appVersion, 10);
        var nameOffset, verOffset, ix;

        // In Opera, the true version is after 'Opera' or after 'Version'
        if (isOpera) {
          browserName = 'Opera';
          try {
            fullVersion = navigator.userAgent.split('OPR/')[1].split(' ')[0];
            majorVersion = fullVersion.split('.')[0];
          } catch (e) {
            fullVersion = '0.0.0.0';
            majorVersion = 0;
          }
        }
        // In MSIE version <=10, the true version is after 'MSIE' in userAgent
        // In IE 11, look for the string after 'rv:'
        else if (isIE) {
          verOffset = nAgt.indexOf('rv:');
          if (verOffset > 0) {
            //IE 11
            fullVersion = nAgt.substring(verOffset + 3);
          } else {
            //IE 10 or earlier
            verOffset = nAgt.indexOf('MSIE');
            fullVersion = nAgt.substring(verOffset + 5);
          }
          browserName = 'IE';
        }
        // In Chrome, the true version is after 'Chrome' 
        else if (isChrome) {
          verOffset = nAgt.indexOf('Chrome');
          browserName = 'Chrome';
          fullVersion = nAgt.substring(verOffset + 7);
        }
        // In Safari, the true version is after 'Safari' or after 'Version' 
        else if (isSafari) {
          // both and safri and chrome has same userAgent
          if (nAgt.indexOf('CriOS') !== -1) {
            verOffset = nAgt.indexOf('CriOS');
            browserName = 'Chrome';
            fullVersion = nAgt.substring(verOffset + 6);
          } else if (nAgt.indexOf('FxiOS') !== -1) {
            verOffset = nAgt.indexOf('FxiOS');
            browserName = 'Firefox';
            fullVersion = nAgt.substring(verOffset + 6);
          } else {
            verOffset = nAgt.indexOf('Safari');
            browserName = 'Safari';
            fullVersion = nAgt.substring(verOffset + 7);
            if ((verOffset = nAgt.indexOf('Version')) !== -1) {
              fullVersion = nAgt.substring(verOffset + 8);
            }
            if (navigator.userAgent.indexOf('Version/') !== -1) {
              fullVersion = navigator.userAgent.split('Version/')[1].split(' ')[0];
            }
          }
        }
        // In Firefox, the true version is after 'Firefox' 
        else if (isFirefox) {
          verOffset = nAgt.indexOf('Firefox');
          browserName = 'Firefox';
          fullVersion = nAgt.substring(verOffset + 8);
        }

        // In most other browsers, 'name/version' is at the end of userAgent 
        else if ((nameOffset = nAgt.lastIndexOf(' ') + 1) < (verOffset = nAgt.lastIndexOf('/'))) {
          browserName = nAgt.substring(nameOffset, verOffset);
          fullVersion = nAgt.substring(verOffset + 1);
          if (browserName.toLowerCase() === browserName.toUpperCase()) {
            browserName = navigator.appName;
          }
        }
        if (isEdge) {
          browserName = 'Edge';
          fullVersion = navigator.userAgent.split('Edge/')[1];
          // fullVersion = parseInt(navigator.userAgent.match(/Edge\/(\d+).(\d+)$/)[2], 10).toString();
        }

        // trim the fullVersion string at semicolon/space/bracket if present
        if ((ix = fullVersion.search(/[; \)]/)) !== -1) {
          fullVersion = fullVersion.substring(0, ix);
        }
        majorVersion = parseInt('' + fullVersion, 10);
        if (isNaN(majorVersion)) {
          fullVersion = '' + parseFloat(navigator.appVersion);
          majorVersion = parseInt(navigator.appVersion, 10);
        }
        return {
          fullVersion: fullVersion,
          version: majorVersion,
          name: browserName,
          isPrivateBrowsing: false
        };
      }

      // via: https://gist.github.com/cou929/7973956

      function retry(isDone, next) {
        var currentTrial = 0,
          maxRetry = 50,
          isTimeout = false;
        var id = window.setInterval(function () {
          if (isDone()) {
            window.clearInterval(id);
            next(isTimeout);
          }
          if (currentTrial++ > maxRetry) {
            window.clearInterval(id);
            isTimeout = true;
            next(isTimeout);
          }
        }, 10);
      }
      function isIE10OrLater(userAgent) {
        var ua = userAgent.toLowerCase();
        if (ua.indexOf('msie') === 0 && ua.indexOf('trident') === 0) {
          return false;
        }
        var match = /(?:msie|rv:)\s?([\d\.]+)/.exec(ua);
        if (match && parseInt(match[1], 10) >= 10) {
          return true;
        }
        return false;
      }
      function detectPrivateMode(callback) {
        var isPrivate;
        try {
          if (window.webkitRequestFileSystem) {
            window.webkitRequestFileSystem(window.TEMPORARY, 1, function () {
              isPrivate = false;
            }, function (e) {
              isPrivate = true;
            });
          } else if (window.indexedDB && /Firefox/.test(window.navigator.userAgent)) {
            var db;
            try {
              db = window.indexedDB.open('test');
              db.onerror = function () {
                return true;
              };
            } catch (e) {
              isPrivate = true;
            }
            if (typeof isPrivate === 'undefined') {
              retry(function isDone() {
                return db.readyState === 'done' ? true : false;
              }, function next(isTimeout) {
                if (!isTimeout) {
                  isPrivate = db.result ? false : true;
                }
              });
            }
          } else if (isIE10OrLater(window.navigator.userAgent)) {
            isPrivate = false;
            try {
              if (!window.indexedDB) {
                isPrivate = true;
              }
            } catch (e) {
              isPrivate = true;
            }
          } else if (window.localStorage && /Safari/.test(window.navigator.userAgent)) {
            try {
              window.localStorage.setItem('test', 1);
            } catch (e) {
              isPrivate = true;
            }
            if (typeof isPrivate === 'undefined') {
              isPrivate = false;
              window.localStorage.removeItem('test');
            }
          }
        } catch (e) {
          isPrivate = false;
        }
        retry(function isDone() {
          return typeof isPrivate !== 'undefined' ? true : false;
        }, function next(isTimeout) {
          callback(isPrivate);
        });
      }
      var isMobile = {
        Android: function Android() {
          return navigator.userAgent.match(/Android/i);
        },
        BlackBerry: function BlackBerry() {
          return navigator.userAgent.match(/BlackBerry|BB10/i);
        },
        iOS: function iOS() {
          return navigator.userAgent.match(/iPhone|iPad|iPod/i);
        },
        Opera: function Opera() {
          return navigator.userAgent.match(/Opera Mini/i);
        },
        Windows: function Windows() {
          return navigator.userAgent.match(/IEMobile/i);
        },
        any: function any() {
          return isMobile.Android() || isMobile.BlackBerry() || isMobile.iOS() || isMobile.Opera() || isMobile.Windows();
        },
        getOsName: function getOsName() {
          var osName = 'Unknown OS';
          if (isMobile.Android()) {
            osName = 'Android';
          }
          if (isMobile.BlackBerry()) {
            osName = 'BlackBerry';
          }
          if (isMobile.iOS()) {
            osName = 'iOS';
          }
          if (isMobile.Opera()) {
            osName = 'Opera Mini';
          }
          if (isMobile.Windows()) {
            osName = 'Windows';
          }
          return osName;
        }
      };

      // via: http://jsfiddle.net/ChristianL/AVyND/
      function detectDesktopOS() {
        var unknown = '-';
        var nVer = navigator.appVersion;
        var nAgt = navigator.userAgent;
        var os = unknown;
        var clientStrings = [{
          s: 'Chrome OS',
          r: /CrOS/
        }, {
          s: 'Windows 10',
          r: /(Windows 10.0|Windows NT 10.0)/
        }, {
          s: 'Windows 8.1',
          r: /(Windows 8.1|Windows NT 6.3)/
        }, {
          s: 'Windows 8',
          r: /(Windows 8|Windows NT 6.2)/
        }, {
          s: 'Windows 7',
          r: /(Windows 7|Windows NT 6.1)/
        }, {
          s: 'Windows Vista',
          r: /Windows NT 6.0/
        }, {
          s: 'Windows Server 2003',
          r: /Windows NT 5.2/
        }, {
          s: 'Windows XP',
          r: /(Windows NT 5.1|Windows XP)/
        }, {
          s: 'Windows 2000',
          r: /(Windows NT 5.0|Windows 2000)/
        }, {
          s: 'Windows ME',
          r: /(Win 9x 4.90|Windows ME)/
        }, {
          s: 'Windows 98',
          r: /(Windows 98|Win98)/
        }, {
          s: 'Windows 95',
          r: /(Windows 95|Win95|Windows_95)/
        }, {
          s: 'Windows NT 4.0',
          r: /(Windows NT 4.0|WinNT4.0|WinNT|Windows NT)/
        }, {
          s: 'Windows CE',
          r: /Windows CE/
        }, {
          s: 'Windows 3.11',
          r: /Win16/
        }, {
          s: 'Android',
          r: /Android/
        }, {
          s: 'Open BSD',
          r: /OpenBSD/
        }, {
          s: 'Sun OS',
          r: /SunOS/
        }, {
          s: 'Linux',
          r: /(Linux|X11)/
        }, {
          s: 'iOS',
          r: /(iPhone|iPad|iPod)/
        }, {
          s: 'Mac OS X',
          r: /Mac OS X/
        }, {
          s: 'Mac OS',
          r: /(MacPPC|MacIntel|Mac_PowerPC|Macintosh)/
        }, {
          s: 'QNX',
          r: /QNX/
        }, {
          s: 'UNIX',
          r: /UNIX/
        }, {
          s: 'BeOS',
          r: /BeOS/
        }, {
          s: 'OS/2',
          r: /OS\/2/
        }, {
          s: 'Search Bot',
          r: /(nuhk|Googlebot|Yammybot|Openbot|Slurp|MSNBot|Ask Jeeves\/Teoma|ia_archiver)/
        }];
        for (var i = 0, cs; cs = clientStrings[i]; i++) {
          if (cs.r.test(nAgt)) {
            os = cs.s;
            break;
          }
        }
        var osVersion = unknown;
        if (/Windows/.test(os)) {
          if (/Windows (.*)/.test(os)) {
            osVersion = /Windows (.*)/.exec(os)[1];
          }
          os = 'Windows';
        }
        switch (os) {
          case 'Mac OS X':
            if (/Mac OS X (10[\.\_\d]+)/.test(nAgt)) {
              osVersion = /Mac OS X (10[\.\_\d]+)/.exec(nAgt)[1];
            }
            break;
          case 'Android':
            if (/Android ([\.\_\d]+)/.test(nAgt)) {
              osVersion = /Android ([\.\_\d]+)/.exec(nAgt)[1];
            }
            break;
          case 'iOS':
            if (/OS (\d+)_(\d+)_?(\d+)?/.test(nAgt)) {
              osVersion = /OS (\d+)_(\d+)_?(\d+)?/.exec(nVer);
              if (osVersion && osVersion.length > 3) {
                osVersion = osVersion[1] + '.' + osVersion[2] + '.' + (osVersion[3] | 0);
              }
            }
            break;
        }
        return {
          osName: os,
          osVersion: osVersion
        };
      }
      var osName = 'Unknown OS';
      var osVersion = 'Unknown OS Version';
      function getAndroidVersion(ua) {
        ua = (ua || navigator.userAgent).toLowerCase();
        var match = ua.match(/android\s([0-9\.]*)/);
        return match ? match[1] : false;
      }
      var osInfo = detectDesktopOS();
      if (osInfo && osInfo.osName && osInfo.osName != '-') {
        osName = osInfo.osName;
        osVersion = osInfo.osVersion;
      } else if (isMobile.any()) {
        osName = isMobile.getOsName();
        if (osName == 'Android') {
          osVersion = getAndroidVersion();
        }
      }
      var isNodejs = typeof browser$1 === 'object' && typeof browser$1.versions === 'object' && browser$1.versions.node;
      if (osName === 'Unknown OS' && isNodejs) {
        osName = 'Nodejs';
        osVersion = browser$1.versions.node.toString().replace('v', '');
      }
      var isCanvasSupportsStreamCapturing = false;
      var isVideoSupportsStreamCapturing = false;
      ['captureStream', 'mozCaptureStream', 'webkitCaptureStream'].forEach(function (item) {
        if (typeof document === 'undefined' || typeof document.createElement !== 'function') {
          return;
        }
        if (!isCanvasSupportsStreamCapturing && item in document.createElement('canvas')) {
          isCanvasSupportsStreamCapturing = true;
        }
        if (!isVideoSupportsStreamCapturing && item in document.createElement('video')) {
          isVideoSupportsStreamCapturing = true;
        }
      });
      var regexIpv4Local = /^(192\.168\.|169\.254\.|10\.|172\.(1[6-9]|2\d|3[01]))/,
        regexIpv4 = /([0-9]{1,3}(\.[0-9]{1,3}){3})/,
        regexIpv6 = /[a-f0-9]{1,4}(:[a-f0-9]{1,4}){7}/;

      // via: https://github.com/diafygi/webrtc-ips
      function DetectLocalIPAddress(callback, stream) {
        if (!DetectRTC.isWebRTCSupported) {
          return;
        }
        var isPublic = true,
          isIpv4 = true;
        getIPs(function (ip) {
          if (!ip) {
            callback(); // Pass nothing to tell that ICE-gathering-ended
          } else if (ip.match(regexIpv4Local)) {
            isPublic = false;
            callback('Local: ' + ip, isPublic, isIpv4);
          } else if (ip.match(regexIpv6)) {
            //via https://ourcodeworld.com/articles/read/257/how-to-get-the-client-ip-address-with-javascript-only
            isIpv4 = false;
            callback('Public: ' + ip, isPublic, isIpv4);
          } else {
            callback('Public: ' + ip, isPublic, isIpv4);
          }
        }, stream);
      }
      function getIPs(callback, stream) {
        if (typeof document === 'undefined' || typeof document.getElementById !== 'function') {
          return;
        }
        var ipDuplicates = {};
        var RTCPeerConnection = window.RTCPeerConnection || window.mozRTCPeerConnection || window.webkitRTCPeerConnection;
        if (!RTCPeerConnection) {
          var iframe = document.getElementById('iframe');
          if (!iframe) {
            return;
          }
          var win = iframe.contentWindow;
          RTCPeerConnection = win.RTCPeerConnection || win.mozRTCPeerConnection || win.webkitRTCPeerConnection;
        }
        if (!RTCPeerConnection) {
          return;
        }
        var peerConfig = null;
        if (DetectRTC.browser === 'Chrome' && DetectRTC.browser.version < 58) {
          // todo: add support for older Opera
          peerConfig = {
            optional: [{
              RtpDataChannels: true
            }]
          };
        }
        var servers = {
          iceServers: [{
            urls: 'stun:stun.l.google.com:19302'
          }]
        };
        var pc = new RTCPeerConnection(servers, peerConfig);
        if (stream) {
          if (pc.addStream) {
            pc.addStream(stream);
          } else if (pc.addTrack && stream.getTracks()[0]) {
            pc.addTrack(stream.getTracks()[0], stream);
          }
        }
        function handleCandidate(candidate) {
          if (!candidate) {
            callback(); // Pass nothing to tell that ICE-gathering-ended
            return;
          }
          var match = regexIpv4.exec(candidate);
          if (!match) {
            return;
          }
          var ipAddress = match[1];
          var isPublic = candidate.match(regexIpv4Local),
            isIpv4 = true;
          if (ipDuplicates[ipAddress] === undefined) {
            callback(ipAddress, isPublic, isIpv4);
          }
          ipDuplicates[ipAddress] = true;
        }

        // listen for candidate events
        pc.onicecandidate = function (event) {
          if (event.candidate && event.candidate.candidate) {
            handleCandidate(event.candidate.candidate);
          } else {
            handleCandidate(); // Pass nothing to tell that ICE-gathering-ended
          }
        };

        // create data channel
        if (!stream) {
          try {
            pc.createDataChannel('sctp', {});
          } catch (e) {}
        }

        // create an offer sdp
        if (DetectRTC.isPromisesSupported) {
          pc.createOffer().then(function (result) {
            pc.setLocalDescription(result).then(afterCreateOffer);
          });
        } else {
          pc.createOffer(function (result) {
            pc.setLocalDescription(result, afterCreateOffer, function () {});
          }, function () {});
        }
        function afterCreateOffer() {
          var lines = pc.localDescription.sdp.split('\n');
          lines.forEach(function (line) {
            if (line && line.indexOf('a=candidate:') === 0) {
              handleCandidate(line);
            }
          });
        }
      }
      var MediaDevices = [];
      var audioInputDevices = [];
      var audioOutputDevices = [];
      var videoInputDevices = [];
      if (navigator.mediaDevices && navigator.mediaDevices.enumerateDevices) {
        // Firefox 38+ seems having support of enumerateDevices
        // Thanks @xdumaine/enumerateDevices
        navigator.enumerateDevices = function (callback) {
          var enumerateDevices = navigator.mediaDevices.enumerateDevices();
          if (enumerateDevices && enumerateDevices.then) {
            navigator.mediaDevices.enumerateDevices().then(callback).catch(function () {
              callback([]);
            });
          } else {
            callback([]);
          }
        };
      }

      // Media Devices detection
      var canEnumerate = false;

      /*global MediaStreamTrack:true */
      if (typeof MediaStreamTrack !== 'undefined' && 'getSources' in MediaStreamTrack) {
        canEnumerate = true;
      } else if (navigator.mediaDevices && !!navigator.mediaDevices.enumerateDevices) {
        canEnumerate = true;
      }
      var hasMicrophone = false;
      var hasSpeakers = false;
      var hasWebcam = false;
      var isWebsiteHasMicrophonePermissions = false;
      var isWebsiteHasWebcamPermissions = false;

      // http://dev.w3.org/2011/webrtc/editor/getusermedia.html#mediadevices
      function checkDeviceSupport(callback) {
        if (!canEnumerate) {
          if (callback) {
            callback();
          }
          return;
        }
        if (!navigator.enumerateDevices && window.MediaStreamTrack && window.MediaStreamTrack.getSources) {
          navigator.enumerateDevices = window.MediaStreamTrack.getSources.bind(window.MediaStreamTrack);
        }
        if (!navigator.enumerateDevices && navigator.enumerateDevices) {
          navigator.enumerateDevices = navigator.enumerateDevices.bind(navigator);
        }
        if (!navigator.enumerateDevices) {
          if (callback) {
            callback();
          }
          return;
        }
        MediaDevices = [];
        audioInputDevices = [];
        audioOutputDevices = [];
        videoInputDevices = [];
        hasMicrophone = false;
        hasSpeakers = false;
        hasWebcam = false;
        isWebsiteHasMicrophonePermissions = false;
        isWebsiteHasWebcamPermissions = false;

        // to prevent duplication
        var alreadyUsedDevices = {};
        navigator.enumerateDevices(function (devices) {
          MediaDevices = [];
          audioInputDevices = [];
          audioOutputDevices = [];
          videoInputDevices = [];
          devices.forEach(function (_device) {
            var device = {};
            for (var d in _device) {
              try {
                if (typeof _device[d] !== 'function') {
                  device[d] = _device[d];
                }
              } catch (e) {}
            }
            if (alreadyUsedDevices[device.deviceId + device.label + device.kind]) {
              return;
            }

            // if it is MediaStreamTrack.getSources
            if (device.kind === 'audio') {
              device.kind = 'audioinput';
            }
            if (device.kind === 'video') {
              device.kind = 'videoinput';
            }
            if (!device.deviceId) {
              device.deviceId = device.id;
            }
            if (!device.id) {
              device.id = device.deviceId;
            }
            if (!device.label) {
              device.isCustomLabel = true;
              if (device.kind === 'videoinput') {
                device.label = 'Camera ' + (videoInputDevices.length + 1);
              } else if (device.kind === 'audioinput') {
                device.label = 'Microphone ' + (audioInputDevices.length + 1);
              } else if (device.kind === 'audiooutput') {
                device.label = 'Speaker ' + (audioOutputDevices.length + 1);
              } else {
                device.label = 'Please invoke getUserMedia once.';
              }
              if (typeof DetectRTC !== 'undefined' && DetectRTC.browser.isChrome && DetectRTC.browser.version >= 46 && !/^(https:|chrome-extension:)$/g.test(location.protocol || '')) {
                if (typeof document !== 'undefined' && typeof document.domain === 'string' && document.domain.search && document.domain.search(/localhost|127.0./g) === -1) {
                  device.label = 'HTTPs is required to get label of this ' + device.kind + ' device.';
                }
              }
            } else {
              // Firefox on Android still returns empty label
              if (device.kind === 'videoinput' && !isWebsiteHasWebcamPermissions) {
                isWebsiteHasWebcamPermissions = true;
              }
              if (device.kind === 'audioinput' && !isWebsiteHasMicrophonePermissions) {
                isWebsiteHasMicrophonePermissions = true;
              }
            }
            if (device.kind === 'audioinput') {
              hasMicrophone = true;
              if (audioInputDevices.indexOf(device) === -1) {
                audioInputDevices.push(device);
              }
            }
            if (device.kind === 'audiooutput') {
              hasSpeakers = true;
              if (audioOutputDevices.indexOf(device) === -1) {
                audioOutputDevices.push(device);
              }
            }
            if (device.kind === 'videoinput') {
              hasWebcam = true;
              if (videoInputDevices.indexOf(device) === -1) {
                videoInputDevices.push(device);
              }
            }

            // there is no 'videoouput' in the spec.
            MediaDevices.push(device);
            alreadyUsedDevices[device.deviceId + device.label + device.kind] = device;
          });
          if (typeof DetectRTC !== 'undefined') {
            // to sync latest outputs
            DetectRTC.MediaDevices = MediaDevices;
            DetectRTC.hasMicrophone = hasMicrophone;
            DetectRTC.hasSpeakers = hasSpeakers;
            DetectRTC.hasWebcam = hasWebcam;
            DetectRTC.isWebsiteHasWebcamPermissions = isWebsiteHasWebcamPermissions;
            DetectRTC.isWebsiteHasMicrophonePermissions = isWebsiteHasMicrophonePermissions;
            DetectRTC.audioInputDevices = audioInputDevices;
            DetectRTC.audioOutputDevices = audioOutputDevices;
            DetectRTC.videoInputDevices = videoInputDevices;
          }
          if (callback) {
            callback();
          }
        });
      }
      var DetectRTC = window.DetectRTC || {};

      // ----------
      // DetectRTC.browser.name || DetectRTC.browser.version || DetectRTC.browser.fullVersion
      DetectRTC.browser = getBrowserInfo();
      detectPrivateMode(function (isPrivateBrowsing) {
        DetectRTC.browser.isPrivateBrowsing = !!isPrivateBrowsing;
      });

      // DetectRTC.isChrome || DetectRTC.isFirefox || DetectRTC.isEdge
      DetectRTC.browser['is' + DetectRTC.browser.name] = true;

      // -----------
      DetectRTC.osName = osName;
      DetectRTC.osVersion = osVersion;

      // --------- Detect if system supports WebRTC 1.0 or WebRTC 1.1.
      var isWebRTCSupported = false;
      ['RTCPeerConnection', 'webkitRTCPeerConnection', 'mozRTCPeerConnection', 'RTCIceGatherer'].forEach(function (item) {
        if (isWebRTCSupported) {
          return;
        }
        if (item in window) {
          isWebRTCSupported = true;
        }
      });
      DetectRTC.isWebRTCSupported = isWebRTCSupported;

      //-------
      DetectRTC.isORTCSupported = typeof RTCIceGatherer !== 'undefined';

      // --------- Detect if system supports screen capturing API
      var isScreenCapturingSupported = false;
      if (DetectRTC.browser.isChrome && DetectRTC.browser.version >= 35) {
        isScreenCapturingSupported = true;
      } else if (DetectRTC.browser.isFirefox && DetectRTC.browser.version >= 34) {
        isScreenCapturingSupported = true;
      } else if (DetectRTC.browser.isEdge && DetectRTC.browser.version >= 17) {
        isScreenCapturingSupported = true;
      } else if (DetectRTC.osName === 'Android' && DetectRTC.browser.isChrome) {
        isScreenCapturingSupported = true;
      }
      if (!!navigator.getDisplayMedia || navigator.mediaDevices && navigator.mediaDevices.getDisplayMedia) {
        isScreenCapturingSupported = true;
      }
      if (!/^(https:|chrome-extension:)$/g.test(location.protocol || '')) {
        var isNonLocalHost = typeof document !== 'undefined' && typeof document.domain === 'string' && document.domain.search && document.domain.search(/localhost|127.0./g) === -1;
        if (isNonLocalHost && (DetectRTC.browser.isChrome || DetectRTC.browser.isEdge || DetectRTC.browser.isOpera)) {
          isScreenCapturingSupported = false;
        } else if (DetectRTC.browser.isFirefox) {
          isScreenCapturingSupported = false;
        }
      }
      DetectRTC.isScreenCapturingSupported = isScreenCapturingSupported;

      // --------- Detect if WebAudio API are supported
      var webAudio = {
        isSupported: false,
        isCreateMediaStreamSourceSupported: false
      };
      ['AudioContext', 'webkitAudioContext', 'mozAudioContext', 'msAudioContext'].forEach(function (item) {
        if (webAudio.isSupported) {
          return;
        }
        if (item in window) {
          webAudio.isSupported = true;
          if (window[item] && 'createMediaStreamSource' in window[item].prototype) {
            webAudio.isCreateMediaStreamSourceSupported = true;
          }
        }
      });
      DetectRTC.isAudioContextSupported = webAudio.isSupported;
      DetectRTC.isCreateMediaStreamSourceSupported = webAudio.isCreateMediaStreamSourceSupported;

      // ---------- Detect if SCTP/RTP channels are supported.

      var isRtpDataChannelsSupported = false;
      if (DetectRTC.browser.isChrome && DetectRTC.browser.version > 31) {
        isRtpDataChannelsSupported = true;
      }
      DetectRTC.isRtpDataChannelsSupported = isRtpDataChannelsSupported;
      var isSCTPSupportd = false;
      if (DetectRTC.browser.isFirefox && DetectRTC.browser.version > 28) {
        isSCTPSupportd = true;
      } else if (DetectRTC.browser.isChrome && DetectRTC.browser.version > 25) {
        isSCTPSupportd = true;
      } else if (DetectRTC.browser.isOpera && DetectRTC.browser.version >= 11) {
        isSCTPSupportd = true;
      }
      DetectRTC.isSctpDataChannelsSupported = isSCTPSupportd;

      // ---------

      DetectRTC.isMobileDevice = isMobileDevice; // "isMobileDevice" boolean is defined in "getBrowserInfo.js"

      // ------
      var isGetUserMediaSupported = false;
      if (navigator.getUserMedia) {
        isGetUserMediaSupported = true;
      } else if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
        isGetUserMediaSupported = true;
      }
      if (DetectRTC.browser.isChrome && DetectRTC.browser.version >= 46 && !/^(https:|chrome-extension:)$/g.test(location.protocol || '')) {
        if (typeof document !== 'undefined' && typeof document.domain === 'string' && document.domain.search && document.domain.search(/localhost|127.0./g) === -1) {
          isGetUserMediaSupported = 'Requires HTTPs';
        }
      }
      if (DetectRTC.osName === 'Nodejs') {
        isGetUserMediaSupported = false;
      }
      DetectRTC.isGetUserMediaSupported = isGetUserMediaSupported;
      var displayResolution = '';
      if (screen.width) {
        var width = screen.width ? screen.width : '';
        var height = screen.height ? screen.height : '';
        displayResolution += '' + width + ' x ' + height;
      }
      DetectRTC.displayResolution = displayResolution;
      function getAspectRatio(w, h) {
        function gcd(a, b) {
          return b == 0 ? a : gcd(b, a % b);
        }
        var r = gcd(w, h);
        return w / r / (h / r);
      }
      DetectRTC.displayAspectRatio = getAspectRatio(screen.width, screen.height).toFixed(2);

      // ----------
      DetectRTC.isCanvasSupportsStreamCapturing = isCanvasSupportsStreamCapturing;
      DetectRTC.isVideoSupportsStreamCapturing = isVideoSupportsStreamCapturing;
      if (DetectRTC.browser.name == 'Chrome' && DetectRTC.browser.version >= 53) {
        if (!DetectRTC.isCanvasSupportsStreamCapturing) {
          DetectRTC.isCanvasSupportsStreamCapturing = 'Requires chrome flag: enable-experimental-web-platform-features';
        }
        if (!DetectRTC.isVideoSupportsStreamCapturing) {
          DetectRTC.isVideoSupportsStreamCapturing = 'Requires chrome flag: enable-experimental-web-platform-features';
        }
      }

      // ------
      DetectRTC.DetectLocalIPAddress = DetectLocalIPAddress;
      DetectRTC.isWebSocketsSupported = 'WebSocket' in window && 2 === window.WebSocket.CLOSING;
      DetectRTC.isWebSocketsBlocked = !DetectRTC.isWebSocketsSupported;
      if (DetectRTC.osName === 'Nodejs') {
        DetectRTC.isWebSocketsSupported = true;
        DetectRTC.isWebSocketsBlocked = false;
      }
      DetectRTC.checkWebSocketsSupport = function (callback) {
        callback = callback || function () {};
        try {
          var starttime;
          var websocket = new WebSocket('wss://echo.websocket.org:443/');
          websocket.onopen = function () {
            DetectRTC.isWebSocketsBlocked = false;
            starttime = new Date().getTime();
            websocket.send('ping');
          };
          websocket.onmessage = function () {
            DetectRTC.WebsocketLatency = new Date().getTime() - starttime + 'ms';
            callback();
            websocket.close();
            websocket = null;
          };
          websocket.onerror = function () {
            DetectRTC.isWebSocketsBlocked = true;
            callback();
          };
        } catch (e) {
          DetectRTC.isWebSocketsBlocked = true;
          callback();
        }
      };

      // -------
      DetectRTC.load = function (callback) {
        callback = callback || function () {};
        checkDeviceSupport(callback);
      };
      if (typeof MediaDevices !== 'undefined') {
        DetectRTC.MediaDevices = MediaDevices;
      } else {
        DetectRTC.MediaDevices = [];
      }
      DetectRTC.hasMicrophone = hasMicrophone;
      DetectRTC.hasSpeakers = hasSpeakers;
      DetectRTC.hasWebcam = hasWebcam;
      DetectRTC.isWebsiteHasWebcamPermissions = isWebsiteHasWebcamPermissions;
      DetectRTC.isWebsiteHasMicrophonePermissions = isWebsiteHasMicrophonePermissions;
      DetectRTC.audioInputDevices = audioInputDevices;
      DetectRTC.audioOutputDevices = audioOutputDevices;
      DetectRTC.videoInputDevices = videoInputDevices;

      // ------
      var isSetSinkIdSupported = false;
      if (typeof document !== 'undefined' && typeof document.createElement === 'function' && 'setSinkId' in document.createElement('video')) {
        isSetSinkIdSupported = true;
      }
      DetectRTC.isSetSinkIdSupported = isSetSinkIdSupported;

      // -----
      var isRTPSenderReplaceTracksSupported = false;
      if (DetectRTC.browser.isFirefox && typeof mozRTCPeerConnection !== 'undefined' /*&& DetectRTC.browser.version > 39*/) {
        /*global mozRTCPeerConnection:true */
        if ('getSenders' in mozRTCPeerConnection.prototype) {
          isRTPSenderReplaceTracksSupported = true;
        }
      } else if (DetectRTC.browser.isChrome && typeof webkitRTCPeerConnection !== 'undefined') {
        /*global webkitRTCPeerConnection:true */
        if ('getSenders' in webkitRTCPeerConnection.prototype) {
          isRTPSenderReplaceTracksSupported = true;
        }
      }
      DetectRTC.isRTPSenderReplaceTracksSupported = isRTPSenderReplaceTracksSupported;

      //------
      var isRemoteStreamProcessingSupported = false;
      if (DetectRTC.browser.isFirefox && DetectRTC.browser.version > 38) {
        isRemoteStreamProcessingSupported = true;
      }
      DetectRTC.isRemoteStreamProcessingSupported = isRemoteStreamProcessingSupported;

      //-------
      var isApplyConstraintsSupported = false;

      /*global MediaStreamTrack:true */
      if (typeof MediaStreamTrack !== 'undefined' && 'applyConstraints' in MediaStreamTrack.prototype) {
        isApplyConstraintsSupported = true;
      }
      DetectRTC.isApplyConstraintsSupported = isApplyConstraintsSupported;

      //-------
      var isMultiMonitorScreenCapturingSupported = false;
      if (DetectRTC.browser.isFirefox && DetectRTC.browser.version >= 43) {
        // version 43 merely supports platforms for multi-monitors
        // version 44 will support exact multi-monitor selection i.e. you can select any monitor for screen capturing.
        isMultiMonitorScreenCapturingSupported = true;
      }
      DetectRTC.isMultiMonitorScreenCapturingSupported = isMultiMonitorScreenCapturingSupported;
      DetectRTC.isPromisesSupported = !!('Promise' in window);

      // version is generated by "grunt"
      DetectRTC.version = '1.4.1';
      if (typeof DetectRTC === 'undefined') {
        window.DetectRTC = {};
      }
      var MediaStream = window.MediaStream;
      if (typeof MediaStream === 'undefined' && typeof webkitMediaStream !== 'undefined') {
        MediaStream = webkitMediaStream;
      }
      if (typeof MediaStream !== 'undefined' && typeof MediaStream === 'function') {
        DetectRTC.MediaStream = Object.keys(MediaStream.prototype);
      } else DetectRTC.MediaStream = false;
      if (typeof MediaStreamTrack !== 'undefined') {
        DetectRTC.MediaStreamTrack = Object.keys(MediaStreamTrack.prototype);
      } else DetectRTC.MediaStreamTrack = false;
      var RTCPeerConnection = window.RTCPeerConnection || window.mozRTCPeerConnection || window.webkitRTCPeerConnection;
      if (typeof RTCPeerConnection !== 'undefined') {
        DetectRTC.RTCPeerConnection = Object.keys(RTCPeerConnection.prototype);
      } else DetectRTC.RTCPeerConnection = false;
      window.DetectRTC = DetectRTC;
      {
        module.exports = DetectRTC;
      }
    })();
  })(DetectRTC);

  var MEDIA = 'MEDIA';
  var DEVICE = 'DEVICE';
  var MEDIA_STREAM_TRACK = 'MEDIA_STREAM_TRACK';

  var LEVELS = {
    error: 1,
    warn: 2,
    info: 3,
    debug: 4
  };
  var logFormat = (level, logDetails) => {
    var {
      ID,
      mediaType,
      action,
      description,
      error
    } = logDetails;
    var timestamp = new Date().toISOString();
    var errorText = error ? error.stack ? "".concat(error.message, ": ").concat(error.stack) : "".concat(error) : '';
    return "".concat(timestamp, " ").concat(level, " ").concat(ID || '', " ").concat(mediaType, " ").concat(action, " ").concat(description, " ").concat(errorText).replace(/\s+/g, ' ').trim();
  };
  var currentLevel = 'error';
  var log$3 = (level, args) => {
    if (LEVELS[level] <= LEVELS[currentLevel]) {
      console.log(logFormat(level, args));
    }
  };
  var logger$5 = {
    info: args => log$3('info', args),
    warn: args => log$3('warn', args),
    error: args => log$3('error', args),
    debug: args => log$3('debug', args)
  };
  var _loop = function _loop(level) {
    logger$5[level] = logInfo => {
      var {
        ID,
        mediaType,
        action,
        description,
        error
      } = logInfo;
      currentLevel = level;
      return log$3(level, {
        ID,
        mediaType,
        action,
        description,
        error
      });
    };
  };
  for (var level of ['info', 'warn', 'error', 'debug']) {
    _loop(level);
  }

  var domain$1;

  // This constructor is used to store event handlers. Instantiating this is
  // faster than explicitly calling `Object.create(null)` to get a "clean" empty
  // object (tested with v8 v4.9).
  function EventHandlers$1() {}
  EventHandlers$1.prototype = Object.create(null);

  function EventEmitter$4() {
    EventEmitter$4.init.call(this);
  }

  // nodejs oddity
  // require('events') === require('events').EventEmitter
  EventEmitter$4.EventEmitter = EventEmitter$4;

  EventEmitter$4.usingDomains = false;

  EventEmitter$4.prototype.domain = undefined;
  EventEmitter$4.prototype._events = undefined;
  EventEmitter$4.prototype._maxListeners = undefined;

  // By default EventEmitters will print a warning if more than 10 listeners are
  // added to it. This is a useful default which helps finding memory leaks.
  EventEmitter$4.defaultMaxListeners = 10;

  EventEmitter$4.init = function() {
    this.domain = null;
    if (EventEmitter$4.usingDomains) {
      // if there is an active domain, then attach to it.
      if (domain$1.active ) ;
    }

    if (!this._events || this._events === Object.getPrototypeOf(this)._events) {
      this._events = new EventHandlers$1();
      this._eventsCount = 0;
    }

    this._maxListeners = this._maxListeners || undefined;
  };

  // Obviously not all Emitters should be limited to 10. This function allows
  // that to be increased. Set to zero for unlimited.
  EventEmitter$4.prototype.setMaxListeners = function setMaxListeners(n) {
    if (typeof n !== 'number' || n < 0 || isNaN(n))
      throw new TypeError('"n" argument must be a positive number');
    this._maxListeners = n;
    return this;
  };

  function $getMaxListeners$1(that) {
    if (that._maxListeners === undefined)
      return EventEmitter$4.defaultMaxListeners;
    return that._maxListeners;
  }

  EventEmitter$4.prototype.getMaxListeners = function getMaxListeners() {
    return $getMaxListeners$1(this);
  };

  // These standalone emit* functions are used to optimize calling of event
  // handlers for fast cases because emit() itself often has a variable number of
  // arguments and can be deoptimized because of that. These functions always have
  // the same number of arguments and thus do not get deoptimized, so the code
  // inside them can execute faster.
  function emitNone$1(handler, isFn, self) {
    if (isFn)
      handler.call(self);
    else {
      var len = handler.length;
      var listeners = arrayClone$2(handler, len);
      for (var i = 0; i < len; ++i)
        listeners[i].call(self);
    }
  }
  function emitOne$1(handler, isFn, self, arg1) {
    if (isFn)
      handler.call(self, arg1);
    else {
      var len = handler.length;
      var listeners = arrayClone$2(handler, len);
      for (var i = 0; i < len; ++i)
        listeners[i].call(self, arg1);
    }
  }
  function emitTwo$1(handler, isFn, self, arg1, arg2) {
    if (isFn)
      handler.call(self, arg1, arg2);
    else {
      var len = handler.length;
      var listeners = arrayClone$2(handler, len);
      for (var i = 0; i < len; ++i)
        listeners[i].call(self, arg1, arg2);
    }
  }
  function emitThree$1(handler, isFn, self, arg1, arg2, arg3) {
    if (isFn)
      handler.call(self, arg1, arg2, arg3);
    else {
      var len = handler.length;
      var listeners = arrayClone$2(handler, len);
      for (var i = 0; i < len; ++i)
        listeners[i].call(self, arg1, arg2, arg3);
    }
  }

  function emitMany$1(handler, isFn, self, args) {
    if (isFn)
      handler.apply(self, args);
    else {
      var len = handler.length;
      var listeners = arrayClone$2(handler, len);
      for (var i = 0; i < len; ++i)
        listeners[i].apply(self, args);
    }
  }

  EventEmitter$4.prototype.emit = function emit(type) {
    var er, handler, len, args, i, events, domain;
    var doError = (type === 'error');

    events = this._events;
    if (events)
      doError = (doError && events.error == null);
    else if (!doError)
      return false;

    domain = this.domain;

    // If there is no 'error' event listener then throw.
    if (doError) {
      er = arguments[1];
      if (domain) {
        if (!er)
          er = new Error('Uncaught, unspecified "error" event');
        er.domainEmitter = this;
        er.domain = domain;
        er.domainThrown = false;
        domain.emit('error', er);
      } else if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      } else {
        // At least give some kind of context to the user
        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
        err.context = er;
        throw err;
      }
      return false;
    }

    handler = events[type];

    if (!handler)
      return false;

    var isFn = typeof handler === 'function';
    len = arguments.length;
    switch (len) {
      // fast cases
      case 1:
        emitNone$1(handler, isFn, this);
        break;
      case 2:
        emitOne$1(handler, isFn, this, arguments[1]);
        break;
      case 3:
        emitTwo$1(handler, isFn, this, arguments[1], arguments[2]);
        break;
      case 4:
        emitThree$1(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
        break;
      // slower
      default:
        args = new Array(len - 1);
        for (i = 1; i < len; i++)
          args[i - 1] = arguments[i];
        emitMany$1(handler, isFn, this, args);
    }

    return true;
  };

  function _addListener$2(target, type, listener, prepend) {
    var m;
    var events;
    var existing;

    if (typeof listener !== 'function')
      throw new TypeError('"listener" argument must be a function');

    events = target._events;
    if (!events) {
      events = target._events = new EventHandlers$1();
      target._eventsCount = 0;
    } else {
      // To avoid recursion in the case that type === "newListener"! Before
      // adding it to the listeners, first emit "newListener".
      if (events.newListener) {
        target.emit('newListener', type,
                    listener.listener ? listener.listener : listener);

        // Re-assign `events` because a newListener handler could have caused the
        // this._events to be assigned to a new object
        events = target._events;
      }
      existing = events[type];
    }

    if (!existing) {
      // Optimize the case of one listener. Don't need the extra array object.
      existing = events[type] = listener;
      ++target._eventsCount;
    } else {
      if (typeof existing === 'function') {
        // Adding the second element, need to change to array.
        existing = events[type] = prepend ? [listener, existing] :
                                            [existing, listener];
      } else {
        // If we've already got an array, just append.
        if (prepend) {
          existing.unshift(listener);
        } else {
          existing.push(listener);
        }
      }

      // Check for listener leak
      if (!existing.warned) {
        m = $getMaxListeners$1(target);
        if (m && m > 0 && existing.length > m) {
          existing.warned = true;
          var w = new Error('Possible EventEmitter memory leak detected. ' +
                              existing.length + ' ' + type + ' listeners added. ' +
                              'Use emitter.setMaxListeners() to increase limit');
          w.name = 'MaxListenersExceededWarning';
          w.emitter = target;
          w.type = type;
          w.count = existing.length;
          emitWarning$1(w);
        }
      }
    }

    return target;
  }
  function emitWarning$1(e) {
    typeof console.warn === 'function' ? console.warn(e) : console.log(e);
  }
  EventEmitter$4.prototype.addListener = function addListener(type, listener) {
    return _addListener$2(this, type, listener, false);
  };

  EventEmitter$4.prototype.on = EventEmitter$4.prototype.addListener;

  EventEmitter$4.prototype.prependListener =
      function prependListener(type, listener) {
        return _addListener$2(this, type, listener, true);
      };

  function _onceWrap$2(target, type, listener) {
    var fired = false;
    function g() {
      target.removeListener(type, g);
      if (!fired) {
        fired = true;
        listener.apply(target, arguments);
      }
    }
    g.listener = listener;
    return g;
  }

  EventEmitter$4.prototype.once = function once(type, listener) {
    if (typeof listener !== 'function')
      throw new TypeError('"listener" argument must be a function');
    this.on(type, _onceWrap$2(this, type, listener));
    return this;
  };

  EventEmitter$4.prototype.prependOnceListener =
      function prependOnceListener(type, listener) {
        if (typeof listener !== 'function')
          throw new TypeError('"listener" argument must be a function');
        this.prependListener(type, _onceWrap$2(this, type, listener));
        return this;
      };

  // emits a 'removeListener' event iff the listener was removed
  EventEmitter$4.prototype.removeListener =
      function removeListener(type, listener) {
        var list, events, position, i, originalListener;

        if (typeof listener !== 'function')
          throw new TypeError('"listener" argument must be a function');

        events = this._events;
        if (!events)
          return this;

        list = events[type];
        if (!list)
          return this;

        if (list === listener || (list.listener && list.listener === listener)) {
          if (--this._eventsCount === 0)
            this._events = new EventHandlers$1();
          else {
            delete events[type];
            if (events.removeListener)
              this.emit('removeListener', type, list.listener || listener);
          }
        } else if (typeof list !== 'function') {
          position = -1;

          for (i = list.length; i-- > 0;) {
            if (list[i] === listener ||
                (list[i].listener && list[i].listener === listener)) {
              originalListener = list[i].listener;
              position = i;
              break;
            }
          }

          if (position < 0)
            return this;

          if (list.length === 1) {
            list[0] = undefined;
            if (--this._eventsCount === 0) {
              this._events = new EventHandlers$1();
              return this;
            } else {
              delete events[type];
            }
          } else {
            spliceOne$2(list, position);
          }

          if (events.removeListener)
            this.emit('removeListener', type, originalListener || listener);
        }

        return this;
      };
      
  // Alias for removeListener added in NodeJS 10.0
  // https://nodejs.org/api/events.html#events_emitter_off_eventname_listener
  EventEmitter$4.prototype.off = function(type, listener){
      return this.removeListener(type, listener);
  };

  EventEmitter$4.prototype.removeAllListeners =
      function removeAllListeners(type) {
        var listeners, events;

        events = this._events;
        if (!events)
          return this;

        // not listening for removeListener, no need to emit
        if (!events.removeListener) {
          if (arguments.length === 0) {
            this._events = new EventHandlers$1();
            this._eventsCount = 0;
          } else if (events[type]) {
            if (--this._eventsCount === 0)
              this._events = new EventHandlers$1();
            else
              delete events[type];
          }
          return this;
        }

        // emit removeListener for all listeners on all events
        if (arguments.length === 0) {
          var keys = Object.keys(events);
          for (var i = 0, key; i < keys.length; ++i) {
            key = keys[i];
            if (key === 'removeListener') continue;
            this.removeAllListeners(key);
          }
          this.removeAllListeners('removeListener');
          this._events = new EventHandlers$1();
          this._eventsCount = 0;
          return this;
        }

        listeners = events[type];

        if (typeof listeners === 'function') {
          this.removeListener(type, listeners);
        } else if (listeners) {
          // LIFO order
          do {
            this.removeListener(type, listeners[listeners.length - 1]);
          } while (listeners[0]);
        }

        return this;
      };

  EventEmitter$4.prototype.listeners = function listeners(type) {
    var evlistener;
    var ret;
    var events = this._events;

    if (!events)
      ret = [];
    else {
      evlistener = events[type];
      if (!evlistener)
        ret = [];
      else if (typeof evlistener === 'function')
        ret = [evlistener.listener || evlistener];
      else
        ret = unwrapListeners$2(evlistener);
    }

    return ret;
  };

  EventEmitter$4.listenerCount = function(emitter, type) {
    if (typeof emitter.listenerCount === 'function') {
      return emitter.listenerCount(type);
    } else {
      return listenerCount$2.call(emitter, type);
    }
  };

  EventEmitter$4.prototype.listenerCount = listenerCount$2;
  function listenerCount$2(type) {
    var events = this._events;

    if (events) {
      var evlistener = events[type];

      if (typeof evlistener === 'function') {
        return 1;
      } else if (evlistener) {
        return evlistener.length;
      }
    }

    return 0;
  }

  EventEmitter$4.prototype.eventNames = function eventNames() {
    return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
  };

  // About 1.5x faster than the two-arg version of Array#splice().
  function spliceOne$2(list, index) {
    for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)
      list[i] = list[k];
    list.pop();
  }

  function arrayClone$2(arr, i) {
    var copy = new Array(i);
    while (i--)
      copy[i] = arr[i];
    return copy;
  }

  function unwrapListeners$2(arr) {
    var ret = new Array(arr.length);
    for (var i = 0; i < ret.length; ++i) {
      ret[i] = arr[i].listener || arr[i];
    }
    return ret;
  }

  function _classPrivateFieldInitSpec$1(obj, privateMap, value) { _checkPrivateRedeclaration$1(obj, privateMap); privateMap.set(obj, value); }
  function _checkPrivateRedeclaration$1(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
  var DeviceKinds;
  (function (DeviceKinds) {
    DeviceKinds["AUDIO_INPUT"] = "audioinput";
    DeviceKinds["AUDIO_OUTPUT"] = "audiooutput";
    DeviceKinds["VIDEO_INPUT"] = "videoinput";
  })(DeviceKinds || (DeviceKinds = {}));
  var _mediaDeviceInfo = /*#__PURE__*/new WeakMap();
  class Device {
    constructor(mediaDeviceInfo) {
      _defineProperty(this, "ID", void 0);
      _defineProperty(this, "groupID", void 0);
      _defineProperty(this, "label", void 0);
      _defineProperty(this, "kind", void 0);
      _classPrivateFieldInitSpec$1(this, _mediaDeviceInfo, {
        writable: true,
        value: void 0
      });
      _classPrivateFieldSet(this, _mediaDeviceInfo, mediaDeviceInfo);
      this.ID = _classPrivateFieldGet(this, _mediaDeviceInfo).deviceId;
      this.groupID = _classPrivateFieldGet(this, _mediaDeviceInfo).groupId;
      this.label = _classPrivateFieldGet(this, _mediaDeviceInfo).label;
      this.kind = _classPrivateFieldGet(this, _mediaDeviceInfo).kind;
    }
  }

  function getTrackSettings(track) {
    logger$5.debug({
      ID: track.id,
      mediaType: MEDIA_STREAM_TRACK,
      action: 'getTrackSettings()',
      description: 'Called'
    });
    var settings = track.getSettings();
    if (settings) {
      logger$5.debug({
        ID: track.id,
        mediaType: MEDIA_STREAM_TRACK,
        action: 'getTrackSettings()',
        description: "Returning track settings ".concat(JSON.stringify(settings))
      });
      return settings;
    }
    var error = new Error('Unable to get track settings');
    logger$5.info({
      ID: track.id,
      mediaType: MEDIA_STREAM_TRACK,
      action: 'getTrackSettings()',
      description: error.message,
      error
    });
    return {};
  }

  function _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }
  function _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
  var TrackStatus;
  (function (TrackStatus) {
    TrackStatus["ENDED"] = "ended";
    TrackStatus["LIVE"] = "live";
  })(TrackStatus || (TrackStatus = {}));
  var TrackKind;
  (function (TrackKind) {
    TrackKind["AUDIO"] = "audio";
    TrackKind["VIDEO"] = "video";
  })(TrackKind || (TrackKind = {}));
  var _mediaStreamTrack = /*#__PURE__*/new WeakMap();
  class Track extends EventEmitter$4 {
    constructor(mediaStreamTrack) {
      super();
      _defineProperty(this, "ID", void 0);
      _defineProperty(this, "kind", void 0);
      _defineProperty(this, "status", void 0);
      _defineProperty(this, "muted", void 0);
      _defineProperty(this, "label", void 0);
      _classPrivateFieldInitSpec(this, _mediaStreamTrack, {
        writable: true,
        value: void 0
      });
      this.ID = mediaStreamTrack.id;
      this.kind = mediaStreamTrack.kind;
      this.status = mediaStreamTrack.readyState;
      this.muted = mediaStreamTrack.muted;
      this.label = mediaStreamTrack.label;
      _classPrivateFieldSet(this, _mediaStreamTrack, mediaStreamTrack);
      _classPrivateFieldGet(this, _mediaStreamTrack).onmute = () => {
        var action = _classPrivateFieldGet(this, _mediaStreamTrack).enabled ? 'muted' : 'unmuted';
        this.emit('track:mute', {
          action
        });
      };
    }
    stop() {
      _classPrivateFieldGet(this, _mediaStreamTrack).stop();
      this.status = TrackStatus.ENDED;
    }
    applyConstraints(constraints) {
      var _this = this;
      return _asyncToGenerator(function* () {
        var _constraints$deviceId, _constraints$deviceId2, _constraints$deviceId5;
        logger$5.debug({
          ID: constraints === null || constraints === void 0 ? void 0 : (_constraints$deviceId = constraints.deviceId) === null || _constraints$deviceId === void 0 ? void 0 : _constraints$deviceId.toString(),
          mediaType: DEVICE,
          action: 'applyConstraints()',
          description: "Called with ".concat(JSON.stringify(constraints))
        });
        logger$5.info({
          ID: constraints === null || constraints === void 0 ? void 0 : (_constraints$deviceId2 = constraints.deviceId) === null || _constraints$deviceId2 === void 0 ? void 0 : _constraints$deviceId2.toString(),
          mediaType: DEVICE,
          action: 'applyConstraints()',
          description: 'Applying constraints to track objects'
        });
        var supportedConstraints = navigator.mediaDevices.getSupportedConstraints();
        var notSupportedConstraints = [];
        for (var thisConstraint of Object.keys(constraints)) {
          if (!supportedConstraints[thisConstraint]) {
            var _constraints$deviceId3;
            logger$5.debug({
              ID: constraints === null || constraints === void 0 ? void 0 : (_constraints$deviceId3 = constraints.deviceId) === null || _constraints$deviceId3 === void 0 ? void 0 : _constraints$deviceId3.toString(),
              mediaType: DEVICE,
              action: 'applyConstraints()',
              description: "Not suported constraint tracked ".concat(thisConstraint)
            });
            notSupportedConstraints.push(thisConstraint);
          }
        }
        if (notSupportedConstraints.length > 0) {
          var _constraints$deviceId4;
          console.warn("#TrackObject Unsupported constraints - ".concat(notSupportedConstraints.join(', ')));
          logger$5.debug({
            ID: constraints === null || constraints === void 0 ? void 0 : (_constraints$deviceId4 = constraints.deviceId) === null || _constraints$deviceId4 === void 0 ? void 0 : _constraints$deviceId4.toString(),
            mediaType: DEVICE,
            action: 'applyConstraints()',
            description: 'Constraints not applied'
          });
          return false;
        }
        yield _classPrivateFieldGet(_this, _mediaStreamTrack).applyConstraints(constraints);
        logger$5.debug({
          ID: constraints === null || constraints === void 0 ? void 0 : (_constraints$deviceId5 = constraints.deviceId) === null || _constraints$deviceId5 === void 0 ? void 0 : _constraints$deviceId5.toString(),
          mediaType: DEVICE,
          action: 'applyConstraints()',
          description: 'Constraints applied successfully'
        });
        return true;
      })();
    }
    getSettings() {
      logger$5.debug({
        mediaType: MEDIA,
        action: 'getSettings()',
        description: 'Called'
      });
      logger$5.info({
        mediaType: MEDIA,
        action: 'getSettings()',
        description: 'Fetching constraints properties for the current media stream track'
      });
      var settings = getTrackSettings(_classPrivateFieldGet(this, _mediaStreamTrack));
      logger$5.debug({
        mediaType: MEDIA,
        action: 'getSettings()',
        description: "Received settings ".concat(JSON.stringify(settings))
      });
      return settings;
    }
    getMediaStreamTrack() {
      logger$5.debug({
        mediaType: MEDIA,
        action: 'getMediaStreamTrack()',
        description: 'Called'
      });
      var mediaStreamTrack = _classPrivateFieldGet(this, _mediaStreamTrack);
      logger$5.debug({
        mediaType: MEDIA,
        action: 'getMediaStreamTrack()',
        description: "Received media stream track ".concat(JSON.stringify(mediaStreamTrack))
      });
      return mediaStreamTrack;
    }
  }

  var eventEmitter = new EventEmitter$4();
  var deviceList = [];
  var getDevices$1 = /*#__PURE__*/function () {
    var _ref = _asyncToGenerator(function* () {
      var _navigator$mediaDevic;
      logger$5.debug({
        mediaType: DEVICE,
        action: 'getDevices()',
        description: 'Called'
      });
      if (!((_navigator$mediaDevic = navigator.mediaDevices) !== null && _navigator$mediaDevic !== void 0 && _navigator$mediaDevic.enumerateDevices)) {
        console.warn('navigator.mediaDevices.enumerateDevices() is not supported.');
        return [];
      }
      logger$5.info({
        mediaType: DEVICE,
        action: 'getDevices()',
        description: 'Requesting list of available media input and output devices'
      });
      return navigator.mediaDevices.enumerateDevices();
    });
    return function getDevices() {
      return _ref.apply(this, arguments);
    };
  }();
  var getCameras = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator(function* () {
      logger$5.debug({
        mediaType: DEVICE,
        action: 'getCameras()',
        description: 'Called'
      });
      var devices = yield getDevices$1();
      logger$5.info({
        mediaType: DEVICE,
        action: 'getCameras()',
        description: 'Filtering camera devices from all available media devices'
      });
      return devices.filter(_ref3 => {
        var {
          kind
        } = _ref3;
        return kind === DeviceKinds.VIDEO_INPUT;
      }).map(device => {
        logger$5.debug({
          ID: device.deviceId,
          mediaType: DEVICE,
          action: 'getCameras()',
          description: "Received camera device ".concat(JSON.stringify(device))
        });
        return new Device(device);
      });
    });
    return function getCameras() {
      return _ref2.apply(this, arguments);
    };
  }();
  var getMicrophones = /*#__PURE__*/function () {
    var _ref4 = _asyncToGenerator(function* () {
      logger$5.debug({
        mediaType: DEVICE,
        action: 'getMicrophones()',
        description: 'Called'
      });
      var devices = yield getDevices$1();
      logger$5.info({
        mediaType: DEVICE,
        action: 'getMicrophones()',
        description: 'Filtering microphones devices from all available media devices'
      });
      return devices.filter(_ref5 => {
        var {
          kind
        } = _ref5;
        return kind === DeviceKinds.AUDIO_INPUT;
      }).map(device => {
        logger$5.debug({
          ID: device.deviceId,
          mediaType: DEVICE,
          action: 'getMicrophones()',
          description: "Received microphone device ".concat(JSON.stringify(device))
        });
        return new Device(device);
      });
    });
    return function getMicrophones() {
      return _ref4.apply(this, arguments);
    };
  }();
  var getSpeakers = /*#__PURE__*/function () {
    var _ref6 = _asyncToGenerator(function* () {
      logger$5.debug({
        mediaType: DEVICE,
        action: 'getSpeakers()',
        description: 'Called'
      });
      var devices = yield getDevices$1();
      logger$5.info({
        mediaType: DEVICE,
        action: 'getSpeakers()',
        description: 'Filtering speaker devices from all available media devices'
      });
      return devices.filter(_ref7 => {
        var {
          kind
        } = _ref7;
        return kind === DeviceKinds.AUDIO_OUTPUT;
      }).map(device => {
        logger$5.debug({
          ID: device.deviceId,
          mediaType: DEVICE,
          action: 'getSpeakers()',
          description: "Received speaker device ".concat(JSON.stringify(device))
        });
        return new Device(device);
      });
    });
    return function getSpeakers() {
      return _ref6.apply(this, arguments);
    };
  }();
  function getUnsupportedConstraints(mediaConstraints) {
    logger$5.debug({
      mediaType: MEDIA,
      action: 'getUnsupportedConstraints()',
      description: "Called with ".concat(JSON.stringify(mediaConstraints))
    });
    logger$5.info({
      mediaType: MEDIA,
      action: 'getUnsupportedConstraints()',
      description: 'Filtering list of media track unsupported constraints'
    });
    var supportedConstraints = navigator.mediaDevices.getSupportedConstraints();
    var unsupportedConstraints = [];
    Object.keys(mediaConstraints).forEach(constraint => {
      if (!(Object.prototype.hasOwnProperty.call(supportedConstraints, constraint) && supportedConstraints[constraint])) {
        unsupportedConstraints.push(constraint);
      }
    });
    logger$5.debug({
      mediaType: MEDIA,
      action: 'getUnsupportedConstraints()',
      description: "Received unsupported constraints ".concat(unsupportedConstraints)
    });
    return unsupportedConstraints;
  }
  function createAudioTrack(_x) {
    return _createAudioTrack.apply(this, arguments);
  }
  function _createAudioTrack() {
    _createAudioTrack = _asyncToGenerator(function* (device) {
      logger$5.debug({
        ID: device === null || device === void 0 ? void 0 : device.ID,
        mediaType: DEVICE,
        action: 'createAudioTrack()',
        description: "Called ".concat(device ? "with ".concat(JSON.stringify(device)) : '', " ")
      });
      if (device && device.kind !== DeviceKinds.AUDIO_INPUT) {
        var _error = new Error("Device ".concat(device.ID, " is not of kind AUDIO_INPUT"));
        logger$5.error({
          ID: device.ID,
          mediaType: 'DEVICE',
          action: 'createAudioTrack()',
          description: _error.message,
          error: _error
        });
        throw _error;
      }
      logger$5.info({
        ID: device === null || device === void 0 ? void 0 : device.ID,
        mediaType: DEVICE,
        action: 'createAudioTrack()',
        description: 'Creating audio track'
      });
      var deviceConfig = device ? {
        audio: {
          deviceId: {
            exact: device.ID
          }
        }
      } : {
        audio: true,
        video: false
      };
      var stream = yield navigator.mediaDevices.getUserMedia(deviceConfig);
      var track = stream.getAudioTracks()[0];
      if (track) {
        logger$5.debug({
          ID: device === null || device === void 0 ? void 0 : device.ID,
          mediaType: DEVICE,
          action: 'createAudioTrack()',
          description: "Received audio track ".concat(JSON.stringify(track))
        });
        return new Track(track);
      }
      var error = new Error("Device could not obtain an audio track of kind ".concat(device === null || device === void 0 ? void 0 : device.kind));
      logger$5.error({
        ID: device === null || device === void 0 ? void 0 : device.ID,
        mediaType: 'DEVICE',
        action: 'createAudioTrack()',
        description: error.message,
        error
      });
      throw error;
    });
    return _createAudioTrack.apply(this, arguments);
  }
  function createVideoTrack(_x2) {
    return _createVideoTrack.apply(this, arguments);
  }
  function _createVideoTrack() {
    _createVideoTrack = _asyncToGenerator(function* (device) {
      logger$5.debug({
        ID: device === null || device === void 0 ? void 0 : device.ID,
        mediaType: DEVICE,
        action: 'createVideoTrack()',
        description: "Called ".concat(device ? "with ".concat(JSON.stringify(device)) : '', " ")
      });
      if (device && device.kind !== DeviceKinds.VIDEO_INPUT) {
        var _error2 = new Error("Device ".concat(device.ID, " is not of kind VIDEO_INPUT"));
        logger$5.error({
          ID: device.ID,
          mediaType: 'DEVICE',
          action: 'createVideoTrack()',
          description: _error2.message,
          error: _error2
        });
        throw _error2;
      }
      logger$5.info({
        ID: device === null || device === void 0 ? void 0 : device.ID,
        mediaType: DEVICE,
        action: 'createVideoTrack()',
        description: 'Creating video track'
      });
      var deviceConfig = device ? {
        video: {
          deviceId: {
            exact: device.ID
          }
        }
      } : {
        audio: false,
        video: true
      };
      var stream = yield navigator.mediaDevices.getUserMedia(deviceConfig);
      var track = stream.getVideoTracks()[0];
      if (track) {
        logger$5.debug({
          ID: device === null || device === void 0 ? void 0 : device.ID,
          mediaType: DEVICE,
          action: 'createVideoTrack()',
          description: "Received video track ".concat(JSON.stringify(track))
        });
        return new Track(track);
      }
      var error = new Error("Device could not obtain a video track of kind ".concat(device === null || device === void 0 ? void 0 : device.kind));
      logger$5.error({
        ID: device === null || device === void 0 ? void 0 : device.ID,
        mediaType: 'DEVICE',
        action: 'createVideoTrack()',
        description: error.message,
        error
      });
      throw error;
    });
    return _createVideoTrack.apply(this, arguments);
  }
  function createContentTrack(_x3) {
    return _createContentTrack.apply(this, arguments);
  }
  function _createContentTrack() {
    _createContentTrack = _asyncToGenerator(function* (mediaConstraints) {
      var _mediaConstraints$dev, _mediaConstraints$dev2, _mediaConstraints$dev7;
      logger$5.debug({
        ID: mediaConstraints === null || mediaConstraints === void 0 ? void 0 : (_mediaConstraints$dev = mediaConstraints.deviceId) === null || _mediaConstraints$dev === void 0 ? void 0 : _mediaConstraints$dev.toString(),
        mediaType: DEVICE,
        action: 'createContentTrack()',
        description: "Called ".concat(mediaConstraints ? "with ".concat(JSON.stringify(mediaConstraints)) : '', " ")
      });
      logger$5.info({
        ID: mediaConstraints === null || mediaConstraints === void 0 ? void 0 : (_mediaConstraints$dev2 = mediaConstraints.deviceId) === null || _mediaConstraints$dev2 === void 0 ? void 0 : _mediaConstraints$dev2.toString(),
        mediaType: MEDIA,
        action: 'createContentTrack()',
        description: 'Creating content track'
      });
      var deviceConfig = {
        audio: false,
        video: true
      };
      var track;
      var stream;
      try {
        stream = yield navigator.mediaDevices.getDisplayMedia(deviceConfig);
        [track] = stream.getVideoTracks();
      } catch (error) {
        if (error instanceof Error) {
          var _mediaConstraints$dev3;
          logger$5.error({
            ID: mediaConstraints === null || mediaConstraints === void 0 ? void 0 : (_mediaConstraints$dev3 = mediaConstraints.deviceId) === null || _mediaConstraints$dev3 === void 0 ? void 0 : _mediaConstraints$dev3.toString(),
            mediaType: 'DEVICE',
            action: 'createContentTrack()',
            description: error.message,
            error
          });
        }
        throw error;
      }
      if (mediaConstraints) {
        var unsupportedConstraints = getUnsupportedConstraints(mediaConstraints);
        if (unsupportedConstraints.length <= 0) {
          var _mediaConstraints$dev4;
          track.applyConstraints(mediaConstraints);
          logger$5.debug({
            ID: mediaConstraints === null || mediaConstraints === void 0 ? void 0 : (_mediaConstraints$dev4 = mediaConstraints.deviceId) === null || _mediaConstraints$dev4 === void 0 ? void 0 : _mediaConstraints$dev4.toString(),
            mediaType: DEVICE,
            action: 'createContentTrack()',
            description: 'Applied media constraints to fetched content track'
          });
        } else {
          var _mediaConstraints$dev5;
          var _error3 = new Error("".concat(unsupportedConstraints.join(', '), " constraint is not supported by browser"));
          logger$5.error({
            ID: mediaConstraints === null || mediaConstraints === void 0 ? void 0 : (_mediaConstraints$dev5 = mediaConstraints.deviceId) === null || _mediaConstraints$dev5 === void 0 ? void 0 : _mediaConstraints$dev5.toString(),
            mediaType: 'DEVICE',
            action: 'createContentTrack()',
            description: _error3.message,
            error: _error3
          });
          throw _error3;
        }
      }
      if (track) {
        var _mediaConstraints$dev6;
        logger$5.debug({
          ID: mediaConstraints === null || mediaConstraints === void 0 ? void 0 : (_mediaConstraints$dev6 = mediaConstraints.deviceId) === null || _mediaConstraints$dev6 === void 0 ? void 0 : _mediaConstraints$dev6.toString(),
          mediaType: DEVICE,
          action: 'createContentTrack()',
          description: "Received content track ".concat(JSON.stringify(track))
        });
        return new Track(track);
      }
      var error = new Error('Could not obtain a content track');
      logger$5.error({
        ID: mediaConstraints === null || mediaConstraints === void 0 ? void 0 : (_mediaConstraints$dev7 = mediaConstraints.deviceId) === null || _mediaConstraints$dev7 === void 0 ? void 0 : _mediaConstraints$dev7.toString(),
        mediaType: 'DEVICE',
        action: 'createContentTrack()',
        description: error.message,
        error
      });
      throw error;
    });
    return _createContentTrack.apply(this, arguments);
  }
  function deviceChangePublisher() {
    return _deviceChangePublisher.apply(this, arguments);
  }
  function _deviceChangePublisher() {
    _deviceChangePublisher = _asyncToGenerator(function* () {
      var _navigator$mediaDevic2;
      logger$5.debug({
        mediaType: DEVICE,
        action: 'deviceChangePublisher()',
        description: 'Called'
      });
      if (!((_navigator$mediaDevic2 = navigator.mediaDevices) !== null && _navigator$mediaDevic2 !== void 0 && _navigator$mediaDevic2.enumerateDevices)) {
        console.warn('navigator.mediaDevices.enumerateDevices() is not supported.');
        return;
      }
      logger$5.info({
        mediaType: DEVICE,
        action: 'deviceChangePublisher()',
        description: 'Calling individual subscription listener obtained by device change event'
      });
      var newDeviceList = yield navigator.mediaDevices.enumerateDevices();
      var filtered = [];
      var getGroupIdsFrom = [];
      var filterDevicesFrom = [];
      var action = 'changed';
      var deviceListGroups = new Set();
      if (newDeviceList.length !== deviceList.length) {
        [getGroupIdsFrom, filterDevicesFrom, action] = newDeviceList.length < deviceList.length ? [newDeviceList, deviceList, 'removed'] : [deviceList, newDeviceList, 'added'];
        getGroupIdsFrom.forEach(device => {
          deviceListGroups.add(device.groupId);
        });
        filtered = filterDevicesFrom.filter(device => !deviceListGroups.has(device.groupId));
        deviceList.splice(0, deviceList.length);
        deviceList.push(...newDeviceList);
        eventEmitter.emit('device:changed', {
          action,
          devices: filtered
        });
      }
    });
    return _deviceChangePublisher.apply(this, arguments);
  }
  function on(_x4, _x5) {
    return _on.apply(this, arguments);
  }
  function _on() {
    _on = _asyncToGenerator(function* (eventName, listener) {
      logger$5.debug({
        mediaType: MEDIA,
        action: 'on()',
        description: "Subscribing to an ".concat(eventName, ",").concat(listener)
      });
      eventEmitter.on(eventName, listener);
      if (eventName === 'device:changed') {
        var thisDeviceList = yield getDevices$1();
        deviceList.push(...thisDeviceList);
        navigator.mediaDevices.addEventListener('devicechange', deviceChangePublisher);
      }
    });
    return _on.apply(this, arguments);
  }
  var off = (eventName, listener) => {
    logger$5.debug({
      mediaType: MEDIA,
      action: 'off()',
      description: "Called ".concat(eventName, " with ").concat(listener, " listener")
    });
    eventEmitter.off(eventName, listener);
  };

  var bnrProcessor = {
    isModuleAdded: false,
    workletProcessorUrl: 'https://models.intelligence.webex.com/bnr/1.1.0/noise-reduction-effect.worklet.js'
  };
  function isValidTrack(track) {
    var supportedConstraints = navigator.mediaDevices.getSupportedConstraints();
    var supportedSampleRates = [16000, 32000, 48000];
    if (supportedConstraints.sampleRate) {
      var settings = getTrackSettings(track);
      var {
        sampleRate
      } = settings;
      if (sampleRate && !supportedSampleRates.includes(sampleRate)) {
        var error = new Error("Sample rate of ".concat(sampleRate, " is not supported."));
        logger$5.error({
          ID: track.id,
          mediaType: MEDIA_STREAM_TRACK,
          action: 'isValidTrack()',
          description: error.message,
          error
        });
        throw error;
      } else {
        return true;
      }
    } else {
      var _error = new Error('Not supported');
      logger$5.info({
        ID: track.id,
        mediaType: MEDIA_STREAM_TRACK,
        action: 'isValidTrack()',
        description: _error.message,
        error: _error
      });
      return true;
    }
  }
  function loadProcessor() {
    return _loadProcessor.apply(this, arguments);
  }
  function _loadProcessor() {
    _loadProcessor = _asyncToGenerator(function* () {
      logger$5.info({
        mediaType: MEDIA_STREAM_TRACK,
        action: 'loadProcessor()',
        description: 'Creating and loading BNR module'
      });
      var audioContext = new AudioContext();
      bnrProcessor.isModuleAdded = true;
      bnrProcessor.audioContext = audioContext;
      yield audioContext.audioWorklet.addModule(bnrProcessor.workletProcessorUrl);
      bnrProcessor.workletNode = new AudioWorkletNode(audioContext, 'noise-reduction-worklet-processor');
      return audioContext;
    });
    return _loadProcessor.apply(this, arguments);
  }
  function enableBNR(_x) {
    return _enableBNR.apply(this, arguments);
  }
  function _enableBNR() {
    _enableBNR = _asyncToGenerator(function* (track) {
      logger$5.debug({
        ID: track.id,
        mediaType: MEDIA_STREAM_TRACK,
        action: 'enableBNR()',
        description: 'Called'
      });
      try {
        isValidTrack(track);
        var streamFromTrack = new MediaStream();
        streamFromTrack.addTrack(track);
        var workletNode;
        logger$5.info({
          ID: track.id,
          mediaType: MEDIA_STREAM_TRACK,
          action: 'enableBNR()',
          description: 'Checking if BNR module is present already'
        });
        var oldDestinationTrack = bnrProcessor.destinationTrack;
        if (oldDestinationTrack && track.id === oldDestinationTrack.id) {
          var oldTrackErrorMsg = 'BNR is enabled on the track already';
          var oldTrackError = new Error(oldTrackErrorMsg);
          logger$5.error({
            ID: track.id,
            mediaType: MEDIA_STREAM_TRACK,
            action: 'enableBNR()',
            description: oldTrackErrorMsg,
            error: oldTrackError
          });
          throw oldTrackError;
        }
        if (bnrProcessor.isModuleAdded) {
          logger$5.debug({
            ID: track.id,
            mediaType: MEDIA_STREAM_TRACK,
            action: 'enableBNR()',
            description: 'Disposing existing BNR module'
          });
          workletNode = bnrProcessor.workletNode;
          workletNode.port.postMessage('DISPOSE');
        }
        logger$5.info({
          ID: track.id,
          mediaType: MEDIA_STREAM_TRACK,
          action: 'enableBNR()',
          description: 'Creating worklet node, connecting source and destination streams'
        });
        var audioContext = yield loadProcessor();
        workletNode = bnrProcessor.workletNode;
        workletNode.port.postMessage('ENABLE');
        bnrProcessor.sourceNode = audioContext.createMediaStreamSource(streamFromTrack);
        bnrProcessor.sourceNode.connect(workletNode);
        bnrProcessor.destinationStream = audioContext.createMediaStreamDestination();
        workletNode.connect(bnrProcessor.destinationStream);
        logger$5.info({
          ID: track.id,
          mediaType: MEDIA_STREAM_TRACK,
          action: 'enableBNR()',
          description: 'Obtaining noise reduced track and returning'
        });
        var destinationStream = bnrProcessor.destinationStream.stream;
        var [destinationTrack] = destinationStream.getAudioTracks();
        bnrProcessor.destinationTrack = destinationTrack;
        return destinationTrack;
      } catch (error) {
        logger$5.error({
          ID: track.id,
          mediaType: MEDIA_STREAM_TRACK,
          action: 'enableBNR()',
          description: 'Error in enableBNR',
          error: error
        });
        throw error;
      }
    });
    return _enableBNR.apply(this, arguments);
  }
  function disableBNR() {
    logger$5.debug({
      mediaType: MEDIA_STREAM_TRACK,
      action: 'disableBNR()',
      description: 'Called'
    });
    try {
      var workletNode;
      logger$5.info({
        mediaType: MEDIA_STREAM_TRACK,
        action: 'disableBNR()',
        description: 'Checking if BNR is enabled before disabling'
      });
      if (!bnrProcessor.isModuleAdded) {
        var error = new Error('Can not disable as BNR is not enabled');
        logger$5.error({
          mediaType: MEDIA_STREAM_TRACK,
          action: 'disableBNR()',
          description: 'Can not disable as BNR is not enabled'
        });
        throw error;
      } else {
        logger$5.info({
          mediaType: MEDIA_STREAM_TRACK,
          action: 'disableBNR()',
          description: 'Using existing AudioWorkletNode for disabling BNR'
        });
        workletNode = bnrProcessor.workletNode;
      }
      workletNode.port.postMessage('DISPOSE');
      logger$5.info({
        mediaType: MEDIA_STREAM_TRACK,
        action: 'disableBNR()',
        description: 'Obtaining raw media stream track and removing bnr context'
      });
      var bnrDisabledStream = bnrProcessor.sourceNode.mediaStream;
      var [track] = bnrDisabledStream === null || bnrDisabledStream === void 0 ? void 0 : bnrDisabledStream.getAudioTracks();
      bnrProcessor.isModuleAdded = false;
      delete bnrProcessor.workletNode;
      delete bnrProcessor.audioContext;
      delete bnrProcessor.sourceNode;
      delete bnrProcessor.destinationStream;
      delete bnrProcessor.destinationTrack;
      return track;
    } catch (error) {
      logger$5.error({
        mediaType: MEDIA_STREAM_TRACK,
        action: 'disableBNR()',
        description: 'Error in disableBNR',
        error: error
      });
      throw error;
    }
  }

  var ErrorCode;
  (function (ErrorCode) {
    ErrorCode[ErrorCode["MediaConnectionError"] = 30001] = "MediaConnectionError";
    ErrorCode[ErrorCode["SdpError"] = 30002] = "SdpError";
    ErrorCode[ErrorCode["IceGatheringError"] = 30003] = "IceGatheringError";
    ErrorCode[ErrorCode["SdpAnswerHandlingError"] = 30004] = "SdpAnswerHandlingError";
    ErrorCode[ErrorCode["SdpOfferCreationError"] = 30005] = "SdpOfferCreationError";
    ErrorCode[ErrorCode["SdpOfferHandlingError"] = 30006] = "SdpOfferHandlingError";
  })(ErrorCode || (ErrorCode = {}));

  class MediaConnectionError extends Error {
    constructor(message) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      super(message);
      _defineProperty(this, "code", void 0);
      this.name = options.name || 'MediaConnectionError';
      this.cause = options.cause;
      this.code = options.code || ErrorCode.MediaConnectionError;
    }
  }

  function ownKeys$8(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$8(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$8(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$8(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  class SdpError extends MediaConnectionError {
    constructor(message) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      super(message, _objectSpread$8({
        code: ErrorCode.SdpError,
        name: 'SdpError'
      }, options));
    }
  }

  function ownKeys$7(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$7(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$7(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$7(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  class IceGatheringError extends SdpError {
    constructor(message) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      super(message, _objectSpread$7({
        code: ErrorCode.IceGatheringError,
        name: 'IceGatheringError'
      }, options));
    }
  }

  function ownKeys$6(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$6(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$6(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$6(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  class SdpAnswerHandlingError extends SdpError {
    constructor(message) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      super(message, _objectSpread$6({
        code: ErrorCode.SdpAnswerHandlingError,
        name: 'SdpAnswerHandlingError'
      }, options));
    }
  }

  function ownKeys$5(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$5(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$5(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$5(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  class SdpOfferCreationError extends SdpError {
    constructor(message) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      super(message, _objectSpread$5({
        code: ErrorCode.SdpOfferCreationError,
        name: 'SdpOfferCreationError'
      }, options));
    }
  }

  function ownKeys$4(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$4(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$4(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$4(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  class SdpOfferHandlingError extends SdpError {
    constructor(message) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      super(message, _objectSpread$4({
        code: ErrorCode.SdpOfferHandlingError,
        name: 'SdpOfferHandlingError'
      }, options));
    }
  }

  var Error$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    get ErrorCode () { return ErrorCode; },
    IceGatheringError: IceGatheringError,
    MediaConnectionError: MediaConnectionError,
    SdpAnswerHandlingError: SdpAnswerHandlingError,
    SdpError: SdpError,
    SdpOfferCreationError: SdpOfferCreationError,
    SdpOfferHandlingError: SdpOfferHandlingError
  });

  class EventEmitter$3 extends EventEmitter$4 {}

  var defaultLogger = {
    info: function info() {
      return console.info(...arguments);
    },
    log: function log() {
      return console.log(...arguments);
    },
    error: function error() {
      return console.error(...arguments);
    },
    warn: function warn() {
      return console.warn(...arguments);
    },
    trace: function trace() {
      return console.trace(...arguments);
    },
    debug: function debug() {
      return console.debug(...arguments);
    }
  };
  var currentLogger = defaultLogger;
  var setLogger$1 = newLogger => {
    if (newLogger) {
      currentLogger = newLogger;
    } else {
      currentLogger = defaultLogger;
    }
  };
  var getLogger = () => currentLogger;
  var getErrorDescription = error => {
    return error ? error.stack ? "".concat(error.message, ": ").concat(error.stack) : "".concat(error) : '';
  };

  var NUM$1 = '\\d+';
  var SDP_TOKEN$1 = "[!#$%&'*+\\-.^_`{|}~a-zA-Z0-9]+";
  var ANY_NON_WS$1 = '\\S+';
  var SP$1 = '\\s';
  var REST$1 = '.+';
  class Line$1 {}
  var _a$5$1;
  class BandwidthLine$1 extends Line$1 {
    constructor(bandwidthType, bandwidth) {
      super();
      this.bandwidthType = bandwidthType;
      this.bandwidth = bandwidth;
    }
    static fromSdpLine(line) {
      if (!BandwidthLine$1.regex.test(line)) {
        return undefined;
      }
      var tokens = line.match(BandwidthLine$1.regex);
      var bandwidthType = tokens[1];
      var bandwidth = parseInt(tokens[2], 10);
      return new BandwidthLine$1(bandwidthType, bandwidth);
    }
    toSdpLine() {
      return "b=".concat(this.bandwidthType, ":").concat(this.bandwidth);
    }
  }
  _a$5$1 = BandwidthLine$1;
  BandwidthLine$1.BW_TYPE_REGEX = 'CT|AS|TIAS';
  BandwidthLine$1.regex = new RegExp("^(".concat(_a$5$1.BW_TYPE_REGEX, "):(").concat(NUM$1, ")"));
  class BundleGroupLine$1 extends Line$1 {
    constructor(mids) {
      super();
      this.mids = mids;
    }
    static fromSdpLine(line) {
      if (!BundleGroupLine$1.regex.test(line)) {
        return undefined;
      }
      var tokens = line.match(BundleGroupLine$1.regex);
      var mids = tokens[1].split(' ');
      return new BundleGroupLine$1(mids);
    }
    toSdpLine() {
      return "a=group:BUNDLE ".concat(this.mids.join(' '));
    }
  }
  BundleGroupLine$1.regex = new RegExp("^group:BUNDLE (".concat(REST$1, ")"));
  var _a$4$1;
  class CandidateLine$1 extends Line$1 {
    constructor(foundation, componentId, transport, priority, connectionAddress, port, candidateType, relAddr, relPort, candidateExtensions) {
      super();
      this.foundation = foundation;
      this.componentId = componentId;
      this.transport = transport;
      this.priority = priority;
      this.connectionAddress = connectionAddress;
      this.port = port;
      this.candidateType = candidateType;
      this.relAddr = relAddr;
      this.relPort = relPort;
      this.candidateExtensions = candidateExtensions;
    }
    static fromSdpLine(line) {
      if (!CandidateLine$1.regex.test(line)) {
        return undefined;
      }
      var tokens = line.match(CandidateLine$1.regex);
      var foundation = tokens[1];
      var componentId = parseInt(tokens[2], 10);
      var transport = tokens[3];
      var priority = parseInt(tokens[4], 10);
      var connectionAddress = tokens[5];
      var port = parseInt(tokens[6], 10);
      var candidateType = tokens[7];
      var relAddr = tokens[8];
      var relPort = tokens[9] ? parseInt(tokens[9], 10) : undefined;
      var candidateExtensions = tokens[10];
      return new CandidateLine$1(foundation, componentId, transport, priority, connectionAddress, port, candidateType, relAddr, relPort, candidateExtensions);
    }
    toSdpLine() {
      var str = '';
      str += "a=candidate:".concat(this.foundation, " ").concat(this.componentId, " ").concat(this.transport, " ").concat(this.priority, " ").concat(this.connectionAddress, " ").concat(this.port, " typ ").concat(this.candidateType);
      if (this.relAddr) {
        str += " raddr ".concat(this.relAddr);
      }
      if (this.relPort) {
        str += " rport ".concat(this.relPort);
      }
      if (this.candidateExtensions) {
        str += " ".concat(this.candidateExtensions);
      }
      return str;
    }
  }
  _a$4$1 = CandidateLine$1;
  CandidateLine$1.ICE_CHARS = "[a-zA-Z0-9+/]+";
  CandidateLine$1.regex = new RegExp("^candidate:(".concat(_a$4$1.ICE_CHARS, ") (").concat(NUM$1, ") (").concat(ANY_NON_WS$1, ") (").concat(NUM$1, ") (").concat(ANY_NON_WS$1, ") (").concat(NUM$1, ") typ (").concat(ANY_NON_WS$1, ")(?: raddr (").concat(ANY_NON_WS$1, "))?(?: rport (").concat(NUM$1, "))?(?: (").concat(REST$1, "))?"));
  class ConnectionLine$1 extends Line$1 {
    constructor(netType, addrType, ipAddr) {
      super();
      this.netType = netType;
      this.addrType = addrType;
      this.ipAddr = ipAddr;
    }
    static fromSdpLine(line) {
      if (!ConnectionLine$1.regex.test(line)) {
        return undefined;
      }
      var tokens = line.match(ConnectionLine$1.regex);
      var netType = tokens[1];
      var addrType = tokens[2];
      var ipAddr = tokens[3];
      return new ConnectionLine$1(netType, addrType, ipAddr);
    }
    toSdpLine() {
      return "c=".concat(this.netType, " ").concat(this.addrType, " ").concat(this.ipAddr);
    }
  }
  ConnectionLine$1.regex = new RegExp("^(".concat(ANY_NON_WS$1, ") (").concat(ANY_NON_WS$1, ") (").concat(ANY_NON_WS$1, ")"));
  class ContentLine$1 extends Line$1 {
    constructor(values) {
      super();
      this.values = values;
    }
    static fromSdpLine(line) {
      if (!ContentLine$1.regex.test(line)) {
        return undefined;
      }
      var tokens = line.match(ContentLine$1.regex);
      var values = tokens[1].split(',');
      return new ContentLine$1(values);
    }
    toSdpLine() {
      return "a=content:".concat(this.values.join(','));
    }
  }
  ContentLine$1.regex = new RegExp("^content:(".concat(REST$1, ")$"));
  class DirectionLine$1 extends Line$1 {
    constructor(direction) {
      super();
      this.direction = direction;
    }
    static fromSdpLine(line) {
      if (!DirectionLine$1.regex.test(line)) {
        return undefined;
      }
      var tokens = line.match(DirectionLine$1.regex);
      var direction = tokens[1];
      return new DirectionLine$1(direction);
    }
    toSdpLine() {
      return "a=".concat(this.direction);
    }
  }
  DirectionLine$1.regex = /^(sendrecv|sendonly|recvonly|inactive)$/;
  var _a$3$1;
  class ExtMapLine$1 extends Line$1 {
    constructor(id, uri, direction, extensionAttributes) {
      super();
      this.id = id;
      this.uri = uri;
      this.direction = direction;
      this.extensionAttributes = extensionAttributes;
    }
    static fromSdpLine(line) {
      if (!ExtMapLine$1.regex.test(line)) {
        return undefined;
      }
      var tokens = line.match(ExtMapLine$1.regex);
      var id = parseInt(tokens[1], 10);
      var direction = tokens[2];
      var uri = tokens[3];
      var extensionAttributes = tokens[4];
      return new ExtMapLine$1(id, uri, direction, extensionAttributes);
    }
    toSdpLine() {
      var str = '';
      str += "a=extmap:".concat(this.id);
      if (this.direction) {
        str += "/".concat(this.direction);
      }
      str += " ".concat(this.uri);
      if (this.extensionAttributes) {
        str += " ".concat(this.extensionAttributes);
      }
      return str;
    }
  }
  _a$3$1 = ExtMapLine$1;
  ExtMapLine$1.EXTMAP_DIRECTION = "sendonly|recvonly|sendrecv|inactive";
  ExtMapLine$1.regex = new RegExp("^extmap:(".concat(NUM$1, ")(?:/(").concat(_a$3$1.EXTMAP_DIRECTION, "))? (").concat(ANY_NON_WS$1, ")(?: (").concat(REST$1, "))?"));
  class FingerprintLine$1 extends Line$1 {
    constructor(fingerprint) {
      super();
      this.fingerprint = fingerprint;
    }
    static fromSdpLine(line) {
      if (!FingerprintLine$1.regex.test(line)) {
        return undefined;
      }
      var tokens = line.match(FingerprintLine$1.regex);
      var fingerprint = tokens[1];
      return new FingerprintLine$1(fingerprint);
    }
    toSdpLine() {
      return "a=fingerprint:".concat(this.fingerprint);
    }
  }
  FingerprintLine$1.regex = new RegExp("^fingerprint:(".concat(REST$1, ")"));
  function parseFmtpParams$1(fmtpParams) {
    fmtpParams = fmtpParams.replace(/^a=fmtp:\d+\x20/, '');
    var fmtpObj = new Map();
    if (/^\d+([/-]\d+)+$/.test(fmtpParams)) {
      fmtpObj.set(fmtpParams, undefined);
      return fmtpObj;
    }
    fmtpParams.split(';').forEach(param => {
      var paramArr = param && param.split('=');
      if (paramArr.length !== 2 || !paramArr[0] || !paramArr[1]) {
        throw new Error("Fmtp params is invalid with ".concat(fmtpParams));
      }
      fmtpObj.set(paramArr[0], paramArr[1]);
    });
    return fmtpObj;
  }
  class FmtpLine$1 extends Line$1 {
    constructor(payloadType, params) {
      super();
      this.payloadType = payloadType;
      this.params = params;
    }
    static fromSdpLine(line) {
      if (!FmtpLine$1.regex.test(line)) {
        return undefined;
      }
      var tokens = line.match(FmtpLine$1.regex);
      var payloadType = parseInt(tokens[1], 10);
      var params = tokens[2];
      return new FmtpLine$1(payloadType, parseFmtpParams$1(params));
    }
    toSdpLine() {
      var fmtParams = Array.from(this.params.keys()).map(key => {
        if (this.params.get(key) !== undefined) {
          return "".concat(key, "=").concat(this.params.get(key));
        }
        return "".concat(key);
      }).join(';');
      return "a=fmtp:".concat(this.payloadType, " ").concat(fmtParams);
    }
  }
  FmtpLine$1.regex = new RegExp("^fmtp:(".concat(NUM$1, ") (").concat(REST$1, ")"));
  class IceOptionsLine$1 extends Line$1 {
    constructor(options) {
      super();
      this.options = options;
    }
    static fromSdpLine(line) {
      if (!IceOptionsLine$1.regex.test(line)) {
        return undefined;
      }
      var tokens = line.match(IceOptionsLine$1.regex);
      var options = tokens[1].split(' ');
      return new IceOptionsLine$1(options);
    }
    toSdpLine() {
      return "a=ice-options:".concat(this.options.join(' '));
    }
  }
  IceOptionsLine$1.regex = new RegExp("^ice-options:(".concat(REST$1, ")$"));
  class IcePwdLine$1 extends Line$1 {
    constructor(pwd) {
      super();
      this.pwd = pwd;
    }
    static fromSdpLine(line) {
      if (!IcePwdLine$1.regex.test(line)) {
        return undefined;
      }
      var tokens = line.match(IcePwdLine$1.regex);
      var pwd = tokens[1];
      return new IcePwdLine$1(pwd);
    }
    toSdpLine() {
      return "a=ice-pwd:".concat(this.pwd);
    }
  }
  IcePwdLine$1.regex = new RegExp("^ice-pwd:(".concat(ANY_NON_WS$1, ")$"));
  class IceUfragLine$1 extends Line$1 {
    constructor(ufrag) {
      super();
      this.ufrag = ufrag;
    }
    static fromSdpLine(line) {
      if (!IceUfragLine$1.regex.test(line)) {
        return undefined;
      }
      var tokens = line.match(IceUfragLine$1.regex);
      var ufrag = tokens[1];
      return new IceUfragLine$1(ufrag);
    }
    toSdpLine() {
      return "a=ice-ufrag:".concat(this.ufrag);
    }
  }
  IceUfragLine$1.regex = new RegExp("^ice-ufrag:(".concat(ANY_NON_WS$1, ")$"));
  class MaxMessageSizeLine$1 extends Line$1 {
    constructor(maxMessageSize) {
      super();
      this.maxMessageSize = maxMessageSize;
    }
    static fromSdpLine(line) {
      if (!MaxMessageSizeLine$1.regex.test(line)) {
        return undefined;
      }
      var tokens = line.match(MaxMessageSizeLine$1.regex);
      var maxMessageSize = parseInt(tokens[1], 10);
      return new MaxMessageSizeLine$1(maxMessageSize);
    }
    toSdpLine() {
      return "a=max-message-size:".concat(this.maxMessageSize);
    }
  }
  MaxMessageSizeLine$1.regex = new RegExp("^max-message-size:(".concat(NUM$1, ")"));
  var _a$2$1;
  class MediaLine$1 extends Line$1 {
    constructor(type, port, protocol, formats) {
      super();
      this.type = type;
      this.port = port;
      this.protocol = protocol;
      this.formats = formats;
    }
    static fromSdpLine(line) {
      if (!MediaLine$1.regex.test(line)) {
        return undefined;
      }
      var tokens = line.match(MediaLine$1.regex);
      var type = tokens[1];
      var port = parseInt(tokens[2], 10);
      var protocol = tokens[3];
      var formats = tokens[4].split(' ');
      return new MediaLine$1(type, port, protocol, formats);
    }
    toSdpLine() {
      return "m=".concat(this.type, " ").concat(this.port, " ").concat(this.protocol, " ").concat(this.formats.join(' '));
    }
  }
  _a$2$1 = MediaLine$1;
  MediaLine$1.MEDIA_TYPE = 'audio|video|application';
  MediaLine$1.regex = new RegExp("^(".concat(_a$2$1.MEDIA_TYPE, ") (").concat(NUM$1, ") (").concat(ANY_NON_WS$1, ") (").concat(REST$1, ")"));
  class MidLine$1 extends Line$1 {
    constructor(mid) {
      super();
      this.mid = mid;
    }
    static fromSdpLine(line) {
      if (!MidLine$1.regex.test(line)) {
        return undefined;
      }
      var tokens = line.match(MidLine$1.regex);
      var mid = tokens[1];
      return new MidLine$1(mid);
    }
    toSdpLine() {
      return "a=mid:".concat(this.mid);
    }
  }
  MidLine$1.regex = new RegExp("^mid:(".concat(ANY_NON_WS$1, ")$"));
  class OriginLine$1 extends Line$1 {
    constructor(username, sessionId, sessionVersion, netType, addrType, ipAddr) {
      super();
      this.username = username;
      this.sessionId = sessionId;
      this.sessionVersion = sessionVersion;
      this.netType = netType;
      this.addrType = addrType;
      this.ipAddr = ipAddr;
    }
    static fromSdpLine(line) {
      if (!OriginLine$1.regex.test(line)) {
        return undefined;
      }
      var tokens = line.match(OriginLine$1.regex);
      var username = tokens[1];
      var sessionId = tokens[2];
      var sessionVersion = parseInt(tokens[3], 10);
      var netType = tokens[4];
      var addrType = tokens[5];
      var ipAddr = tokens[6];
      return new OriginLine$1(username, sessionId, sessionVersion, netType, addrType, ipAddr);
    }
    toSdpLine() {
      return "o=".concat(this.username, " ").concat(this.sessionId, " ").concat(this.sessionVersion, " ").concat(this.netType, " ").concat(this.addrType, " ").concat(this.ipAddr);
    }
  }
  OriginLine$1.regex = new RegExp("^(".concat(ANY_NON_WS$1, ") (").concat(ANY_NON_WS$1, ") (").concat(NUM$1, ") (").concat(ANY_NON_WS$1, ") (").concat(ANY_NON_WS$1, ") (").concat(ANY_NON_WS$1, ")"));
  var _a$1$1;
  class RidLine$1 extends Line$1 {
    constructor(id, direction, params) {
      super();
      this.id = id;
      this.direction = direction;
      this.params = params;
    }
    static fromSdpLine(line) {
      if (!RidLine$1.regex.test(line)) {
        return undefined;
      }
      var tokens = line.match(RidLine$1.regex);
      var id = tokens[1];
      var direction = tokens[2];
      var params = tokens[3];
      return new RidLine$1(id, direction, params);
    }
    toSdpLine() {
      var str = '';
      str += "a=rid:".concat(this.id, " ").concat(this.direction);
      if (this.params) {
        str += " ".concat(this.params);
      }
      return str;
    }
  }
  _a$1$1 = RidLine$1;
  RidLine$1.RID_ID = "[\\w-]+";
  RidLine$1.RID_DIRECTION = "\\bsend\\b|\\brecv\\b";
  RidLine$1.regex = new RegExp("^rid:(".concat(_a$1$1.RID_ID, ") (").concat(_a$1$1.RID_DIRECTION, ")(?:").concat(SP$1, "(").concat(REST$1, "))?"));
  class RtcpMuxLine$1 extends Line$1 {
    static fromSdpLine(line) {
      if (!RtcpMuxLine$1.regex.test(line)) {
        return undefined;
      }
      return new RtcpMuxLine$1();
    }
    toSdpLine() {
      return "a=rtcp-mux";
    }
  }
  RtcpMuxLine$1.regex = /^rtcp-mux$/;
  class RtcpFbLine$1 extends Line$1 {
    constructor(payloadType, feedback) {
      super();
      this.payloadType = payloadType;
      this.feedback = feedback;
    }
    static fromSdpLine(line) {
      if (!RtcpFbLine$1.regex.test(line)) {
        return undefined;
      }
      var tokens = line.match(RtcpFbLine$1.regex);
      var payloadType = parseInt(tokens[1], 10);
      var feedback = tokens[2];
      return new RtcpFbLine$1(payloadType, feedback);
    }
    toSdpLine() {
      return "a=rtcp-fb:".concat(this.payloadType, " ").concat(this.feedback);
    }
  }
  RtcpFbLine$1.regex = new RegExp("^rtcp-fb:(".concat(NUM$1, ") (").concat(REST$1, ")"));
  var _a$7;
  class RtpMapLine$1 extends Line$1 {
    constructor(payloadType, encodingName, clockRate, encodingParams) {
      super();
      this.payloadType = payloadType;
      this.encodingName = encodingName;
      this.clockRate = clockRate;
      this.encodingParams = encodingParams;
    }
    static fromSdpLine(line) {
      if (!RtpMapLine$1.regex.test(line)) {
        return undefined;
      }
      var tokens = line.match(RtpMapLine$1.regex);
      var payloadType = parseInt(tokens[1], 10);
      var encodingName = tokens[2];
      var clockRate = parseInt(tokens[3], 10);
      var encodingParams = tokens[4];
      return new RtpMapLine$1(payloadType, encodingName, clockRate, encodingParams);
    }
    toSdpLine() {
      var str = '';
      str += "a=rtpmap:".concat(this.payloadType, " ").concat(this.encodingName, "/").concat(this.clockRate);
      if (this.encodingParams) {
        str += "/".concat(this.encodingParams);
      }
      return str;
    }
  }
  _a$7 = RtpMapLine$1;
  RtpMapLine$1.NON_SLASH_TOKEN = '[^\\s/]+';
  RtpMapLine$1.regex = new RegExp("^rtpmap:(".concat(NUM$1, ") (").concat(_a$7.NON_SLASH_TOKEN, ")/(").concat(_a$7.NON_SLASH_TOKEN, ")(?:/(").concat(_a$7.NON_SLASH_TOKEN, "))?"));
  class SctpPortLine$1 extends Line$1 {
    constructor(port) {
      super();
      this.port = port;
    }
    static fromSdpLine(line) {
      if (!SctpPortLine$1.regex.test(line)) {
        return undefined;
      }
      var tokens = line.match(SctpPortLine$1.regex);
      var port = parseInt(tokens[1], 10);
      return new SctpPortLine$1(port);
    }
    toSdpLine() {
      return "a=sctp-port:".concat(this.port);
    }
  }
  SctpPortLine$1.regex = new RegExp("^sctp-port:(".concat(NUM$1, ")"));
  class SessionInformationLine$1 extends Line$1 {
    constructor(info) {
      super();
      this.info = info;
    }
    static fromSdpLine(line) {
      if (!SessionInformationLine$1.regex.test(line)) {
        return undefined;
      }
      var tokens = line.match(SessionInformationLine$1.regex);
      var info = tokens[1];
      return new SessionInformationLine$1(info);
    }
    toSdpLine() {
      return "i=".concat(this.info);
    }
  }
  SessionInformationLine$1.regex = new RegExp("(".concat(REST$1, ")"));
  class SessionNameLine$1 extends Line$1 {
    constructor(name) {
      super();
      this.name = name;
    }
    static fromSdpLine(line) {
      if (!SessionNameLine$1.regex.test(line)) {
        return undefined;
      }
      var tokens = line.match(SessionNameLine$1.regex);
      var name = tokens[1];
      return new SessionNameLine$1(name);
    }
    toSdpLine() {
      return "s=".concat(this.name);
    }
  }
  SessionNameLine$1.regex = new RegExp("^(".concat(REST$1, ")"));
  class SetupLine$1 extends Line$1 {
    constructor(setup) {
      super();
      this.setup = setup;
    }
    static fromSdpLine(line) {
      if (!SetupLine$1.regex.test(line)) {
        return undefined;
      }
      var tokens = line.match(SetupLine$1.regex);
      var setup = tokens[1];
      return new SetupLine$1(setup);
    }
    toSdpLine() {
      return "a=setup:".concat(this.setup);
    }
  }
  SetupLine$1.regex = /^setup:(actpass|active|passive)$/;
  class SimulcastLayer$1 {
    constructor(id, paused) {
      this.id = id;
      this.paused = paused;
    }
    toString() {
      return this.paused ? "~".concat(this.id) : this.id;
    }
  }
  class SimulcastLayerList$1 {
    constructor() {
      this.layers = [];
    }
    addLayer(layer) {
      this.layers.push([layer]);
    }
    addLayerWithAlternatives(alternatives) {
      this.layers.push(alternatives);
    }
    get length() {
      return this.layers.length;
    }
    get(index) {
      return this.layers[index];
    }
    static fromString(str) {
      var layerList = new SimulcastLayerList$1();
      var tokens = str.split(';');
      if (tokens.length === 1 && !tokens[0].trim()) {
        throw new Error('simulcast stream list empty');
      }
      tokens.forEach(token => {
        if (!token) {
          throw new Error('simulcast layer list empty');
        }
        var ridTokens = token.split(',');
        var layers = [];
        ridTokens.forEach(ridToken => {
          if (!ridToken || ridToken === '~') {
            throw new Error('rid empty');
          }
          var paused = ridToken[0] === '~';
          var rid = paused ? ridToken.substring(1) : ridToken;
          layers.push(new SimulcastLayer$1(rid, paused));
        });
        layerList.addLayerWithAlternatives(layers);
      });
      return layerList;
    }
    toString() {
      return this.layers.map(altArray => altArray.map(v => v.toString()).join(',')).join(';');
    }
  }
  class SimulcastLine$1 extends Line$1 {
    constructor(sendLayers, recvLayers) {
      super();
      this.sendLayers = sendLayers;
      this.recvLayers = recvLayers;
    }
    static fromSdpLine(line) {
      if (!SimulcastLine$1.regex.test(line)) {
        return undefined;
      }
      var tokens = line.match(SimulcastLine$1.regex);
      var bidirectional = tokens[3] && tokens[4];
      var firstDirection = tokens[1];
      var layerList1 = SimulcastLayerList$1.fromString(tokens[2]);
      var layerList2 = new SimulcastLayerList$1();
      if (bidirectional) {
        var secondDirection = tokens[3];
        if (firstDirection === secondDirection) {
          return undefined;
        }
        layerList2 = SimulcastLayerList$1.fromString(tokens[4]);
      }
      var sendLayerList;
      var recvLayerList;
      if (firstDirection === 'send') {
        sendLayerList = layerList1;
        recvLayerList = layerList2;
      } else {
        sendLayerList = layerList2;
        recvLayerList = layerList1;
      }
      return new SimulcastLine$1(sendLayerList, recvLayerList);
    }
    toSdpLine() {
      var str = 'a=simulcast:';
      if (this.sendLayers.length) {
        str += "send ".concat(this.sendLayers.toString());
        if (this.recvLayers.length) {
          str += " ";
        }
      }
      if (this.recvLayers.length) {
        str += "recv ".concat(this.recvLayers.toString());
      }
      return str;
    }
  }
  SimulcastLine$1.regex = new RegExp("^simulcast:(send|recv) (".concat(ANY_NON_WS$1, ")(?: (send|recv) (").concat(ANY_NON_WS$1, "))?"));
  class SsrcLine$1 extends Line$1 {
    constructor(ssrcId, attribute) {
      var attributeValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
      var attributeData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;
      super();
      this.ssrcId = ssrcId;
      this.attribute = attribute;
      this.attributeValue = attributeValue;
      this.attributeData = attributeData;
    }
    static fromSdpLine(line) {
      if (!SsrcLine$1.regex.test(line)) {
        return undefined;
      }
      var tokens = line.match(SsrcLine$1.regex);
      var ssrcId = parseInt(tokens[1], 10);
      var attribute = tokens[2];
      var attributeValue = tokens[3];
      var attributeData = tokens[4];
      return new SsrcLine$1(ssrcId, attribute, attributeValue, attributeData);
    }
    toSdpLine() {
      var str = "a=ssrc:".concat(this.ssrcId, " ").concat(this.attribute);
      if (this.attributeValue) {
        str += ":".concat(this.attributeValue);
      }
      if (this.attributeData) {
        str += " ".concat(this.attributeData);
      }
      return str;
    }
  }
  SsrcLine$1.regex = new RegExp("^ssrc:(".concat(NUM$1, ") (").concat(SDP_TOKEN$1, ")(?::(").concat(SDP_TOKEN$1, ")?(?: (").concat(ANY_NON_WS$1, "))?)?$"));
  class SsrcGroupLine$1 extends Line$1 {
    constructor(semantics, ssrcs) {
      super();
      this.semantics = semantics;
      this.ssrcs = ssrcs;
    }
    static fromSdpLine(line) {
      if (!SsrcGroupLine$1.regex.test(line)) {
        return undefined;
      }
      var tokens = line.match(SsrcGroupLine$1.regex);
      var semantics = tokens[1];
      var ssrcs = tokens[2].split(' ').map(ssrcStr => parseInt(ssrcStr, 10));
      return new SsrcGroupLine$1(semantics, ssrcs);
    }
    toSdpLine() {
      return "a=ssrc-group:".concat(this.semantics, " ").concat(this.ssrcs.join(' '));
    }
  }
  SsrcGroupLine$1.regex = new RegExp("^ssrc-group:(SIM|FID|FEC) ((?:".concat(NUM$1).concat(SP$1, "*)+)"));
  class TimingLine$1 extends Line$1 {
    constructor(startTime, stopTime) {
      super();
      this.startTime = startTime;
      this.stopTime = stopTime;
    }
    static fromSdpLine(line) {
      if (!TimingLine$1.regex.test(line)) {
        return undefined;
      }
      var tokens = line.match(TimingLine$1.regex);
      var startTime = parseInt(tokens[1], 10);
      var stopTime = parseInt(tokens[2], 10);
      return new TimingLine$1(startTime, stopTime);
    }
    toSdpLine() {
      return "t=".concat(this.startTime, " ").concat(this.stopTime);
    }
  }
  TimingLine$1.regex = new RegExp("^(".concat(NUM$1, ") (").concat(NUM$1, ")"));
  class VersionLine$1 extends Line$1 {
    constructor(version) {
      super();
      this.version = version;
    }
    static fromSdpLine(line) {
      if (!VersionLine$1.regex.test(line)) {
        return undefined;
      }
      var tokens = line.match(VersionLine$1.regex);
      var version = parseInt(tokens[1], 10);
      return new VersionLine$1(version);
    }
    toSdpLine() {
      return "v=".concat(this.version);
    }
  }
  VersionLine$1.regex = new RegExp("^(".concat(NUM$1, ")$"));
  class UnknownLine$1 extends Line$1 {
    constructor(value) {
      super();
      this.value = value;
    }
    static fromSdpLine(line) {
      var tokens = line.match(UnknownLine$1.regex);
      var value = tokens[1];
      return new UnknownLine$1(value);
    }
    toSdpLine() {
      return "".concat(this.value);
    }
  }
  UnknownLine$1.regex = new RegExp("(".concat(REST$1, ")"));
  class IceInfo$1 {
    constructor() {
      this.candidates = [];
    }
    addLine(line) {
      if (line instanceof IceUfragLine$1) {
        this.ufrag = line;
        return true;
      }
      if (line instanceof IcePwdLine$1) {
        this.pwd = line;
        return true;
      }
      if (line instanceof IceOptionsLine$1) {
        this.options = line;
        return true;
      }
      if (line instanceof CandidateLine$1) {
        this.candidates.push(line);
        return true;
      }
      return false;
    }
    toLines() {
      var lines = [];
      if (this.ufrag) {
        lines.push(this.ufrag);
      }
      if (this.pwd) {
        lines.push(this.pwd);
      }
      if (this.options) {
        lines.push(this.options);
      }
      this.candidates.forEach(candidate => lines.push(candidate));
      return lines;
    }
  }
  class MediaDescription$1 {
    constructor(type, port, protocol) {
      this.iceInfo = new IceInfo$1();
      this.otherLines = [];
      this.type = type;
      this.port = port;
      this.protocol = protocol;
    }
    findOtherLine(ty) {
      return this.otherLines.find(line => line instanceof ty);
    }
    addLine(line) {
      if (line instanceof BundleGroupLine$1) {
        throw new Error("Error: bundle group line not allowed in media description");
      }
      if (line instanceof BandwidthLine$1) {
        this.bandwidth = line;
        return true;
      }
      if (line instanceof MidLine$1) {
        this.mid = line.mid;
        return true;
      }
      if (line instanceof FingerprintLine$1) {
        this.fingerprint = line.fingerprint;
        return true;
      }
      if (line instanceof SetupLine$1) {
        this.setup = line.setup;
        return true;
      }
      if (line instanceof ConnectionLine$1) {
        this.connection = line;
        return true;
      }
      if (line instanceof ContentLine$1) {
        this.content = line;
        return true;
      }
      return this.iceInfo.addLine(line);
    }
  }
  class ApplicationMediaDescription$1 extends MediaDescription$1 {
    constructor(mediaLine) {
      super(mediaLine.type, mediaLine.port, mediaLine.protocol);
      this.fmts = [];
      this.fmts = mediaLine.formats;
    }
    toLines() {
      var lines = [];
      lines.push(new MediaLine$1(this.type, this.port, this.protocol, this.fmts));
      if (this.connection) {
        lines.push(this.connection);
      }
      if (this.bandwidth) {
        lines.push(this.bandwidth);
      }
      lines.push(...this.iceInfo.toLines());
      if (this.fingerprint) {
        lines.push(new FingerprintLine$1(this.fingerprint));
      }
      if (this.setup) {
        lines.push(new SetupLine$1(this.setup));
      }
      if (this.mid) {
        lines.push(new MidLine$1(this.mid));
      }
      if (this.content) {
        lines.push(this.content);
      }
      if (this.sctpPort) {
        lines.push(new SctpPortLine$1(this.sctpPort));
      }
      if (this.maxMessageSize) {
        lines.push(new MaxMessageSizeLine$1(this.maxMessageSize));
      }
      lines.push(...this.otherLines);
      return lines;
    }
    addLine(line) {
      if (super.addLine(line)) {
        return true;
      }
      if (line instanceof MediaLine$1) {
        throw new Error('Error: tried passing a MediaLine to an existing MediaInfo');
      }
      if (line instanceof SctpPortLine$1) {
        this.sctpPort = line.port;
        return true;
      }
      if (line instanceof MaxMessageSizeLine$1) {
        this.maxMessageSize = line.maxMessageSize;
        return true;
      }
      this.otherLines.push(line);
      return true;
    }
  }
  class CodecInfo$2 {
    constructor(pt) {
      this.fmtParams = new Map();
      this.feedback = [];
      this.pt = pt;
    }
    addLine(line) {
      if (line instanceof RtpMapLine$1) {
        this.name = line.encodingName;
        this.clockRate = line.clockRate;
        this.encodingParams = line.encodingParams;
        return true;
      }
      if (line instanceof FmtpLine$1) {
        this.fmtParams = new Map([...Array.from(this.fmtParams.entries()), ...Array.from(line.params.entries())]);
        if (line.params.has('apt')) {
          var apt = line.params.get('apt');
          this.primaryCodecPt = parseInt(apt, 10);
        }
        return true;
      }
      if (line instanceof RtcpFbLine$1) {
        this.feedback.push(line.feedback);
        return true;
      }
      return false;
    }
    toLines() {
      var lines = [];
      if (this.name && this.clockRate) {
        lines.push(new RtpMapLine$1(this.pt, this.name, this.clockRate, this.encodingParams));
      }
      this.feedback.forEach(fb => {
        lines.push(new RtcpFbLine$1(this.pt, fb));
      });
      if (this.fmtParams.size > 0) {
        lines.push(new FmtpLine$1(this.pt, this.fmtParams));
      }
      return lines;
    }
  }
  class AvMediaDescription$1 extends MediaDescription$1 {
    constructor(mediaLine) {
      super(mediaLine.type, mediaLine.port, mediaLine.protocol);
      this.pts = [];
      this.extMaps = [];
      this.rids = [];
      this.codecs = new Map();
      this.rtcpMux = false;
      this.ssrcs = [];
      this.ssrcGroups = [];
      this.pts = mediaLine.formats.map(fmt => {
        return parseInt(fmt, 10);
      });
      this.pts.forEach(pt => this.codecs.set(pt, new CodecInfo$2(pt)));
    }
    toLines() {
      var lines = [];
      lines.push(new MediaLine$1(this.type, this.port, this.protocol, this.pts.map(pt => "".concat(pt))));
      if (this.connection) {
        lines.push(this.connection);
      }
      if (this.bandwidth) {
        lines.push(this.bandwidth);
      }
      lines.push(...this.iceInfo.toLines());
      if (this.fingerprint) {
        lines.push(new FingerprintLine$1(this.fingerprint));
      }
      if (this.setup) {
        lines.push(new SetupLine$1(this.setup));
      }
      if (this.mid) {
        lines.push(new MidLine$1(this.mid));
      }
      if (this.rtcpMux) {
        lines.push(new RtcpMuxLine$1());
      }
      if (this.content) {
        lines.push(this.content);
      }
      this.extMaps.forEach(extMap => lines.push(extMap));
      this.rids.forEach(rid => lines.push(rid));
      if (this.simulcast) {
        lines.push(this.simulcast);
      }
      if (this.direction) {
        lines.push(new DirectionLine$1(this.direction));
      }
      this.codecs.forEach(codec => lines.push(...codec.toLines()));
      lines.push(...this.ssrcs);
      lines.push(...this.ssrcGroups);
      lines.push(...this.otherLines);
      return lines;
    }
    addLine(line) {
      if (super.addLine(line)) {
        return true;
      }
      if (line instanceof MediaLine$1) {
        throw new Error('Error: tried passing a MediaLine to an existing MediaInfo');
      }
      if (line instanceof DirectionLine$1) {
        this.direction = line.direction;
        return true;
      }
      if (line instanceof ExtMapLine$1) {
        this.extMaps.push(line);
        return true;
      }
      if (line instanceof RidLine$1) {
        this.rids.push(line);
        return true;
      }
      if (line instanceof RtcpMuxLine$1) {
        this.rtcpMux = true;
        return true;
      }
      if (line instanceof SimulcastLine$1) {
        this.simulcast = line;
        return true;
      }
      if (line instanceof RtpMapLine$1 || line instanceof FmtpLine$1 || line instanceof RtcpFbLine$1) {
        var codec = this.codecs.get(line.payloadType);
        if (!codec) {
          throw new Error("Error: got line for unknown codec: ".concat(line.toSdpLine()));
        }
        codec.addLine(line);
        return true;
      }
      if (line instanceof SsrcLine$1) {
        this.ssrcs.push(line);
        return true;
      }
      if (line instanceof SsrcGroupLine$1) {
        this.ssrcGroups.push(line);
        return true;
      }
      this.otherLines.push(line);
      return true;
    }
    getCodecByPt(pt) {
      return this.codecs.get(pt);
    }
    removePt(pt) {
      var associatedPts = [...this.codecs.values()].filter(ci => ci.primaryCodecPt === pt).map(ci => ci.pt);
      var allPtsToRemove = [pt, ...associatedPts];
      allPtsToRemove.forEach(ptToRemove => {
        this.codecs.delete(ptToRemove);
      });
      this.pts = this.pts.filter(existingPt => allPtsToRemove.indexOf(existingPt) === -1);
    }
  }
  class SessionDescription$1 {
    constructor() {
      this.groups = [];
      this.otherLines = [];
    }
    addLine(line) {
      if (line instanceof VersionLine$1) {
        this.version = line;
        return true;
      }
      if (line instanceof OriginLine$1) {
        this.origin = line;
        return true;
      }
      if (line instanceof SessionNameLine$1) {
        this.sessionName = line;
        return true;
      }
      if (line instanceof SessionInformationLine$1) {
        this.information = line;
        return true;
      }
      if (line instanceof TimingLine$1) {
        this.timing = line;
        return true;
      }
      if (line instanceof ConnectionLine$1) {
        this.connection = line;
        return true;
      }
      if (line instanceof BandwidthLine$1) {
        this.bandwidth = line;
        return true;
      }
      if (line instanceof BundleGroupLine$1) {
        this.groups.push(line);
        return true;
      }
      this.otherLines.push(line);
      return true;
    }
    toLines() {
      var lines = [];
      if (this.version) {
        lines.push(this.version);
      }
      if (this.origin) {
        lines.push(this.origin);
      }
      if (this.sessionName) {
        lines.push(this.sessionName);
      }
      if (this.information) {
        lines.push(this.information);
      }
      if (this.connection) {
        lines.push(this.connection);
      }
      if (this.bandwidth) {
        lines.push(this.bandwidth);
      }
      if (this.timing) {
        lines.push(this.timing);
      }
      if (this.groups) {
        lines.push(...this.groups);
      }
      lines.push(...this.otherLines);
      return lines;
    }
  }
  class Sdp$1 {
    constructor() {
      this.session = new SessionDescription$1();
      this.media = [];
    }
    get avMedia() {
      return this.media.filter(mi => mi instanceof AvMediaDescription$1);
    }
    toString() {
      var lines = [];
      lines.push(...this.session.toLines());
      this.media.forEach(m => lines.push(...m.toLines()));
      return "".concat(lines.map(l => l.toSdpLine()).join('\r\n'), "\r\n");
    }
  }
  class Grammar$1 {
    constructor() {
      this.parsers = new Map();
    }
    addParser(lineType, parser) {
      var parsers = this.parsers.get(lineType) || [];
      parsers.push(parser);
      this.parsers.set(lineType, parsers);
    }
    getParsers(lineType) {
      return this.parsers.get(lineType) || [];
    }
  }
  class SdpGrammar$1 extends Grammar$1 {
    constructor() {
      super();
      this.addParser('v', VersionLine$1.fromSdpLine);
      this.addParser('o', OriginLine$1.fromSdpLine);
      this.addParser('c', ConnectionLine$1.fromSdpLine);
      this.addParser('i', SessionInformationLine$1.fromSdpLine);
      this.addParser('m', MediaLine$1.fromSdpLine);
      this.addParser('s', SessionNameLine$1.fromSdpLine);
      this.addParser('t', TimingLine$1.fromSdpLine);
      this.addParser('b', BandwidthLine$1.fromSdpLine);
      this.addParser('a', RtpMapLine$1.fromSdpLine);
      this.addParser('a', RtcpFbLine$1.fromSdpLine);
      this.addParser('a', FmtpLine$1.fromSdpLine);
      this.addParser('a', DirectionLine$1.fromSdpLine);
      this.addParser('a', ExtMapLine$1.fromSdpLine);
      this.addParser('a', MidLine$1.fromSdpLine);
      this.addParser('a', IceUfragLine$1.fromSdpLine);
      this.addParser('a', IcePwdLine$1.fromSdpLine);
      this.addParser('a', IceOptionsLine$1.fromSdpLine);
      this.addParser('a', FingerprintLine$1.fromSdpLine);
      this.addParser('a', SetupLine$1.fromSdpLine);
      this.addParser('a', SctpPortLine$1.fromSdpLine);
      this.addParser('a', MaxMessageSizeLine$1.fromSdpLine);
      this.addParser('a', RtcpMuxLine$1.fromSdpLine);
      this.addParser('a', BundleGroupLine$1.fromSdpLine);
      this.addParser('a', ContentLine$1.fromSdpLine);
      this.addParser('a', RidLine$1.fromSdpLine);
      this.addParser('a', CandidateLine$1.fromSdpLine);
      this.addParser('a', SimulcastLine$1.fromSdpLine);
      this.addParser('a', SsrcLine$1.fromSdpLine);
      this.addParser('a', SsrcGroupLine$1.fromSdpLine);
    }
  }
  var DefaultSdpGrammar$1 = new SdpGrammar$1();
  function isValidLine$1(line) {
    return line.length > 2;
  }
  function parseToModel$1(lines) {
    var sdp = new Sdp$1();
    var currBlock = sdp.session;
    lines.forEach(l => {
      if (l instanceof MediaLine$1) {
        var mediaInfo;
        if (l.type === 'audio' || l.type === 'video') {
          mediaInfo = new AvMediaDescription$1(l);
        } else if (l.type === 'application') {
          mediaInfo = new ApplicationMediaDescription$1(l);
        } else {
          throw new Error("Unhandled media type: ".concat(l.type));
        }
        sdp.media.push(mediaInfo);
        currBlock = mediaInfo;
      } else {
        currBlock.addLine(l);
      }
    });
    return sdp;
  }
  function parseToLines$1(sdp, grammar) {
    var lines = [];
    sdp.split(/(\r\n|\r|\n)/).filter(isValidLine$1).forEach(l => {
      var lineType = l[0];
      var lineValue = l.slice(2);
      var parsers = grammar.getParsers(lineType);
      for (var parser of parsers) {
        var _result = parser(lineValue);
        if (_result) {
          lines.push(_result);
          return;
        }
      }
      var result = UnknownLine$1.fromSdpLine(l);
      lines.push(result);
    });
    return lines;
  }
  function parse$2(sdp) {
    var grammar = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DefaultSdpGrammar$1;
    var lines = parseToLines$1(sdp, grammar);
    var parsed = parseToModel$1(lines);
    return parsed;
  }

  function getLocalTrackInfo(kind, receive, localTrack) {
    var direction = (() => {
      var send = !!localTrack;
      if (send && receive) return 'sendrecv';
      if (send && !receive) return 'sendonly';
      if (!send && receive) return 'recvonly';
      return 'inactive';
    })();
    return {
      trackOrKind: localTrack || kind,
      direction
    };
  }
  function hasH264Codec(mediaLine) {
    for (var codec of mediaLine.codecs.values()) {
      var _codec$name;
      if (((_codec$name = codec.name) === null || _codec$name === void 0 ? void 0 : _codec$name.toUpperCase()) === 'H264') {
        return true;
      }
    }
    return false;
  }
  function checkSdpForErrors(options, sdp) {
    if (!sdp) {
      return new Error('SDP is missing');
    }
    var parsedSdp = parse$2(sdp);
    for (var mediaLine of parsedSdp.avMedia) {
      if (!mediaLine.iceInfo.candidates.length) {
        return new IceGatheringError("ice candidates missing for m-line with mid=".concat(mediaLine.mid));
      }
      if (!options.allowPort0 && mediaLine.port === 0) {
        return new SdpError("Found invalid port number 0 at m-line with mid=".concat(mediaLine.mid));
      }
      if (!mediaLine.iceInfo.pwd || !mediaLine.iceInfo.ufrag) {
        return new IceGatheringError("ice ufrag and password not found for m-line with mid=".concat(mediaLine.mid));
      }
      if (options.requireH264 && mediaLine.type === 'video' && !hasH264Codec(mediaLine)) {
        return new SdpError("H264 codec is missing for video media description with mid=".concat(mediaLine.mid));
      }
    }
    return false;
  }
  function convertCLineToIPv4(sdp) {
    var convertConnectionProp = connection => {
      if ((connection === null || connection === void 0 ? void 0 : connection.addrType) === 'IP6') {
        connection.addrType = 'IP4';
        connection.ipAddr = '0.0.0.0';
      }
    };
    convertConnectionProp(sdp.session.connection);
    sdp.media.forEach(media => {
      convertConnectionProp(media.connection);
    });
  }
  function convertPort9to0(sdp) {
    sdp.media.forEach(media => {
      if (media.port === 9) {
        media.port = 0;
      }
    });
  }
  function setContentSlides(sdp) {
    var videoMediaDescriptions = sdp.avMedia.filter(media => media.type === 'video');
    if (videoMediaDescriptions.length === 2) {
      videoMediaDescriptions[1].addLine(new ContentLine$1(['slides']));
    }
  }
  class AnyLine extends Line$1 {
    constructor(value) {
      super();
      _defineProperty(this, "value", void 0);
      this.value = value;
    }
    static fromSdpLine() {
      return undefined;
    }
    toSdpLine() {
      return "a=".concat(this.value);
    }
  }
  function addBandwidthLimits(sdp, limits) {
    sdp.avMedia.forEach(media => {
      if (media.type === 'audio') {
        media.addLine(new BandwidthLine$1('TIAS', limits.audio));
      } else if (media.type === 'video') {
        media.addLine(new BandwidthLine$1('TIAS', limits.video));
      }
    });
  }
  function addPeriodicKeyframes(sdp, value) {
    sdp.avMedia.forEach(media => {
      if (media.type === 'video') {
        media.addLine(new AnyLine("periodic-keyframes:".concat(value)));
      }
    });
  }
  function disableExtmap(sdp) {
    sdp.avMedia.forEach(media => {
      media.extMaps.length = 0;
    });
  }
  function updateH264fmtpParams(sdp, paramsToUpdate) {
    sdp.avMedia.forEach(media => {
      if (media.type === 'video') {
        media.codecs.forEach(codec => {
          var _codec$name2;
          if (((_codec$name2 = codec.name) === null || _codec$name2 === void 0 ? void 0 : _codec$name2.toUpperCase()) === 'H264') {
            paramsToUpdate.forEach((value, key) => codec.fmtParams.set(key, value));
          }
        });
      }
    });
  }
  function adjustH264Profile(sdp, maxFsValue) {
    var maxFsForProfileLevel = {
      10: 99,
      11: 396,
      12: 396,
      13: 396,
      20: 396,
      21: 792,
      22: 1620,
      30: 1620,
      31: 3600,
      32: 5120,
      40: 8192,
      41: 8192,
      42: 8704,
      50: 22080,
      51: 36864,
      52: 36864,
      60: 139264,
      61: 139264,
      62: 139264
    };
    var framesPerSecond = 30;
    sdp.avMedia.forEach(media => {
      if (media.type === 'video') {
        media.codecs.forEach(codec => {
          var _codec$name3;
          if (((_codec$name3 = codec.name) === null || _codec$name3 === void 0 ? void 0 : _codec$name3.toUpperCase()) === 'H264') {
            var profileLevelIdValue = codec.fmtParams.get('profile-level-id');
            if (profileLevelIdValue) {
              var profile = profileLevelIdValue.substring(0, 4).toLowerCase();
              var levelId = parseInt(profileLevelIdValue.substring(4, 6), 16);
              if (!maxFsForProfileLevel[levelId]) {
                throw new Error("found unsupported h264 profile level id value in the SDP: ".concat(levelId));
              }
              if (maxFsForProfileLevel[levelId] === maxFsValue) {
                return;
              }
              if (maxFsForProfileLevel[levelId] < maxFsValue) {
                codec.fmtParams.set('max-fs', "".concat(maxFsValue));
                codec.fmtParams.set('max-mbps', "".concat(maxFsValue * framesPerSecond));
                return;
              }
              var newLevelId = Object.keys(maxFsForProfileLevel).reverse().find(key => maxFsForProfileLevel[key] === maxFsValue);
              if (newLevelId) {
                var newLevelIdHex = parseInt(newLevelId, 10).toString(16);
                codec.fmtParams.set('profile-level-id', "".concat(profile).concat(newLevelIdHex));
                codec.fmtParams.set('max-mbps', "".concat(maxFsValue * framesPerSecond));
                return;
              }
              throw new Error("unsupported maxFsValue: ".concat(maxFsValue));
            }
          }
        });
      }
    });
  }
  function disableRtx(sdp) {
    sdp.avMedia.forEach(media => {
      var payloadTypesToRemove = [];
      media.codecs.forEach((codec, codecPt) => {
        if (codec.name === 'rtx' && codec.primaryCodecPt) {
          payloadTypesToRemove.push(codecPt);
        }
      });
      payloadTypesToRemove.forEach(pt => media.codecs.delete(pt));
      media.pts = media.pts.filter(pt => !payloadTypesToRemove.includes(pt));
    });
  }
  function mungeLocalSdpForBrowser(config, sdp) {
    var parsedSdp = parse$2(sdp);
    if (config.disableRtx) {
      disableRtx(parsedSdp);
    }
    return parsedSdp.toString();
  }
  function mungeLocalSdp(config, sdp) {
    var parsedSdp = parse$2(sdp);
    if (config.convertCLineToIPv4) {
      convertCLineToIPv4(parsedSdp);
    }
    if (config.bandwidthLimits) {
      addBandwidthLimits(parsedSdp, config.bandwidthLimits);
    }
    if (config.periodicKeyframes) {
      addPeriodicKeyframes(parsedSdp, config.periodicKeyframes);
    }
    if (config.convertPort9to0) {
      convertPort9to0(parsedSdp);
    }
    if (config.addContentSlides) {
      setContentSlides(parsedSdp);
    }
    if (config.disableExtmap) {
      disableExtmap(parsedSdp);
    }
    if (config.h264MaxFs) {
      adjustH264Profile(parsedSdp, config.h264MaxFs);
    }
    return parsedSdp.toString();
  }
  function setStartBitrate(sdp, startBitrate) {
    updateH264fmtpParams(sdp, new Map([['x-google-start-bitrate', startBitrate.toString()]]));
  }
  function removeXtlsIceCandidates(sdp) {
    sdp.media.forEach(media => {
      media.iceInfo.candidates = media.iceInfo.candidates.filter(candidate => candidate.transport.toLowerCase() !== 'xtls');
    });
  }
  function mungeRemoteSdp(config, sdp) {
    var parsedSdp = parse$2(sdp);
    if (config.startBitrate) {
      setStartBitrate(parsedSdp, config.startBitrate);
    }
    if (config.disableExtmap) {
      disableExtmap(parsedSdp);
    }
    removeXtlsIceCandidates(parsedSdp);
    return parsedSdp.toString();
  }

  function _mergeNamespaces$1$1(n, m) {
    m.forEach(function (e) {
      e && typeof e !== 'string' && !Array.isArray(e) && Object.keys(e).forEach(function (k) {
        if (k !== 'default' && !(k in n)) {
          var d = Object.getOwnPropertyDescriptor(e, k);
          Object.defineProperty(n, k, d.get ? d : {
            enumerable: true,
            get: function get() {
              return e[k];
            }
          });
        }
      });
    });
    return Object.freeze(n);
  }

  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation.

  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */

  function __awaiter$1$1(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function (resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function (resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  }
  var commonjsGlobal$2 = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global$1 !== 'undefined' ? global$1 : typeof self !== 'undefined' ? self : {};
  var logger$1$1 = {
    exports: {}
  };

  /*!
   * js-logger - http://github.com/jonnyreeves/js-logger
   * Jonny Reeves, http://jonnyreeves.co.uk/
   * js-logger may be freely distributed under the MIT license.
   */

  (function (module) {
    (function (global) {
      // Top level module for the global, static logger instance.
      var Logger = {};

      // For those that are at home that are keeping score.
      Logger.VERSION = "1.6.1";

      // Function which handles all incoming log messages.
      var logHandler;

      // Map of ContextualLogger instances by name; used by Logger.get() to return the same named instance.
      var contextualLoggersByNameMap = {};

      // Polyfill for ES5's Function.bind.
      var bind = function bind(scope, func) {
        return function () {
          return func.apply(scope, arguments);
        };
      };

      // Super exciting object merger-matron 9000 adding another 100 bytes to your download.
      var merge = function merge() {
        var args = arguments,
          target = args[0],
          key,
          i;
        for (i = 1; i < args.length; i++) {
          for (key in args[i]) {
            if (!(key in target) && args[i].hasOwnProperty(key)) {
              target[key] = args[i][key];
            }
          }
        }
        return target;
      };

      // Helper to define a logging level object; helps with optimisation.
      var defineLogLevel = function defineLogLevel(value, name) {
        return {
          value: value,
          name: name
        };
      };

      // Predefined logging levels.
      Logger.TRACE = defineLogLevel(1, 'TRACE');
      Logger.DEBUG = defineLogLevel(2, 'DEBUG');
      Logger.INFO = defineLogLevel(3, 'INFO');
      Logger.TIME = defineLogLevel(4, 'TIME');
      Logger.WARN = defineLogLevel(5, 'WARN');
      Logger.ERROR = defineLogLevel(8, 'ERROR');
      Logger.OFF = defineLogLevel(99, 'OFF');

      // Inner class which performs the bulk of the work; ContextualLogger instances can be configured independently
      // of each other.
      var ContextualLogger = function ContextualLogger(defaultContext) {
        this.context = defaultContext;
        this.setLevel(defaultContext.filterLevel);
        this.log = this.info; // Convenience alias.
      };

      ContextualLogger.prototype = {
        // Changes the current logging level for the logging instance.
        setLevel: function setLevel(newLevel) {
          // Ensure the supplied Level object looks valid.
          if (newLevel && "value" in newLevel) {
            this.context.filterLevel = newLevel;
          }
        },
        // Gets the current logging level for the logging instance
        getLevel: function getLevel() {
          return this.context.filterLevel;
        },
        // Is the logger configured to output messages at the supplied level?
        enabledFor: function enabledFor(lvl) {
          var filterLevel = this.context.filterLevel;
          return lvl.value >= filterLevel.value;
        },
        trace: function trace() {
          this.invoke(Logger.TRACE, arguments);
        },
        debug: function debug() {
          this.invoke(Logger.DEBUG, arguments);
        },
        info: function info() {
          this.invoke(Logger.INFO, arguments);
        },
        warn: function warn() {
          this.invoke(Logger.WARN, arguments);
        },
        error: function error() {
          this.invoke(Logger.ERROR, arguments);
        },
        time: function time(label) {
          if (typeof label === 'string' && label.length > 0) {
            this.invoke(Logger.TIME, [label, 'start']);
          }
        },
        timeEnd: function timeEnd(label) {
          if (typeof label === 'string' && label.length > 0) {
            this.invoke(Logger.TIME, [label, 'end']);
          }
        },
        // Invokes the logger callback if it's not being filtered.
        invoke: function invoke(level, msgArgs) {
          if (logHandler && this.enabledFor(level)) {
            logHandler(msgArgs, merge({
              level: level
            }, this.context));
          }
        }
      };

      // Protected instance which all calls to the to level `Logger` module will be routed through.
      var globalLogger = new ContextualLogger({
        filterLevel: Logger.OFF
      });

      // Configure the global Logger instance.
      (function () {
        // Shortcut for optimisers.
        var L = Logger;
        L.enabledFor = bind(globalLogger, globalLogger.enabledFor);
        L.trace = bind(globalLogger, globalLogger.trace);
        L.debug = bind(globalLogger, globalLogger.debug);
        L.time = bind(globalLogger, globalLogger.time);
        L.timeEnd = bind(globalLogger, globalLogger.timeEnd);
        L.info = bind(globalLogger, globalLogger.info);
        L.warn = bind(globalLogger, globalLogger.warn);
        L.error = bind(globalLogger, globalLogger.error);

        // Don't forget the convenience alias!
        L.log = L.info;
      })();

      // Set the global logging handler.  The supplied function should expect two arguments, the first being an arguments
      // object with the supplied log messages and the second being a context object which contains a hash of stateful
      // parameters which the logging function can consume.
      Logger.setHandler = function (func) {
        logHandler = func;
      };

      // Sets the global logging filter level which applies to *all* previously registered, and future Logger instances.
      // (note that named loggers (retrieved via `Logger.get`) can be configured independently if required).
      Logger.setLevel = function (level) {
        // Set the globalLogger's level.
        globalLogger.setLevel(level);

        // Apply this level to all registered contextual loggers.
        for (var key in contextualLoggersByNameMap) {
          if (contextualLoggersByNameMap.hasOwnProperty(key)) {
            contextualLoggersByNameMap[key].setLevel(level);
          }
        }
      };

      // Gets the global logging filter level
      Logger.getLevel = function () {
        return globalLogger.getLevel();
      };

      // Retrieve a ContextualLogger instance.  Note that named loggers automatically inherit the global logger's level,
      // default context and log handler.
      Logger.get = function (name) {
        // All logger instances are cached so they can be configured ahead of use.
        return contextualLoggersByNameMap[name] || (contextualLoggersByNameMap[name] = new ContextualLogger(merge({
          name: name
        }, globalLogger.context)));
      };

      // CreateDefaultHandler returns a handler function which can be passed to `Logger.setHandler()` which will
      // write to the window's console object (if present); the optional options object can be used to customise the
      // formatter used to format each log message.
      Logger.createDefaultHandler = function (options) {
        options = options || {};
        options.formatter = options.formatter || function defaultMessageFormatter(messages, context) {
          // Prepend the logger's name to the log message for easy identification.
          if (context.name) {
            messages.unshift("[" + context.name + "]");
          }
        };

        // Map of timestamps by timer labels used to track `#time` and `#timeEnd()` invocations in environments
        // that don't offer a native console method.
        var timerStartTimeByLabelMap = {};

        // Support for IE8+ (and other, slightly more sane environments)
        var invokeConsoleMethod = function invokeConsoleMethod(hdlr, messages) {
          Function.prototype.apply.call(hdlr, console, messages);
        };

        // Check for the presence of a logger.
        if (typeof console === "undefined") {
          return function () {/* no console */};
        }
        return function (messages, context) {
          // Convert arguments object to Array.
          messages = Array.prototype.slice.call(messages);
          var hdlr = console.log;
          var timerLabel;
          if (context.level === Logger.TIME) {
            timerLabel = (context.name ? '[' + context.name + '] ' : '') + messages[0];
            if (messages[1] === 'start') {
              if (console.time) {
                console.time(timerLabel);
              } else {
                timerStartTimeByLabelMap[timerLabel] = new Date().getTime();
              }
            } else {
              if (console.timeEnd) {
                console.timeEnd(timerLabel);
              } else {
                invokeConsoleMethod(hdlr, [timerLabel + ': ' + (new Date().getTime() - timerStartTimeByLabelMap[timerLabel]) + 'ms']);
              }
            }
          } else {
            // Delegate through to custom warn/error loggers if present on the console.
            if (context.level === Logger.WARN && console.warn) {
              hdlr = console.warn;
            } else if (context.level === Logger.ERROR && console.error) {
              hdlr = console.error;
            } else if (context.level === Logger.INFO && console.info) {
              hdlr = console.info;
            } else if (context.level === Logger.DEBUG && console.debug) {
              hdlr = console.debug;
            } else if (context.level === Logger.TRACE && console.trace) {
              hdlr = console.trace;
            }
            options.formatter(messages, context);
            invokeConsoleMethod(hdlr, messages);
          }
        };
      };

      // Configure and example a Default implementation which writes to the `window.console` (if present).  The
      // `options` hash can be used to configure the default logLevel and provide a custom message formatter.
      Logger.useDefaults = function (options) {
        Logger.setLevel(options && options.defaultLevel || Logger.DEBUG);
        Logger.setHandler(Logger.createDefaultHandler(options));
      };

      // Createa an alias to useDefaults to avoid reaking a react-hooks rule.
      Logger.setDefaults = Logger.useDefaults;

      // Export to popular environments boilerplate.
      if (module.exports) {
        module.exports = Logger;
      } else {
        Logger._prevLogger = global.Logger;
        Logger.noConflict = function () {
          global.Logger = Logger._prevLogger;
          return Logger;
        };
        global.Logger = Logger;
      }
    })(commonjsGlobal$2);
  })(logger$1$1);
  var Logger$2 = logger$1$1.exports;
  var DEFAULT_LOGGER_NAME$1 = 'webrtc-core';
  var logger$3 = Logger$2.get(DEFAULT_LOGGER_NAME$1);
  // Set log level to debug by default.
  logger$3.setLevel(Logger$2.DEBUG);
  var DeviceKind;
  (function (DeviceKind) {
    DeviceKind["AudioInput"] = "audioinput";
    DeviceKind["AudioOutput"] = "audiooutput";
    DeviceKind["VideoInput"] = "videoinput";
  })(DeviceKind || (DeviceKind = {}));
  /**
   * Prompts the user for permission to use a media input which produces a MediaStream with tracks
   * containing the requested types of media.
   *
   * @param constraints - A MediaStreamConstraints object specifying the types of media to request,
   *     along with any requirements for each type.
   * @returns A Promise whose fulfillment handler receives a MediaStream object when the requested
   *     media has successfully been obtained.
   */
  function getUserMedia(constraints) {
    return __awaiter$1$1(this, void 0, void 0, function* () {
      return navigator.mediaDevices.getUserMedia(constraints);
    });
  }
  /**
   * Prompts the user for permission to use a user's display media and audio. If a video track is
   * absent from the constraints argument, one will still be provided.
   *
   * @param constraints - A MediaStreamConstraints object specifying the types of media to request,
   *     along with any requirements for each type.
   * @returns A Promise whose fulfillment handler receives a MediaStream object when the requested
   *     media has successfully been obtained.
   */
  function getDisplayMedia(constraints) {
    return navigator.mediaDevices.getDisplayMedia(constraints);
  }
  /**
   * Requests a list of the available media input and output devices, such as microphones, cameras,
   * headsets, and so forth.
   *
   * @returns A Promise that receives an array of MediaDeviceInfo objects when the promise is
   *     fulfilled.
   */
  function enumerateDevices() {
    return __awaiter$1$1(this, void 0, void 0, function* () {
      return navigator.mediaDevices.enumerateDevices();
    });
  }
  /**
   * Adds the callback handler to be notified of a media device change (for example, a headset is
   * unplugged from the user's computer).
   *
   * @param handler - The callback function to execute.
   */
  function setOnDeviceChangeHandler$1(handler) {
    navigator.mediaDevices.ondevicechange = handler;
  }
  /**
   * Checks permissions using the navigator's permissions api.
   *
   * @param deviceKinds - Array of DeviceKind items.
   * @throws An error if camera or microphone aren't available options for query() (Firefox), or if
   *    navigator.permissions is undefined (Safari and others).
   * @returns Array of Permission Status objects.
   */
  function checkNavigatorPermissions(deviceKinds) {
    return __awaiter$1$1(this, void 0, void 0, function* () {
      var permissionRequests = [];
      if (deviceKinds.includes(DeviceKind.VideoInput)) {
        permissionRequests.push(navigator.permissions.query({
          name: 'camera'
        }));
      }
      if (deviceKinds.includes(DeviceKind.AudioInput)) {
        permissionRequests.push(navigator.permissions.query({
          name: 'microphone'
        }));
      }
      return Promise.all(permissionRequests);
    });
  }
  /**
   * Check to see if the user has granted the application permission to use their devices.
   *
   * @param deviceKinds - Array of DeviceKind items.
   * @returns True if device permissions exist, false if otherwise.
   */
  function checkDevicePermissions(deviceKinds) {
    return __awaiter$1$1(this, void 0, void 0, function* () {
      try {
        var permissions = yield checkNavigatorPermissions(deviceKinds);
        if (permissions.every(permission => permission.state === 'granted')) {
          return true;
        }
        // eslint-disable-next-line no-empty
      } catch (e) {}
      try {
        var devices = yield enumerateDevices();
        // If permissions are granted, the MediaDeviceInfo objects will have labels.
        return devices.filter(device => deviceKinds.includes(device.kind)).every(device => device.label);
        // eslint-disable-next-line no-empty
      } catch (e) {}
      return false;
    });
  }
  /**
   * Ensures that the user has granted permissions to the microphone and camera.
   *
   * @param deviceKinds - Array of DeviceKind items.
   * @param callback - Function that will be executed while device permissions are granted. After this
   *    returns, permissions (for example device labels in Firefox) may not be available anymore.
   * @returns The callback's response.
   */
  function ensureDevicePermissions(deviceKinds, callback) {
    return __awaiter$1$1(this, void 0, void 0, function* () {
      try {
        var hasDevicePermissions = yield checkDevicePermissions(deviceKinds);
        if (!hasDevicePermissions) {
          var stream = yield getUserMedia({
            audio: deviceKinds.includes(DeviceKind.AudioInput),
            video: deviceKinds.includes(DeviceKind.VideoInput)
          });
          // Callback is here to call a function while an active capture exists, so that the browser
          // (Firefox) will allow the user to access device information.
          var callbackRes = yield callback();
          // Stop tracks in the stream so the browser (Safari) will know that there is not an active
          // stream running.
          stream.getTracks().forEach(track => track.stop());
          return callbackRes;
        }
        return callback();
      } catch (e) {
        logger$3.error(e);
        throw new Error('Failed to ensure device permissions.');
      }
    });
  }
  var media = /*#__PURE__*/Object.freeze({
    __proto__: null,
    get DeviceKind() {
      return DeviceKind;
    },
    getUserMedia: getUserMedia,
    getDisplayMedia: getDisplayMedia,
    enumerateDevices: enumerateDevices,
    setOnDeviceChangeHandler: setOnDeviceChangeHandler$1,
    checkDevicePermissions: checkDevicePermissions,
    ensureDevicePermissions: ensureDevicePermissions
  });
  var events$1 = {
    exports: {}
  };
  var R$1 = typeof Reflect === 'object' ? Reflect : null;
  var ReflectApply$1 = R$1 && typeof R$1.apply === 'function' ? R$1.apply : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  };
  var ReflectOwnKeys$1;
  if (R$1 && typeof R$1.ownKeys === 'function') {
    ReflectOwnKeys$1 = R$1.ownKeys;
  } else if (Object.getOwnPropertySymbols) {
    ReflectOwnKeys$1 = function ReflectOwnKeys(target) {
      return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
    };
  } else {
    ReflectOwnKeys$1 = function ReflectOwnKeys(target) {
      return Object.getOwnPropertyNames(target);
    };
  }
  function ProcessEmitWarning$1(warning) {
    if (console && console.warn) console.warn(warning);
  }
  var NumberIsNaN$1 = Number.isNaN || function NumberIsNaN(value) {
    return value !== value;
  };
  function EventEmitter$1$1() {
    EventEmitter$1$1.init.call(this);
  }
  events$1.exports = EventEmitter$1$1;
  events$1.exports.once = once$1;

  // Backwards-compat with node 0.10.x
  EventEmitter$1$1.EventEmitter = EventEmitter$1$1;
  EventEmitter$1$1.prototype._events = undefined;
  EventEmitter$1$1.prototype._eventsCount = 0;
  EventEmitter$1$1.prototype._maxListeners = undefined;

  // By default EventEmitters will print a warning if more than 10 listeners are
  // added to it. This is a useful default which helps finding memory leaks.
  var defaultMaxListeners$1 = 10;
  function checkListener$1(listener) {
    if (typeof listener !== 'function') {
      throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
    }
  }
  Object.defineProperty(EventEmitter$1$1, 'defaultMaxListeners', {
    enumerable: true,
    get: function get() {
      return defaultMaxListeners$1;
    },
    set: function set(arg) {
      if (typeof arg !== 'number' || arg < 0 || NumberIsNaN$1(arg)) {
        throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
      }
      defaultMaxListeners$1 = arg;
    }
  });
  EventEmitter$1$1.init = function () {
    if (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) {
      this._events = Object.create(null);
      this._eventsCount = 0;
    }
    this._maxListeners = this._maxListeners || undefined;
  };

  // Obviously not all Emitters should be limited to 10. This function allows
  // that to be increased. Set to zero for unlimited.
  EventEmitter$1$1.prototype.setMaxListeners = function setMaxListeners(n) {
    if (typeof n !== 'number' || n < 0 || NumberIsNaN$1(n)) {
      throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
    }
    this._maxListeners = n;
    return this;
  };
  function _getMaxListeners$1(that) {
    if (that._maxListeners === undefined) return EventEmitter$1$1.defaultMaxListeners;
    return that._maxListeners;
  }
  EventEmitter$1$1.prototype.getMaxListeners = function getMaxListeners() {
    return _getMaxListeners$1(this);
  };
  EventEmitter$1$1.prototype.emit = function emit(type) {
    var args = [];
    for (var i = 1; i < arguments.length; i++) {
      args.push(arguments[i]);
    }
    var doError = type === 'error';
    var events = this._events;
    if (events !== undefined) doError = doError && events.error === undefined;else if (!doError) return false;

    // If there is no 'error' event listener then throw.
    if (doError) {
      var er;
      if (args.length > 0) er = args[0];
      if (er instanceof Error) {
        // Note: The comments on the `throw` lines are intentional, they show
        // up in Node's output if this results in an unhandled exception.
        throw er; // Unhandled 'error' event
      }
      // At least give some kind of context to the user
      var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
      err.context = er;
      throw err; // Unhandled 'error' event
    }

    var handler = events[type];
    if (handler === undefined) return false;
    if (typeof handler === 'function') {
      ReflectApply$1(handler, this, args);
    } else {
      var len = handler.length;
      var listeners = arrayClone$1(handler, len);
      for (var i = 0; i < len; ++i) {
        ReflectApply$1(listeners[i], this, args);
      }
    }
    return true;
  };
  function _addListener$1(target, type, listener, prepend) {
    var m;
    var events;
    var existing;
    checkListener$1(listener);
    events = target._events;
    if (events === undefined) {
      events = target._events = Object.create(null);
      target._eventsCount = 0;
    } else {
      // To avoid recursion in the case that type === "newListener"! Before
      // adding it to the listeners, first emit "newListener".
      if (events.newListener !== undefined) {
        target.emit('newListener', type, listener.listener ? listener.listener : listener);

        // Re-assign `events` because a newListener handler could have caused the
        // this._events to be assigned to a new object
        events = target._events;
      }
      existing = events[type];
    }
    if (existing === undefined) {
      // Optimize the case of one listener. Don't need the extra array object.
      existing = events[type] = listener;
      ++target._eventsCount;
    } else {
      if (typeof existing === 'function') {
        // Adding the second element, need to change to array.
        existing = events[type] = prepend ? [listener, existing] : [existing, listener];
        // If we've already got an array, just append.
      } else if (prepend) {
        existing.unshift(listener);
      } else {
        existing.push(listener);
      }

      // Check for listener leak
      m = _getMaxListeners$1(target);
      if (m > 0 && existing.length > m && !existing.warned) {
        existing.warned = true;
        // No error code for this since it is a Warning
        // eslint-disable-next-line no-restricted-syntax
        var w = new Error('Possible EventEmitter memory leak detected. ' + existing.length + ' ' + String(type) + ' listeners ' + 'added. Use emitter.setMaxListeners() to ' + 'increase limit');
        w.name = 'MaxListenersExceededWarning';
        w.emitter = target;
        w.type = type;
        w.count = existing.length;
        ProcessEmitWarning$1(w);
      }
    }
    return target;
  }
  EventEmitter$1$1.prototype.addListener = function addListener(type, listener) {
    return _addListener$1(this, type, listener, false);
  };
  EventEmitter$1$1.prototype.on = EventEmitter$1$1.prototype.addListener;
  EventEmitter$1$1.prototype.prependListener = function prependListener(type, listener) {
    return _addListener$1(this, type, listener, true);
  };
  function onceWrapper$1() {
    if (!this.fired) {
      this.target.removeListener(this.type, this.wrapFn);
      this.fired = true;
      if (arguments.length === 0) return this.listener.call(this.target);
      return this.listener.apply(this.target, arguments);
    }
  }
  function _onceWrap$1(target, type, listener) {
    var state = {
      fired: false,
      wrapFn: undefined,
      target: target,
      type: type,
      listener: listener
    };
    var wrapped = onceWrapper$1.bind(state);
    wrapped.listener = listener;
    state.wrapFn = wrapped;
    return wrapped;
  }
  EventEmitter$1$1.prototype.once = function once(type, listener) {
    checkListener$1(listener);
    this.on(type, _onceWrap$1(this, type, listener));
    return this;
  };
  EventEmitter$1$1.prototype.prependOnceListener = function prependOnceListener(type, listener) {
    checkListener$1(listener);
    this.prependListener(type, _onceWrap$1(this, type, listener));
    return this;
  };

  // Emits a 'removeListener' event if and only if the listener was removed.
  EventEmitter$1$1.prototype.removeListener = function removeListener(type, listener) {
    var list, events, position, i, originalListener;
    checkListener$1(listener);
    events = this._events;
    if (events === undefined) return this;
    list = events[type];
    if (list === undefined) return this;
    if (list === listener || list.listener === listener) {
      if (--this._eventsCount === 0) this._events = Object.create(null);else {
        delete events[type];
        if (events.removeListener) this.emit('removeListener', type, list.listener || listener);
      }
    } else if (typeof list !== 'function') {
      position = -1;
      for (i = list.length - 1; i >= 0; i--) {
        if (list[i] === listener || list[i].listener === listener) {
          originalListener = list[i].listener;
          position = i;
          break;
        }
      }
      if (position < 0) return this;
      if (position === 0) list.shift();else {
        spliceOne$1(list, position);
      }
      if (list.length === 1) events[type] = list[0];
      if (events.removeListener !== undefined) this.emit('removeListener', type, originalListener || listener);
    }
    return this;
  };
  EventEmitter$1$1.prototype.off = EventEmitter$1$1.prototype.removeListener;
  EventEmitter$1$1.prototype.removeAllListeners = function removeAllListeners(type) {
    var listeners, events, i;
    events = this._events;
    if (events === undefined) return this;

    // not listening for removeListener, no need to emit
    if (events.removeListener === undefined) {
      if (arguments.length === 0) {
        this._events = Object.create(null);
        this._eventsCount = 0;
      } else if (events[type] !== undefined) {
        if (--this._eventsCount === 0) this._events = Object.create(null);else delete events[type];
      }
      return this;
    }

    // emit removeListener for all listeners on all events
    if (arguments.length === 0) {
      var keys = Object.keys(events);
      var key;
      for (i = 0; i < keys.length; ++i) {
        key = keys[i];
        if (key === 'removeListener') continue;
        this.removeAllListeners(key);
      }
      this.removeAllListeners('removeListener');
      this._events = Object.create(null);
      this._eventsCount = 0;
      return this;
    }
    listeners = events[type];
    if (typeof listeners === 'function') {
      this.removeListener(type, listeners);
    } else if (listeners !== undefined) {
      // LIFO order
      for (i = listeners.length - 1; i >= 0; i--) {
        this.removeListener(type, listeners[i]);
      }
    }
    return this;
  };
  function _listeners$1(target, type, unwrap) {
    var events = target._events;
    if (events === undefined) return [];
    var evlistener = events[type];
    if (evlistener === undefined) return [];
    if (typeof evlistener === 'function') return unwrap ? [evlistener.listener || evlistener] : [evlistener];
    return unwrap ? unwrapListeners$1(evlistener) : arrayClone$1(evlistener, evlistener.length);
  }
  EventEmitter$1$1.prototype.listeners = function listeners(type) {
    return _listeners$1(this, type, true);
  };
  EventEmitter$1$1.prototype.rawListeners = function rawListeners(type) {
    return _listeners$1(this, type, false);
  };
  EventEmitter$1$1.listenerCount = function (emitter, type) {
    if (typeof emitter.listenerCount === 'function') {
      return emitter.listenerCount(type);
    } else {
      return listenerCount$1.call(emitter, type);
    }
  };
  EventEmitter$1$1.prototype.listenerCount = listenerCount$1;
  function listenerCount$1(type) {
    var events = this._events;
    if (events !== undefined) {
      var evlistener = events[type];
      if (typeof evlistener === 'function') {
        return 1;
      } else if (evlistener !== undefined) {
        return evlistener.length;
      }
    }
    return 0;
  }
  EventEmitter$1$1.prototype.eventNames = function eventNames() {
    return this._eventsCount > 0 ? ReflectOwnKeys$1(this._events) : [];
  };
  function arrayClone$1(arr, n) {
    var copy = new Array(n);
    for (var i = 0; i < n; ++i) {
      copy[i] = arr[i];
    }
    return copy;
  }
  function spliceOne$1(list, index) {
    for (; index + 1 < list.length; index++) {
      list[index] = list[index + 1];
    }
    list.pop();
  }
  function unwrapListeners$1(arr) {
    var ret = new Array(arr.length);
    for (var i = 0; i < ret.length; ++i) {
      ret[i] = arr[i].listener || arr[i];
    }
    return ret;
  }
  function once$1(emitter, name) {
    return new Promise(function (resolve, reject) {
      function errorListener(err) {
        emitter.removeListener(name, resolver);
        reject(err);
      }
      function resolver() {
        if (typeof emitter.removeListener === 'function') {
          emitter.removeListener('error', errorListener);
        }
        resolve([].slice.call(arguments));
      }
      eventTargetAgnosticAddListener$1(emitter, name, resolver, {
        once: true
      });
      if (name !== 'error') {
        addErrorHandlerIfEventEmitter$1(emitter, errorListener, {
          once: true
        });
      }
    });
  }
  function addErrorHandlerIfEventEmitter$1(emitter, handler, flags) {
    if (typeof emitter.on === 'function') {
      eventTargetAgnosticAddListener$1(emitter, 'error', handler, flags);
    }
  }
  function eventTargetAgnosticAddListener$1(emitter, name, listener, flags) {
    if (typeof emitter.on === 'function') {
      if (flags.once) {
        emitter.once(name, listener);
      } else {
        emitter.on(name, listener);
      }
    } else if (typeof emitter.addEventListener === 'function') {
      // EventTarget does not have `error` event semantics like Node
      // EventEmitters, we do not listen for `error` events here.
      emitter.addEventListener(name, function wrapListener(arg) {
        // IE does not have builtin `{ once: true }` support so we
        // have to do it manually.
        if (flags.once) {
          emitter.removeEventListener(name, wrapListener);
        }
        listener(arg);
      });
    } else {
      throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
    }
  }

  /**
   *  Typed event emitter class.
   */
  class EventEmitter$2 extends events$1.exports.EventEmitter {}
  var LocalTrackEvents;
  (function (LocalTrackEvents) {
    LocalTrackEvents["Ended"] = "ended";
    LocalTrackEvents["Muted"] = "muted";
    /**
     * Fires when the published state of a LocalTrack changes.  A value of 'true' indicates the
     * track has been published, and 'false' indicates that it is no longer published.  Tracks are
     * unpublished by default, and must be published explicitly (no event will be fired to indicate
     * the initial state of 'unpublished').
     */
    LocalTrackEvents["PublishedStateUpdate"] = "published-state-update";
    /**
     * Fires when there has been a change in the underlying track.
     */
    LocalTrackEvents["UnderlyingTrackChange"] = "underlying-track-change";
    /**
     * Fires when the applyConstraints() has been called for the track.
     */
    LocalTrackEvents["TrackConstraintsChange"] = "track-constraints-change";
  })(LocalTrackEvents || (LocalTrackEvents = {}));
  // TBD: Fix this once types are published separately
  // export type TrackEffect = BaseMicrophoneEffect | BaseCameraEffect;
  /**
   * Basic Track class. Wrapper for LocalTrack from 'webrtc-core'.
   */
  class LocalTrack extends EventEmitter$2 {
    /**
     * Constructor for the Track class. Creates an empty CoreLocalTrack or uses an existing one.
     *
     * @param stream - The MediaStream for this LocalTrack.
     */
    constructor(stream) {
      super();
      this.isPublished = false;
      this.effects = new Map();
      this.originalStream = stream;
      this.underlyingStream = stream;
      // Effects create a new label but we want to retain the original one.
      this.label = this.underlyingStream.getTracks()[0].label;
      /**
       * Emit ended event when the underlying track ends.
       */
      this.underlyingTrack.onended = () => {
        this.emit(LocalTrackEvents.Ended, {
          trackState: this.trackState
        });
      };
    }
    /**
     * Get the kind of this track.
     * NOTE(brian): the need for this will likely go away once we get the rest of the track hierarchy
     * done, as we can use something like instanceof instead.
     *
     * @returns - The kind of this track, as a MediaStreamTrackKind.
     */
    get kind() {
      return this.underlyingTrack.kind;
    }
    /**
     * Get id of this track.
     *
     * @returns The id of this track.
     */
    get id() {
      return this.underlyingTrack.id;
    }
    /**
     * Get muted state of this track.
     *
     * @returns The muted state of this track.
     */
    get muted() {
      return !this.underlyingTrack.enabled;
    }
    /**
     * Get published state of this track.
     *
     * @returns The published state of this track.
     */
    get published() {
      return this.isPublished;
    }
    /**
     * Get the underlying MediaStream.
     *
     * @returns The underlying MediaStream.
     */
    get underlyingStream() {
      return this._underlyingStream;
    }
    /**
     * Set the underlying MediaStream.
     */
    set underlyingStream(stream) {
      this._underlyingStream = stream;
    }
    /**
     * Get current state of this track.
     *
     * @returns Current state of this track.
     */
    get trackState() {
      return {
        id: this.id,
        label: this.label,
        type: this.kind,
        muted: this.muted
      };
    }
    /**
     * Get the underlying MediaStreamTrack.
     *
     * @returns The underlying MediaStreamTrack.
     */
    get underlyingTrack() {
      return this._underlyingStream.getTracks()[0];
    }
    /**
     * Get the original MediaStreamTrack. We retain a reference to the stream obtained through
     * `getUserMedia()` to ensure it's updated alongside the `underlyingStream`. These two streams may
     * be different if effects have been added to the original stream.
     *
     * @returns The original MediaStreamTrack.
     */
    get originalTrack() {
      return this.originalStream.getTracks()[0];
    }
    /**
     * Set the mute state of this track.
     *
     * @param muted - True to mute, false to unmute.
     * @fires LocalTrackEvents.Muted
     */
    setMuted(muted) {
      // Only change state if it's different, where "enabled" means "unmuted."
      if (this.underlyingTrack.enabled === muted) {
        this.originalTrack.enabled = !muted;
        this.underlyingTrack.enabled = !muted;
        this.emit(LocalTrackEvents.Muted, {
          trackState: this.trackState
        });
        logger$3.log("Local track ".concat(muted ? 'muted' : 'unmuted', ":"), {
          trackState: this.trackState
        });
      }
    }
    /**
     * Set the published state of this LocalTrack.
     *
     * @param isPublished - True if this track has been published, false otherwise.
     * @fires LocalTrackEvents.PublishedStateUpdate
     */
    setPublished(isPublished) {
      if (this.isPublished !== isPublished) {
        this.isPublished = isPublished;
        this.emit(LocalTrackEvents.PublishedStateUpdate, {
          trackState: this.trackState,
          isPublished
        });
        logger$3.log("Local track ".concat(isPublished ? 'published' : 'unpublished', ":"), {
          trackState: this.trackState
        });
      }
    }
    /**
     * Stop this track.
     *
     * @fires LocalTrackEvents.Ended
     */
    stop() {
      this.originalTrack.stop();
      this.underlyingTrack.stop();
      this.emit(LocalTrackEvents.Ended, {
        trackState: this.trackState
      });
      logger$3.log("Local track stopped:", {
        trackState: this.trackState
      });
    }
    /**
     * Adds an effect to a local track.
     *
     * @param name - The name of the effect.
     * @param effect - The effect to add.
     */
    addEffect(name, effect) {
      return __awaiter$1$1(this, void 0, void 0, function* () {
        yield effect.load(this.underlyingStream);
        this.underlyingStream = effect.getUnderlyingStream();
        this.effects.set(name, effect);
        this.emit(LocalTrackEvents.UnderlyingTrackChange);
      });
    }
    /**
     * Get an effect by name.
     *
     * @param name - The effect name.
     * @returns A MicrophoneEffect.
     */
    getEffect(name) {
      var effect = this.effects.get(name);
      if (!effect) {
        logger$3.log("No effect found with name '".concat(name, "'"));
      }
      return effect;
    }
    /**
     * Cleanup the local microphone track.
     */
    disposeEffects() {
      if (this.effects.size > 0) {
        this.effects.forEach(effect => effect.dispose());
        this.effects.clear();
        this.underlyingStream = this.originalStream;
        this.emit(LocalTrackEvents.UnderlyingTrackChange);
      }
    }
    /**
     * Apply constraints to the track.
     *
     * @param constraints - The constraints to apply to the track.
     * @returns A promise which resolves when the constraints have been successfully applied.
     */
    applyConstraints(constraints) {
      return __awaiter$1$1(this, void 0, void 0, function* () {
        logger$3.log("Applying constraints to local track:", constraints);
        var ret = this.underlyingTrack.applyConstraints(constraints).then(() => {
          this.emit(LocalTrackEvents.TrackConstraintsChange);
        });
        return ret;
      });
    }
    /**
     * Get the current constraints of the track.
     *
     * @returns The constraints of the track.
     */
    getConstraints() {
      return this.underlyingTrack.getConstraints();
    }
    /**
     * Get the current settings of the track.
     *
     * @returns The settings of the track.
     */
    getSettings() {
      return this.underlyingTrack.getSettings();
    }
    /**
     * Check the resolution and then return how many layers will be active.
     *
     * @returns The active layers count.
     */
    getNumActiveSimulcastLayers() {
      var activeSimulcastLayersNumber = 0;
      if (this.trackState.type === 'audio') {
        return activeSimulcastLayersNumber;
      }
      var videoHeight = this.underlyingTrack.getSettings().height;
      if (videoHeight <= 180) {
        activeSimulcastLayersNumber = 1;
      } else if (videoHeight <= 360) {
        activeSimulcastLayersNumber = 2;
      } else {
        activeSimulcastLayersNumber = 3;
      }
      return activeSimulcastLayersNumber;
    }
  }
  LocalTrack.Events = LocalTrackEvents;

  /**
   * Represents a local track for a camera source.
   */
  class LocalCameraTrack extends LocalTrack {}

  /**
   * Represents a local track for a display source.
   */
  class LocalDisplayTrack extends LocalTrack {}

  /**
   * Represents a local track for a microphone source.
   */
  class LocalMicrophoneTrack extends LocalTrack {}
  var ErrorTypes;
  (function (ErrorTypes) {
    ErrorTypes["DEVICE_PERMISSION_DENIED"] = "DEVICE_PERMISSION_DENIED";
    ErrorTypes["CREATE_CAMERA_TRACK_FAILED"] = "CREATE_CAMERA_TRACK_FAILED";
    ErrorTypes["CREATE_MICROPHONE_TRACK_FAILED"] = "CREATE_MICROPHONE_TRACK_FAILED";
  })(ErrorTypes || (ErrorTypes = {}));
  /**
   * Represents a WCME error, which contains error type and error message.
   */
  class WcmeError {
    /**
     * Creates new error.
     *
     * @param type - Error type.
     * @param message - Error message.
     */
    constructor(type) {
      var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
      this.type = type;
      this.message = message;
    }
  }
  /**
   * Creates a camera video track. Please note that the constraint params in second getUserMedia call would NOT take effect when:
   *
   * 1. Previous captured video track from the same device is not stopped .
   * 2. Previous createCameraTrack() call for the same device is in progress.
   *
   * @param constraints - Video device constraints.
   * @returns A LocalTrack object or an error.
   */
  function createCameraTrack(constraints) {
    return __awaiter$1$1(this, void 0, void 0, function* () {
      var stream;
      try {
        stream = yield getUserMedia({
          video: Object.assign({}, constraints)
        });
      } catch (error) {
        throw new WcmeError(ErrorTypes.CREATE_CAMERA_TRACK_FAILED, "Failed to create camera track ".concat(error));
      }
      return new LocalCameraTrack(stream);
    });
  }
  /**
   * Creates a microphone audio track.
   *
   * @param constraints - Audio device constraints.
   * @returns A LocalTrack object or an error.
   */
  function createMicrophoneTrack(constraints) {
    return __awaiter$1$1(this, void 0, void 0, function* () {
      var stream;
      try {
        stream = yield getUserMedia({
          audio: Object.assign({}, constraints)
        });
      } catch (error) {
        throw new WcmeError(ErrorTypes.CREATE_MICROPHONE_TRACK_FAILED, "Failed to create microphone track ".concat(error));
      }
      return new LocalMicrophoneTrack(stream);
    });
  }
  /**
   * Creates a display video track.
   *
   * @returns A Promise that resolves to a LocalDisplayTrack.
   */
  function createDisplayTrack() {
    return __awaiter$1$1(this, void 0, void 0, function* () {
      var stream = yield getDisplayMedia({
        video: true
      });
      return new LocalDisplayTrack(stream);
    });
  }
  /**
   * Enumerates the media input and output devices available.
   *
   * @param deviceKind - Optional filter to return a specific device kind.
   * @returns List of media devices in an array of MediaDeviceInfo objects.
   */
  function getDevices(deviceKind) {
    return __awaiter$1$1(this, void 0, void 0, function* () {
      var devices;
      try {
        devices = yield ensureDevicePermissions([DeviceKind.AudioInput, DeviceKind.VideoInput], enumerateDevices);
      } catch (error) {
        throw new WcmeError(ErrorTypes.DEVICE_PERMISSION_DENIED, 'Failed to ensure device permissions');
      }
      return devices.filter(v => deviceKind ? v.kind === deviceKind : true);
    });
  }
  /**
   * Helper function to get a list of microphone devices.
   *
   * @returns List of microphone devices in an array of MediaDeviceInfo objects.
   */
  function getAudioInputDevices() {
    return __awaiter$1$1(this, void 0, void 0, function* () {
      return getDevices(DeviceKind.AudioInput);
    });
  }
  /**
   * Helper function to get a list of speaker devices.
   *
   * @returns List of speaker devices in an array of MediaDeviceInfo objects.
   */
  function getAudioOutputDevices() {
    return __awaiter$1$1(this, void 0, void 0, function* () {
      return getDevices(DeviceKind.AudioOutput);
    });
  }
  /**
   * Helper function to get a list of camera devices.
   *
   * @returns List of camera devices in an array of MediaDeviceInfo objects.
   */
  function getVideoInputDevices() {
    return __awaiter$1$1(this, void 0, void 0, function* () {
      return getDevices(DeviceKind.VideoInput);
    });
  }
  /**
   * Export the setOnDeviceChangeHandler method directly from the core lib.
   */
  var {
    setOnDeviceChangeHandler
  } = media;

  // Overall connection state (based on the ICE and DTLS connection states)
  var ConnectionState;
  (function (ConnectionState) {
    ConnectionState["New"] = "New";
    ConnectionState["Closed"] = "Closed";
    ConnectionState["Connected"] = "Connected";
    ConnectionState["Connecting"] = "Connecting";
    ConnectionState["Disconnected"] = "Disconnected";
    ConnectionState["Failed"] = "Failed";
  })(ConnectionState || (ConnectionState = {}));
  var ConnectionStateEvents;
  (function (ConnectionStateEvents) {
    ConnectionStateEvents["ConnectionStateChanged"] = "ConnectionStateChanged";
  })(ConnectionStateEvents || (ConnectionStateEvents = {}));
  /**
   * Listens on the connection's ICE and DTLS state changes and emits a single
   * event that summarizes all the internal states into a single overall connection state.
   */
  class ConnectionStateHandler extends EventEmitter$2 {
    /**
     * Creates an instance of ConnectionStateHandler.
     *
     * @param getCurrentStatesCallback - Callback for getting the connection state information
     *                                   from the peer connection.
     */
    constructor(getCurrentStatesCallback) {
      super();
      this.getCurrentStatesCallback = getCurrentStatesCallback;
      this.mediaConnectionState = this.evaluateMediaConnectionState();
    }
    /**
     * Handler for connection state change.
     */
    onConnectionStateChange() {
      this.handleAnyConnectionStateChange();
    }
    /**
     * Handler for ice connection state change.
     */
    onIceConnectionStateChange() {
      this.handleAnyConnectionStateChange();
    }
    /**
     * Method to be called whenever ice connection or dtls connection state is changed.
     */
    handleAnyConnectionStateChange() {
      var newConnectionState = this.evaluateMediaConnectionState();
      if (newConnectionState !== this.mediaConnectionState) {
        this.mediaConnectionState = newConnectionState;
        this.emit(ConnectionStateEvents.ConnectionStateChanged, this.mediaConnectionState);
      }
    }
    /**
     * Evaluates the overall connection state based on peer connection's
     * connectionState and iceConnectionState.
     *
     * @returns Current overall connection state.
     */
    evaluateMediaConnectionState() {
      var {
        connectionState,
        iceState
      } = this.getCurrentStatesCallback();
      var connectionStates = [connectionState, iceState];
      var mediaConnectionState;
      if (connectionStates.every(value => value === 'new')) {
        mediaConnectionState = ConnectionState.New;
      } else if (connectionStates.some(value => value === 'closed')) {
        mediaConnectionState = ConnectionState.Closed;
      } else if (connectionStates.some(value => value === 'failed')) {
        mediaConnectionState = ConnectionState.Failed;
      } else if (connectionStates.some(value => value === 'disconnected')) {
        mediaConnectionState = ConnectionState.Disconnected;
      } else if (connectionStates.every(value => value === 'connected' || value === 'completed')) {
        mediaConnectionState = ConnectionState.Connected;
      } else {
        mediaConnectionState = ConnectionState.Connecting;
      }
      logger$3.log("iceConnectionState=".concat(iceState, " connectionState=").concat(connectionState, " => ").concat(this.mediaConnectionState));
      return mediaConnectionState;
    }
    /**
     * Gets current connection state.
     *
     * @returns Current connection state.
     */
    getConnectionState() {
      return this.mediaConnectionState;
    }
  }
  ConnectionStateHandler.Events = ConnectionStateEvents;

  /*
   *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
   *
   *  Use of this source code is governed by a BSD-style license
   *  that can be found in the LICENSE file in the root of the source
   *  tree.
   */

  var logDisabled_$1 = true;
  var deprecationWarnings_$1 = true;

  /**
   * Extract browser version out of the provided user agent string.
   *
   * @param {!string} uastring userAgent string.
   * @param {!string} expr Regular expression used as match criteria.
   * @param {!number} pos position in the version string to be returned.
   * @return {!number} browser version.
   */
  function extractVersion$1(uastring, expr, pos) {
    var match = uastring.match(expr);
    return match && match.length >= pos && parseInt(match[pos], 10);
  }

  // Wraps the peerconnection event eventNameToWrap in a function
  // which returns the modified event object (or false to prevent
  // the event).
  function wrapPeerConnectionEvent$1(window, eventNameToWrap, wrapper) {
    if (!window.RTCPeerConnection) {
      return;
    }
    var proto = window.RTCPeerConnection.prototype;
    var nativeAddEventListener = proto.addEventListener;
    proto.addEventListener = function (nativeEventName, cb) {
      if (nativeEventName !== eventNameToWrap) {
        return nativeAddEventListener.apply(this, arguments);
      }
      var wrappedCallback = e => {
        var modifiedEvent = wrapper(e);
        if (modifiedEvent) {
          if (cb.handleEvent) {
            cb.handleEvent(modifiedEvent);
          } else {
            cb(modifiedEvent);
          }
        }
      };
      this._eventMap = this._eventMap || {};
      if (!this._eventMap[eventNameToWrap]) {
        this._eventMap[eventNameToWrap] = new Map();
      }
      this._eventMap[eventNameToWrap].set(cb, wrappedCallback);
      return nativeAddEventListener.apply(this, [nativeEventName, wrappedCallback]);
    };
    var nativeRemoveEventListener = proto.removeEventListener;
    proto.removeEventListener = function (nativeEventName, cb) {
      if (nativeEventName !== eventNameToWrap || !this._eventMap || !this._eventMap[eventNameToWrap]) {
        return nativeRemoveEventListener.apply(this, arguments);
      }
      if (!this._eventMap[eventNameToWrap].has(cb)) {
        return nativeRemoveEventListener.apply(this, arguments);
      }
      var unwrappedCb = this._eventMap[eventNameToWrap].get(cb);
      this._eventMap[eventNameToWrap].delete(cb);
      if (this._eventMap[eventNameToWrap].size === 0) {
        delete this._eventMap[eventNameToWrap];
      }
      if (Object.keys(this._eventMap).length === 0) {
        delete this._eventMap;
      }
      return nativeRemoveEventListener.apply(this, [nativeEventName, unwrappedCb]);
    };
    Object.defineProperty(proto, 'on' + eventNameToWrap, {
      get() {
        return this['_on' + eventNameToWrap];
      },
      set(cb) {
        if (this['_on' + eventNameToWrap]) {
          this.removeEventListener(eventNameToWrap, this['_on' + eventNameToWrap]);
          delete this['_on' + eventNameToWrap];
        }
        if (cb) {
          this.addEventListener(eventNameToWrap, this['_on' + eventNameToWrap] = cb);
        }
      },
      enumerable: true,
      configurable: true
    });
  }
  function disableLog$1(bool) {
    if (typeof bool !== 'boolean') {
      return new Error('Argument type: ' + typeof bool + '. Please use a boolean.');
    }
    logDisabled_$1 = bool;
    return bool ? 'adapter.js logging disabled' : 'adapter.js logging enabled';
  }

  /**
   * Disable or enable deprecation warnings
   * @param {!boolean} bool set to true to disable warnings.
   */
  function disableWarnings$1(bool) {
    if (typeof bool !== 'boolean') {
      return new Error('Argument type: ' + typeof bool + '. Please use a boolean.');
    }
    deprecationWarnings_$1 = !bool;
    return 'adapter.js deprecation warnings ' + (bool ? 'disabled' : 'enabled');
  }
  function log$2() {
    if (typeof window === 'object') {
      if (logDisabled_$1) {
        return;
      }
      if (typeof console !== 'undefined' && typeof console.log === 'function') {
        console.log.apply(console, arguments);
      }
    }
  }

  /**
   * Shows a deprecation warning suggesting the modern and spec-compatible API.
   */
  function deprecated$1(oldMethod, newMethod) {
    if (!deprecationWarnings_$1) {
      return;
    }
    console.warn(oldMethod + ' is deprecated, please use ' + newMethod + ' instead.');
  }

  /**
   * Browser detector.
   *
   * @return {object} result containing browser and version
   *     properties.
   */
  function detectBrowser$1(window) {
    // Returned result object.
    var result = {
      browser: null,
      version: null
    };

    // Fail early if it's not a browser
    if (typeof window === 'undefined' || !window.navigator) {
      result.browser = 'Not a browser.';
      return result;
    }
    var {
      navigator
    } = window;
    if (navigator.mozGetUserMedia) {
      // Firefox.
      result.browser = 'firefox';
      result.version = extractVersion$1(navigator.userAgent, /Firefox\/(\d+)\./, 1);
    } else if (navigator.webkitGetUserMedia || window.isSecureContext === false && window.webkitRTCPeerConnection) {
      // Chrome, Chromium, Webview, Opera.
      // Version matches Chrome/WebRTC version.
      // Chrome 74 removed webkitGetUserMedia on http as well so we need the
      // more complicated fallback to webkitRTCPeerConnection.
      result.browser = 'chrome';
      result.version = extractVersion$1(navigator.userAgent, /Chrom(e|ium)\/(\d+)\./, 2);
    } else if (window.RTCPeerConnection && navigator.userAgent.match(/AppleWebKit\/(\d+)\./)) {
      // Safari.
      result.browser = 'safari';
      result.version = extractVersion$1(navigator.userAgent, /AppleWebKit\/(\d+)\./, 1);
      result.supportsUnifiedPlan = window.RTCRtpTransceiver && 'currentDirection' in window.RTCRtpTransceiver.prototype;
    } else {
      // Default fallthrough: not supported.
      result.browser = 'Not a supported browser.';
      return result;
    }
    return result;
  }

  /**
   * Checks if something is an object.
   *
   * @param {*} val The something you want to check.
   * @return true if val is an object, false otherwise.
   */
  function isObject$1(val) {
    return Object.prototype.toString.call(val) === '[object Object]';
  }

  /**
   * Remove all empty objects and undefined values
   * from a nested object -- an enhanced and vanilla version
   * of Lodash's `compact`.
   */
  function compactObject$1(data) {
    if (!isObject$1(data)) {
      return data;
    }
    return Object.keys(data).reduce(function (accumulator, key) {
      var isObj = isObject$1(data[key]);
      var value = isObj ? compactObject$1(data[key]) : data[key];
      var isEmptyObject = isObj && !Object.keys(value).length;
      if (value === undefined || isEmptyObject) {
        return accumulator;
      }
      return Object.assign(accumulator, {
        [key]: value
      });
    }, {});
  }

  /* iterates the stats graph recursively. */
  function walkStats$1(stats, base, resultSet) {
    if (!base || resultSet.has(base.id)) {
      return;
    }
    resultSet.set(base.id, base);
    Object.keys(base).forEach(name => {
      if (name.endsWith('Id')) {
        walkStats$1(stats, stats.get(base[name]), resultSet);
      } else if (name.endsWith('Ids')) {
        base[name].forEach(id => {
          walkStats$1(stats, stats.get(id), resultSet);
        });
      }
    });
  }

  /* filter getStats for a sender/receiver track. */
  function filterStats$1(result, track, outbound) {
    var streamStatsType = outbound ? 'outbound-rtp' : 'inbound-rtp';
    var filteredResult = new Map();
    if (track === null) {
      return filteredResult;
    }
    var trackStats = [];
    result.forEach(value => {
      if (value.type === 'track' && value.trackIdentifier === track.id) {
        trackStats.push(value);
      }
    });
    trackStats.forEach(trackStat => {
      result.forEach(stats => {
        if (stats.type === streamStatsType && stats.trackId === trackStat.id) {
          walkStats$1(result, stats, filteredResult);
        }
      });
    });
    return filteredResult;
  }

  /*
   *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
   *
   *  Use of this source code is governed by a BSD-style license
   *  that can be found in the LICENSE file in the root of the source
   *  tree.
   */
  var logging$1 = log$2;
  function shimGetUserMedia$2$1(window, browserDetails) {
    var navigator = window && window.navigator;
    if (!navigator.mediaDevices) {
      return;
    }
    var constraintsToChrome_ = function constraintsToChrome_(c) {
      if (typeof c !== 'object' || c.mandatory || c.optional) {
        return c;
      }
      var cc = {};
      Object.keys(c).forEach(key => {
        if (key === 'require' || key === 'advanced' || key === 'mediaSource') {
          return;
        }
        var r = typeof c[key] === 'object' ? c[key] : {
          ideal: c[key]
        };
        if (r.exact !== undefined && typeof r.exact === 'number') {
          r.min = r.max = r.exact;
        }
        var oldname_ = function oldname_(prefix, name) {
          if (prefix) {
            return prefix + name.charAt(0).toUpperCase() + name.slice(1);
          }
          return name === 'deviceId' ? 'sourceId' : name;
        };
        if (r.ideal !== undefined) {
          cc.optional = cc.optional || [];
          var oc = {};
          if (typeof r.ideal === 'number') {
            oc[oldname_('min', key)] = r.ideal;
            cc.optional.push(oc);
            oc = {};
            oc[oldname_('max', key)] = r.ideal;
            cc.optional.push(oc);
          } else {
            oc[oldname_('', key)] = r.ideal;
            cc.optional.push(oc);
          }
        }
        if (r.exact !== undefined && typeof r.exact !== 'number') {
          cc.mandatory = cc.mandatory || {};
          cc.mandatory[oldname_('', key)] = r.exact;
        } else {
          ['min', 'max'].forEach(mix => {
            if (r[mix] !== undefined) {
              cc.mandatory = cc.mandatory || {};
              cc.mandatory[oldname_(mix, key)] = r[mix];
            }
          });
        }
      });
      if (c.advanced) {
        cc.optional = (cc.optional || []).concat(c.advanced);
      }
      return cc;
    };
    var shimConstraints_ = function shimConstraints_(constraints, func) {
      if (browserDetails.version >= 61) {
        return func(constraints);
      }
      constraints = JSON.parse(JSON.stringify(constraints));
      if (constraints && typeof constraints.audio === 'object') {
        var remap = function remap(obj, a, b) {
          if (a in obj && !(b in obj)) {
            obj[b] = obj[a];
            delete obj[a];
          }
        };
        constraints = JSON.parse(JSON.stringify(constraints));
        remap(constraints.audio, 'autoGainControl', 'googAutoGainControl');
        remap(constraints.audio, 'noiseSuppression', 'googNoiseSuppression');
        constraints.audio = constraintsToChrome_(constraints.audio);
      }
      if (constraints && typeof constraints.video === 'object') {
        // Shim facingMode for mobile & surface pro.
        var face = constraints.video.facingMode;
        face = face && (typeof face === 'object' ? face : {
          ideal: face
        });
        var getSupportedFacingModeLies = browserDetails.version < 66;
        if (face && (face.exact === 'user' || face.exact === 'environment' || face.ideal === 'user' || face.ideal === 'environment') && !(navigator.mediaDevices.getSupportedConstraints && navigator.mediaDevices.getSupportedConstraints().facingMode && !getSupportedFacingModeLies)) {
          delete constraints.video.facingMode;
          var matches;
          if (face.exact === 'environment' || face.ideal === 'environment') {
            matches = ['back', 'rear'];
          } else if (face.exact === 'user' || face.ideal === 'user') {
            matches = ['front'];
          }
          if (matches) {
            // Look for matches in label, or use last cam for back (typical).
            return navigator.mediaDevices.enumerateDevices().then(devices => {
              devices = devices.filter(d => d.kind === 'videoinput');
              var dev = devices.find(d => matches.some(match => d.label.toLowerCase().includes(match)));
              if (!dev && devices.length && matches.includes('back')) {
                dev = devices[devices.length - 1]; // more likely the back cam
              }

              if (dev) {
                constraints.video.deviceId = face.exact ? {
                  exact: dev.deviceId
                } : {
                  ideal: dev.deviceId
                };
              }
              constraints.video = constraintsToChrome_(constraints.video);
              logging$1('chrome: ' + JSON.stringify(constraints));
              return func(constraints);
            });
          }
        }
        constraints.video = constraintsToChrome_(constraints.video);
      }
      logging$1('chrome: ' + JSON.stringify(constraints));
      return func(constraints);
    };
    var shimError_ = function shimError_(e) {
      if (browserDetails.version >= 64) {
        return e;
      }
      return {
        name: {
          PermissionDeniedError: 'NotAllowedError',
          PermissionDismissedError: 'NotAllowedError',
          InvalidStateError: 'NotAllowedError',
          DevicesNotFoundError: 'NotFoundError',
          ConstraintNotSatisfiedError: 'OverconstrainedError',
          TrackStartError: 'NotReadableError',
          MediaDeviceFailedDueToShutdown: 'NotAllowedError',
          MediaDeviceKillSwitchOn: 'NotAllowedError',
          TabCaptureError: 'AbortError',
          ScreenCaptureError: 'AbortError',
          DeviceCaptureError: 'AbortError'
        }[e.name] || e.name,
        message: e.message,
        constraint: e.constraint || e.constraintName,
        toString() {
          return this.name + (this.message && ': ') + this.message;
        }
      };
    };
    var getUserMedia_ = function getUserMedia_(constraints, onSuccess, onError) {
      shimConstraints_(constraints, c => {
        navigator.webkitGetUserMedia(c, onSuccess, e => {
          if (onError) {
            onError(shimError_(e));
          }
        });
      });
    };
    navigator.getUserMedia = getUserMedia_.bind(navigator);

    // Even though Chrome 45 has navigator.mediaDevices and a getUserMedia
    // function which returns a Promise, it does not accept spec-style
    // constraints.
    if (navigator.mediaDevices.getUserMedia) {
      var origGetUserMedia = navigator.mediaDevices.getUserMedia.bind(navigator.mediaDevices);
      navigator.mediaDevices.getUserMedia = function (cs) {
        return shimConstraints_(cs, c => origGetUserMedia(c).then(stream => {
          if (c.audio && !stream.getAudioTracks().length || c.video && !stream.getVideoTracks().length) {
            stream.getTracks().forEach(track => {
              track.stop();
            });
            throw new DOMException('', 'NotFoundError');
          }
          return stream;
        }, e => Promise.reject(shimError_(e))));
      };
    }
  }

  /*
   *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.
   *
   *  Use of this source code is governed by a BSD-style license
   *  that can be found in the LICENSE file in the root of the source
   *  tree.
   */
  function shimGetDisplayMedia$1$1(window, getSourceId) {
    if (window.navigator.mediaDevices && 'getDisplayMedia' in window.navigator.mediaDevices) {
      return;
    }
    if (!window.navigator.mediaDevices) {
      return;
    }
    // getSourceId is a function that returns a promise resolving with
    // the sourceId of the screen/window/tab to be shared.
    if (typeof getSourceId !== 'function') {
      console.error('shimGetDisplayMedia: getSourceId argument is not ' + 'a function');
      return;
    }
    window.navigator.mediaDevices.getDisplayMedia = function getDisplayMedia(constraints) {
      return getSourceId(constraints).then(sourceId => {
        var widthSpecified = constraints.video && constraints.video.width;
        var heightSpecified = constraints.video && constraints.video.height;
        var frameRateSpecified = constraints.video && constraints.video.frameRate;
        constraints.video = {
          mandatory: {
            chromeMediaSource: 'desktop',
            chromeMediaSourceId: sourceId,
            maxFrameRate: frameRateSpecified || 3
          }
        };
        if (widthSpecified) {
          constraints.video.mandatory.maxWidth = widthSpecified;
        }
        if (heightSpecified) {
          constraints.video.mandatory.maxHeight = heightSpecified;
        }
        return window.navigator.mediaDevices.getUserMedia(constraints);
      });
    };
  }

  /*
   *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
   *
   *  Use of this source code is governed by a BSD-style license
   *  that can be found in the LICENSE file in the root of the source
   *  tree.
   */

  function shimMediaStream$1(window) {
    window.MediaStream = window.MediaStream || window.webkitMediaStream;
  }
  function shimOnTrack$1$1(window) {
    if (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in window.RTCPeerConnection.prototype)) {
      Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {
        get() {
          return this._ontrack;
        },
        set(f) {
          if (this._ontrack) {
            this.removeEventListener('track', this._ontrack);
          }
          this.addEventListener('track', this._ontrack = f);
        },
        enumerable: true,
        configurable: true
      });
      var origSetRemoteDescription = window.RTCPeerConnection.prototype.setRemoteDescription;
      window.RTCPeerConnection.prototype.setRemoteDescription = function setRemoteDescription() {
        if (!this._ontrackpoly) {
          this._ontrackpoly = e => {
            // onaddstream does not fire when a track is added to an existing
            // stream. But stream.onaddtrack is implemented so we use that.
            e.stream.addEventListener('addtrack', te => {
              var receiver;
              if (window.RTCPeerConnection.prototype.getReceivers) {
                receiver = this.getReceivers().find(r => r.track && r.track.id === te.track.id);
              } else {
                receiver = {
                  track: te.track
                };
              }
              var event = new Event('track');
              event.track = te.track;
              event.receiver = receiver;
              event.transceiver = {
                receiver
              };
              event.streams = [e.stream];
              this.dispatchEvent(event);
            });
            e.stream.getTracks().forEach(track => {
              var receiver;
              if (window.RTCPeerConnection.prototype.getReceivers) {
                receiver = this.getReceivers().find(r => r.track && r.track.id === track.id);
              } else {
                receiver = {
                  track
                };
              }
              var event = new Event('track');
              event.track = track;
              event.receiver = receiver;
              event.transceiver = {
                receiver
              };
              event.streams = [e.stream];
              this.dispatchEvent(event);
            });
          };
          this.addEventListener('addstream', this._ontrackpoly);
        }
        return origSetRemoteDescription.apply(this, arguments);
      };
    } else {
      // even if RTCRtpTransceiver is in window, it is only used and
      // emitted in unified-plan. Unfortunately this means we need
      // to unconditionally wrap the event.
      wrapPeerConnectionEvent$1(window, 'track', e => {
        if (!e.transceiver) {
          Object.defineProperty(e, 'transceiver', {
            value: {
              receiver: e.receiver
            }
          });
        }
        return e;
      });
    }
  }
  function shimGetSendersWithDtmf$1(window) {
    // Overrides addTrack/removeTrack, depends on shimAddTrackRemoveTrack.
    if (typeof window === 'object' && window.RTCPeerConnection && !('getSenders' in window.RTCPeerConnection.prototype) && 'createDTMFSender' in window.RTCPeerConnection.prototype) {
      var shimSenderWithDtmf = function shimSenderWithDtmf(pc, track) {
        return {
          track,
          get dtmf() {
            if (this._dtmf === undefined) {
              if (track.kind === 'audio') {
                this._dtmf = pc.createDTMFSender(track);
              } else {
                this._dtmf = null;
              }
            }
            return this._dtmf;
          },
          _pc: pc
        };
      };

      // augment addTrack when getSenders is not available.
      if (!window.RTCPeerConnection.prototype.getSenders) {
        window.RTCPeerConnection.prototype.getSenders = function getSenders() {
          this._senders = this._senders || [];
          return this._senders.slice(); // return a copy of the internal state.
        };

        var origAddTrack = window.RTCPeerConnection.prototype.addTrack;
        window.RTCPeerConnection.prototype.addTrack = function addTrack(track, stream) {
          var sender = origAddTrack.apply(this, arguments);
          if (!sender) {
            sender = shimSenderWithDtmf(this, track);
            this._senders.push(sender);
          }
          return sender;
        };
        var origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;
        window.RTCPeerConnection.prototype.removeTrack = function removeTrack(sender) {
          origRemoveTrack.apply(this, arguments);
          var idx = this._senders.indexOf(sender);
          if (idx !== -1) {
            this._senders.splice(idx, 1);
          }
        };
      }
      var origAddStream = window.RTCPeerConnection.prototype.addStream;
      window.RTCPeerConnection.prototype.addStream = function addStream(stream) {
        this._senders = this._senders || [];
        origAddStream.apply(this, [stream]);
        stream.getTracks().forEach(track => {
          this._senders.push(shimSenderWithDtmf(this, track));
        });
      };
      var origRemoveStream = window.RTCPeerConnection.prototype.removeStream;
      window.RTCPeerConnection.prototype.removeStream = function removeStream(stream) {
        this._senders = this._senders || [];
        origRemoveStream.apply(this, [stream]);
        stream.getTracks().forEach(track => {
          var sender = this._senders.find(s => s.track === track);
          if (sender) {
            // remove sender
            this._senders.splice(this._senders.indexOf(sender), 1);
          }
        });
      };
    } else if (typeof window === 'object' && window.RTCPeerConnection && 'getSenders' in window.RTCPeerConnection.prototype && 'createDTMFSender' in window.RTCPeerConnection.prototype && window.RTCRtpSender && !('dtmf' in window.RTCRtpSender.prototype)) {
      var origGetSenders = window.RTCPeerConnection.prototype.getSenders;
      window.RTCPeerConnection.prototype.getSenders = function getSenders() {
        var senders = origGetSenders.apply(this, []);
        senders.forEach(sender => sender._pc = this);
        return senders;
      };
      Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {
        get() {
          if (this._dtmf === undefined) {
            if (this.track.kind === 'audio') {
              this._dtmf = this._pc.createDTMFSender(this.track);
            } else {
              this._dtmf = null;
            }
          }
          return this._dtmf;
        }
      });
    }
  }
  function shimGetStats$1(window) {
    if (!window.RTCPeerConnection) {
      return;
    }
    var origGetStats = window.RTCPeerConnection.prototype.getStats;
    window.RTCPeerConnection.prototype.getStats = function getStats() {
      var [selector, onSucc, onErr] = arguments;

      // If selector is a function then we are in the old style stats so just
      // pass back the original getStats format to avoid breaking old users.
      if (arguments.length > 0 && typeof selector === 'function') {
        return origGetStats.apply(this, arguments);
      }

      // When spec-style getStats is supported, return those when called with
      // either no arguments or the selector argument is null.
      if (origGetStats.length === 0 && (arguments.length === 0 || typeof selector !== 'function')) {
        return origGetStats.apply(this, []);
      }
      var fixChromeStats_ = function fixChromeStats_(response) {
        var standardReport = {};
        var reports = response.result();
        reports.forEach(report => {
          var standardStats = {
            id: report.id,
            timestamp: report.timestamp,
            type: {
              localcandidate: 'local-candidate',
              remotecandidate: 'remote-candidate'
            }[report.type] || report.type
          };
          report.names().forEach(name => {
            standardStats[name] = report.stat(name);
          });
          standardReport[standardStats.id] = standardStats;
        });
        return standardReport;
      };

      // shim getStats with maplike support
      var makeMapStats = function makeMapStats(stats) {
        return new Map(Object.keys(stats).map(key => [key, stats[key]]));
      };
      if (arguments.length >= 2) {
        var successCallbackWrapper_ = function successCallbackWrapper_(response) {
          onSucc(makeMapStats(fixChromeStats_(response)));
        };
        return origGetStats.apply(this, [successCallbackWrapper_, selector]);
      }

      // promise-support
      return new Promise((resolve, reject) => {
        origGetStats.apply(this, [function (response) {
          resolve(makeMapStats(fixChromeStats_(response)));
        }, reject]);
      }).then(onSucc, onErr);
    };
  }
  function shimSenderReceiverGetStats$1(window) {
    if (!(typeof window === 'object' && window.RTCPeerConnection && window.RTCRtpSender && window.RTCRtpReceiver)) {
      return;
    }

    // shim sender stats.
    if (!('getStats' in window.RTCRtpSender.prototype)) {
      var origGetSenders = window.RTCPeerConnection.prototype.getSenders;
      if (origGetSenders) {
        window.RTCPeerConnection.prototype.getSenders = function getSenders() {
          var senders = origGetSenders.apply(this, []);
          senders.forEach(sender => sender._pc = this);
          return senders;
        };
      }
      var origAddTrack = window.RTCPeerConnection.prototype.addTrack;
      if (origAddTrack) {
        window.RTCPeerConnection.prototype.addTrack = function addTrack() {
          var sender = origAddTrack.apply(this, arguments);
          sender._pc = this;
          return sender;
        };
      }
      window.RTCRtpSender.prototype.getStats = function getStats() {
        var sender = this;
        return this._pc.getStats().then(result =>
        /* Note: this will include stats of all senders that
         *   send a track with the same id as sender.track as
         *   it is not possible to identify the RTCRtpSender.
         */
        filterStats$1(result, sender.track, true));
      };
    }

    // shim receiver stats.
    if (!('getStats' in window.RTCRtpReceiver.prototype)) {
      var origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;
      if (origGetReceivers) {
        window.RTCPeerConnection.prototype.getReceivers = function getReceivers() {
          var receivers = origGetReceivers.apply(this, []);
          receivers.forEach(receiver => receiver._pc = this);
          return receivers;
        };
      }
      wrapPeerConnectionEvent$1(window, 'track', e => {
        e.receiver._pc = e.srcElement;
        return e;
      });
      window.RTCRtpReceiver.prototype.getStats = function getStats() {
        var receiver = this;
        return this._pc.getStats().then(result => filterStats$1(result, receiver.track, false));
      };
    }
    if (!('getStats' in window.RTCRtpSender.prototype && 'getStats' in window.RTCRtpReceiver.prototype)) {
      return;
    }

    // shim RTCPeerConnection.getStats(track).
    var origGetStats = window.RTCPeerConnection.prototype.getStats;
    window.RTCPeerConnection.prototype.getStats = function getStats() {
      if (arguments.length > 0 && arguments[0] instanceof window.MediaStreamTrack) {
        var track = arguments[0];
        var sender;
        var receiver;
        var err;
        this.getSenders().forEach(s => {
          if (s.track === track) {
            if (sender) {
              err = true;
            } else {
              sender = s;
            }
          }
        });
        this.getReceivers().forEach(r => {
          if (r.track === track) {
            if (receiver) {
              err = true;
            } else {
              receiver = r;
            }
          }
          return r.track === track;
        });
        if (err || sender && receiver) {
          return Promise.reject(new DOMException('There are more than one sender or receiver for the track.', 'InvalidAccessError'));
        } else if (sender) {
          return sender.getStats();
        } else if (receiver) {
          return receiver.getStats();
        }
        return Promise.reject(new DOMException('There is no sender or receiver for the track.', 'InvalidAccessError'));
      }
      return origGetStats.apply(this, arguments);
    };
  }
  function shimAddTrackRemoveTrackWithNative$1(window) {
    // shim addTrack/removeTrack with native variants in order to make
    // the interactions with legacy getLocalStreams behave as in other browsers.
    // Keeps a mapping stream.id => [stream, rtpsenders...]
    window.RTCPeerConnection.prototype.getLocalStreams = function getLocalStreams() {
      this._shimmedLocalStreams = this._shimmedLocalStreams || {};
      return Object.keys(this._shimmedLocalStreams).map(streamId => this._shimmedLocalStreams[streamId][0]);
    };
    var origAddTrack = window.RTCPeerConnection.prototype.addTrack;
    window.RTCPeerConnection.prototype.addTrack = function addTrack(track, stream) {
      if (!stream) {
        return origAddTrack.apply(this, arguments);
      }
      this._shimmedLocalStreams = this._shimmedLocalStreams || {};
      var sender = origAddTrack.apply(this, arguments);
      if (!this._shimmedLocalStreams[stream.id]) {
        this._shimmedLocalStreams[stream.id] = [stream, sender];
      } else if (this._shimmedLocalStreams[stream.id].indexOf(sender) === -1) {
        this._shimmedLocalStreams[stream.id].push(sender);
      }
      return sender;
    };
    var origAddStream = window.RTCPeerConnection.prototype.addStream;
    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {
      this._shimmedLocalStreams = this._shimmedLocalStreams || {};
      stream.getTracks().forEach(track => {
        var alreadyExists = this.getSenders().find(s => s.track === track);
        if (alreadyExists) {
          throw new DOMException('Track already exists.', 'InvalidAccessError');
        }
      });
      var existingSenders = this.getSenders();
      origAddStream.apply(this, arguments);
      var newSenders = this.getSenders().filter(newSender => existingSenders.indexOf(newSender) === -1);
      this._shimmedLocalStreams[stream.id] = [stream].concat(newSenders);
    };
    var origRemoveStream = window.RTCPeerConnection.prototype.removeStream;
    window.RTCPeerConnection.prototype.removeStream = function removeStream(stream) {
      this._shimmedLocalStreams = this._shimmedLocalStreams || {};
      delete this._shimmedLocalStreams[stream.id];
      return origRemoveStream.apply(this, arguments);
    };
    var origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;
    window.RTCPeerConnection.prototype.removeTrack = function removeTrack(sender) {
      this._shimmedLocalStreams = this._shimmedLocalStreams || {};
      if (sender) {
        Object.keys(this._shimmedLocalStreams).forEach(streamId => {
          var idx = this._shimmedLocalStreams[streamId].indexOf(sender);
          if (idx !== -1) {
            this._shimmedLocalStreams[streamId].splice(idx, 1);
          }
          if (this._shimmedLocalStreams[streamId].length === 1) {
            delete this._shimmedLocalStreams[streamId];
          }
        });
      }
      return origRemoveTrack.apply(this, arguments);
    };
  }
  function shimAddTrackRemoveTrack$1(window, browserDetails) {
    if (!window.RTCPeerConnection) {
      return;
    }
    // shim addTrack and removeTrack.
    if (window.RTCPeerConnection.prototype.addTrack && browserDetails.version >= 65) {
      return shimAddTrackRemoveTrackWithNative$1(window);
    }

    // also shim pc.getLocalStreams when addTrack is shimmed
    // to return the original streams.
    var origGetLocalStreams = window.RTCPeerConnection.prototype.getLocalStreams;
    window.RTCPeerConnection.prototype.getLocalStreams = function getLocalStreams() {
      var nativeStreams = origGetLocalStreams.apply(this);
      this._reverseStreams = this._reverseStreams || {};
      return nativeStreams.map(stream => this._reverseStreams[stream.id]);
    };
    var origAddStream = window.RTCPeerConnection.prototype.addStream;
    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {
      this._streams = this._streams || {};
      this._reverseStreams = this._reverseStreams || {};
      stream.getTracks().forEach(track => {
        var alreadyExists = this.getSenders().find(s => s.track === track);
        if (alreadyExists) {
          throw new DOMException('Track already exists.', 'InvalidAccessError');
        }
      });
      // Add identity mapping for consistency with addTrack.
      // Unless this is being used with a stream from addTrack.
      if (!this._reverseStreams[stream.id]) {
        var newStream = new window.MediaStream(stream.getTracks());
        this._streams[stream.id] = newStream;
        this._reverseStreams[newStream.id] = stream;
        stream = newStream;
      }
      origAddStream.apply(this, [stream]);
    };
    var origRemoveStream = window.RTCPeerConnection.prototype.removeStream;
    window.RTCPeerConnection.prototype.removeStream = function removeStream(stream) {
      this._streams = this._streams || {};
      this._reverseStreams = this._reverseStreams || {};
      origRemoveStream.apply(this, [this._streams[stream.id] || stream]);
      delete this._reverseStreams[this._streams[stream.id] ? this._streams[stream.id].id : stream.id];
      delete this._streams[stream.id];
    };
    window.RTCPeerConnection.prototype.addTrack = function addTrack(track, stream) {
      if (this.signalingState === 'closed') {
        throw new DOMException('The RTCPeerConnection\'s signalingState is \'closed\'.', 'InvalidStateError');
      }
      var streams = [].slice.call(arguments, 1);
      if (streams.length !== 1 || !streams[0].getTracks().find(t => t === track)) {
        // this is not fully correct but all we can manage without
        // [[associated MediaStreams]] internal slot.
        throw new DOMException('The adapter.js addTrack polyfill only supports a single ' + ' stream which is associated with the specified track.', 'NotSupportedError');
      }
      var alreadyExists = this.getSenders().find(s => s.track === track);
      if (alreadyExists) {
        throw new DOMException('Track already exists.', 'InvalidAccessError');
      }
      this._streams = this._streams || {};
      this._reverseStreams = this._reverseStreams || {};
      var oldStream = this._streams[stream.id];
      if (oldStream) {
        // this is using odd Chrome behaviour, use with caution:
        // https://bugs.chromium.org/p/webrtc/issues/detail?id=7815
        // Note: we rely on the high-level addTrack/dtmf shim to
        // create the sender with a dtmf sender.
        oldStream.addTrack(track);

        // Trigger ONN async.
        Promise.resolve().then(() => {
          this.dispatchEvent(new Event('negotiationneeded'));
        });
      } else {
        var newStream = new window.MediaStream([track]);
        this._streams[stream.id] = newStream;
        this._reverseStreams[newStream.id] = stream;
        this.addStream(newStream);
      }
      return this.getSenders().find(s => s.track === track);
    };

    // replace the internal stream id with the external one and
    // vice versa.
    function replaceInternalStreamId(pc, description) {
      var sdp = description.sdp;
      Object.keys(pc._reverseStreams || []).forEach(internalId => {
        var externalStream = pc._reverseStreams[internalId];
        var internalStream = pc._streams[externalStream.id];
        sdp = sdp.replace(new RegExp(internalStream.id, 'g'), externalStream.id);
      });
      return new RTCSessionDescription({
        type: description.type,
        sdp
      });
    }
    function replaceExternalStreamId(pc, description) {
      var sdp = description.sdp;
      Object.keys(pc._reverseStreams || []).forEach(internalId => {
        var externalStream = pc._reverseStreams[internalId];
        var internalStream = pc._streams[externalStream.id];
        sdp = sdp.replace(new RegExp(externalStream.id, 'g'), internalStream.id);
      });
      return new RTCSessionDescription({
        type: description.type,
        sdp
      });
    }
    ['createOffer', 'createAnswer'].forEach(function (method) {
      var nativeMethod = window.RTCPeerConnection.prototype[method];
      var methodObj = {
        [method]() {
          var args = arguments;
          var isLegacyCall = arguments.length && typeof arguments[0] === 'function';
          if (isLegacyCall) {
            return nativeMethod.apply(this, [description => {
              var desc = replaceInternalStreamId(this, description);
              args[0].apply(null, [desc]);
            }, err => {
              if (args[1]) {
                args[1].apply(null, err);
              }
            }, arguments[2]]);
          }
          return nativeMethod.apply(this, arguments).then(description => replaceInternalStreamId(this, description));
        }
      };
      window.RTCPeerConnection.prototype[method] = methodObj[method];
    });
    var origSetLocalDescription = window.RTCPeerConnection.prototype.setLocalDescription;
    window.RTCPeerConnection.prototype.setLocalDescription = function setLocalDescription() {
      if (!arguments.length || !arguments[0].type) {
        return origSetLocalDescription.apply(this, arguments);
      }
      arguments[0] = replaceExternalStreamId(this, arguments[0]);
      return origSetLocalDescription.apply(this, arguments);
    };

    // TODO: mangle getStats: https://w3c.github.io/webrtc-stats/#dom-rtcmediastreamstats-streamidentifier

    var origLocalDescription = Object.getOwnPropertyDescriptor(window.RTCPeerConnection.prototype, 'localDescription');
    Object.defineProperty(window.RTCPeerConnection.prototype, 'localDescription', {
      get() {
        var description = origLocalDescription.get.apply(this);
        if (description.type === '') {
          return description;
        }
        return replaceInternalStreamId(this, description);
      }
    });
    window.RTCPeerConnection.prototype.removeTrack = function removeTrack(sender) {
      if (this.signalingState === 'closed') {
        throw new DOMException('The RTCPeerConnection\'s signalingState is \'closed\'.', 'InvalidStateError');
      }
      // We can not yet check for sender instanceof RTCRtpSender
      // since we shim RTPSender. So we check if sender._pc is set.
      if (!sender._pc) {
        throw new DOMException('Argument 1 of RTCPeerConnection.removeTrack ' + 'does not implement interface RTCRtpSender.', 'TypeError');
      }
      var isLocal = sender._pc === this;
      if (!isLocal) {
        throw new DOMException('Sender was not created by this connection.', 'InvalidAccessError');
      }

      // Search for the native stream the senders track belongs to.
      this._streams = this._streams || {};
      var stream;
      Object.keys(this._streams).forEach(streamid => {
        var hasTrack = this._streams[streamid].getTracks().find(track => sender.track === track);
        if (hasTrack) {
          stream = this._streams[streamid];
        }
      });
      if (stream) {
        if (stream.getTracks().length === 1) {
          // if this is the last track of the stream, remove the stream. This
          // takes care of any shimmed _senders.
          this.removeStream(this._reverseStreams[stream.id]);
        } else {
          // relying on the same odd chrome behaviour as above.
          stream.removeTrack(sender.track);
        }
        this.dispatchEvent(new Event('negotiationneeded'));
      }
    };
  }
  function shimPeerConnection$1$1(window, browserDetails) {
    if (!window.RTCPeerConnection && window.webkitRTCPeerConnection) {
      // very basic support for old versions.
      window.RTCPeerConnection = window.webkitRTCPeerConnection;
    }
    if (!window.RTCPeerConnection) {
      return;
    }

    // shim implicit creation of RTCSessionDescription/RTCIceCandidate
    if (browserDetails.version < 53) {
      ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate'].forEach(function (method) {
        var nativeMethod = window.RTCPeerConnection.prototype[method];
        var methodObj = {
          [method]() {
            arguments[0] = new (method === 'addIceCandidate' ? window.RTCIceCandidate : window.RTCSessionDescription)(arguments[0]);
            return nativeMethod.apply(this, arguments);
          }
        };
        window.RTCPeerConnection.prototype[method] = methodObj[method];
      });
    }
  }

  // Attempt to fix ONN in plan-b mode.
  function fixNegotiationNeeded$1(window, browserDetails) {
    wrapPeerConnectionEvent$1(window, 'negotiationneeded', e => {
      var pc = e.target;
      if (browserDetails.version < 72 || pc.getConfiguration && pc.getConfiguration().sdpSemantics === 'plan-b') {
        if (pc.signalingState !== 'stable') {
          return;
        }
      }
      return e;
    });
  }
  var chromeShim$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    shimMediaStream: shimMediaStream$1,
    shimOnTrack: shimOnTrack$1$1,
    shimGetSendersWithDtmf: shimGetSendersWithDtmf$1,
    shimGetStats: shimGetStats$1,
    shimSenderReceiverGetStats: shimSenderReceiverGetStats$1,
    shimAddTrackRemoveTrackWithNative: shimAddTrackRemoveTrackWithNative$1,
    shimAddTrackRemoveTrack: shimAddTrackRemoveTrack$1,
    shimPeerConnection: shimPeerConnection$1$1,
    fixNegotiationNeeded: fixNegotiationNeeded$1,
    shimGetUserMedia: shimGetUserMedia$2$1,
    shimGetDisplayMedia: shimGetDisplayMedia$1$1
  });

  /*
   *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
   *
   *  Use of this source code is governed by a BSD-style license
   *  that can be found in the LICENSE file in the root of the source
   *  tree.
   */

  function shimGetUserMedia$1$1(window, browserDetails) {
    var navigator = window && window.navigator;
    var MediaStreamTrack = window && window.MediaStreamTrack;
    navigator.getUserMedia = function (constraints, onSuccess, onError) {
      // Replace Firefox 44+'s deprecation warning with unprefixed version.
      deprecated$1('navigator.getUserMedia', 'navigator.mediaDevices.getUserMedia');
      navigator.mediaDevices.getUserMedia(constraints).then(onSuccess, onError);
    };
    if (!(browserDetails.version > 55 && 'autoGainControl' in navigator.mediaDevices.getSupportedConstraints())) {
      var remap = function remap(obj, a, b) {
        if (a in obj && !(b in obj)) {
          obj[b] = obj[a];
          delete obj[a];
        }
      };
      var nativeGetUserMedia = navigator.mediaDevices.getUserMedia.bind(navigator.mediaDevices);
      navigator.mediaDevices.getUserMedia = function (c) {
        if (typeof c === 'object' && typeof c.audio === 'object') {
          c = JSON.parse(JSON.stringify(c));
          remap(c.audio, 'autoGainControl', 'mozAutoGainControl');
          remap(c.audio, 'noiseSuppression', 'mozNoiseSuppression');
        }
        return nativeGetUserMedia(c);
      };
      if (MediaStreamTrack && MediaStreamTrack.prototype.getSettings) {
        var nativeGetSettings = MediaStreamTrack.prototype.getSettings;
        MediaStreamTrack.prototype.getSettings = function () {
          var obj = nativeGetSettings.apply(this, arguments);
          remap(obj, 'mozAutoGainControl', 'autoGainControl');
          remap(obj, 'mozNoiseSuppression', 'noiseSuppression');
          return obj;
        };
      }
      if (MediaStreamTrack && MediaStreamTrack.prototype.applyConstraints) {
        var nativeApplyConstraints = MediaStreamTrack.prototype.applyConstraints;
        MediaStreamTrack.prototype.applyConstraints = function (c) {
          if (this.kind === 'audio' && typeof c === 'object') {
            c = JSON.parse(JSON.stringify(c));
            remap(c, 'autoGainControl', 'mozAutoGainControl');
            remap(c, 'noiseSuppression', 'mozNoiseSuppression');
          }
          return nativeApplyConstraints.apply(this, [c]);
        };
      }
    }
  }

  /*
   *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.
   *
   *  Use of this source code is governed by a BSD-style license
   *  that can be found in the LICENSE file in the root of the source
   *  tree.
   */

  function shimGetDisplayMedia$2(window, preferredMediaSource) {
    if (window.navigator.mediaDevices && 'getDisplayMedia' in window.navigator.mediaDevices) {
      return;
    }
    if (!window.navigator.mediaDevices) {
      return;
    }
    window.navigator.mediaDevices.getDisplayMedia = function getDisplayMedia(constraints) {
      if (!(constraints && constraints.video)) {
        var err = new DOMException('getDisplayMedia without video ' + 'constraints is undefined');
        err.name = 'NotFoundError';
        // from https://heycam.github.io/webidl/#idl-DOMException-error-names
        err.code = 8;
        return Promise.reject(err);
      }
      if (constraints.video === true) {
        constraints.video = {
          mediaSource: preferredMediaSource
        };
      } else {
        constraints.video.mediaSource = preferredMediaSource;
      }
      return window.navigator.mediaDevices.getUserMedia(constraints);
    };
  }

  /*
   *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
   *
   *  Use of this source code is governed by a BSD-style license
   *  that can be found in the LICENSE file in the root of the source
   *  tree.
   */

  function shimOnTrack$2(window) {
    if (typeof window === 'object' && window.RTCTrackEvent && 'receiver' in window.RTCTrackEvent.prototype && !('transceiver' in window.RTCTrackEvent.prototype)) {
      Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {
        get() {
          return {
            receiver: this.receiver
          };
        }
      });
    }
  }
  function shimPeerConnection$2(window, browserDetails) {
    if (typeof window !== 'object' || !(window.RTCPeerConnection || window.mozRTCPeerConnection)) {
      return; // probably media.peerconnection.enabled=false in about:config
    }

    if (!window.RTCPeerConnection && window.mozRTCPeerConnection) {
      // very basic support for old versions.
      window.RTCPeerConnection = window.mozRTCPeerConnection;
    }
    if (browserDetails.version < 53) {
      // shim away need for obsolete RTCIceCandidate/RTCSessionDescription.
      ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate'].forEach(function (method) {
        var nativeMethod = window.RTCPeerConnection.prototype[method];
        var methodObj = {
          [method]() {
            arguments[0] = new (method === 'addIceCandidate' ? window.RTCIceCandidate : window.RTCSessionDescription)(arguments[0]);
            return nativeMethod.apply(this, arguments);
          }
        };
        window.RTCPeerConnection.prototype[method] = methodObj[method];
      });
    }
    var modernStatsTypes = {
      inboundrtp: 'inbound-rtp',
      outboundrtp: 'outbound-rtp',
      candidatepair: 'candidate-pair',
      localcandidate: 'local-candidate',
      remotecandidate: 'remote-candidate'
    };
    var nativeGetStats = window.RTCPeerConnection.prototype.getStats;
    window.RTCPeerConnection.prototype.getStats = function getStats() {
      var [selector, onSucc, onErr] = arguments;
      return nativeGetStats.apply(this, [selector || null]).then(stats => {
        if (browserDetails.version < 53 && !onSucc) {
          // Shim only promise getStats with spec-hyphens in type names
          // Leave callback version alone; misc old uses of forEach before Map
          try {
            stats.forEach(stat => {
              stat.type = modernStatsTypes[stat.type] || stat.type;
            });
          } catch (e) {
            if (e.name !== 'TypeError') {
              throw e;
            }
            // Avoid TypeError: "type" is read-only, in old versions. 34-43ish
            stats.forEach((stat, i) => {
              stats.set(i, Object.assign({}, stat, {
                type: modernStatsTypes[stat.type] || stat.type
              }));
            });
          }
        }
        return stats;
      }).then(onSucc, onErr);
    };
  }
  function shimSenderGetStats$1(window) {
    if (!(typeof window === 'object' && window.RTCPeerConnection && window.RTCRtpSender)) {
      return;
    }
    if (window.RTCRtpSender && 'getStats' in window.RTCRtpSender.prototype) {
      return;
    }
    var origGetSenders = window.RTCPeerConnection.prototype.getSenders;
    if (origGetSenders) {
      window.RTCPeerConnection.prototype.getSenders = function getSenders() {
        var senders = origGetSenders.apply(this, []);
        senders.forEach(sender => sender._pc = this);
        return senders;
      };
    }
    var origAddTrack = window.RTCPeerConnection.prototype.addTrack;
    if (origAddTrack) {
      window.RTCPeerConnection.prototype.addTrack = function addTrack() {
        var sender = origAddTrack.apply(this, arguments);
        sender._pc = this;
        return sender;
      };
    }
    window.RTCRtpSender.prototype.getStats = function getStats() {
      return this.track ? this._pc.getStats(this.track) : Promise.resolve(new Map());
    };
  }
  function shimReceiverGetStats$1(window) {
    if (!(typeof window === 'object' && window.RTCPeerConnection && window.RTCRtpSender)) {
      return;
    }
    if (window.RTCRtpSender && 'getStats' in window.RTCRtpReceiver.prototype) {
      return;
    }
    var origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;
    if (origGetReceivers) {
      window.RTCPeerConnection.prototype.getReceivers = function getReceivers() {
        var receivers = origGetReceivers.apply(this, []);
        receivers.forEach(receiver => receiver._pc = this);
        return receivers;
      };
    }
    wrapPeerConnectionEvent$1(window, 'track', e => {
      e.receiver._pc = e.srcElement;
      return e;
    });
    window.RTCRtpReceiver.prototype.getStats = function getStats() {
      return this._pc.getStats(this.track);
    };
  }
  function shimRemoveStream$1(window) {
    if (!window.RTCPeerConnection || 'removeStream' in window.RTCPeerConnection.prototype) {
      return;
    }
    window.RTCPeerConnection.prototype.removeStream = function removeStream(stream) {
      deprecated$1('removeStream', 'removeTrack');
      this.getSenders().forEach(sender => {
        if (sender.track && stream.getTracks().includes(sender.track)) {
          this.removeTrack(sender);
        }
      });
    };
  }
  function shimRTCDataChannel$1(window) {
    // rename DataChannel to RTCDataChannel (native fix in FF60):
    // https://bugzilla.mozilla.org/show_bug.cgi?id=1173851
    if (window.DataChannel && !window.RTCDataChannel) {
      window.RTCDataChannel = window.DataChannel;
    }
  }
  function shimAddTransceiver$1(window) {
    // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647
    // Firefox ignores the init sendEncodings options passed to addTransceiver
    // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918
    if (!(typeof window === 'object' && window.RTCPeerConnection)) {
      return;
    }
    var origAddTransceiver = window.RTCPeerConnection.prototype.addTransceiver;
    if (origAddTransceiver) {
      window.RTCPeerConnection.prototype.addTransceiver = function addTransceiver() {
        this.setParametersPromises = [];
        // WebIDL input coercion and validation
        var sendEncodings = arguments[1] && arguments[1].sendEncodings;
        if (sendEncodings === undefined) {
          sendEncodings = [];
        }
        sendEncodings = [...sendEncodings];
        var shouldPerformCheck = sendEncodings.length > 0;
        if (shouldPerformCheck) {
          // If sendEncodings params are provided, validate grammar
          sendEncodings.forEach(encodingParam => {
            if ('rid' in encodingParam) {
              var ridRegex = /^[a-z0-9]{0,16}$/i;
              if (!ridRegex.test(encodingParam.rid)) {
                throw new TypeError('Invalid RID value provided.');
              }
            }
            if ('scaleResolutionDownBy' in encodingParam) {
              if (!(parseFloat(encodingParam.scaleResolutionDownBy) >= 1.0)) {
                throw new RangeError('scale_resolution_down_by must be >= 1.0');
              }
            }
            if ('maxFramerate' in encodingParam) {
              if (!(parseFloat(encodingParam.maxFramerate) >= 0)) {
                throw new RangeError('max_framerate must be >= 0.0');
              }
            }
          });
        }
        var transceiver = origAddTransceiver.apply(this, arguments);
        if (shouldPerformCheck) {
          // Check if the init options were applied. If not we do this in an
          // asynchronous way and save the promise reference in a global object.
          // This is an ugly hack, but at the same time is way more robust than
          // checking the sender parameters before and after the createOffer
          // Also note that after the createoffer we are not 100% sure that
          // the params were asynchronously applied so we might miss the
          // opportunity to recreate offer.
          var {
            sender
          } = transceiver;
          var params = sender.getParameters();
          if (!('encodings' in params) ||
          // Avoid being fooled by patched getParameters() below.
          params.encodings.length === 1 && Object.keys(params.encodings[0]).length === 0) {
            params.encodings = sendEncodings;
            sender.sendEncodings = sendEncodings;
            this.setParametersPromises.push(sender.setParameters(params).then(() => {
              delete sender.sendEncodings;
            }).catch(() => {
              delete sender.sendEncodings;
            }));
          }
        }
        return transceiver;
      };
    }
  }
  function shimGetParameters$1(window) {
    if (!(typeof window === 'object' && window.RTCRtpSender)) {
      return;
    }
    var origGetParameters = window.RTCRtpSender.prototype.getParameters;
    if (origGetParameters) {
      window.RTCRtpSender.prototype.getParameters = function getParameters() {
        var params = origGetParameters.apply(this, arguments);
        if (!('encodings' in params)) {
          params.encodings = [].concat(this.sendEncodings || [{}]);
        }
        return params;
      };
    }
  }
  function shimCreateOffer$1(window) {
    // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647
    // Firefox ignores the init sendEncodings options passed to addTransceiver
    // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918
    if (!(typeof window === 'object' && window.RTCPeerConnection)) {
      return;
    }
    var origCreateOffer = window.RTCPeerConnection.prototype.createOffer;
    window.RTCPeerConnection.prototype.createOffer = function createOffer() {
      if (this.setParametersPromises && this.setParametersPromises.length) {
        return Promise.all(this.setParametersPromises).then(() => {
          return origCreateOffer.apply(this, arguments);
        }).finally(() => {
          this.setParametersPromises = [];
        });
      }
      return origCreateOffer.apply(this, arguments);
    };
  }
  function shimCreateAnswer$1(window) {
    // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647
    // Firefox ignores the init sendEncodings options passed to addTransceiver
    // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918
    if (!(typeof window === 'object' && window.RTCPeerConnection)) {
      return;
    }
    var origCreateAnswer = window.RTCPeerConnection.prototype.createAnswer;
    window.RTCPeerConnection.prototype.createAnswer = function createAnswer() {
      if (this.setParametersPromises && this.setParametersPromises.length) {
        return Promise.all(this.setParametersPromises).then(() => {
          return origCreateAnswer.apply(this, arguments);
        }).finally(() => {
          this.setParametersPromises = [];
        });
      }
      return origCreateAnswer.apply(this, arguments);
    };
  }
  var firefoxShim$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    shimOnTrack: shimOnTrack$2,
    shimPeerConnection: shimPeerConnection$2,
    shimSenderGetStats: shimSenderGetStats$1,
    shimReceiverGetStats: shimReceiverGetStats$1,
    shimRemoveStream: shimRemoveStream$1,
    shimRTCDataChannel: shimRTCDataChannel$1,
    shimAddTransceiver: shimAddTransceiver$1,
    shimGetParameters: shimGetParameters$1,
    shimCreateOffer: shimCreateOffer$1,
    shimCreateAnswer: shimCreateAnswer$1,
    shimGetUserMedia: shimGetUserMedia$1$1,
    shimGetDisplayMedia: shimGetDisplayMedia$2
  });

  /*
   *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
   *
   *  Use of this source code is governed by a BSD-style license
   *  that can be found in the LICENSE file in the root of the source
   *  tree.
   */

  function shimLocalStreamsAPI$1(window) {
    if (typeof window !== 'object' || !window.RTCPeerConnection) {
      return;
    }
    if (!('getLocalStreams' in window.RTCPeerConnection.prototype)) {
      window.RTCPeerConnection.prototype.getLocalStreams = function getLocalStreams() {
        if (!this._localStreams) {
          this._localStreams = [];
        }
        return this._localStreams;
      };
    }
    if (!('addStream' in window.RTCPeerConnection.prototype)) {
      var _addTrack = window.RTCPeerConnection.prototype.addTrack;
      window.RTCPeerConnection.prototype.addStream = function addStream(stream) {
        if (!this._localStreams) {
          this._localStreams = [];
        }
        if (!this._localStreams.includes(stream)) {
          this._localStreams.push(stream);
        }
        // Try to emulate Chrome's behaviour of adding in audio-video order.
        // Safari orders by track id.
        stream.getAudioTracks().forEach(track => _addTrack.call(this, track, stream));
        stream.getVideoTracks().forEach(track => _addTrack.call(this, track, stream));
      };
      window.RTCPeerConnection.prototype.addTrack = function addTrack(track) {
        for (var _len = arguments.length, streams = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          streams[_key - 1] = arguments[_key];
        }
        if (streams) {
          streams.forEach(stream => {
            if (!this._localStreams) {
              this._localStreams = [stream];
            } else if (!this._localStreams.includes(stream)) {
              this._localStreams.push(stream);
            }
          });
        }
        return _addTrack.apply(this, arguments);
      };
    }
    if (!('removeStream' in window.RTCPeerConnection.prototype)) {
      window.RTCPeerConnection.prototype.removeStream = function removeStream(stream) {
        if (!this._localStreams) {
          this._localStreams = [];
        }
        var index = this._localStreams.indexOf(stream);
        if (index === -1) {
          return;
        }
        this._localStreams.splice(index, 1);
        var tracks = stream.getTracks();
        this.getSenders().forEach(sender => {
          if (tracks.includes(sender.track)) {
            this.removeTrack(sender);
          }
        });
      };
    }
  }
  function shimRemoteStreamsAPI$1(window) {
    if (typeof window !== 'object' || !window.RTCPeerConnection) {
      return;
    }
    if (!('getRemoteStreams' in window.RTCPeerConnection.prototype)) {
      window.RTCPeerConnection.prototype.getRemoteStreams = function getRemoteStreams() {
        return this._remoteStreams ? this._remoteStreams : [];
      };
    }
    if (!('onaddstream' in window.RTCPeerConnection.prototype)) {
      Object.defineProperty(window.RTCPeerConnection.prototype, 'onaddstream', {
        get() {
          return this._onaddstream;
        },
        set(f) {
          if (this._onaddstream) {
            this.removeEventListener('addstream', this._onaddstream);
            this.removeEventListener('track', this._onaddstreampoly);
          }
          this.addEventListener('addstream', this._onaddstream = f);
          this.addEventListener('track', this._onaddstreampoly = e => {
            e.streams.forEach(stream => {
              if (!this._remoteStreams) {
                this._remoteStreams = [];
              }
              if (this._remoteStreams.includes(stream)) {
                return;
              }
              this._remoteStreams.push(stream);
              var event = new Event('addstream');
              event.stream = stream;
              this.dispatchEvent(event);
            });
          });
        }
      });
      var origSetRemoteDescription = window.RTCPeerConnection.prototype.setRemoteDescription;
      window.RTCPeerConnection.prototype.setRemoteDescription = function setRemoteDescription() {
        var pc = this;
        if (!this._onaddstreampoly) {
          this.addEventListener('track', this._onaddstreampoly = function (e) {
            e.streams.forEach(stream => {
              if (!pc._remoteStreams) {
                pc._remoteStreams = [];
              }
              if (pc._remoteStreams.indexOf(stream) >= 0) {
                return;
              }
              pc._remoteStreams.push(stream);
              var event = new Event('addstream');
              event.stream = stream;
              pc.dispatchEvent(event);
            });
          });
        }
        return origSetRemoteDescription.apply(pc, arguments);
      };
    }
  }
  function shimCallbacksAPI$1(window) {
    if (typeof window !== 'object' || !window.RTCPeerConnection) {
      return;
    }
    var prototype = window.RTCPeerConnection.prototype;
    var origCreateOffer = prototype.createOffer;
    var origCreateAnswer = prototype.createAnswer;
    var setLocalDescription = prototype.setLocalDescription;
    var setRemoteDescription = prototype.setRemoteDescription;
    var addIceCandidate = prototype.addIceCandidate;
    prototype.createOffer = function createOffer(successCallback, failureCallback) {
      var options = arguments.length >= 2 ? arguments[2] : arguments[0];
      var promise = origCreateOffer.apply(this, [options]);
      if (!failureCallback) {
        return promise;
      }
      promise.then(successCallback, failureCallback);
      return Promise.resolve();
    };
    prototype.createAnswer = function createAnswer(successCallback, failureCallback) {
      var options = arguments.length >= 2 ? arguments[2] : arguments[0];
      var promise = origCreateAnswer.apply(this, [options]);
      if (!failureCallback) {
        return promise;
      }
      promise.then(successCallback, failureCallback);
      return Promise.resolve();
    };
    var withCallback = function withCallback(description, successCallback, failureCallback) {
      var promise = setLocalDescription.apply(this, [description]);
      if (!failureCallback) {
        return promise;
      }
      promise.then(successCallback, failureCallback);
      return Promise.resolve();
    };
    prototype.setLocalDescription = withCallback;
    withCallback = function withCallback(description, successCallback, failureCallback) {
      var promise = setRemoteDescription.apply(this, [description]);
      if (!failureCallback) {
        return promise;
      }
      promise.then(successCallback, failureCallback);
      return Promise.resolve();
    };
    prototype.setRemoteDescription = withCallback;
    withCallback = function withCallback(candidate, successCallback, failureCallback) {
      var promise = addIceCandidate.apply(this, [candidate]);
      if (!failureCallback) {
        return promise;
      }
      promise.then(successCallback, failureCallback);
      return Promise.resolve();
    };
    prototype.addIceCandidate = withCallback;
  }
  function shimGetUserMedia$3(window) {
    var navigator = window && window.navigator;
    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
      // shim not needed in Safari 12.1
      var mediaDevices = navigator.mediaDevices;
      var _getUserMedia = mediaDevices.getUserMedia.bind(mediaDevices);
      navigator.mediaDevices.getUserMedia = constraints => {
        return _getUserMedia(shimConstraints$1(constraints));
      };
    }
    if (!navigator.getUserMedia && navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
      navigator.getUserMedia = function getUserMedia(constraints, cb, errcb) {
        navigator.mediaDevices.getUserMedia(constraints).then(cb, errcb);
      }.bind(navigator);
    }
  }
  function shimConstraints$1(constraints) {
    if (constraints && constraints.video !== undefined) {
      return Object.assign({}, constraints, {
        video: compactObject$1(constraints.video)
      });
    }
    return constraints;
  }
  function shimRTCIceServerUrls$1(window) {
    if (!window.RTCPeerConnection) {
      return;
    }
    // migrate from non-spec RTCIceServer.url to RTCIceServer.urls
    var OrigPeerConnection = window.RTCPeerConnection;
    window.RTCPeerConnection = function RTCPeerConnection(pcConfig, pcConstraints) {
      if (pcConfig && pcConfig.iceServers) {
        var newIceServers = [];
        for (var _i3 = 0; _i3 < pcConfig.iceServers.length; _i3++) {
          var server = pcConfig.iceServers[_i3];
          if (!server.hasOwnProperty('urls') && server.hasOwnProperty('url')) {
            deprecated$1('RTCIceServer.url', 'RTCIceServer.urls');
            server = JSON.parse(JSON.stringify(server));
            server.urls = server.url;
            delete server.url;
            newIceServers.push(server);
          } else {
            newIceServers.push(pcConfig.iceServers[_i3]);
          }
        }
        pcConfig.iceServers = newIceServers;
      }
      return new OrigPeerConnection(pcConfig, pcConstraints);
    };
    window.RTCPeerConnection.prototype = OrigPeerConnection.prototype;
    // wrap static methods. Currently just generateCertificate.
    if ('generateCertificate' in OrigPeerConnection) {
      Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {
        get() {
          return OrigPeerConnection.generateCertificate;
        }
      });
    }
  }
  function shimTrackEventTransceiver$1(window) {
    // Add event.transceiver member over deprecated event.receiver
    if (typeof window === 'object' && window.RTCTrackEvent && 'receiver' in window.RTCTrackEvent.prototype && !('transceiver' in window.RTCTrackEvent.prototype)) {
      Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {
        get() {
          return {
            receiver: this.receiver
          };
        }
      });
    }
  }
  function shimCreateOfferLegacy$1(window) {
    var origCreateOffer = window.RTCPeerConnection.prototype.createOffer;
    window.RTCPeerConnection.prototype.createOffer = function createOffer(offerOptions) {
      if (offerOptions) {
        if (typeof offerOptions.offerToReceiveAudio !== 'undefined') {
          // support bit values
          offerOptions.offerToReceiveAudio = !!offerOptions.offerToReceiveAudio;
        }
        var audioTransceiver = this.getTransceivers().find(transceiver => transceiver.receiver.track.kind === 'audio');
        if (offerOptions.offerToReceiveAudio === false && audioTransceiver) {
          if (audioTransceiver.direction === 'sendrecv') {
            if (audioTransceiver.setDirection) {
              audioTransceiver.setDirection('sendonly');
            } else {
              audioTransceiver.direction = 'sendonly';
            }
          } else if (audioTransceiver.direction === 'recvonly') {
            if (audioTransceiver.setDirection) {
              audioTransceiver.setDirection('inactive');
            } else {
              audioTransceiver.direction = 'inactive';
            }
          }
        } else if (offerOptions.offerToReceiveAudio === true && !audioTransceiver) {
          this.addTransceiver('audio', {
            direction: 'recvonly'
          });
        }
        if (typeof offerOptions.offerToReceiveVideo !== 'undefined') {
          // support bit values
          offerOptions.offerToReceiveVideo = !!offerOptions.offerToReceiveVideo;
        }
        var videoTransceiver = this.getTransceivers().find(transceiver => transceiver.receiver.track.kind === 'video');
        if (offerOptions.offerToReceiveVideo === false && videoTransceiver) {
          if (videoTransceiver.direction === 'sendrecv') {
            if (videoTransceiver.setDirection) {
              videoTransceiver.setDirection('sendonly');
            } else {
              videoTransceiver.direction = 'sendonly';
            }
          } else if (videoTransceiver.direction === 'recvonly') {
            if (videoTransceiver.setDirection) {
              videoTransceiver.setDirection('inactive');
            } else {
              videoTransceiver.direction = 'inactive';
            }
          }
        } else if (offerOptions.offerToReceiveVideo === true && !videoTransceiver) {
          this.addTransceiver('video', {
            direction: 'recvonly'
          });
        }
      }
      return origCreateOffer.apply(this, arguments);
    };
  }
  function shimAudioContext$1(window) {
    if (typeof window !== 'object' || window.AudioContext) {
      return;
    }
    window.AudioContext = window.webkitAudioContext;
  }
  var safariShim$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    shimLocalStreamsAPI: shimLocalStreamsAPI$1,
    shimRemoteStreamsAPI: shimRemoteStreamsAPI$1,
    shimCallbacksAPI: shimCallbacksAPI$1,
    shimGetUserMedia: shimGetUserMedia$3,
    shimConstraints: shimConstraints$1,
    shimRTCIceServerUrls: shimRTCIceServerUrls$1,
    shimTrackEventTransceiver: shimTrackEventTransceiver$1,
    shimCreateOfferLegacy: shimCreateOfferLegacy$1,
    shimAudioContext: shimAudioContext$1
  });
  var sdp$1$1 = {
    exports: {}
  };

  /* eslint-env node */

  (function (module) {
    // SDP helpers.
    var SDPUtils = {};

    // Generate an alphanumeric identifier for cname or mids.
    // TODO: use UUIDs instead? https://gist.github.com/jed/982883
    SDPUtils.generateIdentifier = function () {
      return Math.random().toString(36).substr(2, 10);
    };

    // The RTCP CNAME used by all peerconnections from the same JS.
    SDPUtils.localCName = SDPUtils.generateIdentifier();

    // Splits SDP into lines, dealing with both CRLF and LF.
    SDPUtils.splitLines = function (blob) {
      return blob.trim().split('\n').map(line => line.trim());
    };
    // Splits SDP into sessionpart and mediasections. Ensures CRLF.
    SDPUtils.splitSections = function (blob) {
      var parts = blob.split('\nm=');
      return parts.map((part, index) => (index > 0 ? 'm=' + part : part).trim() + '\r\n');
    };

    // Returns the session description.
    SDPUtils.getDescription = function (blob) {
      var sections = SDPUtils.splitSections(blob);
      return sections && sections[0];
    };

    // Returns the individual media sections.
    SDPUtils.getMediaSections = function (blob) {
      var sections = SDPUtils.splitSections(blob);
      sections.shift();
      return sections;
    };

    // Returns lines that start with a certain prefix.
    SDPUtils.matchPrefix = function (blob, prefix) {
      return SDPUtils.splitLines(blob).filter(line => line.indexOf(prefix) === 0);
    };

    // Parses an ICE candidate line. Sample input:
    // candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8
    // rport 55996"
    // Input can be prefixed with a=.
    SDPUtils.parseCandidate = function (line) {
      var parts;
      // Parse both variants.
      if (line.indexOf('a=candidate:') === 0) {
        parts = line.substring(12).split(' ');
      } else {
        parts = line.substring(10).split(' ');
      }
      var candidate = {
        foundation: parts[0],
        component: {
          1: 'rtp',
          2: 'rtcp'
        }[parts[1]] || parts[1],
        protocol: parts[2].toLowerCase(),
        priority: parseInt(parts[3], 10),
        ip: parts[4],
        address: parts[4],
        // address is an alias for ip.
        port: parseInt(parts[5], 10),
        // skip parts[6] == 'typ'
        type: parts[7]
      };
      for (var _i4 = 8; _i4 < parts.length; _i4 += 2) {
        switch (parts[_i4]) {
          case 'raddr':
            candidate.relatedAddress = parts[_i4 + 1];
            break;
          case 'rport':
            candidate.relatedPort = parseInt(parts[_i4 + 1], 10);
            break;
          case 'tcptype':
            candidate.tcpType = parts[_i4 + 1];
            break;
          case 'ufrag':
            candidate.ufrag = parts[_i4 + 1]; // for backward compatibility.
            candidate.usernameFragment = parts[_i4 + 1];
            break;
          default:
            // extension handling, in particular ufrag. Don't overwrite.
            if (candidate[parts[_i4]] === undefined) {
              candidate[parts[_i4]] = parts[_i4 + 1];
            }
            break;
        }
      }
      return candidate;
    };

    // Translates a candidate object into SDP candidate attribute.
    // This does not include the a= prefix!
    SDPUtils.writeCandidate = function (candidate) {
      var sdp = [];
      sdp.push(candidate.foundation);
      var component = candidate.component;
      if (component === 'rtp') {
        sdp.push(1);
      } else if (component === 'rtcp') {
        sdp.push(2);
      } else {
        sdp.push(component);
      }
      sdp.push(candidate.protocol.toUpperCase());
      sdp.push(candidate.priority);
      sdp.push(candidate.address || candidate.ip);
      sdp.push(candidate.port);
      var type = candidate.type;
      sdp.push('typ');
      sdp.push(type);
      if (type !== 'host' && candidate.relatedAddress && candidate.relatedPort) {
        sdp.push('raddr');
        sdp.push(candidate.relatedAddress);
        sdp.push('rport');
        sdp.push(candidate.relatedPort);
      }
      if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {
        sdp.push('tcptype');
        sdp.push(candidate.tcpType);
      }
      if (candidate.usernameFragment || candidate.ufrag) {
        sdp.push('ufrag');
        sdp.push(candidate.usernameFragment || candidate.ufrag);
      }
      return 'candidate:' + sdp.join(' ');
    };

    // Parses an ice-options line, returns an array of option tags.
    // Sample input:
    // a=ice-options:foo bar
    SDPUtils.parseIceOptions = function (line) {
      return line.substr(14).split(' ');
    };

    // Parses a rtpmap line, returns RTCRtpCoddecParameters. Sample input:
    // a=rtpmap:111 opus/48000/2
    SDPUtils.parseRtpMap = function (line) {
      var parts = line.substr(9).split(' ');
      var parsed = {
        payloadType: parseInt(parts.shift(), 10) // was: id
      };

      parts = parts[0].split('/');
      parsed.name = parts[0];
      parsed.clockRate = parseInt(parts[1], 10); // was: clockrate
      parsed.channels = parts.length === 3 ? parseInt(parts[2], 10) : 1;
      // legacy alias, got renamed back to channels in ORTC.
      parsed.numChannels = parsed.channels;
      return parsed;
    };

    // Generates a rtpmap line from RTCRtpCodecCapability or
    // RTCRtpCodecParameters.
    SDPUtils.writeRtpMap = function (codec) {
      var pt = codec.payloadType;
      if (codec.preferredPayloadType !== undefined) {
        pt = codec.preferredPayloadType;
      }
      var channels = codec.channels || codec.numChannels || 1;
      return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate + (channels !== 1 ? '/' + channels : '') + '\r\n';
    };

    // Parses a extmap line (headerextension from RFC 5285). Sample input:
    // a=extmap:2 urn:ietf:params:rtp-hdrext:toffset
    // a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset
    SDPUtils.parseExtmap = function (line) {
      var parts = line.substr(9).split(' ');
      return {
        id: parseInt(parts[0], 10),
        direction: parts[0].indexOf('/') > 0 ? parts[0].split('/')[1] : 'sendrecv',
        uri: parts[1]
      };
    };

    // Generates an extmap line from RTCRtpHeaderExtensionParameters or
    // RTCRtpHeaderExtension.
    SDPUtils.writeExtmap = function (headerExtension) {
      return 'a=extmap:' + (headerExtension.id || headerExtension.preferredId) + (headerExtension.direction && headerExtension.direction !== 'sendrecv' ? '/' + headerExtension.direction : '') + ' ' + headerExtension.uri + '\r\n';
    };

    // Parses a fmtp line, returns dictionary. Sample input:
    // a=fmtp:96 vbr=on;cng=on
    // Also deals with vbr=on; cng=on
    SDPUtils.parseFmtp = function (line) {
      var parsed = {};
      var kv;
      var parts = line.substr(line.indexOf(' ') + 1).split(';');
      for (var j = 0; j < parts.length; j++) {
        kv = parts[j].trim().split('=');
        parsed[kv[0].trim()] = kv[1];
      }
      return parsed;
    };

    // Generates a fmtp line from RTCRtpCodecCapability or RTCRtpCodecParameters.
    SDPUtils.writeFmtp = function (codec) {
      var line = '';
      var pt = codec.payloadType;
      if (codec.preferredPayloadType !== undefined) {
        pt = codec.preferredPayloadType;
      }
      if (codec.parameters && Object.keys(codec.parameters).length) {
        var params = [];
        Object.keys(codec.parameters).forEach(param => {
          if (codec.parameters[param] !== undefined) {
            params.push(param + '=' + codec.parameters[param]);
          } else {
            params.push(param);
          }
        });
        line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\r\n';
      }
      return line;
    };

    // Parses a rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:
    // a=rtcp-fb:98 nack rpsi
    SDPUtils.parseRtcpFb = function (line) {
      var parts = line.substr(line.indexOf(' ') + 1).split(' ');
      return {
        type: parts.shift(),
        parameter: parts.join(' ')
      };
    };

    // Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.
    SDPUtils.writeRtcpFb = function (codec) {
      var lines = '';
      var pt = codec.payloadType;
      if (codec.preferredPayloadType !== undefined) {
        pt = codec.preferredPayloadType;
      }
      if (codec.rtcpFeedback && codec.rtcpFeedback.length) {
        // FIXME: special handling for trr-int?
        codec.rtcpFeedback.forEach(fb => {
          lines += 'a=rtcp-fb:' + pt + ' ' + fb.type + (fb.parameter && fb.parameter.length ? ' ' + fb.parameter : '') + '\r\n';
        });
      }
      return lines;
    };

    // Parses a RFC 5576 ssrc media attribute. Sample input:
    // a=ssrc:3735928559 cname:something
    SDPUtils.parseSsrcMedia = function (line) {
      var sp = line.indexOf(' ');
      var parts = {
        ssrc: parseInt(line.substr(7, sp - 7), 10)
      };
      var colon = line.indexOf(':', sp);
      if (colon > -1) {
        parts.attribute = line.substr(sp + 1, colon - sp - 1);
        parts.value = line.substr(colon + 1);
      } else {
        parts.attribute = line.substr(sp + 1);
      }
      return parts;
    };

    // Parse a ssrc-group line (see RFC 5576). Sample input:
    // a=ssrc-group:semantics 12 34
    SDPUtils.parseSsrcGroup = function (line) {
      var parts = line.substr(13).split(' ');
      return {
        semantics: parts.shift(),
        ssrcs: parts.map(ssrc => parseInt(ssrc, 10))
      };
    };

    // Extracts the MID (RFC 5888) from a media section.
    // Returns the MID or undefined if no mid line was found.
    SDPUtils.getMid = function (mediaSection) {
      var mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0];
      if (mid) {
        return mid.substr(6);
      }
    };

    // Parses a fingerprint line for DTLS-SRTP.
    SDPUtils.parseFingerprint = function (line) {
      var parts = line.substr(14).split(' ');
      return {
        algorithm: parts[0].toLowerCase(),
        // algorithm is case-sensitive in Edge.
        value: parts[1].toUpperCase() // the definition is upper-case in RFC 4572.
      };
    };

    // Extracts DTLS parameters from SDP media section or sessionpart.
    // FIXME: for consistency with other functions this should only
    //   get the fingerprint line as input. See also getIceParameters.
    SDPUtils.getDtlsParameters = function (mediaSection, sessionpart) {
      var lines = SDPUtils.matchPrefix(mediaSection + sessionpart, 'a=fingerprint:');
      // Note: a=setup line is ignored since we use the 'auto' role in Edge.
      return {
        role: 'auto',
        fingerprints: lines.map(SDPUtils.parseFingerprint)
      };
    };

    // Serializes DTLS parameters to SDP.
    SDPUtils.writeDtlsParameters = function (params, setupType) {
      var sdp = 'a=setup:' + setupType + '\r\n';
      params.fingerprints.forEach(fp => {
        sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\r\n';
      });
      return sdp;
    };

    // Parses a=crypto lines into
    //   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#dictionary-rtcsrtpsdesparameters-members
    SDPUtils.parseCryptoLine = function (line) {
      var parts = line.substr(9).split(' ');
      return {
        tag: parseInt(parts[0], 10),
        cryptoSuite: parts[1],
        keyParams: parts[2],
        sessionParams: parts.slice(3)
      };
    };
    SDPUtils.writeCryptoLine = function (parameters) {
      return 'a=crypto:' + parameters.tag + ' ' + parameters.cryptoSuite + ' ' + (typeof parameters.keyParams === 'object' ? SDPUtils.writeCryptoKeyParams(parameters.keyParams) : parameters.keyParams) + (parameters.sessionParams ? ' ' + parameters.sessionParams.join(' ') : '') + '\r\n';
    };

    // Parses the crypto key parameters into
    //   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#rtcsrtpkeyparam*
    SDPUtils.parseCryptoKeyParams = function (keyParams) {
      if (keyParams.indexOf('inline:') !== 0) {
        return null;
      }
      var parts = keyParams.substr(7).split('|');
      return {
        keyMethod: 'inline',
        keySalt: parts[0],
        lifeTime: parts[1],
        mkiValue: parts[2] ? parts[2].split(':')[0] : undefined,
        mkiLength: parts[2] ? parts[2].split(':')[1] : undefined
      };
    };
    SDPUtils.writeCryptoKeyParams = function (keyParams) {
      return keyParams.keyMethod + ':' + keyParams.keySalt + (keyParams.lifeTime ? '|' + keyParams.lifeTime : '') + (keyParams.mkiValue && keyParams.mkiLength ? '|' + keyParams.mkiValue + ':' + keyParams.mkiLength : '');
    };

    // Extracts all SDES parameters.
    SDPUtils.getCryptoParameters = function (mediaSection, sessionpart) {
      var lines = SDPUtils.matchPrefix(mediaSection + sessionpart, 'a=crypto:');
      return lines.map(SDPUtils.parseCryptoLine);
    };

    // Parses ICE information from SDP media section or sessionpart.
    // FIXME: for consistency with other functions this should only
    //   get the ice-ufrag and ice-pwd lines as input.
    SDPUtils.getIceParameters = function (mediaSection, sessionpart) {
      var ufrag = SDPUtils.matchPrefix(mediaSection + sessionpart, 'a=ice-ufrag:')[0];
      var pwd = SDPUtils.matchPrefix(mediaSection + sessionpart, 'a=ice-pwd:')[0];
      if (!(ufrag && pwd)) {
        return null;
      }
      return {
        usernameFragment: ufrag.substr(12),
        password: pwd.substr(10)
      };
    };

    // Serializes ICE parameters to SDP.
    SDPUtils.writeIceParameters = function (params) {
      var sdp = 'a=ice-ufrag:' + params.usernameFragment + '\r\n' + 'a=ice-pwd:' + params.password + '\r\n';
      if (params.iceLite) {
        sdp += 'a=ice-lite\r\n';
      }
      return sdp;
    };

    // Parses the SDP media section and returns RTCRtpParameters.
    SDPUtils.parseRtpParameters = function (mediaSection) {
      var description = {
        codecs: [],
        headerExtensions: [],
        fecMechanisms: [],
        rtcp: []
      };
      var lines = SDPUtils.splitLines(mediaSection);
      var mline = lines[0].split(' ');
      for (var _i5 = 3; _i5 < mline.length; _i5++) {
        // find all codecs from mline[3..]
        var pt = mline[_i5];
        var rtpmapline = SDPUtils.matchPrefix(mediaSection, 'a=rtpmap:' + pt + ' ')[0];
        if (rtpmapline) {
          var codec = SDPUtils.parseRtpMap(rtpmapline);
          var fmtps = SDPUtils.matchPrefix(mediaSection, 'a=fmtp:' + pt + ' ');
          // Only the first a=fmtp:<pt> is considered.
          codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};
          codec.rtcpFeedback = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-fb:' + pt + ' ').map(SDPUtils.parseRtcpFb);
          description.codecs.push(codec);
          // parse FEC mechanisms from rtpmap lines.
          switch (codec.name.toUpperCase()) {
            case 'RED':
            case 'ULPFEC':
              description.fecMechanisms.push(codec.name.toUpperCase());
              break;
          }
        }
      }
      SDPUtils.matchPrefix(mediaSection, 'a=extmap:').forEach(line => {
        description.headerExtensions.push(SDPUtils.parseExtmap(line));
      });
      // FIXME: parse rtcp.
      return description;
    };

    // Generates parts of the SDP media section describing the capabilities /
    // parameters.
    SDPUtils.writeRtpDescription = function (kind, caps) {
      var sdp = '';

      // Build the mline.
      sdp += 'm=' + kind + ' ';
      sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.
      sdp += ' UDP/TLS/RTP/SAVPF ';
      sdp += caps.codecs.map(codec => {
        if (codec.preferredPayloadType !== undefined) {
          return codec.preferredPayloadType;
        }
        return codec.payloadType;
      }).join(' ') + '\r\n';
      sdp += 'c=IN IP4 0.0.0.0\r\n';
      sdp += 'a=rtcp:9 IN IP4 0.0.0.0\r\n';

      // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.
      caps.codecs.forEach(codec => {
        sdp += SDPUtils.writeRtpMap(codec);
        sdp += SDPUtils.writeFmtp(codec);
        sdp += SDPUtils.writeRtcpFb(codec);
      });
      var maxptime = 0;
      caps.codecs.forEach(codec => {
        if (codec.maxptime > maxptime) {
          maxptime = codec.maxptime;
        }
      });
      if (maxptime > 0) {
        sdp += 'a=maxptime:' + maxptime + '\r\n';
      }
      if (caps.headerExtensions) {
        caps.headerExtensions.forEach(extension => {
          sdp += SDPUtils.writeExtmap(extension);
        });
      }
      // FIXME: write fecMechanisms.
      return sdp;
    };

    // Parses the SDP media section and returns an array of
    // RTCRtpEncodingParameters.
    SDPUtils.parseRtpEncodingParameters = function (mediaSection) {
      var encodingParameters = [];
      var description = SDPUtils.parseRtpParameters(mediaSection);
      var hasRed = description.fecMechanisms.indexOf('RED') !== -1;
      var hasUlpfec = description.fecMechanisms.indexOf('ULPFEC') !== -1;

      // filter a=ssrc:... cname:, ignore PlanB-msid
      var ssrcs = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:').map(line => SDPUtils.parseSsrcMedia(line)).filter(parts => parts.attribute === 'cname');
      var primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;
      var secondarySsrc;
      var flows = SDPUtils.matchPrefix(mediaSection, 'a=ssrc-group:FID').map(line => {
        var parts = line.substr(17).split(' ');
        return parts.map(part => parseInt(part, 10));
      });
      if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {
        secondarySsrc = flows[0][1];
      }
      description.codecs.forEach(codec => {
        if (codec.name.toUpperCase() === 'RTX' && codec.parameters.apt) {
          var encParam = {
            ssrc: primarySsrc,
            codecPayloadType: parseInt(codec.parameters.apt, 10)
          };
          if (primarySsrc && secondarySsrc) {
            encParam.rtx = {
              ssrc: secondarySsrc
            };
          }
          encodingParameters.push(encParam);
          if (hasRed) {
            encParam = JSON.parse(JSON.stringify(encParam));
            encParam.fec = {
              ssrc: primarySsrc,
              mechanism: hasUlpfec ? 'red+ulpfec' : 'red'
            };
            encodingParameters.push(encParam);
          }
        }
      });
      if (encodingParameters.length === 0 && primarySsrc) {
        encodingParameters.push({
          ssrc: primarySsrc
        });
      }

      // we support both b=AS and b=TIAS but interpret AS as TIAS.
      var bandwidth = SDPUtils.matchPrefix(mediaSection, 'b=');
      if (bandwidth.length) {
        if (bandwidth[0].indexOf('b=TIAS:') === 0) {
          bandwidth = parseInt(bandwidth[0].substr(7), 10);
        } else if (bandwidth[0].indexOf('b=AS:') === 0) {
          // use formula from JSEP to convert b=AS to TIAS value.
          bandwidth = parseInt(bandwidth[0].substr(5), 10) * 1000 * 0.95 - 50 * 40 * 8;
        } else {
          bandwidth = undefined;
        }
        encodingParameters.forEach(params => {
          params.maxBitrate = bandwidth;
        });
      }
      return encodingParameters;
    };

    // parses http://draft.ortc.org/#rtcrtcpparameters*
    SDPUtils.parseRtcpParameters = function (mediaSection) {
      var rtcpParameters = {};

      // Gets the first SSRC. Note that with RTX there might be multiple
      // SSRCs.
      var remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:').map(line => SDPUtils.parseSsrcMedia(line)).filter(obj => obj.attribute === 'cname')[0];
      if (remoteSsrc) {
        rtcpParameters.cname = remoteSsrc.value;
        rtcpParameters.ssrc = remoteSsrc.ssrc;
      }

      // Edge uses the compound attribute instead of reducedSize
      // compound is !reducedSize
      var rsize = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-rsize');
      rtcpParameters.reducedSize = rsize.length > 0;
      rtcpParameters.compound = rsize.length === 0;

      // parses the rtcp-mux attrіbute.
      // Note that Edge does not support unmuxed RTCP.
      var mux = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-mux');
      rtcpParameters.mux = mux.length > 0;
      return rtcpParameters;
    };
    SDPUtils.writeRtcpParameters = function (rtcpParameters) {
      var sdp = '';
      if (rtcpParameters.reducedSize) {
        sdp += 'a=rtcp-rsize\r\n';
      }
      if (rtcpParameters.mux) {
        sdp += 'a=rtcp-mux\r\n';
      }
      if (rtcpParameters.ssrc !== undefined && rtcpParameters.cname) {
        sdp += 'a=ssrc:' + rtcpParameters.ssrc + ' cname:' + rtcpParameters.cname + '\r\n';
      }
      return sdp;
    };

    // parses either a=msid: or a=ssrc:... msid lines and returns
    // the id of the MediaStream and MediaStreamTrack.
    SDPUtils.parseMsid = function (mediaSection) {
      var parts;
      var spec = SDPUtils.matchPrefix(mediaSection, 'a=msid:');
      if (spec.length === 1) {
        parts = spec[0].substr(7).split(' ');
        return {
          stream: parts[0],
          track: parts[1]
        };
      }
      var planB = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:').map(line => SDPUtils.parseSsrcMedia(line)).filter(msidParts => msidParts.attribute === 'msid');
      if (planB.length > 0) {
        parts = planB[0].value.split(' ');
        return {
          stream: parts[0],
          track: parts[1]
        };
      }
    };

    // SCTP
    // parses draft-ietf-mmusic-sctp-sdp-26 first and falls back
    // to draft-ietf-mmusic-sctp-sdp-05
    SDPUtils.parseSctpDescription = function (mediaSection) {
      var mline = SDPUtils.parseMLine(mediaSection);
      var maxSizeLine = SDPUtils.matchPrefix(mediaSection, 'a=max-message-size:');
      var maxMessageSize;
      if (maxSizeLine.length > 0) {
        maxMessageSize = parseInt(maxSizeLine[0].substr(19), 10);
      }
      if (isNaN(maxMessageSize)) {
        maxMessageSize = 65536;
      }
      var sctpPort = SDPUtils.matchPrefix(mediaSection, 'a=sctp-port:');
      if (sctpPort.length > 0) {
        return {
          port: parseInt(sctpPort[0].substr(12), 10),
          protocol: mline.fmt,
          maxMessageSize
        };
      }
      var sctpMapLines = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:');
      if (sctpMapLines.length > 0) {
        var parts = sctpMapLines[0].substr(10).split(' ');
        return {
          port: parseInt(parts[0], 10),
          protocol: parts[1],
          maxMessageSize
        };
      }
    };

    // SCTP
    // outputs the draft-ietf-mmusic-sctp-sdp-26 version that all browsers
    // support by now receiving in this format, unless we originally parsed
    // as the draft-ietf-mmusic-sctp-sdp-05 format (indicated by the m-line
    // protocol of DTLS/SCTP -- without UDP/ or TCP/)
    SDPUtils.writeSctpDescription = function (media, sctp) {
      var output = [];
      if (media.protocol !== 'DTLS/SCTP') {
        output = ['m=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.protocol + '\r\n', 'c=IN IP4 0.0.0.0\r\n', 'a=sctp-port:' + sctp.port + '\r\n'];
      } else {
        output = ['m=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.port + '\r\n', 'c=IN IP4 0.0.0.0\r\n', 'a=sctpmap:' + sctp.port + ' ' + sctp.protocol + ' 65535\r\n'];
      }
      if (sctp.maxMessageSize !== undefined) {
        output.push('a=max-message-size:' + sctp.maxMessageSize + '\r\n');
      }
      return output.join('');
    };

    // Generate a session ID for SDP.
    // https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-20#section-5.2.1
    // recommends using a cryptographically random +ve 64-bit value
    // but right now this should be acceptable and within the right range
    SDPUtils.generateSessionId = function () {
      return Math.random().toString().substr(2, 21);
    };

    // Write boiler plate for start of SDP
    // sessId argument is optional - if not supplied it will
    // be generated randomly
    // sessVersion is optional and defaults to 2
    // sessUser is optional and defaults to 'thisisadapterortc'
    SDPUtils.writeSessionBoilerplate = function (sessId, sessVer, sessUser) {
      var sessionId;
      var version = sessVer !== undefined ? sessVer : 2;
      if (sessId) {
        sessionId = sessId;
      } else {
        sessionId = SDPUtils.generateSessionId();
      }
      var user = sessUser || 'thisisadapterortc';
      // FIXME: sess-id should be an NTP timestamp.
      return 'v=0\r\n' + 'o=' + user + ' ' + sessionId + ' ' + version + ' IN IP4 127.0.0.1\r\n' + 's=-\r\n' + 't=0 0\r\n';
    };

    // Gets the direction from the mediaSection or the sessionpart.
    SDPUtils.getDirection = function (mediaSection, sessionpart) {
      // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.
      var lines = SDPUtils.splitLines(mediaSection);
      for (var _i6 = 0; _i6 < lines.length; _i6++) {
        switch (lines[_i6]) {
          case 'a=sendrecv':
          case 'a=sendonly':
          case 'a=recvonly':
          case 'a=inactive':
            return lines[_i6].substr(2);
          // FIXME: What should happen here?
        }
      }

      if (sessionpart) {
        return SDPUtils.getDirection(sessionpart);
      }
      return 'sendrecv';
    };
    SDPUtils.getKind = function (mediaSection) {
      var lines = SDPUtils.splitLines(mediaSection);
      var mline = lines[0].split(' ');
      return mline[0].substr(2);
    };
    SDPUtils.isRejected = function (mediaSection) {
      return mediaSection.split(' ', 2)[1] === '0';
    };
    SDPUtils.parseMLine = function (mediaSection) {
      var lines = SDPUtils.splitLines(mediaSection);
      var parts = lines[0].substr(2).split(' ');
      return {
        kind: parts[0],
        port: parseInt(parts[1], 10),
        protocol: parts[2],
        fmt: parts.slice(3).join(' ')
      };
    };
    SDPUtils.parseOLine = function (mediaSection) {
      var line = SDPUtils.matchPrefix(mediaSection, 'o=')[0];
      var parts = line.substr(2).split(' ');
      return {
        username: parts[0],
        sessionId: parts[1],
        sessionVersion: parseInt(parts[2], 10),
        netType: parts[3],
        addressType: parts[4],
        address: parts[5]
      };
    };

    // a very naive interpretation of a valid SDP.
    SDPUtils.isValidSDP = function (blob) {
      if (typeof blob !== 'string' || blob.length === 0) {
        return false;
      }
      var lines = SDPUtils.splitLines(blob);
      for (var _i7 = 0; _i7 < lines.length; _i7++) {
        if (lines[_i7].length < 2 || lines[_i7].charAt(1) !== '=') {
          return false;
        }
        // TODO: check the modifier a bit more.
      }

      return true;
    };

    // Expose public methods.
    {
      module.exports = SDPUtils;
    }
  })(sdp$1$1);
  var SDPUtils$1 = sdp$1$1.exports;
  var sdp$2 = /*#__PURE__*/_mergeNamespaces$1$1({
    __proto__: null,
    'default': SDPUtils$1
  }, [sdp$1$1.exports]);

  /*
   *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.
   *
   *  Use of this source code is governed by a BSD-style license
   *  that can be found in the LICENSE file in the root of the source
   *  tree.
   */

  function shimRTCIceCandidate$1(window) {
    // foundation is arbitrarily chosen as an indicator for full support for
    // https://w3c.github.io/webrtc-pc/#rtcicecandidate-interface
    if (!window.RTCIceCandidate || window.RTCIceCandidate && 'foundation' in window.RTCIceCandidate.prototype) {
      return;
    }
    var NativeRTCIceCandidate = window.RTCIceCandidate;
    window.RTCIceCandidate = function RTCIceCandidate(args) {
      // Remove the a= which shouldn't be part of the candidate string.
      if (typeof args === 'object' && args.candidate && args.candidate.indexOf('a=') === 0) {
        args = JSON.parse(JSON.stringify(args));
        args.candidate = args.candidate.substr(2);
      }
      if (args.candidate && args.candidate.length) {
        // Augment the native candidate with the parsed fields.
        var nativeCandidate = new NativeRTCIceCandidate(args);
        var parsedCandidate = SDPUtils$1.parseCandidate(args.candidate);
        var augmentedCandidate = Object.assign(nativeCandidate, parsedCandidate);

        // Add a serializer that does not serialize the extra attributes.
        augmentedCandidate.toJSON = function toJSON() {
          return {
            candidate: augmentedCandidate.candidate,
            sdpMid: augmentedCandidate.sdpMid,
            sdpMLineIndex: augmentedCandidate.sdpMLineIndex,
            usernameFragment: augmentedCandidate.usernameFragment
          };
        };
        return augmentedCandidate;
      }
      return new NativeRTCIceCandidate(args);
    };
    window.RTCIceCandidate.prototype = NativeRTCIceCandidate.prototype;

    // Hook up the augmented candidate in onicecandidate and
    // addEventListener('icecandidate', ...)
    wrapPeerConnectionEvent$1(window, 'icecandidate', e => {
      if (e.candidate) {
        Object.defineProperty(e, 'candidate', {
          value: new window.RTCIceCandidate(e.candidate),
          writable: 'false'
        });
      }
      return e;
    });
  }
  function shimMaxMessageSize$1(window, browserDetails) {
    if (!window.RTCPeerConnection) {
      return;
    }
    if (!('sctp' in window.RTCPeerConnection.prototype)) {
      Object.defineProperty(window.RTCPeerConnection.prototype, 'sctp', {
        get() {
          return typeof this._sctp === 'undefined' ? null : this._sctp;
        }
      });
    }
    var sctpInDescription = function sctpInDescription(description) {
      if (!description || !description.sdp) {
        return false;
      }
      var sections = SDPUtils$1.splitSections(description.sdp);
      sections.shift();
      return sections.some(mediaSection => {
        var mLine = SDPUtils$1.parseMLine(mediaSection);
        return mLine && mLine.kind === 'application' && mLine.protocol.indexOf('SCTP') !== -1;
      });
    };
    var getRemoteFirefoxVersion = function getRemoteFirefoxVersion(description) {
      // TODO: Is there a better solution for detecting Firefox?
      var match = description.sdp.match(/mozilla...THIS_IS_SDPARTA-(\d+)/);
      if (match === null || match.length < 2) {
        return -1;
      }
      var version = parseInt(match[1], 10);
      // Test for NaN (yes, this is ugly)
      return version !== version ? -1 : version;
    };
    var getCanSendMaxMessageSize = function getCanSendMaxMessageSize(remoteIsFirefox) {
      // Every implementation we know can send at least 64 KiB.
      // Note: Although Chrome is technically able to send up to 256 KiB, the
      //       data does not reach the other peer reliably.
      //       See: https://bugs.chromium.org/p/webrtc/issues/detail?id=8419
      var canSendMaxMessageSize = 65536;
      if (browserDetails.browser === 'firefox') {
        if (browserDetails.version < 57) {
          if (remoteIsFirefox === -1) {
            // FF < 57 will send in 16 KiB chunks using the deprecated PPID
            // fragmentation.
            canSendMaxMessageSize = 16384;
          } else {
            // However, other FF (and RAWRTC) can reassemble PPID-fragmented
            // messages. Thus, supporting ~2 GiB when sending.
            canSendMaxMessageSize = 2147483637;
          }
        } else if (browserDetails.version < 60) {
          // Currently, all FF >= 57 will reset the remote maximum message size
          // to the default value when a data channel is created at a later
          // stage. :(
          // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831
          canSendMaxMessageSize = browserDetails.version === 57 ? 65535 : 65536;
        } else {
          // FF >= 60 supports sending ~2 GiB
          canSendMaxMessageSize = 2147483637;
        }
      }
      return canSendMaxMessageSize;
    };
    var getMaxMessageSize = function getMaxMessageSize(description, remoteIsFirefox) {
      // Note: 65536 bytes is the default value from the SDP spec. Also,
      //       every implementation we know supports receiving 65536 bytes.
      var maxMessageSize = 65536;

      // FF 57 has a slightly incorrect default remote max message size, so
      // we need to adjust it here to avoid a failure when sending.
      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1425697
      if (browserDetails.browser === 'firefox' && browserDetails.version === 57) {
        maxMessageSize = 65535;
      }
      var match = SDPUtils$1.matchPrefix(description.sdp, 'a=max-message-size:');
      if (match.length > 0) {
        maxMessageSize = parseInt(match[0].substr(19), 10);
      } else if (browserDetails.browser === 'firefox' && remoteIsFirefox !== -1) {
        // If the maximum message size is not present in the remote SDP and
        // both local and remote are Firefox, the remote peer can receive
        // ~2 GiB.
        maxMessageSize = 2147483637;
      }
      return maxMessageSize;
    };
    var origSetRemoteDescription = window.RTCPeerConnection.prototype.setRemoteDescription;
    window.RTCPeerConnection.prototype.setRemoteDescription = function setRemoteDescription() {
      this._sctp = null;
      // Chrome decided to not expose .sctp in plan-b mode.
      // As usual, adapter.js has to do an 'ugly worakaround'
      // to cover up the mess.
      if (browserDetails.browser === 'chrome' && browserDetails.version >= 76) {
        var {
          sdpSemantics
        } = this.getConfiguration();
        if (sdpSemantics === 'plan-b') {
          Object.defineProperty(this, 'sctp', {
            get() {
              return typeof this._sctp === 'undefined' ? null : this._sctp;
            },
            enumerable: true,
            configurable: true
          });
        }
      }
      if (sctpInDescription(arguments[0])) {
        // Check if the remote is FF.
        var isFirefox = getRemoteFirefoxVersion(arguments[0]);

        // Get the maximum message size the local peer is capable of sending
        var canSendMMS = getCanSendMaxMessageSize(isFirefox);

        // Get the maximum message size of the remote peer.
        var remoteMMS = getMaxMessageSize(arguments[0], isFirefox);

        // Determine final maximum message size
        var maxMessageSize;
        if (canSendMMS === 0 && remoteMMS === 0) {
          maxMessageSize = Number.POSITIVE_INFINITY;
        } else if (canSendMMS === 0 || remoteMMS === 0) {
          maxMessageSize = Math.max(canSendMMS, remoteMMS);
        } else {
          maxMessageSize = Math.min(canSendMMS, remoteMMS);
        }

        // Create a dummy RTCSctpTransport object and the 'maxMessageSize'
        // attribute.
        var sctp = {};
        Object.defineProperty(sctp, 'maxMessageSize', {
          get() {
            return maxMessageSize;
          }
        });
        this._sctp = sctp;
      }
      return origSetRemoteDescription.apply(this, arguments);
    };
  }
  function shimSendThrowTypeError$1(window) {
    if (!(window.RTCPeerConnection && 'createDataChannel' in window.RTCPeerConnection.prototype)) {
      return;
    }

    // Note: Although Firefox >= 57 has a native implementation, the maximum
    //       message size can be reset for all data channels at a later stage.
    //       See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831

    function wrapDcSend(dc, pc) {
      var origDataChannelSend = dc.send;
      dc.send = function send() {
        var data = arguments[0];
        var length = data.length || data.size || data.byteLength;
        if (dc.readyState === 'open' && pc.sctp && length > pc.sctp.maxMessageSize) {
          throw new TypeError('Message too large (can send a maximum of ' + pc.sctp.maxMessageSize + ' bytes)');
        }
        return origDataChannelSend.apply(dc, arguments);
      };
    }
    var origCreateDataChannel = window.RTCPeerConnection.prototype.createDataChannel;
    window.RTCPeerConnection.prototype.createDataChannel = function createDataChannel() {
      var dataChannel = origCreateDataChannel.apply(this, arguments);
      wrapDcSend(dataChannel, this);
      return dataChannel;
    };
    wrapPeerConnectionEvent$1(window, 'datachannel', e => {
      wrapDcSend(e.channel, e.target);
      return e;
    });
  }

  /* shims RTCConnectionState by pretending it is the same as iceConnectionState.
   * See https://bugs.chromium.org/p/webrtc/issues/detail?id=6145#c12
   * for why this is a valid hack in Chrome. In Firefox it is slightly incorrect
   * since DTLS failures would be hidden. See
   * https://bugzilla.mozilla.org/show_bug.cgi?id=1265827
   * for the Firefox tracking bug.
   */
  function shimConnectionState$1(window) {
    if (!window.RTCPeerConnection || 'connectionState' in window.RTCPeerConnection.prototype) {
      return;
    }
    var proto = window.RTCPeerConnection.prototype;
    Object.defineProperty(proto, 'connectionState', {
      get() {
        return {
          completed: 'connected',
          checking: 'connecting'
        }[this.iceConnectionState] || this.iceConnectionState;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(proto, 'onconnectionstatechange', {
      get() {
        return this._onconnectionstatechange || null;
      },
      set(cb) {
        if (this._onconnectionstatechange) {
          this.removeEventListener('connectionstatechange', this._onconnectionstatechange);
          delete this._onconnectionstatechange;
        }
        if (cb) {
          this.addEventListener('connectionstatechange', this._onconnectionstatechange = cb);
        }
      },
      enumerable: true,
      configurable: true
    });
    ['setLocalDescription', 'setRemoteDescription'].forEach(method => {
      var origMethod = proto[method];
      proto[method] = function () {
        if (!this._connectionstatechangepoly) {
          this._connectionstatechangepoly = e => {
            var pc = e.target;
            if (pc._lastConnectionState !== pc.connectionState) {
              pc._lastConnectionState = pc.connectionState;
              var newEvent = new Event('connectionstatechange', e);
              pc.dispatchEvent(newEvent);
            }
            return e;
          };
          this.addEventListener('iceconnectionstatechange', this._connectionstatechangepoly);
        }
        return origMethod.apply(this, arguments);
      };
    });
  }
  function removeExtmapAllowMixed$1(window, browserDetails) {
    /* remove a=extmap-allow-mixed for webrtc.org < M71 */
    if (!window.RTCPeerConnection) {
      return;
    }
    if (browserDetails.browser === 'chrome' && browserDetails.version >= 71) {
      return;
    }
    if (browserDetails.browser === 'safari' && browserDetails.version >= 605) {
      return;
    }
    var nativeSRD = window.RTCPeerConnection.prototype.setRemoteDescription;
    window.RTCPeerConnection.prototype.setRemoteDescription = function setRemoteDescription(desc) {
      if (desc && desc.sdp && desc.sdp.indexOf('\na=extmap-allow-mixed') !== -1) {
        var _sdp = desc.sdp.split('\n').filter(line => {
          return line.trim() !== 'a=extmap-allow-mixed';
        }).join('\n');
        // Safari enforces read-only-ness of RTCSessionDescription fields.
        if (window.RTCSessionDescription && desc instanceof window.RTCSessionDescription) {
          arguments[0] = new window.RTCSessionDescription({
            type: desc.type,
            sdp: _sdp
          });
        } else {
          desc.sdp = _sdp;
        }
      }
      return nativeSRD.apply(this, arguments);
    };
  }
  function shimAddIceCandidateNullOrEmpty$1(window, browserDetails) {
    // Support for addIceCandidate(null or undefined)
    // as well as addIceCandidate({candidate: "", ...})
    // https://bugs.chromium.org/p/chromium/issues/detail?id=978582
    // Note: must be called before other polyfills which change the signature.
    if (!(window.RTCPeerConnection && window.RTCPeerConnection.prototype)) {
      return;
    }
    var nativeAddIceCandidate = window.RTCPeerConnection.prototype.addIceCandidate;
    if (!nativeAddIceCandidate || nativeAddIceCandidate.length === 0) {
      return;
    }
    window.RTCPeerConnection.prototype.addIceCandidate = function addIceCandidate() {
      if (!arguments[0]) {
        if (arguments[1]) {
          arguments[1].apply(null);
        }
        return Promise.resolve();
      }
      // Firefox 68+ emits and processes {candidate: "", ...}, ignore
      // in older versions.
      // Native support for ignoring exists for Chrome M77+.
      // Safari ignores as well, exact version unknown but works in the same
      // version that also ignores addIceCandidate(null).
      if ((browserDetails.browser === 'chrome' && browserDetails.version < 78 || browserDetails.browser === 'firefox' && browserDetails.version < 68 || browserDetails.browser === 'safari') && arguments[0] && arguments[0].candidate === '') {
        return Promise.resolve();
      }
      return nativeAddIceCandidate.apply(this, arguments);
    };
  }

  // Note: Make sure to call this ahead of APIs that modify
  // setLocalDescription.length
  function shimParameterlessSetLocalDescription$1(window, browserDetails) {
    if (!(window.RTCPeerConnection && window.RTCPeerConnection.prototype)) {
      return;
    }
    var nativeSetLocalDescription = window.RTCPeerConnection.prototype.setLocalDescription;
    if (!nativeSetLocalDescription || nativeSetLocalDescription.length === 0) {
      return;
    }
    window.RTCPeerConnection.prototype.setLocalDescription = function setLocalDescription() {
      var desc = arguments[0] || {};
      if (typeof desc !== 'object' || desc.type && desc.sdp) {
        return nativeSetLocalDescription.apply(this, arguments);
      }
      // The remaining steps should technically happen when SLD comes off the
      // RTCPeerConnection's operations chain (not ahead of going on it), but
      // this is too difficult to shim. Instead, this shim only covers the
      // common case where the operations chain is empty. This is imperfect, but
      // should cover many cases. Rationale: Even if we can't reduce the glare
      // window to zero on imperfect implementations, there's value in tapping
      // into the perfect negotiation pattern that several browsers support.
      desc = {
        type: desc.type,
        sdp: desc.sdp
      };
      if (!desc.type) {
        switch (this.signalingState) {
          case 'stable':
          case 'have-local-offer':
          case 'have-remote-pranswer':
            desc.type = 'offer';
            break;
          default:
            desc.type = 'answer';
            break;
        }
      }
      if (desc.sdp || desc.type !== 'offer' && desc.type !== 'answer') {
        return nativeSetLocalDescription.apply(this, [desc]);
      }
      var func = desc.type === 'offer' ? this.createOffer : this.createAnswer;
      return func.apply(this).then(d => nativeSetLocalDescription.apply(this, [d]));
    };
  }
  var commonShim$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    shimRTCIceCandidate: shimRTCIceCandidate$1,
    shimMaxMessageSize: shimMaxMessageSize$1,
    shimSendThrowTypeError: shimSendThrowTypeError$1,
    shimConnectionState: shimConnectionState$1,
    removeExtmapAllowMixed: removeExtmapAllowMixed$1,
    shimAddIceCandidateNullOrEmpty: shimAddIceCandidateNullOrEmpty$1,
    shimParameterlessSetLocalDescription: shimParameterlessSetLocalDescription$1
  });

  /*
   *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
   *
   *  Use of this source code is governed by a BSD-style license
   *  that can be found in the LICENSE file in the root of the source
   *  tree.
   */

  // Shimming starts here.
  function adapterFactory$1() {
    var {
      window
    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
      shimChrome: true,
      shimFirefox: true,
      shimSafari: true
    };
    // Utils.
    var logging = log$2;
    var browserDetails = detectBrowser$1(window);
    var adapter = {
      browserDetails,
      commonShim: commonShim$1,
      extractVersion: extractVersion$1,
      disableLog: disableLog$1,
      disableWarnings: disableWarnings$1,
      // Expose sdp as a convenience. For production apps include directly.
      sdp: sdp$2
    };

    // Shim browser if found.
    switch (browserDetails.browser) {
      case 'chrome':
        if (!chromeShim$1 || !shimPeerConnection$1$1 || !options.shimChrome) {
          logging('Chrome shim is not included in this adapter release.');
          return adapter;
        }
        if (browserDetails.version === null) {
          logging('Chrome shim can not determine version, not shimming.');
          return adapter;
        }
        logging('adapter.js shimming chrome.');
        // Export to the adapter global object visible in the browser.
        adapter.browserShim = chromeShim$1;

        // Must be called before shimPeerConnection.
        shimAddIceCandidateNullOrEmpty$1(window, browserDetails);
        shimParameterlessSetLocalDescription$1(window);
        shimGetUserMedia$2$1(window, browserDetails);
        shimMediaStream$1(window);
        shimPeerConnection$1$1(window, browserDetails);
        shimOnTrack$1$1(window);
        shimAddTrackRemoveTrack$1(window, browserDetails);
        shimGetSendersWithDtmf$1(window);
        shimGetStats$1(window);
        shimSenderReceiverGetStats$1(window);
        fixNegotiationNeeded$1(window, browserDetails);
        shimRTCIceCandidate$1(window);
        shimConnectionState$1(window);
        shimMaxMessageSize$1(window, browserDetails);
        shimSendThrowTypeError$1(window);
        removeExtmapAllowMixed$1(window, browserDetails);
        break;
      case 'firefox':
        if (!firefoxShim$1 || !shimPeerConnection$2 || !options.shimFirefox) {
          logging('Firefox shim is not included in this adapter release.');
          return adapter;
        }
        logging('adapter.js shimming firefox.');
        // Export to the adapter global object visible in the browser.
        adapter.browserShim = firefoxShim$1;

        // Must be called before shimPeerConnection.
        shimAddIceCandidateNullOrEmpty$1(window, browserDetails);
        shimParameterlessSetLocalDescription$1(window);
        shimGetUserMedia$1$1(window, browserDetails);
        shimPeerConnection$2(window, browserDetails);
        shimOnTrack$2(window);
        shimRemoveStream$1(window);
        shimSenderGetStats$1(window);
        shimReceiverGetStats$1(window);
        shimRTCDataChannel$1(window);
        shimAddTransceiver$1(window);
        shimGetParameters$1(window);
        shimCreateOffer$1(window);
        shimCreateAnswer$1(window);
        shimRTCIceCandidate$1(window);
        shimConnectionState$1(window);
        shimMaxMessageSize$1(window, browserDetails);
        shimSendThrowTypeError$1(window);
        break;
      case 'safari':
        if (!safariShim$1 || !options.shimSafari) {
          logging('Safari shim is not included in this adapter release.');
          return adapter;
        }
        logging('adapter.js shimming safari.');
        // Export to the adapter global object visible in the browser.
        adapter.browserShim = safariShim$1;

        // Must be called before shimCallbackAPI.
        shimAddIceCandidateNullOrEmpty$1(window, browserDetails);
        shimParameterlessSetLocalDescription$1(window);
        shimRTCIceServerUrls$1(window);
        shimCreateOfferLegacy$1(window);
        shimCallbacksAPI$1(window);
        shimLocalStreamsAPI$1(window);
        shimRemoteStreamsAPI$1(window);
        shimTrackEventTransceiver$1(window);
        shimGetUserMedia$3(window);
        shimAudioContext$1(window);
        shimRTCIceCandidate$1(window);
        shimMaxMessageSize$1(window, browserDetails);
        shimSendThrowTypeError$1(window);
        removeExtmapAllowMixed$1(window, browserDetails);
        break;
      default:
        logging('Unsupported browser!');
        break;
    }
    return adapter;
  }

  /*
   *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
   *
   *  Use of this source code is governed by a BSD-style license
   *  that can be found in the LICENSE file in the root of the source
   *  tree.
   */

  adapterFactory$1({
    window: typeof window === 'undefined' ? undefined : window
  });

  /**
   * Creates an RTCPeerConnection.
   *
   * @param configuration - Config to the RTCPeerConnection constructor.
   * @returns An RTCPeerConnection instance.
   */
  function createRTCPeerConnection(configuration) {
    return new RTCPeerConnection(configuration);
  }

  /**
   * A type-safe form of the DOMString used in the MediaStreamTrack.kind field.
   */
  var MediaStreamTrackKind;
  (function (MediaStreamTrackKind) {
    MediaStreamTrackKind["Audio"] = "audio";
    MediaStreamTrackKind["Video"] = "video";
  })(MediaStreamTrackKind || (MediaStreamTrackKind = {}));
  var PeerConnectionEvents;
  (function (PeerConnectionEvents) {
    PeerConnectionEvents["IceGatheringStateChange"] = "icegatheringstatechange";
    PeerConnectionEvents["ConnectionStateChange"] = "connectionstatechange";
  })(PeerConnectionEvents || (PeerConnectionEvents = {}));
  /**
   * Manages a single RTCPeerConnection with the server.
   */
  class PeerConnection extends EventEmitter$2 {
    /**
     * Creates an instance of the RTCPeerConnection.
     *
     * @param configuration - Config to the RTCPeerConnection constructor.
     */
    constructor(configuration) {
      super();
      logger$3.log('PeerConnection init');
      this.pc = createRTCPeerConnection(configuration);
      this.connectionStateHandler = new ConnectionStateHandler(() => {
        return {
          connectionState: this.pc.connectionState,
          iceState: this.pc.iceConnectionState
        };
      });
      this.connectionStateHandler.on(ConnectionStateHandler.Events.ConnectionStateChanged, state => {
        this.emit(PeerConnection.Events.ConnectionStateChange, state);
      });
      // Forward the connection state related events to connection state handler
      // eslint-disable-next-line jsdoc/require-jsdoc
      this.pc.oniceconnectionstatechange = () => this.connectionStateHandler.onIceConnectionStateChange();
      // eslint-disable-next-line jsdoc/require-jsdoc
      this.pc.onconnectionstatechange = () => this.connectionStateHandler.onConnectionStateChange();
      // Subscribe to underlying PeerConnection events and emit them via the EventEmitter
      /* eslint-disable jsdoc/require-jsdoc */
      this.pc.onicegatheringstatechange = ev => {
        this.emit(PeerConnection.Events.IceGatheringStateChange, ev);
      };
    }
    /**
     * Get the underlying RTCPeerConnection.
     *
     * @returns The underlying RTCPeerConnection.
     */
    getUnderlyingRTCPeerConnection() {
      return this.pc;
    }
    /**
     * Gets the overall connection state of the underlying RTCPeerConnection.
     *
     * @returns The underlying connection's overall state.
     */
    getConnectionState() {
      return this.connectionStateHandler.getConnectionState();
    }
    /**
     * Adds a new media track to the set of tracks which will be transmitted to the other peer.
     *
     * @param track - A MediaStreamTrack object representing the media track to add to the peer connection.
     * @param streams - (Optional) One or more local MediaStream objects to which the track should be
     *     added.
     * @returns The RTCRtpSender object which will be used to transmit the media data, or null if
     *     there is no underlying track when a track is added.
     */
    addTrack(track) {
      for (var _len2 = arguments.length, streams = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        streams[_key2 - 1] = arguments[_key2];
      }
      return this.pc.addTrack(track, ...streams);
    }
    /**
     * Creates a new RTCRtpTransceiver and adds it to the set of transceivers associated with the
     * PeerConnection.  Each transceiver represents a bidirectional stream, with both an RTCRtpSender
     * and an RTCRtpReceiver associated with it.
     *
     * @param trackOrKind - A MediaStreamTrack to associate with the transceiver, or a string which is used
     * as the kind of the receiver's track, and by extension the RTCRtpReceiver itself.
     * @param init - Options that you may wish to specify when creating the new transceiver.
     * @returns - The created RTCRtpTransceiver object.
     */
    addTransceiver(trackOrKind, init) {
      return this.pc.addTransceiver(trackOrKind, init);
    }
    /**
     * Tell the local end of the connection to stop sending media from the specified track, without
     * actually removing the corresponding RTCRtpSender from the list of senders as reported by
     * RTCPeerConnection.getSenders().  If the track is already stopped, or is not in the connection's
     * senders list, the method has no effect.
     *
     * If the connection has already been negotiated (signalingState is set to 'stable'), it is marked
     * as needing to be negotiated again; the remote peer won't experience the change until this
     * negotiation occurs.  A negotiatedneeded event is sent to the RTCPeerConnection to let the local
     * end know this negotiation must occur.
     *
     * @param sender - An RTCRtpSender specifying the sender to remove from the connection.
     */
    removeTrack(sender) {
      this.pc.removeTrack(sender);
    }
    /**
     * Creates a new data channel linked with the remote peer.
     *
     * @param label - A human-readable name for the channel.  May not be longer than 65,535 bytes.
     * @param options - An object providing configuration options for the data channel.
     * @returns An RTCDataChannel object.
     */
    createDataChannel(label, options) {
      return this.pc.createDataChannel(label, options);
    }
    /**
     * Creates an SDP answer to an offer received from a remote peer during the offer/answer
     * negotiation of a WebRTC connection.
     *
     * @param options - (Optional) An object which contains options which customize the answer; this
     *     is based on the RTCAnswerOptions dictionary.
     * @returns A Promise whose fulfillment handler is called with an object conforming to the
     *     RTCSessionDescriptionInit dictionary which contains the SDP answer to be delivered to the
     *     other peer.
     */
    createAnswer(options) {
      return __awaiter$1$1(this, void 0, void 0, function* () {
        return this.pc.createAnswer(options);
      });
    }
    /**
     * Initiates the creation of an SDP offer for the purpose of starting a new WebRTC connection to a
     * remote peer.
     *
     * @param options - (Optional) An RTCOfferOptions dictionary providing options requested for the
     *    offer.
     * @returns A Promise whose fulfillment handler will receive an object conforming to the
     *    RTCSessionDescriptionInit dictionary which contains the SDP describing the generated offer.
     *    That received offer should be delivered through the signaling server to a remote peer.
     */
    createOffer(options) {
      return __awaiter$1$1(this, void 0, void 0, function* () {
        return this.pc.createOffer(options);
      });
    }
    /**
     * Changes the local description associated with the connection.
     *
     * @param description - An RTCSessionDescriptionInit or RTCSessionDescription which specifies the
     *     configuration to be applied to the local end of the connection.
     * @returns A Promise which is fulfilled once the value of RTCPeerConnection.localDescription is
     *     successfully changed or rejected if the change cannot be applied.
     */
    setLocalDescription(description) {
      return __awaiter$1$1(this, void 0, void 0, function* () {
        return this.pc.setLocalDescription(description);
      });
    }
    /**
     * Sets the specified session description as the remote peer's current offer or answer.
     *
     * @param description - An RTCSessionDescriptionInit or RTCSessionDescription which specifies the
     *     remote peer's current offer or answer.
     * @returns A Promise which is fulfilled once the value of the connection's remoteDescription is
     *     successfully changed or rejected if the change cannot be applied (for example, if the
     *     specified description is incompatible with one or both of the peers on the connection).
     */
    setRemoteDescription(description) {
      return __awaiter$1$1(this, void 0, void 0, function* () {
        return this.pc.setRemoteDescription(description);
      });
    }
    /**
     * Closes the current peer connection.
     */
    close() {
      this.pc.close();
    }
    /**
     * Get the local description from this PeerConnection.
     *
     * @returns An RTCSessionDescription representing the local description, or null if none has been set.
     */
    getLocalDescription() {
      return this.pc.localDescription;
    }
    /**
     * Get the remote description from this PeerConnection.
     *
     * @returns An RTCSessionDescription representing the remote description, or null if none has been set.
     */
    getRemoteDescription() {
      return this.pc.remoteDescription;
    }
    /**
     * Returns an array of RTCRtpSender objects, each of which represents the RTP sender responsible
     * for transmitting one track's data.  A sender object provides methods and properties for
     * examining and controlling the encoding and transmission of the track's data.
     *
     * @returns An array of RTCRtpSender objects, one for each track on the connection.  The array is
     * empty if there are no RTP senders on the connection.
     */
    getSenders() {
      return this.pc.getSenders();
    }
    /**
     * Get the list of RTCRtpTransceiver objects being used to send and receive data on the
     * connection.
     *
     * @returns - An array of the RTCRtpTransceiver objects representing the transceivers handling
     * sending and receiving all media on the PeerConnection.  The list is in the order in which the
     * transceivers were added to the connection.
     */
    getTransceivers() {
      return this.pc.getTransceivers();
    }
    /**
     * Get statistics about either the overall connection or about the specified MediaStreamTrack.
     *
     * @param selector - An optional MediaStreamTrack for which to gather statistics. If not provided,
     * statistics will be gathered for the entire underlying RTCPeerConnection.
     * @returns - A Promise which resolves with an RTCStatsReport object providing connection
     * statistics.
     */
    getStats(selector) {
      return this.pc.getStats(selector);
    }
    /**
     * Returns a string that describes the connections' ICE gathering state.
     *
     * @returns - The ICE gathering state.
     */
    get iceGatheringState() {
      return this.pc.iceGatheringState;
    }
    /**
     * Returns the type of a connection that has been established.
     *
     * @returns The connection type which would be `ConnectionType`.
     */
    getCurrentConnectionType() {
      var _a;
      return __awaiter$1$1(this, void 0, void 0, function* () {
        // make sure this method only can be called when the ice connection is established;
        var isIceConnected = this.pc.iceConnectionState === 'connected' || this.pc.iceConnectionState === 'completed';
        if (!isIceConnected) {
          throw new Error('Ice connection is not established');
        }
        var succeededLocalCandidateIds = new Set();
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var localCandidateStatsReports = [];
        (yield this.pc.getStats()).forEach(report => {
          var _a;
          // collect all local candidate ids from `candidate-pair` stats reports with `succeeded` state.
          if (report.type === 'candidate-pair' && ((_a = report.state) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === 'succeeded') {
            succeededLocalCandidateIds.add(report.localCandidateId);
          }
          // collect all `local-candidate` stats.
          if (report.type === 'local-candidate') {
            localCandidateStatsReports.push(report);
          }
        });
        // find the `local-candidate` stats which report id contains in `succeededLocalCandidateIds`.
        var localCandidate = localCandidateStatsReports.find(report => succeededLocalCandidateIds.has(report.id));
        if (!localCandidate) {
          return 'unknown';
        }
        if (localCandidate.relayProtocol) {
          return "TURN-".concat(localCandidate.relayProtocol.toUpperCase());
        }
        return (_a = localCandidate.protocol) === null || _a === void 0 ? void 0 : _a.toUpperCase();
      });
    }
  }
  PeerConnection.Events = PeerConnectionEvents;

  /**
   * Wait until the given peer connection has finished gathering ICE candidates and, when it has,
   * return the local description with the candidates.
   *
   * @param peerConnection - The PeerConnection to use.
   * @returns A Promise that resolves with the local description with the ICE candidates in it.
   */
  function getLocalDescriptionWithIceCandidates(peerConnection) {
    return new Promise((resolve, reject) => {
      /**
       * A helper method to retrieve the local description and resolve, if one is found, or reject
       * with an error if it's not.
       */
      var getLocalDescAndResolve = () => {
        var localDesc = peerConnection.getLocalDescription();
        if (localDesc) {
          resolve(localDesc);
        } else {
          reject(new Error('Local description was null'));
        }
      };
      peerConnection.on(PeerConnection.Events.IceGatheringStateChange, e => {
        if (e.target.iceGatheringState === 'complete') {
          getLocalDescAndResolve();
        }
        // TODO(brian): throw an error if we see an error iceGatheringState
      });
      // It's possible ICE gathering is already done
      if (peerConnection.iceGatheringState === 'complete') {
        getLocalDescAndResolve();
      }
    });
  }
  var MediaCodecMimeType;
  (function (MediaCodecMimeType) {
    MediaCodecMimeType["H264"] = "video/H264";
    MediaCodecMimeType["AV1"] = "video/AV1";
    MediaCodecMimeType["OPUS"] = "audio/opus";
  })(MediaCodecMimeType || (MediaCodecMimeType = {}));
  var defaultMaxVideoEncodeFrameSize = 8160;
  var defaultMaxVideoEncodeMbps = 244800;
  var RecommendedOpusBitrates;
  (function (RecommendedOpusBitrates) {
    RecommendedOpusBitrates[RecommendedOpusBitrates["NB"] = 12000] = "NB";
    RecommendedOpusBitrates[RecommendedOpusBitrates["WB"] = 20000] = "WB";
    RecommendedOpusBitrates[RecommendedOpusBitrates["FB"] = 40000] = "FB";
    RecommendedOpusBitrates[RecommendedOpusBitrates["FB_MONO_MUSIC"] = 64000] = "FB_MONO_MUSIC";
    RecommendedOpusBitrates[RecommendedOpusBitrates["FB_STEREO_MUSIC"] = 128000] = "FB_STEREO_MUSIC";
  })(RecommendedOpusBitrates || (RecommendedOpusBitrates = {}));
  function areProfileLevelIdsCompatible(senderProfileLevelId, receiverProfileLevelId, levelAsymmetryAllowed) {
    var senderProfile = Number.parseInt("0x".concat(senderProfileLevelId), 16);
    var recvProfile = Number.parseInt("0x".concat(receiverProfileLevelId), 16);
    var senderProfileIdc = senderProfile >> 16;
    var recvProfileIdc = recvProfile >> 16;
    var senderProfileIop = (senderProfile & 0x00ff00) >> 8;
    var recvProfileIop = (recvProfile & 0x00ff00) >> 8;
    var senderLevelIdc = senderProfile & 0x0000ff;
    var recvLevelIdc = recvProfile & 0x0000ff;
    var areProfileCompatible = senderProfileIdc === recvProfileIdc && senderProfileIop === recvProfileIop || senderProfileIdc === 0x42 && recvProfileIdc === 0x42 && (senderProfileIop & 0x40) === (recvProfileIop & 0x40);
    var isLevelIdcCompatible = levelAsymmetryAllowed ? true : senderLevelIdc <= recvLevelIdc;
    return areProfileCompatible && isLevelIdcCompatible;
  }
  function areCodecsCompatible(senderCodec, receiverCodec) {
    return Object.keys(receiverCodec).every(key => {
      if (key === 'clockRate' || key === 'name') {
        return senderCodec[key] === receiverCodec[key];
      }
      if (key === 'fmtParams') {
        var fmtpForSender = senderCodec[key];
        var fmtpForReceiver = receiverCodec[key];
        var levelAsymmetryAllowed = [...fmtpForSender.keys()].some(senderFmtpParamKey => {
          return senderFmtpParamKey === 'level-asymmetry-allowed' && fmtpForReceiver.get(senderFmtpParamKey) === '1' && fmtpForSender.get(senderFmtpParamKey) === '1';
        });
        return [...fmtpForSender.keys()].every(senderFmtpParamKey => {
          if (fmtpForReceiver.get(senderFmtpParamKey)) {
            if (senderFmtpParamKey === 'profile-level-id') {
              return areProfileLevelIdsCompatible(fmtpForSender.get(senderFmtpParamKey), fmtpForReceiver.get(senderFmtpParamKey), levelAsymmetryAllowed);
            }
          }
          if (senderFmtpParamKey === 'packetization-mode') {
            return fmtpForSender.get(senderFmtpParamKey) === fmtpForReceiver.get(senderFmtpParamKey);
          }
          return true;
        });
      }
      return true;
    });
  }
  function gcd(a, b) {
    return b === 0 ? a : gcd(b, a % b);
  }
  function getFrameHeightByMaxFs(sourceAspectRatio, requestedMaxFs) {
    var _gcd = gcd(sourceAspectRatio[0], sourceAspectRatio[1]);
    var minNumberRatiosForWidth = sourceAspectRatio[0] / _gcd;
    var minNumberRatiosForHeight = sourceAspectRatio[1] / _gcd;
    return Math.floor(Math.sqrt(requestedMaxFs * 16 * 16 / (minNumberRatiosForWidth * minNumberRatiosForHeight))) * minNumberRatiosForHeight;
  }
  function getScaleDownRatio(sourceAspectRatio, sourceHeight, requestedMaxFs) {
    return sourceHeight / getFrameHeightByMaxFs(sourceAspectRatio, requestedMaxFs);
  }
  var commonjsGlobal$1 = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global$1 !== 'undefined' ? global$1 : typeof self !== 'undefined' ? self : {};
  var logger$2 = {
    exports: {}
  };

  /*!
   * js-logger - http://github.com/jonnyreeves/js-logger
   * Jonny Reeves, http://jonnyreeves.co.uk/
   * js-logger may be freely distributed under the MIT license.
   */

  (function (module) {
    (function (global) {
      // Top level module for the global, static logger instance.
      var Logger = {};

      // For those that are at home that are keeping score.
      Logger.VERSION = "1.6.1";

      // Function which handles all incoming log messages.
      var logHandler;

      // Map of ContextualLogger instances by name; used by Logger.get() to return the same named instance.
      var contextualLoggersByNameMap = {};

      // Polyfill for ES5's Function.bind.
      var bind = function bind(scope, func) {
        return function () {
          return func.apply(scope, arguments);
        };
      };

      // Super exciting object merger-matron 9000 adding another 100 bytes to your download.
      var merge = function merge() {
        var args = arguments,
          target = args[0],
          key,
          i;
        for (i = 1; i < args.length; i++) {
          for (key in args[i]) {
            if (!(key in target) && args[i].hasOwnProperty(key)) {
              target[key] = args[i][key];
            }
          }
        }
        return target;
      };

      // Helper to define a logging level object; helps with optimisation.
      var defineLogLevel = function defineLogLevel(value, name) {
        return {
          value: value,
          name: name
        };
      };

      // Predefined logging levels.
      Logger.TRACE = defineLogLevel(1, 'TRACE');
      Logger.DEBUG = defineLogLevel(2, 'DEBUG');
      Logger.INFO = defineLogLevel(3, 'INFO');
      Logger.TIME = defineLogLevel(4, 'TIME');
      Logger.WARN = defineLogLevel(5, 'WARN');
      Logger.ERROR = defineLogLevel(8, 'ERROR');
      Logger.OFF = defineLogLevel(99, 'OFF');

      // Inner class which performs the bulk of the work; ContextualLogger instances can be configured independently
      // of each other.
      var ContextualLogger = function ContextualLogger(defaultContext) {
        this.context = defaultContext;
        this.setLevel(defaultContext.filterLevel);
        this.log = this.info; // Convenience alias.
      };

      ContextualLogger.prototype = {
        // Changes the current logging level for the logging instance.
        setLevel: function setLevel(newLevel) {
          // Ensure the supplied Level object looks valid.
          if (newLevel && "value" in newLevel) {
            this.context.filterLevel = newLevel;
          }
        },
        // Gets the current logging level for the logging instance
        getLevel: function getLevel() {
          return this.context.filterLevel;
        },
        // Is the logger configured to output messages at the supplied level?
        enabledFor: function enabledFor(lvl) {
          var filterLevel = this.context.filterLevel;
          return lvl.value >= filterLevel.value;
        },
        trace: function trace() {
          this.invoke(Logger.TRACE, arguments);
        },
        debug: function debug() {
          this.invoke(Logger.DEBUG, arguments);
        },
        info: function info() {
          this.invoke(Logger.INFO, arguments);
        },
        warn: function warn() {
          this.invoke(Logger.WARN, arguments);
        },
        error: function error() {
          this.invoke(Logger.ERROR, arguments);
        },
        time: function time(label) {
          if (typeof label === 'string' && label.length > 0) {
            this.invoke(Logger.TIME, [label, 'start']);
          }
        },
        timeEnd: function timeEnd(label) {
          if (typeof label === 'string' && label.length > 0) {
            this.invoke(Logger.TIME, [label, 'end']);
          }
        },
        // Invokes the logger callback if it's not being filtered.
        invoke: function invoke(level, msgArgs) {
          if (logHandler && this.enabledFor(level)) {
            logHandler(msgArgs, merge({
              level: level
            }, this.context));
          }
        }
      };

      // Protected instance which all calls to the to level `Logger` module will be routed through.
      var globalLogger = new ContextualLogger({
        filterLevel: Logger.OFF
      });

      // Configure the global Logger instance.
      (function () {
        // Shortcut for optimisers.
        var L = Logger;
        L.enabledFor = bind(globalLogger, globalLogger.enabledFor);
        L.trace = bind(globalLogger, globalLogger.trace);
        L.debug = bind(globalLogger, globalLogger.debug);
        L.time = bind(globalLogger, globalLogger.time);
        L.timeEnd = bind(globalLogger, globalLogger.timeEnd);
        L.info = bind(globalLogger, globalLogger.info);
        L.warn = bind(globalLogger, globalLogger.warn);
        L.error = bind(globalLogger, globalLogger.error);

        // Don't forget the convenience alias!
        L.log = L.info;
      })();

      // Set the global logging handler.  The supplied function should expect two arguments, the first being an arguments
      // object with the supplied log messages and the second being a context object which contains a hash of stateful
      // parameters which the logging function can consume.
      Logger.setHandler = function (func) {
        logHandler = func;
      };

      // Sets the global logging filter level which applies to *all* previously registered, and future Logger instances.
      // (note that named loggers (retrieved via `Logger.get`) can be configured independently if required).
      Logger.setLevel = function (level) {
        // Set the globalLogger's level.
        globalLogger.setLevel(level);

        // Apply this level to all registered contextual loggers.
        for (var key in contextualLoggersByNameMap) {
          if (contextualLoggersByNameMap.hasOwnProperty(key)) {
            contextualLoggersByNameMap[key].setLevel(level);
          }
        }
      };

      // Gets the global logging filter level
      Logger.getLevel = function () {
        return globalLogger.getLevel();
      };

      // Retrieve a ContextualLogger instance.  Note that named loggers automatically inherit the global logger's level,
      // default context and log handler.
      Logger.get = function (name) {
        // All logger instances are cached so they can be configured ahead of use.
        return contextualLoggersByNameMap[name] || (contextualLoggersByNameMap[name] = new ContextualLogger(merge({
          name: name
        }, globalLogger.context)));
      };

      // CreateDefaultHandler returns a handler function which can be passed to `Logger.setHandler()` which will
      // write to the window's console object (if present); the optional options object can be used to customise the
      // formatter used to format each log message.
      Logger.createDefaultHandler = function (options) {
        options = options || {};
        options.formatter = options.formatter || function defaultMessageFormatter(messages, context) {
          // Prepend the logger's name to the log message for easy identification.
          if (context.name) {
            messages.unshift("[" + context.name + "]");
          }
        };

        // Map of timestamps by timer labels used to track `#time` and `#timeEnd()` invocations in environments
        // that don't offer a native console method.
        var timerStartTimeByLabelMap = {};

        // Support for IE8+ (and other, slightly more sane environments)
        var invokeConsoleMethod = function invokeConsoleMethod(hdlr, messages) {
          Function.prototype.apply.call(hdlr, console, messages);
        };

        // Check for the presence of a logger.
        if (typeof console === "undefined") {
          return function () {/* no console */};
        }
        return function (messages, context) {
          // Convert arguments object to Array.
          messages = Array.prototype.slice.call(messages);
          var hdlr = console.log;
          var timerLabel;
          if (context.level === Logger.TIME) {
            timerLabel = (context.name ? '[' + context.name + '] ' : '') + messages[0];
            if (messages[1] === 'start') {
              if (console.time) {
                console.time(timerLabel);
              } else {
                timerStartTimeByLabelMap[timerLabel] = new Date().getTime();
              }
            } else {
              if (console.timeEnd) {
                console.timeEnd(timerLabel);
              } else {
                invokeConsoleMethod(hdlr, [timerLabel + ': ' + (new Date().getTime() - timerStartTimeByLabelMap[timerLabel]) + 'ms']);
              }
            }
          } else {
            // Delegate through to custom warn/error loggers if present on the console.
            if (context.level === Logger.WARN && console.warn) {
              hdlr = console.warn;
            } else if (context.level === Logger.ERROR && console.error) {
              hdlr = console.error;
            } else if (context.level === Logger.INFO && console.info) {
              hdlr = console.info;
            } else if (context.level === Logger.DEBUG && console.debug) {
              hdlr = console.debug;
            } else if (context.level === Logger.TRACE && console.trace) {
              hdlr = console.trace;
            }
            options.formatter(messages, context);
            invokeConsoleMethod(hdlr, messages);
          }
        };
      };

      // Configure and example a Default implementation which writes to the `window.console` (if present).  The
      // `options` hash can be used to configure the default logLevel and provide a custom message formatter.
      Logger.useDefaults = function (options) {
        Logger.setLevel(options && options.defaultLevel || Logger.DEBUG);
        Logger.setHandler(Logger.createDefaultHandler(options));
      };

      // Createa an alias to useDefaults to avoid reaking a react-hooks rule.
      Logger.setDefaults = Logger.useDefaults;

      // Export to popular environments boilerplate.
      if (module.exports) {
        module.exports = Logger;
      } else {
        Logger._prevLogger = global.Logger;
        Logger.noConflict = function () {
          global.Logger = Logger._prevLogger;
          return Logger;
        };
        global.Logger = Logger;
      }
    })(commonjsGlobal$1);
  })(logger$2);
  var Logger$1 = logger$2.exports;
  Logger$1.useDefaults({
    defaultLevel: Logger$1.DEBUG,
    formatter: (messages, context) => {
      messages.unshift("[".concat(context.name, "] "));
    }
  });
  function isValidActiveSpeakerNotificationMsg(msg) {
    var maybeActiveSpeakerNotificationMsg = msg;
    return Boolean(maybeActiveSpeakerNotificationMsg.seqNum && maybeActiveSpeakerNotificationMsg.csis);
  }
  var HomerMsgType$1;
  (function (HomerMsgType) {
    HomerMsgType["Multistream"] = "multistream";
  })(HomerMsgType$1 || (HomerMsgType$1 = {}));
  class HomerMsg {
    constructor(msgType, payload) {
      this.msgType = msgType;
      this.payload = payload;
    }
    static fromJson(data) {
      if (!data.msgType || !data.payload) {
        return null;
      }
      return new HomerMsg(data.msgType, data.payload);
    }
  }
  var JmpMsgType$1;
  (function (JmpMsgType) {
    JmpMsgType["Scr"] = "scr";
    JmpMsgType["ScrAck"] = "scrAck";
    JmpMsgType["ActiveSpeakerNotification"] = "activeSpeakerNotification";
    JmpMsgType["SourceIndication"] = "sourceIndication";
    JmpMsgType["SourceIndicationAck"] = "sourceIndicationAck";
  })(JmpMsgType$1 || (JmpMsgType$1 = {}));
  class JmpMsg {
    constructor(mediaFamily, mediaContent, payload) {
      this.mediaFamily = mediaFamily;
      this.mediaContent = mediaContent;
      this.payload = payload;
    }
    toString() {
      return "JmpMsg(mediaFamily=".concat(this.mediaFamily, ", mediaContent=").concat(this.mediaContent, ", payload=").concat(this.payload, ")");
    }
  }
  function isValidJmpMsgPayload(msg) {
    var maybeJmpMsgPayload = msg;
    return Boolean(maybeJmpMsgPayload.msgType && maybeJmpMsgPayload.payload);
  }
  function isValidJmpMsg(msg) {
    var maybeJmpMsg = msg;
    return Boolean(maybeJmpMsg.mediaContent && maybeJmpMsg.mediaFamily && maybeJmpMsg.payload && isValidJmpMsgPayload(maybeJmpMsg.payload));
  }
  class JmpScrAckMsg {
    constructor(scrSeqNum) {
      this.scrSeqNum = scrSeqNum;
    }
    toString() {
      return "JmpScrAckMsg(seqNum=".concat(this.scrSeqNum, ")");
    }
  }
  function isValidJmpScrAckMsg(msg) {
    var maybeJmpScrAckMsg = msg;
    return Boolean(maybeJmpScrAckMsg.scrSeqNum);
  }
  class JmpScrMsg {
    constructor(seqNum, requests) {
      this.seqNum = seqNum;
      this.requests = requests;
    }
    toString() {
      return "JmpScrMsg(seqNum=".concat(this.seqNum, ", requests=[").concat(this.requests, "])");
    }
  }
  function isValidJmpScrMsg(msg) {
    var maybeJmpScrMsg = msg;
    return Boolean(maybeJmpScrMsg.seqNum && maybeJmpScrMsg.requests);
  }
  class JmpScrRequest {
    constructor(policy, policySpecificInfo, ids, maxPayloadBitsPerSecond) {
      var codecInfos = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];
      this.policy = policy;
      this.policySpecificInfo = policySpecificInfo;
      this.ids = ids;
      this.maxPayloadBitsPerSecond = maxPayloadBitsPerSecond;
      this.codecInfos = codecInfos;
    }
    toString() {
      return "Request(policy=".concat(this.policy, ", info=").concat(this.policySpecificInfo, ", ids=[").concat(this.ids, "], maxPayloadBitsPerSecond=[").concat(this.maxPayloadBitsPerSecond, "], codecInfos=[").concat(this.codecInfos, "])");
    }
  }
  function isValidReceiverSelectedInfo(msg) {
    var maybeReceiverSelectedInfo = msg;
    return Boolean(maybeReceiverSelectedInfo.csi);
  }
  class SourceIndicationAckMsg {
    constructor(sourceIndicationSeqNum) {
      this.sourceIndicationSeqNum = sourceIndicationSeqNum;
    }
    toString() {
      return "SourceIndicationAckMsg(sourceIndicationSeqNum=".concat(this.sourceIndicationSeqNum, ")");
    }
  }
  function isValidSourceIndicationAckMsg(msg) {
    var maybeSourceIndicationAckMsg = msg;
    return Boolean(maybeSourceIndicationAckMsg.sourceIndicationSeqNum);
  }
  var MediaFamily$1;
  (function (MediaFamily) {
    MediaFamily["Audio"] = "AUDIO";
    MediaFamily["Video"] = "VIDEO";
  })(MediaFamily$1 || (MediaFamily$1 = {}));
  var MediaContent$1;
  (function (MediaContent) {
    MediaContent["Main"] = "MAIN";
    MediaContent["Slides"] = "SLIDES";
  })(MediaContent$1 || (MediaContent$1 = {}));
  var Policy$1;
  (function (Policy) {
    Policy["ActiveSpeaker"] = "active-speaker";
    Policy["ReceiverSelected"] = "receiver-selected";
  })(Policy$1 || (Policy$1 = {}));
  var MediaType$1;
  (function (MediaType) {
    MediaType["VideoMain"] = "VIDEO-MAIN";
    MediaType["VideoSlides"] = "VIDEO-SLIDES";
    MediaType["AudioMain"] = "AUDIO-MAIN";
    MediaType["AudioSlides"] = "AUDIO-SLIDES";
  })(MediaType$1 || (MediaType$1 = {}));
  function randomInteger(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
  }
  function generateSceneId() {
    return randomInteger(0, 0x7fffff);
  }
  function generateCsi(mediaFamily, sceneId) {
    var av;
    if (mediaFamily === MediaFamily$1.Audio) {
      av = 0;
    } else {
      av = 1;
    }
    return sceneId << 8 | av;
  }
  function getMediaType(mediaFamily, mediaContent) {
    if (mediaFamily === MediaFamily$1.Video && mediaContent === MediaContent$1.Main) {
      return MediaType$1.VideoMain;
    }
    if (mediaFamily === MediaFamily$1.Video && mediaContent === MediaContent$1.Slides) {
      return MediaType$1.VideoSlides;
    }
    if (mediaFamily === MediaFamily$1.Audio && mediaContent === MediaContent$1.Main) {
      return MediaType$1.AudioMain;
    }
    return MediaType$1.AudioSlides;
  }
  function getMediaFamily$1(mediaType) {
    return [MediaType$1.VideoMain, MediaType$1.VideoSlides].includes(mediaType) ? MediaFamily$1.Video : MediaFamily$1.Audio;
  }
  function getMediaContent(mediaType) {
    return [MediaType$1.VideoMain, MediaType$1.AudioMain].includes(mediaType) ? MediaContent$1.Main : MediaContent$1.Slides;
  }
  var truthyOrZero = value => value === 0 || value;
  function isValidStreamId(obj) {
    var maybeSourceId = obj;
    if (maybeSourceId.mid && maybeSourceId.ssrc) {
      return false;
    }
    return Boolean(maybeSourceId.mid) || Boolean(maybeSourceId.ssrc);
  }
  function compareStreamIds(id1, id2) {
    var keys1 = Object.keys(id1);
    var keys2 = Object.keys(id2);
    if (keys1.length !== keys2.length) {
      return false;
    }
    return keys1.every(key => id1[key] === id2[key]);
  }
  class SourceIndicationMsg {
    constructor(seqNum, numTotalSources, numLiveSources, sources) {
      this.seqNum = seqNum;
      this.numTotalSources = numTotalSources;
      this.numLiveSources = numLiveSources;
      this.sources = sources;
    }
    sourcesToString() {
      return this.sources.map(source => "Source(id=".concat(source.id, " state=").concat(source.state, " ").concat(source.csi ? "csi=".concat(source.csi) : '', ")")).join(', ');
    }
    toString() {
      return "SourceIndication(seqNum=".concat(this.seqNum, " numTotalSources=").concat(this.numTotalSources, " numLiveSources=").concat(this.numLiveSources, " sources=[").concat(this.sourcesToString(), "])");
    }
  }
  function isValidSource(obj) {
    var maybeSource = obj;
    return Boolean(maybeSource.id && isValidStreamId(maybeSource.id) && ['no source', 'invalid source', 'live', 'avatar', 'bandwidth disabled'].includes(maybeSource.state));
  }
  function isValidSourceIndicationMsg(msg) {
    var _a;
    var maybeSourceIndicationMsg = msg;
    return Boolean(maybeSourceIndicationMsg.seqNum && truthyOrZero(maybeSourceIndicationMsg.numTotalSources) && truthyOrZero(maybeSourceIndicationMsg.numLiveSources) && maybeSourceIndicationMsg.sources && ((_a = maybeSourceIndicationMsg.sources) === null || _a === void 0 ? void 0 : _a.every(source => isValidSource(source))));
  }
  class RetransmitHandler {
    constructor(msg, maxNumRetransmits, retransmitIntervalMs, transmitCallback, expirationCallback) {
      this.timerHandle = undefined;
      this.msg = msg;
      this.numRetransmitsLeft = maxNumRetransmits;
      this.retransmitIntervalMs = retransmitIntervalMs;
      this.transmitCallback = transmitCallback;
      this.expirationCallback = expirationCallback;
      this.scheduleTimer();
    }
    onTimer() {
      var _a;
      if (this.numRetransmitsLeft > 0) {
        --this.numRetransmitsLeft;
        this.transmitCallback(this.msg);
        this.scheduleTimer();
      } else {
        (_a = this.expirationCallback) === null || _a === void 0 ? void 0 : _a.call(this, this.msg);
      }
    }
    scheduleTimer() {
      this.timerHandle = window.setTimeout(() => this.onTimer(), this.retransmitIntervalMs);
    }
    cancel() {
      if (this.timerHandle) {
        clearTimeout(this.timerHandle);
      }
      this.timerHandle = undefined;
    }
  }
  var JmpSessionEvents$1;
  (function (JmpSessionEvents) {
    JmpSessionEvents["SourceIndication"] = "source-indication";
    JmpSessionEvents["ActiveSpeaker"] = "active-speaker";
    JmpSessionEvents["ScrRequestReceived"] = "scr-request-received";
  })(JmpSessionEvents$1 || (JmpSessionEvents$1 = {}));
  class JmpSession extends EventEmitter$4 {
    constructor(mediaFamily, mediaContent) {
      var maxNumRetransmits = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 3;
      var retransmitIntervalMs = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 250;
      super();
      this.currScrSeqNum = 1;
      this.currSourceIndicationSeqNum = 1;
      this.txCallback = undefined;
      this.lastSentScr = undefined;
      this.lastSentScrAck = undefined;
      this.lastReceivedScr = undefined;
      this.mediaFamily = mediaFamily;
      this.mediaContent = mediaContent;
      this.logger = Logger$1.get("JmpSession ".concat(this.mediaFamily, "-").concat(this.mediaContent));
      this.maxNumRetransmits = maxNumRetransmits;
      this.retransmitIntervalMs = retransmitIntervalMs;
    }
    getLogger() {
      return this.logger;
    }
    sendRequests(requests) {
      var _a;
      var jmpScr = new JmpScrMsg(this.currScrSeqNum++, requests);
      var jmpMsg = new JmpMsg(this.mediaFamily, this.mediaContent, {
        msgType: JmpMsgType$1.Scr,
        payload: jmpScr
      });
      this.sendJmpMsg(jmpMsg);
      (_a = this.lastSentScr) === null || _a === void 0 ? void 0 : _a.cancel();
      this.lastSentScr = new RetransmitHandler(jmpScr, this.maxNumRetransmits, this.retransmitIntervalMs, msg => this.sendJmpScr(msg), expiredJmpMsg => {
        this.logger.warn("Retransmits for message expired: ".concat(expiredJmpMsg));
      });
    }
    updateSourceIndication(numTotalSources, numLiveSources, sources) {
      var _a;
      var filteredSources = sources.filter(source => {
        var _a;
        return (_a = this.lastReceivedScr) === null || _a === void 0 ? void 0 : _a.requests.some(req => req.ids.find(streamId => compareStreamIds(streamId, source.id)));
      });
      var sourceIndicationMsg = new SourceIndicationMsg(this.currSourceIndicationSeqNum++, numTotalSources, numLiveSources, filteredSources);
      var jmpMsg = new JmpMsg(this.mediaFamily, this.mediaContent, {
        msgType: JmpMsgType$1.SourceIndication,
        payload: sourceIndicationMsg
      });
      this.sendJmpMsg(jmpMsg);
      (_a = this.lastSentSourceIndication) === null || _a === void 0 ? void 0 : _a.cancel();
      this.lastSentSourceIndication = new RetransmitHandler(sourceIndicationMsg, this.maxNumRetransmits, this.retransmitIntervalMs, msg => this.sendSourceIndication(msg), expiredMsg => {
        this.logger.warn("Retransmits for message expired:", expiredMsg);
      });
    }
    receive(jmpMsg) {
      var _a, _b, _c, _d, _e, _f, _g, _h;
      if (jmpMsg.mediaContent !== this.mediaContent || jmpMsg.mediaFamily !== this.mediaFamily) {
        this.logger.error("JmpMsg ".concat(jmpMsg, " sent to incorrect JmpSession"));
        return;
      }
      this.logger.debug("Received JmpMsg", jmpMsg);
      var {
        payload
      } = jmpMsg;
      if (payload.msgType === JmpMsgType$1.Scr) {
        var jmpScr = payload.payload;
        if (!isValidJmpScrMsg(jmpScr)) {
          this.logger.error("Received invalid SCR:", jmpScr);
          return;
        }
        if (this.lastReceivedScr && jmpScr.seqNum < ((_a = this.lastReceivedScr) === null || _a === void 0 ? void 0 : _a.seqNum)) {
          this.logger.info("Received old SCR, ignoring");
        } else if (this.lastReceivedScr && jmpScr.seqNum === this.lastReceivedScr.seqNum) {
          if (this.lastSentScrAck) {
            this.logger.info("Received duplicate SCR, re-sending ACK");
            this.sendJmpScrAck(this.lastSentScrAck);
          } else {
            this.logger.warn("Received duplicate SCR, but there was no ACK previously sent");
          }
        } else {
          this.logger.info("Received new SCR, sending ACK");
          var jmpScrAck = new JmpScrAckMsg(jmpScr.seqNum);
          this.lastReceivedScr = jmpScr;
          this.lastSentScrAck = jmpScrAck;
          this.sendJmpScrAck(jmpScrAck);
          this.emit(JmpSessionEvents$1.ScrRequestReceived, jmpScr);
        }
      } else if (payload.msgType === JmpMsgType$1.ScrAck) {
        var _jmpScrAck = payload.payload;
        if (!isValidJmpScrAckMsg(_jmpScrAck)) {
          this.logger.error("Received invalid SCR ACK:", _jmpScrAck);
          return;
        }
        if (_jmpScrAck.scrSeqNum === ((_c = (_b = this.lastSentScr) === null || _b === void 0 ? void 0 : _b.msg) === null || _c === void 0 ? void 0 : _c.seqNum)) {
          this.logger.info("Received ACK for last sent SCR");
          (_d = this.lastSentScr) === null || _d === void 0 ? void 0 : _d.cancel();
        } else {
          this.logger.info("Received ACK for old SCR");
        }
      } else if (payload.msgType === JmpMsgType$1.ActiveSpeakerNotification) {
        var activeSpeakerNotification = payload.payload;
        if (!isValidActiveSpeakerNotificationMsg(activeSpeakerNotification)) {
          this.logger.info("Received invalid Active Speaker Notification:", activeSpeakerNotification);
          return;
        }
        this.logger.debug("Received Active Speaker Notification:", activeSpeakerNotification);
        this.emit(JmpSessionEvents$1.ActiveSpeaker, activeSpeakerNotification);
      } else if (payload.msgType === JmpMsgType$1.SourceIndication) {
        var sourceIndication = payload.payload;
        if (!isValidSourceIndicationMsg(sourceIndication)) {
          this.logger.error("Received invalid Source Indication:", sourceIndication);
          return;
        }
        if (this.lastReceivedSourceIndication && sourceIndication.seqNum < ((_e = this.lastReceivedSourceIndication) === null || _e === void 0 ? void 0 : _e.seqNum)) {
          this.logger.info("Received old Source Indication, ignoring");
        } else if (this.lastReceivedSourceIndication && sourceIndication.seqNum === this.lastReceivedSourceIndication.seqNum) {
          if (this.lastSentSourceIndicationAck) {
            this.logger.info("Received duplicate Source Indication, re-sending ACK");
            this.sendSourceIndicationAck(this.lastSentSourceIndicationAck);
          } else {
            this.logger.warn("Received duplicate Source Indication, but there was no ACK previously sent");
          }
        } else {
          this.logger.info("Received new Source Indication, sending ACK");
          var sourceIndicationAck = new SourceIndicationAckMsg(sourceIndication.seqNum);
          this.lastReceivedSourceIndication = sourceIndication;
          this.lastSentSourceIndicationAck = sourceIndicationAck;
          this.sendSourceIndicationAck(sourceIndicationAck);
          this.emit(JmpSessionEvents$1.SourceIndication, sourceIndication);
        }
      } else if (payload.msgType === JmpMsgType$1.SourceIndicationAck) {
        var _sourceIndicationAck = payload.payload;
        if (!isValidSourceIndicationAckMsg(_sourceIndicationAck)) {
          this.logger.error("Received invalid SCR ACK:", _sourceIndicationAck);
          return;
        }
        if (_sourceIndicationAck.sourceIndicationSeqNum === ((_g = (_f = this.lastSentSourceIndication) === null || _f === void 0 ? void 0 : _f.msg) === null || _g === void 0 ? void 0 : _g.seqNum)) {
          this.logger.info("Received ACK for last sent SCR");
          (_h = this.lastSentSourceIndication) === null || _h === void 0 ? void 0 : _h.cancel();
        } else {
          this.logger.info("Received ACK for old SCR");
        }
      } else {
        this.logger.error("Received unknown JmpMsg");
      }
    }
    setTxCallback(callback) {
      this.txCallback = callback;
    }
    close() {
      var _a;
      this.logger.info("closing");
      (_a = this.lastSentScr) === null || _a === void 0 ? void 0 : _a.cancel();
    }
    sendSourceIndicationAck(sourceIndicationAck) {
      var jmpMsg = new JmpMsg(this.mediaFamily, this.mediaContent, {
        msgType: JmpMsgType$1.SourceIndicationAck,
        payload: sourceIndicationAck
      });
      this.sendJmpMsg(jmpMsg);
    }
    sendSourceIndication(sourceIndication) {
      var jmpMsg = new JmpMsg(this.mediaFamily, this.mediaContent, {
        msgType: JmpMsgType$1.SourceIndication,
        payload: sourceIndication
      });
      this.sendJmpMsg(jmpMsg);
    }
    sendJmpScrAck(jmpScrAck) {
      var jmpMsg = new JmpMsg(this.mediaFamily, this.mediaContent, {
        msgType: JmpMsgType$1.ScrAck,
        payload: jmpScrAck
      });
      this.sendJmpMsg(jmpMsg);
    }
    sendJmpScr(jmpScr) {
      var jmpMsg = new JmpMsg(this.mediaFamily, this.mediaContent, {
        msgType: JmpMsgType$1.Scr,
        payload: jmpScr
      });
      this.sendJmpMsg(jmpMsg);
    }
    sendJmpMsg(msg) {
      var _a;
      var homerMsg = new HomerMsg(HomerMsgType$1.Multistream, msg);
      (_a = this.txCallback) === null || _a === void 0 ? void 0 : _a.call(this, JSON.stringify(homerMsg));
    }
  }
  class MediaRequest {
    constructor(policy, policySpecificInfo, receiveSlots, maxPayloadBitsPerSecond) {
      var codecInfos = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];
      this.policy = policy;
      this.policySpecificInfo = policySpecificInfo;
      this.receiveSlots = receiveSlots;
      this.maxPayloadBitsPerSecond = maxPayloadBitsPerSecond;
      this.codecInfos = codecInfos;
    }
    _toJmpScrRequest() {
      return new JmpScrRequest(this.policy, this.policySpecificInfo, this.receiveSlots.map(rs => rs.id), this.maxPayloadBitsPerSecond, this.codecInfos);
    }
  }

  /******************************************************************************
  Copyright (c) Microsoft Corporation.

  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */

  function __awaiter$3(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function (resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function (resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  }
  var commonjsGlobal$3 = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global$1 !== 'undefined' ? global$1 : typeof self !== 'undefined' ? self : {};
  function getDefaultExportFromCjs(x) {
    return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
  }
  function getAugmentedNamespace(n) {
    if (n.__esModule) return n;
    var a = Object.defineProperty({}, '__esModule', {
      value: true
    });
    Object.keys(n).forEach(function (k) {
      var d = Object.getOwnPropertyDescriptor(n, k);
      Object.defineProperty(a, k, d.get ? d : {
        enumerable: true,
        get: function get() {
          return n[k];
        }
      });
    });
    return a;
  }

  // Unique ID creation requires a high quality random # generator. In the browser we therefore
  // require the crypto API and do not support built-in fallback to lower quality random number
  // generators (like Math.random()).
  var getRandomValues$1;
  var rnds8$1 = new Uint8Array(16);
  function rng$1() {
    // lazy load so that environments that need to polyfill have a chance to do so
    if (!getRandomValues$1) {
      // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation. Also,
      // find the complete implementation of crypto (msCrypto) on IE11.
      getRandomValues$1 = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);
      if (!getRandomValues$1) {
        throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');
      }
    }
    return getRandomValues$1(rnds8$1);
  }
  var REGEX$1 = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
  function validate$1(uuid) {
    return typeof uuid === 'string' && REGEX$1.test(uuid);
  }

  /**
   * Convert array of 16 byte values to UUID string format of the form:
   * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
   */

  var byteToHex$1 = [];
  for (var i$1 = 0; i$1 < 256; ++i$1) {
    byteToHex$1.push((i$1 + 0x100).toString(16).substr(1));
  }
  function stringify$1(arr) {
    var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    // Note: Be careful editing this code!  It's been tuned for performance
    // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
    var uuid = (byteToHex$1[arr[offset + 0]] + byteToHex$1[arr[offset + 1]] + byteToHex$1[arr[offset + 2]] + byteToHex$1[arr[offset + 3]] + '-' + byteToHex$1[arr[offset + 4]] + byteToHex$1[arr[offset + 5]] + '-' + byteToHex$1[arr[offset + 6]] + byteToHex$1[arr[offset + 7]] + '-' + byteToHex$1[arr[offset + 8]] + byteToHex$1[arr[offset + 9]] + '-' + byteToHex$1[arr[offset + 10]] + byteToHex$1[arr[offset + 11]] + byteToHex$1[arr[offset + 12]] + byteToHex$1[arr[offset + 13]] + byteToHex$1[arr[offset + 14]] + byteToHex$1[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one
    // of the following:
    // - One or more input array values don't map to a hex octet (leading to
    // "undefined" in the uuid)
    // - Invalid input values for the RFC `version` or `variant` fields

    if (!validate$1(uuid)) {
      throw TypeError('Stringified UUID is invalid');
    }
    return uuid;
  }

  //
  // Inspired by https://github.com/LiosK/UUID.js
  // and http://docs.python.org/library/uuid.html

  var _nodeId;
  var _clockseq; // Previous uuid creation time

  var _lastMSecs = 0;
  var _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details

  function v1(options, buf, offset) {
    var i = buf && offset || 0;
    var b = buf || new Array(16);
    options = options || {};
    var node = options.node || _nodeId;
    var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not
    // specified.  We do this lazily to minimize issues related to insufficient
    // system entropy.  See #189

    if (node == null || clockseq == null) {
      var seedBytes = options.random || (options.rng || rng$1)();
      if (node == null) {
        // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
        node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
      }
      if (clockseq == null) {
        // Per 4.2.2, randomize (14 bit) clockseq
        clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
      }
    } // UUID timestamps are 100 nano-second units since the Gregorian epoch,
    // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
    // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
    // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.

    var msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock
    // cycle to simulate higher resolution clock

    var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)

    var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression

    if (dt < 0 && options.clockseq === undefined) {
      clockseq = clockseq + 1 & 0x3fff;
    } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
    // time interval

    if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
      nsecs = 0;
    } // Per 4.2.1.2 Throw error if too many uuids are requested

    if (nsecs >= 10000) {
      throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
    }
    _lastMSecs = msecs;
    _lastNSecs = nsecs;
    _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch

    msecs += 12219292800000; // `time_low`

    var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
    b[i++] = tl >>> 24 & 0xff;
    b[i++] = tl >>> 16 & 0xff;
    b[i++] = tl >>> 8 & 0xff;
    b[i++] = tl & 0xff; // `time_mid`

    var tmh = msecs / 0x100000000 * 10000 & 0xfffffff;
    b[i++] = tmh >>> 8 & 0xff;
    b[i++] = tmh & 0xff; // `time_high_and_version`

    b[i++] = tmh >>> 24 & 0xf | 0x10; // include version

    b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)

    b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`

    b[i++] = clockseq & 0xff; // `node`

    for (var n = 0; n < 6; ++n) {
      b[i + n] = node[n];
    }
    return buf || stringify$1(b);
  }
  function parse$1(uuid) {
    if (!validate$1(uuid)) {
      throw TypeError('Invalid UUID');
    }
    var v;
    var arr = new Uint8Array(16); // Parse ########-....-....-....-............

    arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
    arr[1] = v >>> 16 & 0xff;
    arr[2] = v >>> 8 & 0xff;
    arr[3] = v & 0xff; // Parse ........-####-....-....-............

    arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
    arr[5] = v & 0xff; // Parse ........-....-####-....-............

    arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
    arr[7] = v & 0xff; // Parse ........-....-....-####-............

    arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
    arr[9] = v & 0xff; // Parse ........-....-....-....-############
    // (Use "/" to avoid 32-bit truncation when bit-shifting high-order bytes)

    arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;
    arr[11] = v / 0x100000000 & 0xff;
    arr[12] = v >>> 24 & 0xff;
    arr[13] = v >>> 16 & 0xff;
    arr[14] = v >>> 8 & 0xff;
    arr[15] = v & 0xff;
    return arr;
  }
  function stringToBytes$1(str) {
    str = unescape(encodeURIComponent(str)); // UTF8 escape

    var bytes = [];
    for (var i = 0; i < str.length; ++i) {
      bytes.push(str.charCodeAt(i));
    }
    return bytes;
  }
  var DNS$1 = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';
  var URL$1 = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';
  function v35$1(name, version, hashfunc) {
    function generateUUID(value, namespace, buf, offset) {
      if (typeof value === 'string') {
        value = stringToBytes$1(value);
      }
      if (typeof namespace === 'string') {
        namespace = parse$1(namespace);
      }
      if (namespace.length !== 16) {
        throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');
      } // Compute hash of namespace and value, Per 4.3
      // Future: Use spread syntax when supported on all platforms, e.g. `bytes =
      // hashfunc([...namespace, ... value])`

      var bytes = new Uint8Array(16 + value.length);
      bytes.set(namespace);
      bytes.set(value, namespace.length);
      bytes = hashfunc(bytes);
      bytes[6] = bytes[6] & 0x0f | version;
      bytes[8] = bytes[8] & 0x3f | 0x80;
      if (buf) {
        offset = offset || 0;
        for (var i = 0; i < 16; ++i) {
          buf[offset + i] = bytes[i];
        }
        return buf;
      }
      return stringify$1(bytes);
    } // Function#name is not settable on some platforms (#270)

    try {
      generateUUID.name = name; // eslint-disable-next-line no-empty
    } catch (err) {} // For CommonJS default export support

    generateUUID.DNS = DNS$1;
    generateUUID.URL = URL$1;
    return generateUUID;
  }

  /*
   * Browser-compatible JavaScript MD5
   *
   * Modification of JavaScript MD5
   * https://github.com/blueimp/JavaScript-MD5
   *
   * Copyright 2011, Sebastian Tschan
   * https://blueimp.net
   *
   * Licensed under the MIT license:
   * https://opensource.org/licenses/MIT
   *
   * Based on
   * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
   * Digest Algorithm, as defined in RFC 1321.
   * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009
   * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
   * Distributed under the BSD License
   * See http://pajhome.org.uk/crypt/md5 for more info.
   */
  function md5$1(bytes) {
    if (typeof bytes === 'string') {
      var msg = unescape(encodeURIComponent(bytes)); // UTF8 escape

      bytes = new Uint8Array(msg.length);
      for (var i = 0; i < msg.length; ++i) {
        bytes[i] = msg.charCodeAt(i);
      }
    }
    return md5ToHexEncodedArray$1(wordsToMd5$1(bytesToWords$1(bytes), bytes.length * 8));
  }
  /*
   * Convert an array of little-endian words to an array of bytes
   */

  function md5ToHexEncodedArray$1(input) {
    var output = [];
    var length32 = input.length * 32;
    var hexTab = '0123456789abcdef';
    for (var i = 0; i < length32; i += 8) {
      var x = input[i >> 5] >>> i % 32 & 0xff;
      var hex = parseInt(hexTab.charAt(x >>> 4 & 0x0f) + hexTab.charAt(x & 0x0f), 16);
      output.push(hex);
    }
    return output;
  }
  /**
   * Calculate output length with padding and bit length
   */

  function getOutputLength$1(inputLength8) {
    return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;
  }
  /*
   * Calculate the MD5 of an array of little-endian words, and a bit length.
   */

  function wordsToMd5$1(x, len) {
    /* append padding */
    x[len >> 5] |= 0x80 << len % 32;
    x[getOutputLength$1(len) - 1] = len;
    var a = 1732584193;
    var b = -271733879;
    var c = -1732584194;
    var d = 271733878;
    for (var i = 0; i < x.length; i += 16) {
      var olda = a;
      var oldb = b;
      var oldc = c;
      var oldd = d;
      a = md5ff$1(a, b, c, d, x[i], 7, -680876936);
      d = md5ff$1(d, a, b, c, x[i + 1], 12, -389564586);
      c = md5ff$1(c, d, a, b, x[i + 2], 17, 606105819);
      b = md5ff$1(b, c, d, a, x[i + 3], 22, -1044525330);
      a = md5ff$1(a, b, c, d, x[i + 4], 7, -176418897);
      d = md5ff$1(d, a, b, c, x[i + 5], 12, 1200080426);
      c = md5ff$1(c, d, a, b, x[i + 6], 17, -1473231341);
      b = md5ff$1(b, c, d, a, x[i + 7], 22, -45705983);
      a = md5ff$1(a, b, c, d, x[i + 8], 7, 1770035416);
      d = md5ff$1(d, a, b, c, x[i + 9], 12, -1958414417);
      c = md5ff$1(c, d, a, b, x[i + 10], 17, -42063);
      b = md5ff$1(b, c, d, a, x[i + 11], 22, -1990404162);
      a = md5ff$1(a, b, c, d, x[i + 12], 7, 1804603682);
      d = md5ff$1(d, a, b, c, x[i + 13], 12, -40341101);
      c = md5ff$1(c, d, a, b, x[i + 14], 17, -1502002290);
      b = md5ff$1(b, c, d, a, x[i + 15], 22, 1236535329);
      a = md5gg$1(a, b, c, d, x[i + 1], 5, -165796510);
      d = md5gg$1(d, a, b, c, x[i + 6], 9, -1069501632);
      c = md5gg$1(c, d, a, b, x[i + 11], 14, 643717713);
      b = md5gg$1(b, c, d, a, x[i], 20, -373897302);
      a = md5gg$1(a, b, c, d, x[i + 5], 5, -701558691);
      d = md5gg$1(d, a, b, c, x[i + 10], 9, 38016083);
      c = md5gg$1(c, d, a, b, x[i + 15], 14, -660478335);
      b = md5gg$1(b, c, d, a, x[i + 4], 20, -405537848);
      a = md5gg$1(a, b, c, d, x[i + 9], 5, 568446438);
      d = md5gg$1(d, a, b, c, x[i + 14], 9, -1019803690);
      c = md5gg$1(c, d, a, b, x[i + 3], 14, -187363961);
      b = md5gg$1(b, c, d, a, x[i + 8], 20, 1163531501);
      a = md5gg$1(a, b, c, d, x[i + 13], 5, -1444681467);
      d = md5gg$1(d, a, b, c, x[i + 2], 9, -51403784);
      c = md5gg$1(c, d, a, b, x[i + 7], 14, 1735328473);
      b = md5gg$1(b, c, d, a, x[i + 12], 20, -1926607734);
      a = md5hh$1(a, b, c, d, x[i + 5], 4, -378558);
      d = md5hh$1(d, a, b, c, x[i + 8], 11, -2022574463);
      c = md5hh$1(c, d, a, b, x[i + 11], 16, 1839030562);
      b = md5hh$1(b, c, d, a, x[i + 14], 23, -35309556);
      a = md5hh$1(a, b, c, d, x[i + 1], 4, -1530992060);
      d = md5hh$1(d, a, b, c, x[i + 4], 11, 1272893353);
      c = md5hh$1(c, d, a, b, x[i + 7], 16, -155497632);
      b = md5hh$1(b, c, d, a, x[i + 10], 23, -1094730640);
      a = md5hh$1(a, b, c, d, x[i + 13], 4, 681279174);
      d = md5hh$1(d, a, b, c, x[i], 11, -358537222);
      c = md5hh$1(c, d, a, b, x[i + 3], 16, -722521979);
      b = md5hh$1(b, c, d, a, x[i + 6], 23, 76029189);
      a = md5hh$1(a, b, c, d, x[i + 9], 4, -640364487);
      d = md5hh$1(d, a, b, c, x[i + 12], 11, -421815835);
      c = md5hh$1(c, d, a, b, x[i + 15], 16, 530742520);
      b = md5hh$1(b, c, d, a, x[i + 2], 23, -995338651);
      a = md5ii$1(a, b, c, d, x[i], 6, -198630844);
      d = md5ii$1(d, a, b, c, x[i + 7], 10, 1126891415);
      c = md5ii$1(c, d, a, b, x[i + 14], 15, -1416354905);
      b = md5ii$1(b, c, d, a, x[i + 5], 21, -57434055);
      a = md5ii$1(a, b, c, d, x[i + 12], 6, 1700485571);
      d = md5ii$1(d, a, b, c, x[i + 3], 10, -1894986606);
      c = md5ii$1(c, d, a, b, x[i + 10], 15, -1051523);
      b = md5ii$1(b, c, d, a, x[i + 1], 21, -2054922799);
      a = md5ii$1(a, b, c, d, x[i + 8], 6, 1873313359);
      d = md5ii$1(d, a, b, c, x[i + 15], 10, -30611744);
      c = md5ii$1(c, d, a, b, x[i + 6], 15, -1560198380);
      b = md5ii$1(b, c, d, a, x[i + 13], 21, 1309151649);
      a = md5ii$1(a, b, c, d, x[i + 4], 6, -145523070);
      d = md5ii$1(d, a, b, c, x[i + 11], 10, -1120210379);
      c = md5ii$1(c, d, a, b, x[i + 2], 15, 718787259);
      b = md5ii$1(b, c, d, a, x[i + 9], 21, -343485551);
      a = safeAdd$1(a, olda);
      b = safeAdd$1(b, oldb);
      c = safeAdd$1(c, oldc);
      d = safeAdd$1(d, oldd);
    }
    return [a, b, c, d];
  }
  /*
   * Convert an array bytes to an array of little-endian words
   * Characters >255 have their high-byte silently ignored.
   */

  function bytesToWords$1(input) {
    if (input.length === 0) {
      return [];
    }
    var length8 = input.length * 8;
    var output = new Uint32Array(getOutputLength$1(length8));
    for (var i = 0; i < length8; i += 8) {
      output[i >> 5] |= (input[i / 8] & 0xff) << i % 32;
    }
    return output;
  }
  /*
   * Add integers, wrapping at 2^32. This uses 16-bit operations internally
   * to work around bugs in some JS interpreters.
   */

  function safeAdd$1(x, y) {
    var lsw = (x & 0xffff) + (y & 0xffff);
    var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
    return msw << 16 | lsw & 0xffff;
  }
  /*
   * Bitwise rotate a 32-bit number to the left.
   */

  function bitRotateLeft$1(num, cnt) {
    return num << cnt | num >>> 32 - cnt;
  }
  /*
   * These functions implement the four basic operations the algorithm uses.
   */

  function md5cmn$1(q, a, b, x, s, t) {
    return safeAdd$1(bitRotateLeft$1(safeAdd$1(safeAdd$1(a, q), safeAdd$1(x, t)), s), b);
  }
  function md5ff$1(a, b, c, d, x, s, t) {
    return md5cmn$1(b & c | ~b & d, a, b, x, s, t);
  }
  function md5gg$1(a, b, c, d, x, s, t) {
    return md5cmn$1(b & d | c & ~d, a, b, x, s, t);
  }
  function md5hh$1(a, b, c, d, x, s, t) {
    return md5cmn$1(b ^ c ^ d, a, b, x, s, t);
  }
  function md5ii$1(a, b, c, d, x, s, t) {
    return md5cmn$1(c ^ (b | ~d), a, b, x, s, t);
  }
  var v3 = v35$1('v3', 0x30, md5$1);
  var v3$1 = v3;
  function v4$1(options, buf, offset) {
    options = options || {};
    var rnds = options.random || (options.rng || rng$1)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`

    rnds[6] = rnds[6] & 0x0f | 0x40;
    rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

    if (buf) {
      offset = offset || 0;
      for (var i = 0; i < 16; ++i) {
        buf[offset + i] = rnds[i];
      }
      return buf;
    }
    return stringify$1(rnds);
  }

  // Adapted from Chris Veness' SHA1 code at
  // http://www.movable-type.co.uk/scripts/sha1.html
  function f$1(s, x, y, z) {
    switch (s) {
      case 0:
        return x & y ^ ~x & z;
      case 1:
        return x ^ y ^ z;
      case 2:
        return x & y ^ x & z ^ y & z;
      case 3:
        return x ^ y ^ z;
    }
  }
  function ROTL$1(x, n) {
    return x << n | x >>> 32 - n;
  }
  function sha1$1(bytes) {
    var K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];
    var H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];
    if (typeof bytes === 'string') {
      var msg = unescape(encodeURIComponent(bytes)); // UTF8 escape

      bytes = [];
      for (var i = 0; i < msg.length; ++i) {
        bytes.push(msg.charCodeAt(i));
      }
    } else if (!Array.isArray(bytes)) {
      // Convert Array-like to Array
      bytes = Array.prototype.slice.call(bytes);
    }
    bytes.push(0x80);
    var l = bytes.length / 4 + 2;
    var N = Math.ceil(l / 16);
    var M = new Array(N);
    for (var _i = 0; _i < N; ++_i) {
      var arr = new Uint32Array(16);
      for (var j = 0; j < 16; ++j) {
        arr[j] = bytes[_i * 64 + j * 4] << 24 | bytes[_i * 64 + j * 4 + 1] << 16 | bytes[_i * 64 + j * 4 + 2] << 8 | bytes[_i * 64 + j * 4 + 3];
      }
      M[_i] = arr;
    }
    M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);
    M[N - 1][14] = Math.floor(M[N - 1][14]);
    M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;
    for (var _i2 = 0; _i2 < N; ++_i2) {
      var W = new Uint32Array(80);
      for (var t = 0; t < 16; ++t) {
        W[t] = M[_i2][t];
      }
      for (var _t = 16; _t < 80; ++_t) {
        W[_t] = ROTL$1(W[_t - 3] ^ W[_t - 8] ^ W[_t - 14] ^ W[_t - 16], 1);
      }
      var a = H[0];
      var b = H[1];
      var c = H[2];
      var d = H[3];
      var e = H[4];
      for (var _t2 = 0; _t2 < 80; ++_t2) {
        var s = Math.floor(_t2 / 20);
        var T = ROTL$1(a, 5) + f$1(s, b, c, d) + e + K[s] + W[_t2] >>> 0;
        e = d;
        d = c;
        c = ROTL$1(b, 30) >>> 0;
        b = a;
        a = T;
      }
      H[0] = H[0] + a >>> 0;
      H[1] = H[1] + b >>> 0;
      H[2] = H[2] + c >>> 0;
      H[3] = H[3] + d >>> 0;
      H[4] = H[4] + e >>> 0;
    }
    return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];
  }
  var v5 = v35$1('v5', 0x50, sha1$1);
  var v5$1 = v5;
  var nil = '00000000-0000-0000-0000-000000000000';
  function version(uuid) {
    if (!validate$1(uuid)) {
      throw TypeError('Invalid UUID');
    }
    return parseInt(uuid.substr(14, 1), 16);
  }
  var esmBrowser = /*#__PURE__*/Object.freeze({
    __proto__: null,
    v1: v1,
    v3: v3$1,
    v4: v4$1,
    v5: v5$1,
    NIL: nil,
    version: version,
    validate: validate$1,
    stringify: stringify$1,
    parse: parse$1
  });
  var require$$0 = /*@__PURE__*/getAugmentedNamespace(esmBrowser);
  var rtcStats_1 = void 0;
  var uuid_1 = require$$0;
  /**
   * Copies values of any nested depth.
   *
   * @param value - The value to be copied.
   * @returns - Copied value.
   */
  var deepCopy$1 = function deepCopy$1(value) {
    return JSON.parse(JSON.stringify(value));
  };
  /**
   * Check deep equality between two values.
   *
   * @param value1 - First value to check.
   * @param value2 - Second value to check.
   * @returns True if values are deeply equal, false otherwise.
   */
  var deepEqual = function deepEqual(value1, value2) {
    // If both immutable values are equal, return true.
    if (value1 === value2) {
      return true;
    }
    // If both are objects, we check the length and properties of each.
    if (value1 && value2 && typeof value1 === 'object' && typeof value2 === 'object') {
      if (value1.constructor !== value2.constructor) return false;
      // Return false if the objects are of different sizes.
      if (Object.keys(value1).length !== Object.keys(value2).length) {
        return false;
      }
      // Deep equal check each property in the opject.
      for (var prop in value1) {
        if (value2.hasOwnProperty(prop)) {
          if (!deepEqual(value1[prop], value2[prop])) {
            return false;
          }
        } else {
          return false;
        }
      }
      // Return true if we found no differing properties.
      return true;
    }
    // Return false if no other conditions are met.
    return false;
  };
  /**
   * Translates a RTCStatsReport into an object.
   *
   * @param report - The report.
   * @returns - A deduped object.
   */
  var map2obj = function map2obj(report) {
    if (!report.size) {
      return report;
    }
    var o = {};
    report.forEach(function (value, key) {
      o[key] = value;
    });
    return o;
  };
  var persistedKeys = ['type', 'id', 'timestamp'];
  /**
   * Check to see if the report consists of more than just the persisted metadata.
   *
   * @param report - The report line being checked.
   * @returns True if the report item contains non-persisted keys, false otherwise.
   */
  var hasNonMetadata = function hasNonMetadata(report) {
    return !!Object.keys(report).filter(function (key) {
      return !persistedKeys.includes(key);
    }).length;
  };
  /**
   * Apply a delta compression to the stats report. Reduces size by ~90%.
   * To reduce further, report keys could be compressed.
   *
   * @param oldStats - Previous report items that we dedupe against.
   * @param newStats - New incoming stats.
   * @returns - Compressed Stats.
   */
  var deltaCompression = function deltaCompression(oldStats, newStats) {
    var updatedStats = deepCopy$1(newStats);
    Object.keys(updatedStats).forEach(function (id) {
      var report = updatedStats[id];
      if (!oldStats[id]) {
        return;
      }
      // Persist specific values beyond delta compression, as long as they
      // aren't the only non-deduped keys.
      Object.keys(report).forEach(function (name) {
        if (deepEqual(report[name], oldStats[id][name]) && !persistedKeys.includes(name)) {
          delete updatedStats[id][name];
        }
        if (!hasNonMetadata(report)) {
          delete updatedStats[id];
        }
      });
    });
    // Use the most recent timestamp.
    var timestamp = -Infinity;
    Object.keys(updatedStats).forEach(function (id) {
      var report = updatedStats[id];
      if (report.timestamp > timestamp) {
        timestamp = report.timestamp;
      }
    });
    // Delete the timestamps on each item.
    Object.keys(updatedStats).forEach(function (id) {
      var report = updatedStats[id];
      if (report.timestamp === timestamp) {
        delete report.timestamp;
      }
    });
    updatedStats.timestamp = timestamp;
    return updatedStats;
  };
  /**
   * Format the stats report into an array.
   *
   * @param report - A WebRTC stats report.
   * @returns - An array of Stats Report items.
   */
  var formatStatsReport = function formatStatsReport(report) {
    return Object.keys(report).filter(function (name) {
      return name !== 'timestamp';
    }).map(function (name) {
      return report[name];
    });
  };
  /**
   * Parametrize a single string event to contain type and an (empty) id.
   *
   * @param value - The value to parametrize.
   * @returns An event object.
   */
  var makeEvent = function makeEvent(value) {
    return [{
      value: value,
      type: 'string',
      id: ''
    }];
  };
  /**
   * Attach a Peer Connection to periodically get updated on events and stats.
   *
   * @param pc - Peer Connection in which we attach.
   * @param logger - Logging function to log events and stats.
   * @param intervalTime - Time between each `getStats` check.
   * @param id - Optional id string used for logging.
   * @param statsPreProcessor - Optional function that modifies stats.
   */
  var rtcStats = function rtcStats(pc, logger, intervalTime, id, statsPreProcessor) {
    if (id === void 0) {
      id = (0, uuid_1.v4)();
    }
    if (statsPreProcessor === void 0) {
      statsPreProcessor = function statsPreProcessor() {
        return Promise.resolve();
      };
    }
    var prev = {};
    /**
     * Log stats or event data with additional tracking information.
     *
     * @param name - Name of the event to log.
     * @param payload - Log data pertaining to the event.
     */
    var trace = function trace(name, payload, timestamp) {
      logger({
        id: id,
        timestamp: timestamp ? Math.round(timestamp) : Date.now(),
        name: name,
        payload: payload
      });
    };
    pc.addEventListener('icecandidate', function (e) {
      if (e.candidate) {
        trace('onicecandidate', makeEvent(JSON.stringify(e.candidate)));
      }
    });
    pc.addEventListener('icecandidateerror', function (event) {
      var _a = event,
        errorCode = _a.errorCode,
        errorText = _a.errorText;
      trace('onicecandidateerror', makeEvent("".concat(errorCode, ": ").concat(errorText)));
    });
    pc.addEventListener('track', function (e) {
      trace('ontrack', makeEvent("".concat(e.track.kind, ":").concat(e.track.id, " ").concat(e.streams.map(function (stream) {
        return "stream:".concat(stream.id);
      }).join(' '))));
    });
    pc.addEventListener('signalingstatechange', function () {
      trace('onsignalingstatechange', makeEvent(pc.signalingState));
    });
    pc.addEventListener('iceconnectionstatechange', function () {
      trace('oniceconnectionstatechange', makeEvent(pc.iceConnectionState));
    });
    pc.addEventListener('icegatheringstatechange', function () {
      trace('onicegatheringstatechange', makeEvent(pc.iceGatheringState));
    });
    pc.addEventListener('connectionstatechange', function () {
      trace('onconnectionstatechange', makeEvent(pc.connectionState));
    });
    pc.addEventListener('negotiationneeded', function () {
      trace('onnegotiationneeded', makeEvent('negotiationneeded'));
    });
    pc.addEventListener('datachannel', function (event) {
      trace('ondatachannel', makeEvent("".concat(event.channel.id, ": ").concat(event.channel.label)));
    });
    var interval = window.setInterval(function () {
      if (pc.signalingState === 'closed') {
        window.clearInterval(interval);
        return;
      }
      pc.getStats(null).then(function (res) {
        var now = map2obj(res);
        statsPreProcessor(now).then(function () {
          var base = deepCopy$1(now); // our new prev
          var compressed = deltaCompression(prev, now);
          trace('stats-report', formatStatsReport(compressed), compressed.timestamp !== -Infinity ? compressed.timestamp : undefined);
          prev = base;
        });
      });
    }, intervalTime);
  };
  rtcStats_1 = rtcStats;
  var NUM = '\\d+';
  var SDP_TOKEN = "[!#$%&'*+\\-.^_`{|}~a-zA-Z0-9]+";
  var ANY_NON_WS = '\\S+';
  var SP = '\\s';
  var REST = '.+';
  class Line {}
  var _a$5;
  class BandwidthLine extends Line {
    constructor(bandwidthType, bandwidth) {
      super();
      this.bandwidthType = bandwidthType;
      this.bandwidth = bandwidth;
    }
    static fromSdpLine(line) {
      if (!BandwidthLine.regex.test(line)) {
        return undefined;
      }
      var tokens = line.match(BandwidthLine.regex);
      var bandwidthType = tokens[1];
      var bandwidth = parseInt(tokens[2], 10);
      return new BandwidthLine(bandwidthType, bandwidth);
    }
    toSdpLine() {
      return "b=".concat(this.bandwidthType, ":").concat(this.bandwidth);
    }
  }
  _a$5 = BandwidthLine;
  BandwidthLine.BW_TYPE_REGEX = 'CT|AS|TIAS';
  BandwidthLine.regex = new RegExp("^(".concat(_a$5.BW_TYPE_REGEX, "):(").concat(NUM, ")"));
  class BundleGroupLine extends Line {
    constructor(mids) {
      super();
      this.mids = mids;
    }
    static fromSdpLine(line) {
      if (!BundleGroupLine.regex.test(line)) {
        return undefined;
      }
      var tokens = line.match(BundleGroupLine.regex);
      var mids = tokens[1].split(' ');
      return new BundleGroupLine(mids);
    }
    toSdpLine() {
      return "a=group:BUNDLE ".concat(this.mids.join(' '));
    }
  }
  BundleGroupLine.regex = new RegExp("^group:BUNDLE (".concat(REST, ")"));
  var _a$4;
  class CandidateLine extends Line {
    constructor(foundation, componentId, transport, priority, connectionAddress, port, candidateType, relAddr, relPort, candidateExtensions) {
      super();
      this.foundation = foundation;
      this.componentId = componentId;
      this.transport = transport;
      this.priority = priority;
      this.connectionAddress = connectionAddress;
      this.port = port;
      this.candidateType = candidateType;
      this.relAddr = relAddr;
      this.relPort = relPort;
      this.candidateExtensions = candidateExtensions;
    }
    static fromSdpLine(line) {
      if (!CandidateLine.regex.test(line)) {
        return undefined;
      }
      var tokens = line.match(CandidateLine.regex);
      var foundation = tokens[1];
      var componentId = parseInt(tokens[2], 10);
      var transport = tokens[3];
      var priority = parseInt(tokens[4], 10);
      var connectionAddress = tokens[5];
      var port = parseInt(tokens[6], 10);
      var candidateType = tokens[7];
      var relAddr = tokens[8];
      var relPort = tokens[9] ? parseInt(tokens[9], 10) : undefined;
      var candidateExtensions = tokens[10];
      return new CandidateLine(foundation, componentId, transport, priority, connectionAddress, port, candidateType, relAddr, relPort, candidateExtensions);
    }
    toSdpLine() {
      var str = '';
      str += "a=candidate:".concat(this.foundation, " ").concat(this.componentId, " ").concat(this.transport, " ").concat(this.priority, " ").concat(this.connectionAddress, " ").concat(this.port, " typ ").concat(this.candidateType);
      if (this.relAddr) {
        str += " raddr ".concat(this.relAddr);
      }
      if (this.relPort) {
        str += " rport ".concat(this.relPort);
      }
      if (this.candidateExtensions) {
        str += " ".concat(this.candidateExtensions);
      }
      return str;
    }
  }
  _a$4 = CandidateLine;
  CandidateLine.ICE_CHARS = "[a-zA-Z0-9+/]+";
  CandidateLine.regex = new RegExp("^candidate:(".concat(_a$4.ICE_CHARS, ") (").concat(NUM, ") (").concat(ANY_NON_WS, ") (").concat(NUM, ") (").concat(ANY_NON_WS, ") (").concat(NUM, ") typ (").concat(ANY_NON_WS, ")(?: raddr (").concat(ANY_NON_WS, "))?(?: rport (").concat(NUM, "))?(?: (").concat(REST, "))?"));
  class ConnectionLine extends Line {
    constructor(netType, addrType, ipAddr) {
      super();
      this.netType = netType;
      this.addrType = addrType;
      this.ipAddr = ipAddr;
    }
    static fromSdpLine(line) {
      if (!ConnectionLine.regex.test(line)) {
        return undefined;
      }
      var tokens = line.match(ConnectionLine.regex);
      var netType = tokens[1];
      var addrType = tokens[2];
      var ipAddr = tokens[3];
      return new ConnectionLine(netType, addrType, ipAddr);
    }
    toSdpLine() {
      return "c=".concat(this.netType, " ").concat(this.addrType, " ").concat(this.ipAddr);
    }
  }
  ConnectionLine.regex = new RegExp("^(".concat(ANY_NON_WS, ") (").concat(ANY_NON_WS, ") (").concat(ANY_NON_WS, ")"));
  class ContentLine extends Line {
    constructor(values) {
      super();
      this.values = values;
    }
    static fromSdpLine(line) {
      if (!ContentLine.regex.test(line)) {
        return undefined;
      }
      var tokens = line.match(ContentLine.regex);
      var values = tokens[1].split(',');
      return new ContentLine(values);
    }
    toSdpLine() {
      return "a=content:".concat(this.values.join(','));
    }
  }
  ContentLine.regex = new RegExp("^content:(".concat(REST, ")$"));
  class DirectionLine extends Line {
    constructor(direction) {
      super();
      this.direction = direction;
    }
    static fromSdpLine(line) {
      if (!DirectionLine.regex.test(line)) {
        return undefined;
      }
      var tokens = line.match(DirectionLine.regex);
      var direction = tokens[1];
      return new DirectionLine(direction);
    }
    toSdpLine() {
      return "a=".concat(this.direction);
    }
  }
  DirectionLine.regex = /^(sendrecv|sendonly|recvonly|inactive)$/;
  var _a$3;
  class ExtMapLine extends Line {
    constructor(id, uri, direction, extensionAttributes) {
      super();
      this.id = id;
      this.uri = uri;
      this.direction = direction;
      this.extensionAttributes = extensionAttributes;
    }
    static fromSdpLine(line) {
      if (!ExtMapLine.regex.test(line)) {
        return undefined;
      }
      var tokens = line.match(ExtMapLine.regex);
      var id = parseInt(tokens[1], 10);
      var direction = tokens[2];
      var uri = tokens[3];
      var extensionAttributes = tokens[4];
      return new ExtMapLine(id, uri, direction, extensionAttributes);
    }
    toSdpLine() {
      var str = '';
      str += "a=extmap:".concat(this.id);
      if (this.direction) {
        str += "/".concat(this.direction);
      }
      str += " ".concat(this.uri);
      if (this.extensionAttributes) {
        str += " ".concat(this.extensionAttributes);
      }
      return str;
    }
  }
  _a$3 = ExtMapLine;
  ExtMapLine.EXTMAP_DIRECTION = "sendonly|recvonly|sendrecv|inactive";
  ExtMapLine.regex = new RegExp("^extmap:(".concat(NUM, ")(?:/(").concat(_a$3.EXTMAP_DIRECTION, "))? (").concat(ANY_NON_WS, ")(?: (").concat(REST, "))?"));
  class FingerprintLine extends Line {
    constructor(fingerprint) {
      super();
      this.fingerprint = fingerprint;
    }
    static fromSdpLine(line) {
      if (!FingerprintLine.regex.test(line)) {
        return undefined;
      }
      var tokens = line.match(FingerprintLine.regex);
      var fingerprint = tokens[1];
      return new FingerprintLine(fingerprint);
    }
    toSdpLine() {
      return "a=fingerprint:".concat(this.fingerprint);
    }
  }
  FingerprintLine.regex = new RegExp("^fingerprint:(".concat(REST, ")"));
  function parseFmtpParams(fmtpParams) {
    fmtpParams = fmtpParams.replace(/^a=fmtp:\d+\x20/, '');
    var fmtpObj = new Map();
    if (/^\d+([/-]\d+)+$/.test(fmtpParams)) {
      fmtpObj.set(fmtpParams, undefined);
      return fmtpObj;
    }
    fmtpParams.split(';').forEach(param => {
      var paramArr = param && param.split('=');
      if (paramArr.length !== 2 || !paramArr[0] || !paramArr[1]) {
        throw new Error("Fmtp params is invalid with ".concat(fmtpParams));
      }
      fmtpObj.set(paramArr[0], paramArr[1]);
    });
    return fmtpObj;
  }
  class FmtpLine extends Line {
    constructor(payloadType, params) {
      super();
      this.payloadType = payloadType;
      this.params = params;
    }
    static fromSdpLine(line) {
      if (!FmtpLine.regex.test(line)) {
        return undefined;
      }
      var tokens = line.match(FmtpLine.regex);
      var payloadType = parseInt(tokens[1], 10);
      var params = tokens[2];
      return new FmtpLine(payloadType, parseFmtpParams(params));
    }
    toSdpLine() {
      var fmtParams = Array.from(this.params.keys()).map(key => {
        if (this.params.get(key) !== undefined) {
          return "".concat(key, "=").concat(this.params.get(key));
        }
        return "".concat(key);
      }).join(';');
      return "a=fmtp:".concat(this.payloadType, " ").concat(fmtParams);
    }
  }
  FmtpLine.regex = new RegExp("^fmtp:(".concat(NUM, ") (").concat(REST, ")"));
  class IceOptionsLine extends Line {
    constructor(options) {
      super();
      this.options = options;
    }
    static fromSdpLine(line) {
      if (!IceOptionsLine.regex.test(line)) {
        return undefined;
      }
      var tokens = line.match(IceOptionsLine.regex);
      var options = tokens[1].split(' ');
      return new IceOptionsLine(options);
    }
    toSdpLine() {
      return "a=ice-options:".concat(this.options.join(' '));
    }
  }
  IceOptionsLine.regex = new RegExp("^ice-options:(".concat(REST, ")$"));
  class IcePwdLine extends Line {
    constructor(pwd) {
      super();
      this.pwd = pwd;
    }
    static fromSdpLine(line) {
      if (!IcePwdLine.regex.test(line)) {
        return undefined;
      }
      var tokens = line.match(IcePwdLine.regex);
      var pwd = tokens[1];
      return new IcePwdLine(pwd);
    }
    toSdpLine() {
      return "a=ice-pwd:".concat(this.pwd);
    }
  }
  IcePwdLine.regex = new RegExp("^ice-pwd:(".concat(ANY_NON_WS, ")$"));
  class IceUfragLine extends Line {
    constructor(ufrag) {
      super();
      this.ufrag = ufrag;
    }
    static fromSdpLine(line) {
      if (!IceUfragLine.regex.test(line)) {
        return undefined;
      }
      var tokens = line.match(IceUfragLine.regex);
      var ufrag = tokens[1];
      return new IceUfragLine(ufrag);
    }
    toSdpLine() {
      return "a=ice-ufrag:".concat(this.ufrag);
    }
  }
  IceUfragLine.regex = new RegExp("^ice-ufrag:(".concat(ANY_NON_WS, ")$"));
  class MaxMessageSizeLine extends Line {
    constructor(maxMessageSize) {
      super();
      this.maxMessageSize = maxMessageSize;
    }
    static fromSdpLine(line) {
      if (!MaxMessageSizeLine.regex.test(line)) {
        return undefined;
      }
      var tokens = line.match(MaxMessageSizeLine.regex);
      var maxMessageSize = parseInt(tokens[1], 10);
      return new MaxMessageSizeLine(maxMessageSize);
    }
    toSdpLine() {
      return "a=max-message-size:".concat(this.maxMessageSize);
    }
  }
  MaxMessageSizeLine.regex = new RegExp("^max-message-size:(".concat(NUM, ")"));
  var _a$2;
  class MediaLine extends Line {
    constructor(type, port, protocol, formats) {
      super();
      this.type = type;
      this.port = port;
      this.protocol = protocol;
      this.formats = formats;
    }
    static fromSdpLine(line) {
      if (!MediaLine.regex.test(line)) {
        return undefined;
      }
      var tokens = line.match(MediaLine.regex);
      var type = tokens[1];
      var port = parseInt(tokens[2], 10);
      var protocol = tokens[3];
      var formats = tokens[4].split(' ');
      return new MediaLine(type, port, protocol, formats);
    }
    toSdpLine() {
      return "m=".concat(this.type, " ").concat(this.port, " ").concat(this.protocol, " ").concat(this.formats.join(' '));
    }
  }
  _a$2 = MediaLine;
  MediaLine.MEDIA_TYPE = 'audio|video|application';
  MediaLine.regex = new RegExp("^(".concat(_a$2.MEDIA_TYPE, ") (").concat(NUM, ") (").concat(ANY_NON_WS, ") (").concat(REST, ")"));
  class MidLine extends Line {
    constructor(mid) {
      super();
      this.mid = mid;
    }
    static fromSdpLine(line) {
      if (!MidLine.regex.test(line)) {
        return undefined;
      }
      var tokens = line.match(MidLine.regex);
      var mid = tokens[1];
      return new MidLine(mid);
    }
    toSdpLine() {
      return "a=mid:".concat(this.mid);
    }
  }
  MidLine.regex = new RegExp("^mid:(".concat(ANY_NON_WS, ")$"));
  class OriginLine extends Line {
    constructor(username, sessionId, sessionVersion, netType, addrType, ipAddr) {
      super();
      this.username = username;
      this.sessionId = sessionId;
      this.sessionVersion = sessionVersion;
      this.netType = netType;
      this.addrType = addrType;
      this.ipAddr = ipAddr;
    }
    static fromSdpLine(line) {
      if (!OriginLine.regex.test(line)) {
        return undefined;
      }
      var tokens = line.match(OriginLine.regex);
      var username = tokens[1];
      var sessionId = tokens[2];
      var sessionVersion = parseInt(tokens[3], 10);
      var netType = tokens[4];
      var addrType = tokens[5];
      var ipAddr = tokens[6];
      return new OriginLine(username, sessionId, sessionVersion, netType, addrType, ipAddr);
    }
    toSdpLine() {
      return "o=".concat(this.username, " ").concat(this.sessionId, " ").concat(this.sessionVersion, " ").concat(this.netType, " ").concat(this.addrType, " ").concat(this.ipAddr);
    }
  }
  OriginLine.regex = new RegExp("^(".concat(ANY_NON_WS, ") (").concat(ANY_NON_WS, ") (").concat(NUM, ") (").concat(ANY_NON_WS, ") (").concat(ANY_NON_WS, ") (").concat(ANY_NON_WS, ")"));
  var _a$1;
  class RidLine extends Line {
    constructor(id, direction, params) {
      super();
      this.id = id;
      this.direction = direction;
      this.params = params;
    }
    static fromSdpLine(line) {
      if (!RidLine.regex.test(line)) {
        return undefined;
      }
      var tokens = line.match(RidLine.regex);
      var id = tokens[1];
      var direction = tokens[2];
      var params = tokens[3];
      return new RidLine(id, direction, params);
    }
    toSdpLine() {
      var str = '';
      str += "a=rid:".concat(this.id, " ").concat(this.direction);
      if (this.params) {
        str += " ".concat(this.params);
      }
      return str;
    }
  }
  _a$1 = RidLine;
  RidLine.RID_ID = "[\\w-]+";
  RidLine.RID_DIRECTION = "\\bsend\\b|\\brecv\\b";
  RidLine.regex = new RegExp("^rid:(".concat(_a$1.RID_ID, ") (").concat(_a$1.RID_DIRECTION, ")(?:").concat(SP, "(").concat(REST, "))?"));
  class RtcpMuxLine extends Line {
    static fromSdpLine(line) {
      if (!RtcpMuxLine.regex.test(line)) {
        return undefined;
      }
      return new RtcpMuxLine();
    }
    toSdpLine() {
      return "a=rtcp-mux";
    }
  }
  RtcpMuxLine.regex = /^rtcp-mux$/;
  class RtcpFbLine extends Line {
    constructor(payloadType, feedback) {
      super();
      this.payloadType = payloadType;
      this.feedback = feedback;
    }
    static fromSdpLine(line) {
      if (!RtcpFbLine.regex.test(line)) {
        return undefined;
      }
      var tokens = line.match(RtcpFbLine.regex);
      var payloadType = parseInt(tokens[1], 10);
      var feedback = tokens[2];
      return new RtcpFbLine(payloadType, feedback);
    }
    toSdpLine() {
      return "a=rtcp-fb:".concat(this.payloadType, " ").concat(this.feedback);
    }
  }
  RtcpFbLine.regex = new RegExp("^rtcp-fb:(".concat(NUM, ") (").concat(REST, ")"));
  var _a$6;
  class RtpMapLine extends Line {
    constructor(payloadType, encodingName, clockRate, encodingParams) {
      super();
      this.payloadType = payloadType;
      this.encodingName = encodingName;
      this.clockRate = clockRate;
      this.encodingParams = encodingParams;
    }
    static fromSdpLine(line) {
      if (!RtpMapLine.regex.test(line)) {
        return undefined;
      }
      var tokens = line.match(RtpMapLine.regex);
      var payloadType = parseInt(tokens[1], 10);
      var encodingName = tokens[2];
      var clockRate = parseInt(tokens[3], 10);
      var encodingParams = tokens[4];
      return new RtpMapLine(payloadType, encodingName, clockRate, encodingParams);
    }
    toSdpLine() {
      var str = '';
      str += "a=rtpmap:".concat(this.payloadType, " ").concat(this.encodingName, "/").concat(this.clockRate);
      if (this.encodingParams) {
        str += "/".concat(this.encodingParams);
      }
      return str;
    }
  }
  _a$6 = RtpMapLine;
  RtpMapLine.NON_SLASH_TOKEN = '[^\\s/]+';
  RtpMapLine.regex = new RegExp("^rtpmap:(".concat(NUM, ") (").concat(_a$6.NON_SLASH_TOKEN, ")/(").concat(_a$6.NON_SLASH_TOKEN, ")(?:/(").concat(_a$6.NON_SLASH_TOKEN, "))?"));
  class SctpPortLine extends Line {
    constructor(port) {
      super();
      this.port = port;
    }
    static fromSdpLine(line) {
      if (!SctpPortLine.regex.test(line)) {
        return undefined;
      }
      var tokens = line.match(SctpPortLine.regex);
      var port = parseInt(tokens[1], 10);
      return new SctpPortLine(port);
    }
    toSdpLine() {
      return "a=sctp-port:".concat(this.port);
    }
  }
  SctpPortLine.regex = new RegExp("^sctp-port:(".concat(NUM, ")"));
  class SessionInformationLine extends Line {
    constructor(info) {
      super();
      this.info = info;
    }
    static fromSdpLine(line) {
      if (!SessionInformationLine.regex.test(line)) {
        return undefined;
      }
      var tokens = line.match(SessionInformationLine.regex);
      var info = tokens[1];
      return new SessionInformationLine(info);
    }
    toSdpLine() {
      return "i=".concat(this.info);
    }
  }
  SessionInformationLine.regex = new RegExp("(".concat(REST, ")"));
  class SessionNameLine extends Line {
    constructor(name) {
      super();
      this.name = name;
    }
    static fromSdpLine(line) {
      if (!SessionNameLine.regex.test(line)) {
        return undefined;
      }
      var tokens = line.match(SessionNameLine.regex);
      var name = tokens[1];
      return new SessionNameLine(name);
    }
    toSdpLine() {
      return "s=".concat(this.name);
    }
  }
  SessionNameLine.regex = new RegExp("^(".concat(REST, ")"));
  class SetupLine extends Line {
    constructor(setup) {
      super();
      this.setup = setup;
    }
    static fromSdpLine(line) {
      if (!SetupLine.regex.test(line)) {
        return undefined;
      }
      var tokens = line.match(SetupLine.regex);
      var setup = tokens[1];
      return new SetupLine(setup);
    }
    toSdpLine() {
      return "a=setup:".concat(this.setup);
    }
  }
  SetupLine.regex = /^setup:(actpass|active|passive)$/;
  class SimulcastLayer {
    constructor(id, paused) {
      this.id = id;
      this.paused = paused;
    }
    toString() {
      return this.paused ? "~".concat(this.id) : this.id;
    }
  }
  class SimulcastLayerList {
    constructor() {
      this.layers = [];
    }
    addLayer(layer) {
      this.layers.push([layer]);
    }
    addLayerWithAlternatives(alternatives) {
      this.layers.push(alternatives);
    }
    get length() {
      return this.layers.length;
    }
    get(index) {
      return this.layers[index];
    }
    static fromString(str) {
      var layerList = new SimulcastLayerList();
      var tokens = str.split(';');
      if (tokens.length === 1 && !tokens[0].trim()) {
        throw new Error('simulcast stream list empty');
      }
      tokens.forEach(token => {
        if (!token) {
          throw new Error('simulcast layer list empty');
        }
        var ridTokens = token.split(',');
        var layers = [];
        ridTokens.forEach(ridToken => {
          if (!ridToken || ridToken === '~') {
            throw new Error('rid empty');
          }
          var paused = ridToken[0] === '~';
          var rid = paused ? ridToken.substring(1) : ridToken;
          layers.push(new SimulcastLayer(rid, paused));
        });
        layerList.addLayerWithAlternatives(layers);
      });
      return layerList;
    }
    toString() {
      return this.layers.map(altArray => altArray.map(v => v.toString()).join(',')).join(';');
    }
  }
  class SimulcastLine extends Line {
    constructor(sendLayers, recvLayers) {
      super();
      this.sendLayers = sendLayers;
      this.recvLayers = recvLayers;
    }
    static fromSdpLine(line) {
      if (!SimulcastLine.regex.test(line)) {
        return undefined;
      }
      var tokens = line.match(SimulcastLine.regex);
      var bidirectional = tokens[3] && tokens[4];
      var firstDirection = tokens[1];
      var layerList1 = SimulcastLayerList.fromString(tokens[2]);
      var layerList2 = new SimulcastLayerList();
      if (bidirectional) {
        var secondDirection = tokens[3];
        if (firstDirection === secondDirection) {
          return undefined;
        }
        layerList2 = SimulcastLayerList.fromString(tokens[4]);
      }
      var sendLayerList;
      var recvLayerList;
      if (firstDirection === 'send') {
        sendLayerList = layerList1;
        recvLayerList = layerList2;
      } else {
        sendLayerList = layerList2;
        recvLayerList = layerList1;
      }
      return new SimulcastLine(sendLayerList, recvLayerList);
    }
    toSdpLine() {
      var str = 'a=simulcast:';
      if (this.sendLayers.length) {
        str += "send ".concat(this.sendLayers.toString());
        if (this.recvLayers.length) {
          str += " ";
        }
      }
      if (this.recvLayers.length) {
        str += "recv ".concat(this.recvLayers.toString());
      }
      return str;
    }
  }
  SimulcastLine.regex = new RegExp("^simulcast:(send|recv) (".concat(ANY_NON_WS, ")(?: (send|recv) (").concat(ANY_NON_WS, "))?"));
  class SsrcLine extends Line {
    constructor(ssrcId, attribute) {
      var attributeValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
      var attributeData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;
      super();
      this.ssrcId = ssrcId;
      this.attribute = attribute;
      this.attributeValue = attributeValue;
      this.attributeData = attributeData;
    }
    static fromSdpLine(line) {
      if (!SsrcLine.regex.test(line)) {
        return undefined;
      }
      var tokens = line.match(SsrcLine.regex);
      var ssrcId = parseInt(tokens[1], 10);
      var attribute = tokens[2];
      var attributeValue = tokens[3];
      var attributeData = tokens[4];
      return new SsrcLine(ssrcId, attribute, attributeValue, attributeData);
    }
    toSdpLine() {
      var str = "a=ssrc:".concat(this.ssrcId, " ").concat(this.attribute);
      if (this.attributeValue) {
        str += ":".concat(this.attributeValue);
      }
      if (this.attributeData) {
        str += " ".concat(this.attributeData);
      }
      return str;
    }
  }
  SsrcLine.regex = new RegExp("^ssrc:(".concat(NUM, ") (").concat(SDP_TOKEN, ")(?::(").concat(SDP_TOKEN, ")?(?: (").concat(ANY_NON_WS, "))?)?$"));
  class SsrcGroupLine extends Line {
    constructor(semantics, ssrcs) {
      super();
      this.semantics = semantics;
      this.ssrcs = ssrcs;
    }
    static fromSdpLine(line) {
      if (!SsrcGroupLine.regex.test(line)) {
        return undefined;
      }
      var tokens = line.match(SsrcGroupLine.regex);
      var semantics = tokens[1];
      var ssrcs = tokens[2].split(' ').map(ssrcStr => parseInt(ssrcStr, 10));
      return new SsrcGroupLine(semantics, ssrcs);
    }
    toSdpLine() {
      return "a=ssrc-group:".concat(this.semantics, " ").concat(this.ssrcs.join(' '));
    }
  }
  SsrcGroupLine.regex = new RegExp("^ssrc-group:(SIM|FID|FEC) ((?:".concat(NUM).concat(SP, "*)+)"));
  class TimingLine extends Line {
    constructor(startTime, stopTime) {
      super();
      this.startTime = startTime;
      this.stopTime = stopTime;
    }
    static fromSdpLine(line) {
      if (!TimingLine.regex.test(line)) {
        return undefined;
      }
      var tokens = line.match(TimingLine.regex);
      var startTime = parseInt(tokens[1], 10);
      var stopTime = parseInt(tokens[2], 10);
      return new TimingLine(startTime, stopTime);
    }
    toSdpLine() {
      return "t=".concat(this.startTime, " ").concat(this.stopTime);
    }
  }
  TimingLine.regex = new RegExp("^(".concat(NUM, ") (").concat(NUM, ")"));
  class VersionLine extends Line {
    constructor(version) {
      super();
      this.version = version;
    }
    static fromSdpLine(line) {
      if (!VersionLine.regex.test(line)) {
        return undefined;
      }
      var tokens = line.match(VersionLine.regex);
      var version = parseInt(tokens[1], 10);
      return new VersionLine(version);
    }
    toSdpLine() {
      return "v=".concat(this.version);
    }
  }
  VersionLine.regex = new RegExp("^(".concat(NUM, ")$"));
  class UnknownLine extends Line {
    constructor(value) {
      super();
      this.value = value;
    }
    static fromSdpLine(line) {
      var tokens = line.match(UnknownLine.regex);
      var value = tokens[1];
      return new UnknownLine(value);
    }
    toSdpLine() {
      return "".concat(this.value);
    }
  }
  UnknownLine.regex = new RegExp("(".concat(REST, ")"));
  class IceInfo {
    constructor() {
      this.candidates = [];
    }
    addLine(line) {
      if (line instanceof IceUfragLine) {
        this.ufrag = line;
        return true;
      }
      if (line instanceof IcePwdLine) {
        this.pwd = line;
        return true;
      }
      if (line instanceof IceOptionsLine) {
        this.options = line;
        return true;
      }
      if (line instanceof CandidateLine) {
        this.candidates.push(line);
        return true;
      }
      return false;
    }
    toLines() {
      var lines = [];
      if (this.ufrag) {
        lines.push(this.ufrag);
      }
      if (this.pwd) {
        lines.push(this.pwd);
      }
      if (this.options) {
        lines.push(this.options);
      }
      this.candidates.forEach(candidate => lines.push(candidate));
      return lines;
    }
  }
  class MediaDescription {
    constructor(type, port, protocol) {
      this.iceInfo = new IceInfo();
      this.otherLines = [];
      this.type = type;
      this.port = port;
      this.protocol = protocol;
    }
    findOtherLine(ty) {
      return this.otherLines.find(line => line instanceof ty);
    }
    addLine(line) {
      if (line instanceof BundleGroupLine) {
        throw new Error("Error: bundle group line not allowed in media description");
      }
      if (line instanceof BandwidthLine) {
        this.bandwidth = line;
        return true;
      }
      if (line instanceof MidLine) {
        this.mid = line.mid;
        return true;
      }
      if (line instanceof FingerprintLine) {
        this.fingerprint = line.fingerprint;
        return true;
      }
      if (line instanceof SetupLine) {
        this.setup = line.setup;
        return true;
      }
      if (line instanceof ConnectionLine) {
        this.connection = line;
        return true;
      }
      if (line instanceof ContentLine) {
        this.content = line;
        return true;
      }
      return this.iceInfo.addLine(line);
    }
  }
  class ApplicationMediaDescription extends MediaDescription {
    constructor(mediaLine) {
      super(mediaLine.type, mediaLine.port, mediaLine.protocol);
      this.fmts = [];
      this.fmts = mediaLine.formats;
    }
    toLines() {
      var lines = [];
      lines.push(new MediaLine(this.type, this.port, this.protocol, this.fmts));
      if (this.connection) {
        lines.push(this.connection);
      }
      if (this.bandwidth) {
        lines.push(this.bandwidth);
      }
      lines.push(...this.iceInfo.toLines());
      if (this.fingerprint) {
        lines.push(new FingerprintLine(this.fingerprint));
      }
      if (this.setup) {
        lines.push(new SetupLine(this.setup));
      }
      if (this.mid) {
        lines.push(new MidLine(this.mid));
      }
      if (this.content) {
        lines.push(this.content);
      }
      if (this.sctpPort) {
        lines.push(new SctpPortLine(this.sctpPort));
      }
      if (this.maxMessageSize) {
        lines.push(new MaxMessageSizeLine(this.maxMessageSize));
      }
      lines.push(...this.otherLines);
      return lines;
    }
    addLine(line) {
      if (super.addLine(line)) {
        return true;
      }
      if (line instanceof MediaLine) {
        throw new Error('Error: tried passing a MediaLine to an existing MediaInfo');
      }
      if (line instanceof SctpPortLine) {
        this.sctpPort = line.port;
        return true;
      }
      if (line instanceof MaxMessageSizeLine) {
        this.maxMessageSize = line.maxMessageSize;
        return true;
      }
      this.otherLines.push(line);
      return true;
    }
  }
  class CodecInfo$1 {
    constructor(pt) {
      this.fmtParams = new Map();
      this.feedback = [];
      this.pt = pt;
    }
    addLine(line) {
      if (line instanceof RtpMapLine) {
        this.name = line.encodingName;
        this.clockRate = line.clockRate;
        this.encodingParams = line.encodingParams;
        return true;
      }
      if (line instanceof FmtpLine) {
        this.fmtParams = new Map([...Array.from(this.fmtParams.entries()), ...Array.from(line.params.entries())]);
        if (line.params.has('apt')) {
          var apt = line.params.get('apt');
          this.primaryCodecPt = parseInt(apt, 10);
        }
        return true;
      }
      if (line instanceof RtcpFbLine) {
        this.feedback.push(line.feedback);
        return true;
      }
      return false;
    }
    toLines() {
      var lines = [];
      lines.push(new RtpMapLine(this.pt, this.name, this.clockRate, this.encodingParams));
      this.feedback.forEach(fb => {
        lines.push(new RtcpFbLine(this.pt, fb));
      });
      if (this.fmtParams.size > 0) {
        lines.push(new FmtpLine(this.pt, this.fmtParams));
      }
      return lines;
    }
  }
  class AvMediaDescription extends MediaDescription {
    constructor(mediaLine) {
      super(mediaLine.type, mediaLine.port, mediaLine.protocol);
      this.pts = [];
      this.extMaps = [];
      this.rids = [];
      this.codecs = new Map();
      this.rtcpMux = false;
      this.ssrcs = [];
      this.ssrcGroups = [];
      this.pts = mediaLine.formats.map(fmt => {
        return parseInt(fmt, 10);
      });
      this.pts.forEach(pt => this.codecs.set(pt, new CodecInfo$1(pt)));
    }
    toLines() {
      var lines = [];
      lines.push(new MediaLine(this.type, this.port, this.protocol, this.pts.map(pt => "".concat(pt))));
      if (this.connection) {
        lines.push(this.connection);
      }
      if (this.bandwidth) {
        lines.push(this.bandwidth);
      }
      lines.push(...this.iceInfo.toLines());
      if (this.fingerprint) {
        lines.push(new FingerprintLine(this.fingerprint));
      }
      if (this.setup) {
        lines.push(new SetupLine(this.setup));
      }
      if (this.mid) {
        lines.push(new MidLine(this.mid));
      }
      if (this.rtcpMux) {
        lines.push(new RtcpMuxLine());
      }
      if (this.content) {
        lines.push(this.content);
      }
      this.extMaps.forEach(extMap => lines.push(extMap));
      this.rids.forEach(rid => lines.push(rid));
      if (this.simulcast) {
        lines.push(this.simulcast);
      }
      if (this.direction) {
        lines.push(new DirectionLine(this.direction));
      }
      this.codecs.forEach(codec => lines.push(...codec.toLines()));
      lines.push(...this.ssrcs);
      lines.push(...this.ssrcGroups);
      lines.push(...this.otherLines);
      return lines;
    }
    addLine(line) {
      if (super.addLine(line)) {
        return true;
      }
      if (line instanceof MediaLine) {
        throw new Error('Error: tried passing a MediaLine to an existing MediaInfo');
      }
      if (line instanceof DirectionLine) {
        this.direction = line.direction;
        return true;
      }
      if (line instanceof ExtMapLine) {
        this.extMaps.push(line);
        return true;
      }
      if (line instanceof RidLine) {
        this.rids.push(line);
        return true;
      }
      if (line instanceof RtcpMuxLine) {
        this.rtcpMux = true;
        return true;
      }
      if (line instanceof SimulcastLine) {
        this.simulcast = line;
        return true;
      }
      if (line instanceof RtpMapLine || line instanceof FmtpLine || line instanceof RtcpFbLine) {
        var codec = this.codecs.get(line.payloadType);
        if (!codec) {
          throw new Error("Error: got line for unknown codec: ".concat(line.toSdpLine()));
        }
        codec.addLine(line);
        return true;
      }
      if (line instanceof SsrcLine) {
        this.ssrcs.push(line);
        return true;
      }
      if (line instanceof SsrcGroupLine) {
        this.ssrcGroups.push(line);
        return true;
      }
      this.otherLines.push(line);
      return true;
    }
    getCodecByPt(pt) {
      return this.codecs.get(pt);
    }
    removePt(pt) {
      var associatedPts = [...this.codecs.values()].filter(ci => ci.primaryCodecPt === pt).map(ci => ci.pt);
      var allPtsToRemove = [pt, ...associatedPts];
      allPtsToRemove.forEach(ptToRemove => {
        this.codecs.delete(ptToRemove);
      });
      this.pts = this.pts.filter(existingPt => allPtsToRemove.indexOf(existingPt) === -1);
    }
  }
  class SessionDescription {
    constructor() {
      this.groups = [];
      this.otherLines = [];
    }
    addLine(line) {
      if (line instanceof VersionLine) {
        this.version = line;
        return true;
      }
      if (line instanceof OriginLine) {
        this.origin = line;
        return true;
      }
      if (line instanceof SessionNameLine) {
        this.sessionName = line;
        return true;
      }
      if (line instanceof SessionInformationLine) {
        this.information = line;
        return true;
      }
      if (line instanceof TimingLine) {
        this.timing = line;
        return true;
      }
      if (line instanceof ConnectionLine) {
        this.connection = line;
        return true;
      }
      if (line instanceof BandwidthLine) {
        this.bandwidth = line;
        return true;
      }
      if (line instanceof BundleGroupLine) {
        this.groups.push(line);
        return true;
      }
      this.otherLines.push(line);
      return true;
    }
    toLines() {
      var lines = [];
      if (this.version) {
        lines.push(this.version);
      }
      if (this.origin) {
        lines.push(this.origin);
      }
      if (this.sessionName) {
        lines.push(this.sessionName);
      }
      if (this.information) {
        lines.push(this.information);
      }
      if (this.connection) {
        lines.push(this.connection);
      }
      if (this.bandwidth) {
        lines.push(this.bandwidth);
      }
      if (this.timing) {
        lines.push(this.timing);
      }
      if (this.groups) {
        lines.push(...this.groups);
      }
      lines.push(...this.otherLines);
      return lines;
    }
  }
  class Sdp {
    constructor() {
      this.session = new SessionDescription();
      this.media = [];
    }
    get avMedia() {
      return this.media.filter(mi => mi instanceof AvMediaDescription);
    }
    toString() {
      var lines = [];
      lines.push(...this.session.toLines());
      this.media.forEach(m => lines.push(...m.toLines()));
      return "".concat(lines.map(l => l.toSdpLine()).join('\r\n'), "\r\n");
    }
  }
  class Grammar {
    constructor() {
      this.parsers = new Map();
    }
    addParser(lineType, parser) {
      var parsers = this.parsers.get(lineType) || [];
      parsers.push(parser);
      this.parsers.set(lineType, parsers);
    }
    getParsers(lineType) {
      return this.parsers.get(lineType) || [];
    }
  }
  class SdpGrammar extends Grammar {
    constructor() {
      super();
      this.addParser('v', VersionLine.fromSdpLine);
      this.addParser('o', OriginLine.fromSdpLine);
      this.addParser('c', ConnectionLine.fromSdpLine);
      this.addParser('i', SessionInformationLine.fromSdpLine);
      this.addParser('m', MediaLine.fromSdpLine);
      this.addParser('s', SessionNameLine.fromSdpLine);
      this.addParser('t', TimingLine.fromSdpLine);
      this.addParser('b', BandwidthLine.fromSdpLine);
      this.addParser('a', RtpMapLine.fromSdpLine);
      this.addParser('a', RtcpFbLine.fromSdpLine);
      this.addParser('a', FmtpLine.fromSdpLine);
      this.addParser('a', DirectionLine.fromSdpLine);
      this.addParser('a', ExtMapLine.fromSdpLine);
      this.addParser('a', MidLine.fromSdpLine);
      this.addParser('a', IceUfragLine.fromSdpLine);
      this.addParser('a', IcePwdLine.fromSdpLine);
      this.addParser('a', IceOptionsLine.fromSdpLine);
      this.addParser('a', FingerprintLine.fromSdpLine);
      this.addParser('a', SetupLine.fromSdpLine);
      this.addParser('a', SctpPortLine.fromSdpLine);
      this.addParser('a', MaxMessageSizeLine.fromSdpLine);
      this.addParser('a', RtcpMuxLine.fromSdpLine);
      this.addParser('a', BundleGroupLine.fromSdpLine);
      this.addParser('a', ContentLine.fromSdpLine);
      this.addParser('a', RidLine.fromSdpLine);
      this.addParser('a', CandidateLine.fromSdpLine);
      this.addParser('a', SimulcastLine.fromSdpLine);
      this.addParser('a', SsrcLine.fromSdpLine);
      this.addParser('a', SsrcGroupLine.fromSdpLine);
    }
  }
  var DefaultSdpGrammar = new SdpGrammar();
  function isValidLine(line) {
    return line.length > 2;
  }
  function parseToModel(lines) {
    var sdp = new Sdp();
    var currBlock = sdp.session;
    lines.forEach(l => {
      if (l instanceof MediaLine) {
        var mediaInfo;
        if (l.type === 'audio' || l.type === 'video') {
          mediaInfo = new AvMediaDescription(l);
        } else if (l.type === 'application') {
          mediaInfo = new ApplicationMediaDescription(l);
        } else {
          throw new Error("Unhandled media type: ".concat(l.type));
        }
        sdp.media.push(mediaInfo);
        currBlock = mediaInfo;
      } else {
        currBlock.addLine(l);
      }
    });
    return sdp;
  }
  function parseToLines(sdp, grammar) {
    var lines = [];
    sdp.split(/(\r\n|\r|\n)/).filter(isValidLine).forEach(l => {
      var lineType = l[0];
      var lineValue = l.slice(2);
      var parsers = grammar.getParsers(lineType);
      for (var parser of parsers) {
        var _result = parser(lineValue);
        if (_result) {
          lines.push(_result);
          return;
        }
      }
      var result = UnknownLine.fromSdpLine(l);
      lines.push(result);
    });
    return lines;
  }
  function parse$3(sdp) {
    var grammar = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DefaultSdpGrammar;
    var lines = parseToLines(sdp, grammar);
    var parsed = parseToModel(lines);
    return parsed;
  }
  function removeCodec(sdp, codecName) {
    sdp.avMedia.forEach(media => {
      var codecInfos = [...media.codecs.entries()].filter(_ref => {
        var [, ci] = _ref;
        var _a;
        return ((_a = ci.name) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === codecName.toLowerCase();
      });
      codecInfos.forEach(_ref2 => {
        var [pt] = _ref2;
        return media.removePt(pt);
      });
    });
  }
  function hasCodec(codecName, mLine) {
    return [...mLine.codecs.values()].some(ci => {
      var _a;
      return ((_a = ci.name) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === codecName.toLowerCase();
    });
  }
  var events = {
    exports: {}
  };
  var R = typeof Reflect === 'object' ? Reflect : null;
  var ReflectApply = R && typeof R.apply === 'function' ? R.apply : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  };
  var ReflectOwnKeys;
  if (R && typeof R.ownKeys === 'function') {
    ReflectOwnKeys = R.ownKeys;
  } else if (Object.getOwnPropertySymbols) {
    ReflectOwnKeys = function ReflectOwnKeys(target) {
      return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
    };
  } else {
    ReflectOwnKeys = function ReflectOwnKeys(target) {
      return Object.getOwnPropertyNames(target);
    };
  }
  function ProcessEmitWarning(warning) {
    if (console && console.warn) console.warn(warning);
  }
  var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
    return value !== value;
  };
  function EventEmitter$1() {
    EventEmitter$1.init.call(this);
  }
  events.exports = EventEmitter$1;
  events.exports.once = once;

  // Backwards-compat with node 0.10.x
  EventEmitter$1.EventEmitter = EventEmitter$1;
  EventEmitter$1.prototype._events = undefined;
  EventEmitter$1.prototype._eventsCount = 0;
  EventEmitter$1.prototype._maxListeners = undefined;

  // By default EventEmitters will print a warning if more than 10 listeners are
  // added to it. This is a useful default which helps finding memory leaks.
  var defaultMaxListeners = 10;
  function checkListener(listener) {
    if (typeof listener !== 'function') {
      throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
    }
  }
  Object.defineProperty(EventEmitter$1, 'defaultMaxListeners', {
    enumerable: true,
    get: function get() {
      return defaultMaxListeners;
    },
    set: function set(arg) {
      if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
        throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
      }
      defaultMaxListeners = arg;
    }
  });
  EventEmitter$1.init = function () {
    if (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) {
      this._events = Object.create(null);
      this._eventsCount = 0;
    }
    this._maxListeners = this._maxListeners || undefined;
  };

  // Obviously not all Emitters should be limited to 10. This function allows
  // that to be increased. Set to zero for unlimited.
  EventEmitter$1.prototype.setMaxListeners = function setMaxListeners(n) {
    if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
      throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
    }
    this._maxListeners = n;
    return this;
  };
  function _getMaxListeners(that) {
    if (that._maxListeners === undefined) return EventEmitter$1.defaultMaxListeners;
    return that._maxListeners;
  }
  EventEmitter$1.prototype.getMaxListeners = function getMaxListeners() {
    return _getMaxListeners(this);
  };
  EventEmitter$1.prototype.emit = function emit(type) {
    var args = [];
    for (var i = 1; i < arguments.length; i++) {
      args.push(arguments[i]);
    }
    var doError = type === 'error';
    var events = this._events;
    if (events !== undefined) doError = doError && events.error === undefined;else if (!doError) return false;

    // If there is no 'error' event listener then throw.
    if (doError) {
      var er;
      if (args.length > 0) er = args[0];
      if (er instanceof Error) {
        // Note: The comments on the `throw` lines are intentional, they show
        // up in Node's output if this results in an unhandled exception.
        throw er; // Unhandled 'error' event
      }
      // At least give some kind of context to the user
      var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
      err.context = er;
      throw err; // Unhandled 'error' event
    }

    var handler = events[type];
    if (handler === undefined) return false;
    if (typeof handler === 'function') {
      ReflectApply(handler, this, args);
    } else {
      var len = handler.length;
      var listeners = arrayClone$3(handler, len);
      for (var i = 0; i < len; ++i) {
        ReflectApply(listeners[i], this, args);
      }
    }
    return true;
  };
  function _addListener$3(target, type, listener, prepend) {
    var m;
    var events;
    var existing;
    checkListener(listener);
    events = target._events;
    if (events === undefined) {
      events = target._events = Object.create(null);
      target._eventsCount = 0;
    } else {
      // To avoid recursion in the case that type === "newListener"! Before
      // adding it to the listeners, first emit "newListener".
      if (events.newListener !== undefined) {
        target.emit('newListener', type, listener.listener ? listener.listener : listener);

        // Re-assign `events` because a newListener handler could have caused the
        // this._events to be assigned to a new object
        events = target._events;
      }
      existing = events[type];
    }
    if (existing === undefined) {
      // Optimize the case of one listener. Don't need the extra array object.
      existing = events[type] = listener;
      ++target._eventsCount;
    } else {
      if (typeof existing === 'function') {
        // Adding the second element, need to change to array.
        existing = events[type] = prepend ? [listener, existing] : [existing, listener];
        // If we've already got an array, just append.
      } else if (prepend) {
        existing.unshift(listener);
      } else {
        existing.push(listener);
      }

      // Check for listener leak
      m = _getMaxListeners(target);
      if (m > 0 && existing.length > m && !existing.warned) {
        existing.warned = true;
        // No error code for this since it is a Warning
        // eslint-disable-next-line no-restricted-syntax
        var w = new Error('Possible EventEmitter memory leak detected. ' + existing.length + ' ' + String(type) + ' listeners ' + 'added. Use emitter.setMaxListeners() to ' + 'increase limit');
        w.name = 'MaxListenersExceededWarning';
        w.emitter = target;
        w.type = type;
        w.count = existing.length;
        ProcessEmitWarning(w);
      }
    }
    return target;
  }
  EventEmitter$1.prototype.addListener = function addListener(type, listener) {
    return _addListener$3(this, type, listener, false);
  };
  EventEmitter$1.prototype.on = EventEmitter$1.prototype.addListener;
  EventEmitter$1.prototype.prependListener = function prependListener(type, listener) {
    return _addListener$3(this, type, listener, true);
  };
  function onceWrapper() {
    if (!this.fired) {
      this.target.removeListener(this.type, this.wrapFn);
      this.fired = true;
      if (arguments.length === 0) return this.listener.call(this.target);
      return this.listener.apply(this.target, arguments);
    }
  }
  function _onceWrap$3(target, type, listener) {
    var state = {
      fired: false,
      wrapFn: undefined,
      target: target,
      type: type,
      listener: listener
    };
    var wrapped = onceWrapper.bind(state);
    wrapped.listener = listener;
    state.wrapFn = wrapped;
    return wrapped;
  }
  EventEmitter$1.prototype.once = function once(type, listener) {
    checkListener(listener);
    this.on(type, _onceWrap$3(this, type, listener));
    return this;
  };
  EventEmitter$1.prototype.prependOnceListener = function prependOnceListener(type, listener) {
    checkListener(listener);
    this.prependListener(type, _onceWrap$3(this, type, listener));
    return this;
  };

  // Emits a 'removeListener' event if and only if the listener was removed.
  EventEmitter$1.prototype.removeListener = function removeListener(type, listener) {
    var list, events, position, i, originalListener;
    checkListener(listener);
    events = this._events;
    if (events === undefined) return this;
    list = events[type];
    if (list === undefined) return this;
    if (list === listener || list.listener === listener) {
      if (--this._eventsCount === 0) this._events = Object.create(null);else {
        delete events[type];
        if (events.removeListener) this.emit('removeListener', type, list.listener || listener);
      }
    } else if (typeof list !== 'function') {
      position = -1;
      for (i = list.length - 1; i >= 0; i--) {
        if (list[i] === listener || list[i].listener === listener) {
          originalListener = list[i].listener;
          position = i;
          break;
        }
      }
      if (position < 0) return this;
      if (position === 0) list.shift();else {
        spliceOne$3(list, position);
      }
      if (list.length === 1) events[type] = list[0];
      if (events.removeListener !== undefined) this.emit('removeListener', type, originalListener || listener);
    }
    return this;
  };
  EventEmitter$1.prototype.off = EventEmitter$1.prototype.removeListener;
  EventEmitter$1.prototype.removeAllListeners = function removeAllListeners(type) {
    var listeners, events, i;
    events = this._events;
    if (events === undefined) return this;

    // not listening for removeListener, no need to emit
    if (events.removeListener === undefined) {
      if (arguments.length === 0) {
        this._events = Object.create(null);
        this._eventsCount = 0;
      } else if (events[type] !== undefined) {
        if (--this._eventsCount === 0) this._events = Object.create(null);else delete events[type];
      }
      return this;
    }

    // emit removeListener for all listeners on all events
    if (arguments.length === 0) {
      var keys = Object.keys(events);
      var key;
      for (i = 0; i < keys.length; ++i) {
        key = keys[i];
        if (key === 'removeListener') continue;
        this.removeAllListeners(key);
      }
      this.removeAllListeners('removeListener');
      this._events = Object.create(null);
      this._eventsCount = 0;
      return this;
    }
    listeners = events[type];
    if (typeof listeners === 'function') {
      this.removeListener(type, listeners);
    } else if (listeners !== undefined) {
      // LIFO order
      for (i = listeners.length - 1; i >= 0; i--) {
        this.removeListener(type, listeners[i]);
      }
    }
    return this;
  };
  function _listeners(target, type, unwrap) {
    var events = target._events;
    if (events === undefined) return [];
    var evlistener = events[type];
    if (evlistener === undefined) return [];
    if (typeof evlistener === 'function') return unwrap ? [evlistener.listener || evlistener] : [evlistener];
    return unwrap ? unwrapListeners$3(evlistener) : arrayClone$3(evlistener, evlistener.length);
  }
  EventEmitter$1.prototype.listeners = function listeners(type) {
    return _listeners(this, type, true);
  };
  EventEmitter$1.prototype.rawListeners = function rawListeners(type) {
    return _listeners(this, type, false);
  };
  EventEmitter$1.listenerCount = function (emitter, type) {
    if (typeof emitter.listenerCount === 'function') {
      return emitter.listenerCount(type);
    } else {
      return listenerCount$3.call(emitter, type);
    }
  };
  EventEmitter$1.prototype.listenerCount = listenerCount$3;
  function listenerCount$3(type) {
    var events = this._events;
    if (events !== undefined) {
      var evlistener = events[type];
      if (typeof evlistener === 'function') {
        return 1;
      } else if (evlistener !== undefined) {
        return evlistener.length;
      }
    }
    return 0;
  }
  EventEmitter$1.prototype.eventNames = function eventNames() {
    return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
  };
  function arrayClone$3(arr, n) {
    var copy = new Array(n);
    for (var i = 0; i < n; ++i) {
      copy[i] = arr[i];
    }
    return copy;
  }
  function spliceOne$3(list, index) {
    for (; index + 1 < list.length; index++) {
      list[index] = list[index + 1];
    }
    list.pop();
  }
  function unwrapListeners$3(arr) {
    var ret = new Array(arr.length);
    for (var i = 0; i < ret.length; ++i) {
      ret[i] = arr[i].listener || arr[i];
    }
    return ret;
  }
  function once(emitter, name) {
    return new Promise(function (resolve, reject) {
      function errorListener(err) {
        emitter.removeListener(name, resolver);
        reject(err);
      }
      function resolver() {
        if (typeof emitter.removeListener === 'function') {
          emitter.removeListener('error', errorListener);
        }
        resolve([].slice.call(arguments));
      }
      eventTargetAgnosticAddListener(emitter, name, resolver, {
        once: true
      });
      if (name !== 'error') {
        addErrorHandlerIfEventEmitter(emitter, errorListener, {
          once: true
        });
      }
    });
  }
  function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
    if (typeof emitter.on === 'function') {
      eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
    }
  }
  function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
    if (typeof emitter.on === 'function') {
      if (flags.once) {
        emitter.once(name, listener);
      } else {
        emitter.on(name, listener);
      }
    } else if (typeof emitter.addEventListener === 'function') {
      // EventTarget does not have `error` event semantics like Node
      // EventEmitters, we do not listen for `error` events here.
      emitter.addEventListener(name, function wrapListener(arg) {
        // IE does not have builtin `{ once: true }` support so we
        // have to do it manually.
        if (flags.once) {
          emitter.removeEventListener(name, wrapListener);
        }
        listener(arg);
      });
    } else {
      throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
    }
  }
  class EventEmitter$5 extends events.exports.EventEmitter {}
  var OveruseState;
  (function (OveruseState) {
    OveruseState[OveruseState["NOT_OVERUSED"] = 0] = "NOT_OVERUSED";
    OveruseState[OveruseState["OVERUSED"] = 1] = "OVERUSED";
  })(OveruseState || (OveruseState = {}));
  class OveruseStateManager {
    constructor(callback) {
      this.monitors = [];
      this.lastOverallOveruseState = OveruseState.NOT_OVERUSED;
      this.isRunning = false;
      this.overuseUpdateCallback = callback;
    }
    addMonitor(monitor) {
      this.monitors.push(monitor);
      if (this.isRunning) {
        monitor.startMonitoring(() => this.onMonitorOveruseUpdate());
      }
    }
    start() {
      this.isRunning = true;
      this.monitors.forEach(monitor => monitor.startMonitoring(() => this.onMonitorOveruseUpdate()));
    }
    stop() {
      this.isRunning = false;
      this.monitors.forEach(monitor => monitor.stopMonitoring());
    }
    onMonitorOveruseUpdate() {
      var overuseStates = this.monitors.map(monitor => monitor.getLastOveruseState());
      var overallOveruseState = overuseStates.some(overuseState => overuseState === OveruseState.OVERUSED) ? OveruseState.OVERUSED : OveruseState.NOT_OVERUSED;
      if (overallOveruseState !== this.lastOverallOveruseState) {
        this.lastOverallOveruseState = overallOveruseState;
        this.overuseUpdateCallback(overallOveruseState);
      }
    }
  }
  var ReceiveSlotEvents;
  (function (ReceiveSlotEvents) {
    ReceiveSlotEvents["MediaStarted"] = "media-started";
    ReceiveSlotEvents["MediaStopped"] = "media-stopped";
    ReceiveSlotEvents["SourceUpdate"] = "source-update";
  })(ReceiveSlotEvents || (ReceiveSlotEvents = {}));
  class ReceiveSlot extends EventEmitter$5 {
    constructor(idGetter, track) {
      super();
      this._idGetter = idGetter;
      this.handleTrackMuted = this.handleTrackMuted.bind(this);
      this.handleTrackUnmuted = this.handleTrackUnmuted.bind(this);
      this._stream = new MediaStream([track]);
      this._sourceState = 'no source';
      this.addTrackHandlers(track);
    }
    addTrackHandlers(track) {
      track.addEventListener('mute', this.handleTrackMuted);
      track.addEventListener('unmute', this.handleTrackUnmuted);
    }
    handleTrackMuted() {
      this.emit(ReceiveSlotEvents.MediaStopped);
    }
    handleTrackUnmuted() {
      this.emit(ReceiveSlotEvents.MediaStarted);
    }
    removeTrackHandlers(track) {
      track.removeEventListener('mute', this.handleTrackMuted);
      track.removeEventListener('unmute', this.handleTrackUnmuted);
    }
    replaceTrack(newTrack) {
      var _a;
      var trackToRemove = (_a = this._stream.getTracks()) === null || _a === void 0 ? void 0 : _a[0];
      if (trackToRemove) {
        this._stream.removeTrack(trackToRemove);
        this.removeTrackHandlers(trackToRemove);
      }
      this.addTrackHandlers(newTrack);
      this._stream.addTrack(newTrack);
    }
    _updateSource(state, csi) {
      if (state !== this._sourceState || csi !== this._currentRxCsi) {
        this._sourceState = state;
        this._currentRxCsi = csi;
        this.emit(ReceiveSlotEvents.SourceUpdate, state, csi);
      }
    }
    close() {
      this._stream.getTracks().forEach(t => {
        this.removeTrackHandlers(t);
      });
    }
    get id() {
      return this._idGetter();
    }
    get stream() {
      return this._stream;
    }
    get currentRxCsi() {
      return this._currentRxCsi;
    }
  }
  ReceiveSlot.Events = ReceiveSlotEvents;
  class Transceiver {
    constructor(rtcRtpTransceiver) {
      this._rtcRtpTransceiver = rtcRtpTransceiver;
    }
    replaceTransceiver(newRtcRtpTransceiver) {
      this._rtcRtpTransceiver = newRtcRtpTransceiver;
    }
    get receiver() {
      return this._rtcRtpTransceiver.receiver;
    }
    get sender() {
      return this._rtcRtpTransceiver.sender;
    }
    get mid() {
      return this._rtcRtpTransceiver.mid;
    }
    close() {
      this._rtcRtpTransceiver.stop();
    }
  }
  class ReceiveOnlyTransceiver extends Transceiver {
    constructor(rtcRtpTransceiver, idGetter) {
      super(rtcRtpTransceiver);
      this._receiveSlot = new ReceiveSlot(() => {
        if (!this._rtcRtpTransceiver.mid) {
          return null;
        }
        return idGetter(this._rtcRtpTransceiver.mid);
      }, this._rtcRtpTransceiver.receiver.track);
    }
    replaceTransceiver(newRtcRtpTransceiver) {
      super.replaceTransceiver(newRtcRtpTransceiver);
      this._receiveSlot.replaceTrack(newRtcRtpTransceiver.receiver.track);
    }
    close() {
      super.close();
      this._receiveSlot.close();
    }
    get receiveSlot() {
      return this._receiveSlot;
    }
    getStats() {
      return this.receiver.getStats();
    }
  }
  ReceiveOnlyTransceiver.rid = '1';
  class JmpLine extends Line {
    static fromSdpLine(line) {
      if (!JmpLine.regex.test(line)) {
        return undefined;
      }
      return new JmpLine();
    }
    toSdpLine() {
      return "a=jmp";
    }
  }
  JmpLine.regex = /^jmp$/;
  class JmpStreamIdModeLine extends Line {
    constructor(streamIdMode) {
      super();
      this.streamIdMode = streamIdMode;
    }
    static fromSdpLine(line) {
      if (!JmpStreamIdModeLine.regex.test(line)) {
        return undefined;
      }
      var tokens = line.match(JmpStreamIdModeLine.regex);
      var mode = tokens[1];
      return new JmpStreamIdModeLine(mode);
    }
    toSdpLine() {
      return "a=jmp-stream-id-mode:".concat(this.streamIdMode);
    }
  }
  JmpStreamIdModeLine.regex = /^jmp-stream-id-mode:(MID-RID|SSRC)$/;
  class JmpSourceLine extends Line {
    constructor(source, csi) {
      super();
      this.source = source;
      this.csi = csi;
    }
    static fromSdpLine(line) {
      if (!JmpSourceLine.regex.test(line)) {
        return undefined;
      }
      var tokens = line.match(JmpSourceLine.regex);
      var source = tokens[1];
      var csi = tokens[2];
      return new JmpSourceLine(source, csi);
    }
    toSdpLine() {
      var line = "a=jmp-source:".concat(this.source);
      if (this.csi) {
        line += " csi=".concat(this.csi);
      }
      return line;
    }
  }
  JmpSourceLine.regex = new RegExp("^jmp-source:(".concat(ANY_NON_WS, ") (?:csi=(").concat(ANY_NON_WS, "))"));
  DefaultSdpGrammar.addParser('a', JmpLine.fromSdpLine);
  DefaultSdpGrammar.addParser('a', JmpSourceLine.fromSdpLine);
  DefaultSdpGrammar.addParser('a', JmpStreamIdModeLine.fromSdpLine);
  function deepCopy(source) {
    return Array.isArray(source) ? source.map(item => deepCopy(item)) : source instanceof Map ? new Map(source) : source instanceof Date ? new Date(source.getTime()) : source && typeof source === 'object' ? Object.getOwnPropertyNames(source).reduce((o, prop) => {
      Object.defineProperty(o, prop, Object.getOwnPropertyDescriptor(source, prop));
      o[prop] = deepCopy(source[prop]);
      return o;
    }, Object.create(Object.getPrototypeOf(source))) : source;
  }
  function getMediaTypeForMline(mLine) {
    var _a, _b;
    var mediaFamily;
    if (mLine.type.toLowerCase() === MediaFamily$1.Audio.toLowerCase()) {
      mediaFamily = MediaFamily$1.Audio;
    } else if (mLine.type.toLowerCase() === MediaFamily$1.Video.toLowerCase()) {
      mediaFamily = MediaFamily$1.Video;
    } else {
      throw Error("Mline type doesn't match any known MediaFamily: ".concat(mLine.type));
    }
    var mediaContent;
    if ((_b = (_a = mLine.content) === null || _a === void 0 ? void 0 : _a.values) === null || _b === void 0 ? void 0 : _b.some(v => v.toLowerCase() === 'slides')) {
      mediaContent = MediaContent$1.Slides;
    } else {
      mediaContent = MediaContent$1.Main;
    }
    return getMediaType(mediaFamily, mediaContent);
  }
  function filterCodecs(parsedSdp, allowedCodecs) {
    var allowedLowerCase = allowedCodecs.map(s => s.toLowerCase());
    parsedSdp.avMedia.map(m => [...m.codecs.values()].map(c => c.name)).flat().filter(codecName => !allowedLowerCase.includes(codecName.toLowerCase())).forEach(c => removeCodec(parsedSdp, c));
  }
  function setMaxBandwidth(parsedSdp, maxBandwidth) {
    parsedSdp.avMedia.forEach(mline => {
      mline.bandwidth = new BandwidthLine('TIAS', maxBandwidth);
    });
  }
  function setupBundle(parsedSdp, bundlePolicy, midMap) {
    if (bundlePolicy === 'max-compat') {
      var audioMainMids = midMap.get(MediaType$1.AudioMain);
      var videoMainMids = midMap.get(MediaType$1.VideoMain);
      var audioContentMids = midMap.get(MediaType$1.AudioSlides);
      var videoContentMids = midMap.get(MediaType$1.VideoSlides);
      parsedSdp.session.groups.splice(0, parsedSdp.session.groups.length);
      if (audioMainMids) {
        parsedSdp.session.groups.push(new BundleGroupLine(audioMainMids));
      }
      if (videoMainMids) {
        parsedSdp.session.groups.push(new BundleGroupLine(videoMainMids));
      }
      if (audioContentMids) {
        parsedSdp.session.groups.push(new BundleGroupLine(audioContentMids));
      }
      if (videoContentMids) {
        parsedSdp.session.groups.push(new BundleGroupLine(videoContentMids));
      }
    }
  }
  function filterRecvOnlyMlines(parsedSdp) {
    var filteredMids = [];
    parsedSdp.media = parsedSdp.media.filter(mLine => {
      if (mLine instanceof ApplicationMediaDescription || mLine instanceof AvMediaDescription && mLine.direction !== 'recvonly') {
        filteredMids.push(mLine.mid);
        return true;
      }
      return false;
    });
    parsedSdp.session.groups.forEach(g => {
      g.mids = g.mids.filter(m => filteredMids.includes(m));
    });
  }
  function matchMlinesInAnswer(parsedOffer, parsedAnswer, streamSignalerManager) {
    parsedAnswer.session.groups = parsedOffer.session.groups;
    parsedAnswer.media = parsedOffer.media.map(offerMline => {
      if (!offerMline.mid) {
        throw new Error("Offer mline is missing MID");
      }
      var answerMline = parsedAnswer.media.find(m => m.mid === offerMline.mid);
      if (answerMline) {
        if (answerMline instanceof AvMediaDescription) {
          [...answerMline.codecs.values()].forEach(ci => {
            ci.fmtParams.set('x-google-start-bitrate', '60000');
          });
        }
        return answerMline;
      }
      if (!(offerMline instanceof AvMediaDescription)) {
        throw new Error("Answer is missing a non-media mline: ".concat(offerMline.mid));
      }
      var startingMline = parsedAnswer.avMedia.find(m => m.type === offerMline.type);
      if (!startingMline) {
        throw new Error("Answer has no mline of type ".concat(offerMline.type, ", can't generate synthetic answer mline for mid ").concat(offerMline.mid));
      }
      var fakeCorrespondingMline = deepCopy(startingMline);
      fakeCorrespondingMline.mid = offerMline.mid;
      fakeCorrespondingMline.simulcast = undefined;
      if (offerMline.direction === 'sendrecv' || offerMline.direction === 'sendonly') {
        fakeCorrespondingMline.direction = 'recvonly';
      }
      if (offerMline.direction === 'recvonly') {
        fakeCorrespondingMline.direction = 'sendonly';
        var ingressSignaler = streamSignalerManager.getIngressStreamSignalerOrThrow(offerMline.mid);
        ingressSignaler.signalRemoteStreams(fakeCorrespondingMline);
      }
      return fakeCorrespondingMline;
    });
  }
  function injectContentTypes(sdp, contentTypeMap) {
    contentTypeMap.forEach((mediaContent, mid) => {
      var mline = sdp.media.find(m => m.mid === mid);
      if (!mline) {
        throw new Error("Error trying to set content type for mid ".concat(mid, ": not found in SDP"));
      }
      if (mediaContent === MediaContent$1.Slides) {
        mline.addLine(new ContentLine(['slides']));
      }
    });
  }
  function injectJmpAttributes(parsedSdp, csiMap, streamSignalingMode) {
    parsedSdp.avMedia.filter(mLine => mLine.direction === 'sendrecv' || mLine.direction === 'inactive').forEach(mLine => {
      if (!mLine.otherLines.find(line => line instanceof JmpLine)) {
        mLine.addLine(new JmpLine());
      }
      if (!mLine.otherLines.find(line => line instanceof JmpSourceLine)) {
        var mediaType = getMediaTypeForMline(mLine);
        var csi = csiMap.get(mediaType);
        if (!csi) {
          throw new Error("Unable to find CSI for MediaType ".concat(mediaType));
        }
        mLine.addLine(new JmpSourceLine(mLine.mid, csi.toString()));
      }
      if (!mLine.otherLines.find(line => line instanceof JmpStreamIdModeLine)) {
        mLine.addLine(new JmpStreamIdModeLine(streamSignalingMode));
      }
    });
  }
  function hasSimulcast(av) {
    return !!av.simulcast || av.ssrcGroups.map(sg => sg.semantics).some(sem => sem === 'SIM');
  }
  class SendOnlyTransceiver extends Transceiver {
    constructor(rtcpRtpTransceiver, csi) {
      super(rtcpRtpTransceiver);
      this.requested = false;
      this.csi = csi;
      this.direction = 'sendrecv';
      this.handleTrackChange = this.handleTrackChange.bind(this);
    }
    handleTrackChange() {
      var _a;
      return __awaiter$3(this, void 0, void 0, function* () {
        if (this.requested) {
          yield this.sender.replaceTrack(((_a = this.publishedTrack) === null || _a === void 0 ? void 0 : _a.underlyingTrack) || null);
        }
      });
    }
    replaceTransceiver(newRtcRtpTransceiver) {
      var _super = Object.create(null, {
        replaceTransceiver: {
          get: () => super.replaceTransceiver
        }
      });
      var _a;
      return __awaiter$3(this, void 0, void 0, function* () {
        _super.replaceTransceiver.call(this, newRtcRtpTransceiver);
        newRtcRtpTransceiver.direction = this.direction;
        if (this.requested) {
          yield this.sender.replaceTrack(((_a = this.publishedTrack) === null || _a === void 0 ? void 0 : _a.underlyingTrack) || null);
        }
      });
    }
    replacePublishedTrack(newTrack) {
      var _a, _b;
      return __awaiter$3(this, void 0, void 0, function* () {
        (_a = this.publishedTrack) === null || _a === void 0 ? void 0 : _a.off(LocalTrackEvents.UnderlyingTrackChange, this.handleTrackChange);
        (_b = this.publishedTrack) === null || _b === void 0 ? void 0 : _b.setPublished(false);
        if (this.requested) {
          yield this.sender.replaceTrack((newTrack === null || newTrack === void 0 ? void 0 : newTrack.underlyingTrack) || null);
        }
        this.publishedTrack = newTrack;
        newTrack === null || newTrack === void 0 ? void 0 : newTrack.on(LocalTrackEvents.UnderlyingTrackChange, this.handleTrackChange);
        newTrack === null || newTrack === void 0 ? void 0 : newTrack.setPublished(true);
      });
    }
    setTrackRequested(requested) {
      var _a;
      return __awaiter$3(this, void 0, void 0, function* () {
        if (this.requested !== requested) {
          this.requested = requested;
          var newTrack = requested ? ((_a = this.publishedTrack) === null || _a === void 0 ? void 0 : _a.underlyingTrack) || null : null;
          yield this.sender.replaceTrack(newTrack);
        }
      });
    }
    updateSimulcastStreamStates(requestedIdEncodingParamsMap) {
      return __awaiter$3(this, void 0, void 0, function* () {
        var sendParameters = this.sender.getParameters();
        sendParameters.encodings.forEach((encoding, index) => {
          var encodingParams = requestedIdEncodingParamsMap.get(index);
          encoding.active = Boolean(encodingParams);
          if (encodingParams) {
            if (encodingParams.scaleDownRatio >= 1 && encoding.scaleResolutionDownBy !== encodingParams.scaleDownRatio) {
              encoding.scaleResolutionDownBy = encodingParams.scaleDownRatio;
            }
            if (encodingParams.maxPayloadBitsPerSecond) {
              encoding.maxBitrate = encodingParams.maxPayloadBitsPerSecond;
            }
          }
        });
        yield this.sender.setParameters(sendParameters);
      });
    }
    getScaleDownRatio(expectedMaxFs) {
      var _a;
      if (!expectedMaxFs) {
        return -1;
      }
      if (!this.publishedTrack) {
        return -1;
      }
      var setting = (_a = this.publishedTrack) === null || _a === void 0 ? void 0 : _a.underlyingTrack.getSettings();
      var sourceHeight = setting === null || setting === void 0 ? void 0 : setting.height;
      var sourceWidth = setting === null || setting === void 0 ? void 0 : setting.width;
      if (!sourceWidth || !sourceHeight) {
        return -1;
      }
      return Math.max(getScaleDownRatio([sourceWidth, sourceHeight], sourceHeight, expectedMaxFs), 1.0);
    }
    publishTrack(track) {
      return this.replacePublishedTrack(track);
    }
    unpublishTrack() {
      return this.replacePublishedTrack();
    }
    setActive(enabled) {
      this.direction = enabled ? 'sendrecv' : 'inactive';
      this._rtcRtpTransceiver.direction = this.direction;
      return this._rtcRtpTransceiver.direction !== this._rtcRtpTransceiver.currentDirection;
    }
    getStats() {
      return this.sender.getStats();
    }
  }
  class StatsManager {
    constructor(statsGetter) {
      var statsPreprocessor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : () => __awaiter$3(this, void 0, void 0, function* () {});
      this.statsGetter = statsGetter;
      this.statsPreProcessor = statsPreprocessor;
    }
    getStats() {
      return __awaiter$3(this, void 0, void 0, function* () {
        var statsReport = yield this.statsGetter();
        var statsMap = new Map();
        statsReport.forEach((stats, key) => statsMap.set(key, stats));
        yield this.statsPreProcessor(statsMap);
        return statsMap;
      });
    }
  }
  var simulcastMaxFrameSizes = {
    0: '240',
    1: '2304',
    2: '8160'
  };
  class RidIngressStreamSignaler {
    constructor(mid) {
      this.mid = mid;
    }
    getReceiverId() {
      return {
        mid: this.mid,
        rid: '1'
      };
    }
    signalLocalStreams(mLine) {}
    signalRemoteStreams(mLine) {}
  }
  class RidEgressStreamSignaler {
    constructor(mid) {
      this.streamIds = [];
      this.mid = mid;
    }
    signalStreams(simulcastEnabled, _rtxEnabled, mLine) {
      mLine.ssrcGroups = [];
      if (this.streamIds.length === 0) {
        if (simulcastEnabled) {
          this.streamIds = [{
            mid: this.mid,
            rid: 'low'
          }, {
            mid: this.mid,
            rid: 'medium'
          }, {
            mid: this.mid,
            rid: 'high'
          }];
        } else {
          this.streamIds = [{
            mid: this.mid
          }];
        }
      }
      if (simulcastEnabled) {
        mLine.rids = this.streamIds.map((streamId, index) => new RidLine(streamId.rid, 'send', "max-fs=".concat(simulcastMaxFrameSizes[index])));
        mLine.simulcast = new SimulcastLine(SimulcastLayerList.fromString('low;medium;high'), new SimulcastLayerList());
      }
    }
    getSenderIds() {
      return this.streamIds;
    }
    getEncodingIndexForStreamId(streamId) {
      return this.streamIds.findIndex(currStreamId => compareStreamIds(currStreamId, streamId));
    }
  }
  function generateSsrc() {
    return Math.floor(Math.random() * 0xffffffff) + 1;
  }
  class SsrcIngressStreamSignaler {
    constructor() {
      this.ssrc = generateSsrc();
    }
    getReceiverId() {
      return Object.assign({
        ssrc: this.ssrc
      }, this.rtxSsrc ? {
        rtxSsrc: this.rtxSsrc
      } : {});
    }
    signalLocalStreams(_mLine) {}
    signalRemoteStreams(mLine) {
      mLine.addLine(new SsrcLine(this.ssrc, 'cname', "".concat(this.ssrc, "-cname")));
      mLine.addLine(new SsrcLine(this.ssrc, 'msid', '-', '1'));
      if (hasCodec('rtx', mLine)) {
        this.rtxSsrc = generateSsrc();
        mLine.addLine(new SsrcLine(this.rtxSsrc, 'cname', "".concat(this.ssrc, "-cname")));
        mLine.addLine(new SsrcLine(this.rtxSsrc, 'msid', '-', '1'));
        mLine.addLine(new SsrcGroupLine('FID', [this.ssrc, this.rtxSsrc]));
      }
    }
  }
  class SsrcEgressStreamSignaler {
    constructor() {
      this.streamIds = [];
    }
    signalStreams(simulcastEnabled, rtxEnabled, mLine) {
      mLine.rids = [];
      mLine.simulcast = undefined;
      mLine.ssrcs = [];
      mLine.ssrcGroups = [];
      mLine.extMaps = mLine.extMaps.filter(extMapLine => !/^urn:ietf:params:rtp-hdrext:sdes:(?:mid|rtp-stream-id|repaired-rtp-stream-id)$/.test(extMapLine.uri));
      if (this.streamIds.length === 0) {
        var numStreams = simulcastEnabled ? 3 : 1;
        [...Array(numStreams).keys()].forEach(() => {
          var newStreamId = {
            ssrc: generateSsrc()
          };
          if (rtxEnabled) {
            newStreamId.rtxSsrc = generateSsrc();
          }
          this.streamIds.push(newStreamId);
        });
      }
      this.streamIds.forEach(streamId => {
        var rtpSsrc = streamId.ssrc;
        mLine.addLine(new SsrcLine(rtpSsrc, 'cname', "".concat(rtpSsrc, "-cname")));
        mLine.addLine(new SsrcLine(rtpSsrc, 'msid', '-', '1'));
        if (rtxEnabled) {
          var rtxSsrc = streamId.rtxSsrc;
          mLine.addLine(new SsrcLine(rtxSsrc, 'cname', "".concat(rtpSsrc, "-cname")));
          mLine.addLine(new SsrcLine(rtxSsrc, 'msid', '-', '1'));
          mLine.addLine(new SsrcGroupLine('FID', [rtpSsrc, rtxSsrc]));
        }
      });
      if (simulcastEnabled) {
        mLine.addLine(new SsrcGroupLine('SIM', this.streamIds.map(streamId => streamId.ssrc)));
      }
    }
    getSenderIds() {
      return this.streamIds;
    }
    getEncodingIndexForStreamId(streamId) {
      return this.streamIds.findIndex(currStreamId => compareStreamIds(currStreamId, streamId));
    }
  }
  class StreamSignalerManager {
    constructor(streamSignalingMode) {
      this.egressStreamSignalersByMid = new Map();
      this.ingressStreamsSignalersByMid = new Map();
      this.ingressStreamSignalingMode = streamSignalingMode;
      this.egressStreamSignalingMode = streamSignalingMode;
    }
    getOrCreateEgressStreamSignaler(mid) {
      var existing = this.getEgressStreamSignaler(mid);
      if (existing) {
        return existing;
      }
      var newSignaler;
      if (this.egressStreamSignalingMode === 'MID-RID') {
        newSignaler = new RidEgressStreamSignaler(mid);
      } else {
        newSignaler = new SsrcEgressStreamSignaler();
      }
      this.egressStreamSignalersByMid.set(mid, newSignaler);
      return newSignaler;
    }
    getEgressStreamSignalerOrThrow(mid) {
      var existing = this.getEgressStreamSignaler(mid);
      if (!existing) {
        throw new Error("Couldn't find EgressStreamSignaler for mid ".concat(mid));
      }
      return existing;
    }
    getEgressStreamSignaler(mid) {
      return this.egressStreamSignalersByMid.get(mid);
    }
    getOrCreateIngressStreamSignaler(mid) {
      var existing = this.getIngressStreamSignaler(mid);
      if (existing) {
        return existing;
      }
      var newSignaler;
      if (this.ingressStreamSignalingMode === 'MID-RID') {
        newSignaler = new RidIngressStreamSignaler(mid);
      } else {
        newSignaler = new SsrcIngressStreamSignaler();
      }
      this.ingressStreamsSignalersByMid.set(mid, newSignaler);
      return newSignaler;
    }
    getIngressStreamSignaler(mid) {
      return this.ingressStreamsSignalersByMid.get(mid);
    }
    getIngressStreamSignalerOrThrow(mid) {
      var existing = this.getIngressStreamSignaler(mid);
      if (!existing) {
        throw new Error("Couldn't find IngressStreamSignaler for mid ".concat(mid));
      }
      return existing;
    }
  }
  var organizeTransceiverStats = (sendTransceivers, recvTransceivers) => __awaiter$3(void 0, void 0, void 0, function* () {
    var result = {
      audio: {
        senders: [],
        receivers: []
      },
      video: {
        senders: [],
        receivers: []
      },
      screenShareAudio: {
        senders: [],
        receivers: []
      },
      screenShareVideo: {
        senders: [],
        receivers: []
      }
    };
    yield Promise.all([...sendTransceivers.entries()].map(_ref3 => {
      var [mediaType, transceiver] = _ref3;
      return __awaiter$3(void 0, void 0, void 0, function* () {
        var _a;
        var item = {
          report: yield transceiver.getStats(),
          mid: transceiver.mid,
          csi: transceiver.csi,
          currentDirection: 'sendonly',
          localTrackLabel: (_a = transceiver.publishedTrack) === null || _a === void 0 ? void 0 : _a.label
        };
        if (mediaType === MediaType$1.AudioMain) {
          result.audio.senders.push(item);
        }
        if (mediaType === MediaType$1.VideoMain) {
          result.video.senders.push(item);
        }
        if (mediaType === MediaType$1.AudioSlides) {
          result.screenShareAudio.senders.push(item);
        }
        if (mediaType === MediaType$1.VideoSlides) {
          result.screenShareVideo.senders.push(item);
        }
      });
    }));
    yield Promise.all([...recvTransceivers.entries()].map(_ref4 => {
      var [mediaType, transceivers] = _ref4;
      return __awaiter$3(void 0, void 0, void 0, function* () {
        return Promise.all(transceivers.map(t => __awaiter$3(void 0, void 0, void 0, function* () {
          var _b, _c;
          var item = {
            report: yield t.getStats(),
            mid: (_b = t.receiveSlot.id) === null || _b === void 0 ? void 0 : _b.mid,
            csi: t.receiveSlot.currentRxCsi,
            currentDirection: 'recvonly',
            localTrackLabel: (_c = t.receiveSlot.stream.getTracks()[0]) === null || _c === void 0 ? void 0 : _c.label
          };
          if (mediaType === MediaType$1.AudioMain) {
            result.audio.receivers.push(item);
          }
          if (mediaType === MediaType$1.VideoMain) {
            result.video.receivers.push(item);
          }
          if (mediaType === MediaType$1.AudioSlides) {
            result.screenShareAudio.receivers.push(item);
          }
          if (mediaType === MediaType$1.VideoSlides) {
            result.screenShareVideo.receivers.push(item);
          }
        })));
      });
    }));
    return result;
  });
  var es5 = {
    exports: {}
  };
  (function (module, exports) {
    !function (e, t) {
      module.exports = t();
    }(commonjsGlobal$3, function () {
      return function (e) {
        var t = {};
        function r(n) {
          if (t[n]) return t[n].exports;
          var i = t[n] = {
            i: n,
            l: !1,
            exports: {}
          };
          return e[n].call(i.exports, i, i.exports, r), i.l = !0, i.exports;
        }
        return r.m = e, r.c = t, r.d = function (e, t, n) {
          r.o(e, t) || Object.defineProperty(e, t, {
            enumerable: !0,
            get: n
          });
        }, r.r = function (e) {
          "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {
            value: "Module"
          }), Object.defineProperty(e, "__esModule", {
            value: !0
          });
        }, r.t = function (e, t) {
          if (1 & t && (e = r(e)), 8 & t) return e;
          if (4 & t && "object" == typeof e && e && e.__esModule) return e;
          var n = Object.create(null);
          if (r.r(n), Object.defineProperty(n, "default", {
            enumerable: !0,
            value: e
          }), 2 & t && "string" != typeof e) for (var i in e) {
            r.d(n, i, function (t) {
              return e[t];
            }.bind(null, i));
          }
          return n;
        }, r.n = function (e) {
          var t = e && e.__esModule ? function () {
            return e.default;
          } : function () {
            return e;
          };
          return r.d(t, "a", t), t;
        }, r.o = function (e, t) {
          return Object.prototype.hasOwnProperty.call(e, t);
        }, r.p = "", r(r.s = 90);
      }({
        17: function _(e, t, r) {
          t.__esModule = !0, t.default = void 0;
          var n = r(18),
            i = function () {
              function e() {}
              return e.getFirstMatch = function (e, t) {
                var r = t.match(e);
                return r && r.length > 0 && r[1] || "";
              }, e.getSecondMatch = function (e, t) {
                var r = t.match(e);
                return r && r.length > 1 && r[2] || "";
              }, e.matchAndReturnConst = function (e, t, r) {
                if (e.test(t)) return r;
              }, e.getWindowsVersionName = function (e) {
                switch (e) {
                  case "NT":
                    return "NT";
                  case "XP":
                    return "XP";
                  case "NT 5.0":
                    return "2000";
                  case "NT 5.1":
                    return "XP";
                  case "NT 5.2":
                    return "2003";
                  case "NT 6.0":
                    return "Vista";
                  case "NT 6.1":
                    return "7";
                  case "NT 6.2":
                    return "8";
                  case "NT 6.3":
                    return "8.1";
                  case "NT 10.0":
                    return "10";
                  default:
                    return;
                }
              }, e.getMacOSVersionName = function (e) {
                var t = e.split(".").splice(0, 2).map(function (e) {
                  return parseInt(e, 10) || 0;
                });
                if (t.push(0), 10 === t[0]) switch (t[1]) {
                  case 5:
                    return "Leopard";
                  case 6:
                    return "Snow Leopard";
                  case 7:
                    return "Lion";
                  case 8:
                    return "Mountain Lion";
                  case 9:
                    return "Mavericks";
                  case 10:
                    return "Yosemite";
                  case 11:
                    return "El Capitan";
                  case 12:
                    return "Sierra";
                  case 13:
                    return "High Sierra";
                  case 14:
                    return "Mojave";
                  case 15:
                    return "Catalina";
                  default:
                    return;
                }
              }, e.getAndroidVersionName = function (e) {
                var t = e.split(".").splice(0, 2).map(function (e) {
                  return parseInt(e, 10) || 0;
                });
                if (t.push(0), !(1 === t[0] && t[1] < 5)) return 1 === t[0] && t[1] < 6 ? "Cupcake" : 1 === t[0] && t[1] >= 6 ? "Donut" : 2 === t[0] && t[1] < 2 ? "Eclair" : 2 === t[0] && 2 === t[1] ? "Froyo" : 2 === t[0] && t[1] > 2 ? "Gingerbread" : 3 === t[0] ? "Honeycomb" : 4 === t[0] && t[1] < 1 ? "Ice Cream Sandwich" : 4 === t[0] && t[1] < 4 ? "Jelly Bean" : 4 === t[0] && t[1] >= 4 ? "KitKat" : 5 === t[0] ? "Lollipop" : 6 === t[0] ? "Marshmallow" : 7 === t[0] ? "Nougat" : 8 === t[0] ? "Oreo" : 9 === t[0] ? "Pie" : void 0;
              }, e.getVersionPrecision = function (e) {
                return e.split(".").length;
              }, e.compareVersions = function (t, r, n) {
                void 0 === n && (n = !1);
                var i = e.getVersionPrecision(t),
                  s = e.getVersionPrecision(r),
                  a = Math.max(i, s),
                  o = 0,
                  u = e.map([t, r], function (t) {
                    var r = a - e.getVersionPrecision(t),
                      n = t + new Array(r + 1).join(".0");
                    return e.map(n.split("."), function (e) {
                      return new Array(20 - e.length).join("0") + e;
                    }).reverse();
                  });
                for (n && (o = a - Math.min(i, s)), a -= 1; a >= o;) {
                  if (u[0][a] > u[1][a]) return 1;
                  if (u[0][a] === u[1][a]) {
                    if (a === o) return 0;
                    a -= 1;
                  } else if (u[0][a] < u[1][a]) return -1;
                }
              }, e.map = function (e, t) {
                var r,
                  n = [];
                if (Array.prototype.map) return Array.prototype.map.call(e, t);
                for (r = 0; r < e.length; r += 1) {
                  n.push(t(e[r]));
                }
                return n;
              }, e.find = function (e, t) {
                var r, n;
                if (Array.prototype.find) return Array.prototype.find.call(e, t);
                for (r = 0, n = e.length; r < n; r += 1) {
                  var i = e[r];
                  if (t(i, r)) return i;
                }
              }, e.assign = function (e) {
                for (var t, r, n = e, i = arguments.length, s = new Array(i > 1 ? i - 1 : 0), a = 1; a < i; a++) {
                  s[a - 1] = arguments[a];
                }
                if (Object.assign) return Object.assign.apply(Object, [e].concat(s));
                var o = function o() {
                  var e = s[t];
                  "object" == typeof e && null !== e && Object.keys(e).forEach(function (t) {
                    n[t] = e[t];
                  });
                };
                for (t = 0, r = s.length; t < r; t += 1) {
                  o();
                }
                return e;
              }, e.getBrowserAlias = function (e) {
                return n.BROWSER_ALIASES_MAP[e];
              }, e.getBrowserTypeByAlias = function (e) {
                return n.BROWSER_MAP[e] || "";
              }, e;
            }();
          t.default = i, e.exports = t.default;
        },
        18: function _(e, t, r) {
          t.__esModule = !0, t.ENGINE_MAP = t.OS_MAP = t.PLATFORMS_MAP = t.BROWSER_MAP = t.BROWSER_ALIASES_MAP = void 0;
          t.BROWSER_ALIASES_MAP = {
            "Amazon Silk": "amazon_silk",
            "Android Browser": "android",
            Bada: "bada",
            BlackBerry: "blackberry",
            Chrome: "chrome",
            Chromium: "chromium",
            Electron: "electron",
            Epiphany: "epiphany",
            Firefox: "firefox",
            Focus: "focus",
            Generic: "generic",
            "Google Search": "google_search",
            Googlebot: "googlebot",
            "Internet Explorer": "ie",
            "K-Meleon": "k_meleon",
            Maxthon: "maxthon",
            "Microsoft Edge": "edge",
            "MZ Browser": "mz",
            "NAVER Whale Browser": "naver",
            Opera: "opera",
            "Opera Coast": "opera_coast",
            PhantomJS: "phantomjs",
            Puffin: "puffin",
            QupZilla: "qupzilla",
            QQ: "qq",
            QQLite: "qqlite",
            Safari: "safari",
            Sailfish: "sailfish",
            "Samsung Internet for Android": "samsung_internet",
            SeaMonkey: "seamonkey",
            Sleipnir: "sleipnir",
            Swing: "swing",
            Tizen: "tizen",
            "UC Browser": "uc",
            Vivaldi: "vivaldi",
            "WebOS Browser": "webos",
            WeChat: "wechat",
            "Yandex Browser": "yandex",
            Roku: "roku"
          };
          t.BROWSER_MAP = {
            amazon_silk: "Amazon Silk",
            android: "Android Browser",
            bada: "Bada",
            blackberry: "BlackBerry",
            chrome: "Chrome",
            chromium: "Chromium",
            electron: "Electron",
            epiphany: "Epiphany",
            firefox: "Firefox",
            focus: "Focus",
            generic: "Generic",
            googlebot: "Googlebot",
            google_search: "Google Search",
            ie: "Internet Explorer",
            k_meleon: "K-Meleon",
            maxthon: "Maxthon",
            edge: "Microsoft Edge",
            mz: "MZ Browser",
            naver: "NAVER Whale Browser",
            opera: "Opera",
            opera_coast: "Opera Coast",
            phantomjs: "PhantomJS",
            puffin: "Puffin",
            qupzilla: "QupZilla",
            qq: "QQ Browser",
            qqlite: "QQ Browser Lite",
            safari: "Safari",
            sailfish: "Sailfish",
            samsung_internet: "Samsung Internet for Android",
            seamonkey: "SeaMonkey",
            sleipnir: "Sleipnir",
            swing: "Swing",
            tizen: "Tizen",
            uc: "UC Browser",
            vivaldi: "Vivaldi",
            webos: "WebOS Browser",
            wechat: "WeChat",
            yandex: "Yandex Browser"
          };
          t.PLATFORMS_MAP = {
            tablet: "tablet",
            mobile: "mobile",
            desktop: "desktop",
            tv: "tv"
          };
          t.OS_MAP = {
            WindowsPhone: "Windows Phone",
            Windows: "Windows",
            MacOS: "macOS",
            iOS: "iOS",
            Android: "Android",
            WebOS: "WebOS",
            BlackBerry: "BlackBerry",
            Bada: "Bada",
            Tizen: "Tizen",
            Linux: "Linux",
            ChromeOS: "Chrome OS",
            PlayStation4: "PlayStation 4",
            Roku: "Roku"
          };
          t.ENGINE_MAP = {
            EdgeHTML: "EdgeHTML",
            Blink: "Blink",
            Trident: "Trident",
            Presto: "Presto",
            Gecko: "Gecko",
            WebKit: "WebKit"
          };
        },
        90: function _(e, t, r) {
          t.__esModule = !0, t.default = void 0;
          var n,
            i = (n = r(91)) && n.__esModule ? n : {
              default: n
            },
            s = r(18);
          function a(e, t) {
            for (var r = 0; r < t.length; r++) {
              var n = t[r];
              n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);
            }
          }
          var o = function () {
            function e() {}
            var t, r, n;
            return e.getParser = function (e, t) {
              if (void 0 === t && (t = !1), "string" != typeof e) throw new Error("UserAgent should be a string");
              return new i.default(e, t);
            }, e.parse = function (e) {
              return new i.default(e).getResult();
            }, t = e, n = [{
              key: "BROWSER_MAP",
              get: function get() {
                return s.BROWSER_MAP;
              }
            }, {
              key: "ENGINE_MAP",
              get: function get() {
                return s.ENGINE_MAP;
              }
            }, {
              key: "OS_MAP",
              get: function get() {
                return s.OS_MAP;
              }
            }, {
              key: "PLATFORMS_MAP",
              get: function get() {
                return s.PLATFORMS_MAP;
              }
            }], (r = null) && a(t.prototype, r), n && a(t, n), e;
          }();
          t.default = o, e.exports = t.default;
        },
        91: function _(e, t, r) {
          t.__esModule = !0, t.default = void 0;
          var n = u(r(92)),
            i = u(r(93)),
            s = u(r(94)),
            a = u(r(95)),
            o = u(r(17));
          function u(e) {
            return e && e.__esModule ? e : {
              default: e
            };
          }
          var d = function () {
            function e(e, t) {
              if (void 0 === t && (t = !1), null == e || "" === e) throw new Error("UserAgent parameter can't be empty");
              this._ua = e, this.parsedResult = {}, !0 !== t && this.parse();
            }
            var t = e.prototype;
            return t.getUA = function () {
              return this._ua;
            }, t.test = function (e) {
              return e.test(this._ua);
            }, t.parseBrowser = function () {
              var e = this;
              this.parsedResult.browser = {};
              var t = o.default.find(n.default, function (t) {
                if ("function" == typeof t.test) return t.test(e);
                if (t.test instanceof Array) return t.test.some(function (t) {
                  return e.test(t);
                });
                throw new Error("Browser's test function is not valid");
              });
              return t && (this.parsedResult.browser = t.describe(this.getUA())), this.parsedResult.browser;
            }, t.getBrowser = function () {
              return this.parsedResult.browser ? this.parsedResult.browser : this.parseBrowser();
            }, t.getBrowserName = function (e) {
              return e ? String(this.getBrowser().name).toLowerCase() || "" : this.getBrowser().name || "";
            }, t.getBrowserVersion = function () {
              return this.getBrowser().version;
            }, t.getOS = function () {
              return this.parsedResult.os ? this.parsedResult.os : this.parseOS();
            }, t.parseOS = function () {
              var e = this;
              this.parsedResult.os = {};
              var t = o.default.find(i.default, function (t) {
                if ("function" == typeof t.test) return t.test(e);
                if (t.test instanceof Array) return t.test.some(function (t) {
                  return e.test(t);
                });
                throw new Error("Browser's test function is not valid");
              });
              return t && (this.parsedResult.os = t.describe(this.getUA())), this.parsedResult.os;
            }, t.getOSName = function (e) {
              var t = this.getOS().name;
              return e ? String(t).toLowerCase() || "" : t || "";
            }, t.getOSVersion = function () {
              return this.getOS().version;
            }, t.getPlatform = function () {
              return this.parsedResult.platform ? this.parsedResult.platform : this.parsePlatform();
            }, t.getPlatformType = function (e) {
              void 0 === e && (e = !1);
              var t = this.getPlatform().type;
              return e ? String(t).toLowerCase() || "" : t || "";
            }, t.parsePlatform = function () {
              var e = this;
              this.parsedResult.platform = {};
              var t = o.default.find(s.default, function (t) {
                if ("function" == typeof t.test) return t.test(e);
                if (t.test instanceof Array) return t.test.some(function (t) {
                  return e.test(t);
                });
                throw new Error("Browser's test function is not valid");
              });
              return t && (this.parsedResult.platform = t.describe(this.getUA())), this.parsedResult.platform;
            }, t.getEngine = function () {
              return this.parsedResult.engine ? this.parsedResult.engine : this.parseEngine();
            }, t.getEngineName = function (e) {
              return e ? String(this.getEngine().name).toLowerCase() || "" : this.getEngine().name || "";
            }, t.parseEngine = function () {
              var e = this;
              this.parsedResult.engine = {};
              var t = o.default.find(a.default, function (t) {
                if ("function" == typeof t.test) return t.test(e);
                if (t.test instanceof Array) return t.test.some(function (t) {
                  return e.test(t);
                });
                throw new Error("Browser's test function is not valid");
              });
              return t && (this.parsedResult.engine = t.describe(this.getUA())), this.parsedResult.engine;
            }, t.parse = function () {
              return this.parseBrowser(), this.parseOS(), this.parsePlatform(), this.parseEngine(), this;
            }, t.getResult = function () {
              return o.default.assign({}, this.parsedResult);
            }, t.satisfies = function (e) {
              var t = this,
                r = {},
                n = 0,
                i = {},
                s = 0;
              if (Object.keys(e).forEach(function (t) {
                var a = e[t];
                "string" == typeof a ? (i[t] = a, s += 1) : "object" == typeof a && (r[t] = a, n += 1);
              }), n > 0) {
                var a = Object.keys(r),
                  u = o.default.find(a, function (e) {
                    return t.isOS(e);
                  });
                if (u) {
                  var d = this.satisfies(r[u]);
                  if (void 0 !== d) return d;
                }
                var c = o.default.find(a, function (e) {
                  return t.isPlatform(e);
                });
                if (c) {
                  var f = this.satisfies(r[c]);
                  if (void 0 !== f) return f;
                }
              }
              if (s > 0) {
                var l = Object.keys(i),
                  h = o.default.find(l, function (e) {
                    return t.isBrowser(e, !0);
                  });
                if (void 0 !== h) return this.compareVersion(i[h]);
              }
            }, t.isBrowser = function (e, t) {
              void 0 === t && (t = !1);
              var r = this.getBrowserName().toLowerCase(),
                n = e.toLowerCase(),
                i = o.default.getBrowserTypeByAlias(n);
              return t && i && (n = i.toLowerCase()), n === r;
            }, t.compareVersion = function (e) {
              var t = [0],
                r = e,
                n = !1,
                i = this.getBrowserVersion();
              if ("string" == typeof i) return ">" === e[0] || "<" === e[0] ? (r = e.substr(1), "=" === e[1] ? (n = !0, r = e.substr(2)) : t = [], ">" === e[0] ? t.push(1) : t.push(-1)) : "=" === e[0] ? r = e.substr(1) : "~" === e[0] && (n = !0, r = e.substr(1)), t.indexOf(o.default.compareVersions(i, r, n)) > -1;
            }, t.isOS = function (e) {
              return this.getOSName(!0) === String(e).toLowerCase();
            }, t.isPlatform = function (e) {
              return this.getPlatformType(!0) === String(e).toLowerCase();
            }, t.isEngine = function (e) {
              return this.getEngineName(!0) === String(e).toLowerCase();
            }, t.is = function (e, t) {
              return void 0 === t && (t = !1), this.isBrowser(e, t) || this.isOS(e) || this.isPlatform(e);
            }, t.some = function (e) {
              var t = this;
              return void 0 === e && (e = []), e.some(function (e) {
                return t.is(e);
              });
            }, e;
          }();
          t.default = d, e.exports = t.default;
        },
        92: function _(e, t, r) {
          t.__esModule = !0, t.default = void 0;
          var n,
            i = (n = r(17)) && n.__esModule ? n : {
              default: n
            };
          var s = /version\/(\d+(\.?_?\d+)+)/i,
            a = [{
              test: [/googlebot/i],
              describe: function describe(e) {
                var t = {
                    name: "Googlebot"
                  },
                  r = i.default.getFirstMatch(/googlebot\/(\d+(\.\d+))/i, e) || i.default.getFirstMatch(s, e);
                return r && (t.version = r), t;
              }
            }, {
              test: [/opera/i],
              describe: function describe(e) {
                var t = {
                    name: "Opera"
                  },
                  r = i.default.getFirstMatch(s, e) || i.default.getFirstMatch(/(?:opera)[\s/](\d+(\.?_?\d+)+)/i, e);
                return r && (t.version = r), t;
              }
            }, {
              test: [/opr\/|opios/i],
              describe: function describe(e) {
                var t = {
                    name: "Opera"
                  },
                  r = i.default.getFirstMatch(/(?:opr|opios)[\s/](\S+)/i, e) || i.default.getFirstMatch(s, e);
                return r && (t.version = r), t;
              }
            }, {
              test: [/SamsungBrowser/i],
              describe: function describe(e) {
                var t = {
                    name: "Samsung Internet for Android"
                  },
                  r = i.default.getFirstMatch(s, e) || i.default.getFirstMatch(/(?:SamsungBrowser)[\s/](\d+(\.?_?\d+)+)/i, e);
                return r && (t.version = r), t;
              }
            }, {
              test: [/Whale/i],
              describe: function describe(e) {
                var t = {
                    name: "NAVER Whale Browser"
                  },
                  r = i.default.getFirstMatch(s, e) || i.default.getFirstMatch(/(?:whale)[\s/](\d+(?:\.\d+)+)/i, e);
                return r && (t.version = r), t;
              }
            }, {
              test: [/MZBrowser/i],
              describe: function describe(e) {
                var t = {
                    name: "MZ Browser"
                  },
                  r = i.default.getFirstMatch(/(?:MZBrowser)[\s/](\d+(?:\.\d+)+)/i, e) || i.default.getFirstMatch(s, e);
                return r && (t.version = r), t;
              }
            }, {
              test: [/focus/i],
              describe: function describe(e) {
                var t = {
                    name: "Focus"
                  },
                  r = i.default.getFirstMatch(/(?:focus)[\s/](\d+(?:\.\d+)+)/i, e) || i.default.getFirstMatch(s, e);
                return r && (t.version = r), t;
              }
            }, {
              test: [/swing/i],
              describe: function describe(e) {
                var t = {
                    name: "Swing"
                  },
                  r = i.default.getFirstMatch(/(?:swing)[\s/](\d+(?:\.\d+)+)/i, e) || i.default.getFirstMatch(s, e);
                return r && (t.version = r), t;
              }
            }, {
              test: [/coast/i],
              describe: function describe(e) {
                var t = {
                    name: "Opera Coast"
                  },
                  r = i.default.getFirstMatch(s, e) || i.default.getFirstMatch(/(?:coast)[\s/](\d+(\.?_?\d+)+)/i, e);
                return r && (t.version = r), t;
              }
            }, {
              test: [/opt\/\d+(?:.?_?\d+)+/i],
              describe: function describe(e) {
                var t = {
                    name: "Opera Touch"
                  },
                  r = i.default.getFirstMatch(/(?:opt)[\s/](\d+(\.?_?\d+)+)/i, e) || i.default.getFirstMatch(s, e);
                return r && (t.version = r), t;
              }
            }, {
              test: [/yabrowser/i],
              describe: function describe(e) {
                var t = {
                    name: "Yandex Browser"
                  },
                  r = i.default.getFirstMatch(/(?:yabrowser)[\s/](\d+(\.?_?\d+)+)/i, e) || i.default.getFirstMatch(s, e);
                return r && (t.version = r), t;
              }
            }, {
              test: [/ucbrowser/i],
              describe: function describe(e) {
                var t = {
                    name: "UC Browser"
                  },
                  r = i.default.getFirstMatch(s, e) || i.default.getFirstMatch(/(?:ucbrowser)[\s/](\d+(\.?_?\d+)+)/i, e);
                return r && (t.version = r), t;
              }
            }, {
              test: [/Maxthon|mxios/i],
              describe: function describe(e) {
                var t = {
                    name: "Maxthon"
                  },
                  r = i.default.getFirstMatch(s, e) || i.default.getFirstMatch(/(?:Maxthon|mxios)[\s/](\d+(\.?_?\d+)+)/i, e);
                return r && (t.version = r), t;
              }
            }, {
              test: [/epiphany/i],
              describe: function describe(e) {
                var t = {
                    name: "Epiphany"
                  },
                  r = i.default.getFirstMatch(s, e) || i.default.getFirstMatch(/(?:epiphany)[\s/](\d+(\.?_?\d+)+)/i, e);
                return r && (t.version = r), t;
              }
            }, {
              test: [/puffin/i],
              describe: function describe(e) {
                var t = {
                    name: "Puffin"
                  },
                  r = i.default.getFirstMatch(s, e) || i.default.getFirstMatch(/(?:puffin)[\s/](\d+(\.?_?\d+)+)/i, e);
                return r && (t.version = r), t;
              }
            }, {
              test: [/sleipnir/i],
              describe: function describe(e) {
                var t = {
                    name: "Sleipnir"
                  },
                  r = i.default.getFirstMatch(s, e) || i.default.getFirstMatch(/(?:sleipnir)[\s/](\d+(\.?_?\d+)+)/i, e);
                return r && (t.version = r), t;
              }
            }, {
              test: [/k-meleon/i],
              describe: function describe(e) {
                var t = {
                    name: "K-Meleon"
                  },
                  r = i.default.getFirstMatch(s, e) || i.default.getFirstMatch(/(?:k-meleon)[\s/](\d+(\.?_?\d+)+)/i, e);
                return r && (t.version = r), t;
              }
            }, {
              test: [/micromessenger/i],
              describe: function describe(e) {
                var t = {
                    name: "WeChat"
                  },
                  r = i.default.getFirstMatch(/(?:micromessenger)[\s/](\d+(\.?_?\d+)+)/i, e) || i.default.getFirstMatch(s, e);
                return r && (t.version = r), t;
              }
            }, {
              test: [/qqbrowser/i],
              describe: function describe(e) {
                var t = {
                    name: /qqbrowserlite/i.test(e) ? "QQ Browser Lite" : "QQ Browser"
                  },
                  r = i.default.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\d+(\.?_?\d+)+)/i, e) || i.default.getFirstMatch(s, e);
                return r && (t.version = r), t;
              }
            }, {
              test: [/msie|trident/i],
              describe: function describe(e) {
                var t = {
                    name: "Internet Explorer"
                  },
                  r = i.default.getFirstMatch(/(?:msie |rv:)(\d+(\.?_?\d+)+)/i, e);
                return r && (t.version = r), t;
              }
            }, {
              test: [/\sedg\//i],
              describe: function describe(e) {
                var t = {
                    name: "Microsoft Edge"
                  },
                  r = i.default.getFirstMatch(/\sedg\/(\d+(\.?_?\d+)+)/i, e);
                return r && (t.version = r), t;
              }
            }, {
              test: [/edg([ea]|ios)/i],
              describe: function describe(e) {
                var t = {
                    name: "Microsoft Edge"
                  },
                  r = i.default.getSecondMatch(/edg([ea]|ios)\/(\d+(\.?_?\d+)+)/i, e);
                return r && (t.version = r), t;
              }
            }, {
              test: [/vivaldi/i],
              describe: function describe(e) {
                var t = {
                    name: "Vivaldi"
                  },
                  r = i.default.getFirstMatch(/vivaldi\/(\d+(\.?_?\d+)+)/i, e);
                return r && (t.version = r), t;
              }
            }, {
              test: [/seamonkey/i],
              describe: function describe(e) {
                var t = {
                    name: "SeaMonkey"
                  },
                  r = i.default.getFirstMatch(/seamonkey\/(\d+(\.?_?\d+)+)/i, e);
                return r && (t.version = r), t;
              }
            }, {
              test: [/sailfish/i],
              describe: function describe(e) {
                var t = {
                    name: "Sailfish"
                  },
                  r = i.default.getFirstMatch(/sailfish\s?browser\/(\d+(\.\d+)?)/i, e);
                return r && (t.version = r), t;
              }
            }, {
              test: [/silk/i],
              describe: function describe(e) {
                var t = {
                    name: "Amazon Silk"
                  },
                  r = i.default.getFirstMatch(/silk\/(\d+(\.?_?\d+)+)/i, e);
                return r && (t.version = r), t;
              }
            }, {
              test: [/phantom/i],
              describe: function describe(e) {
                var t = {
                    name: "PhantomJS"
                  },
                  r = i.default.getFirstMatch(/phantomjs\/(\d+(\.?_?\d+)+)/i, e);
                return r && (t.version = r), t;
              }
            }, {
              test: [/slimerjs/i],
              describe: function describe(e) {
                var t = {
                    name: "SlimerJS"
                  },
                  r = i.default.getFirstMatch(/slimerjs\/(\d+(\.?_?\d+)+)/i, e);
                return r && (t.version = r), t;
              }
            }, {
              test: [/blackberry|\bbb\d+/i, /rim\stablet/i],
              describe: function describe(e) {
                var t = {
                    name: "BlackBerry"
                  },
                  r = i.default.getFirstMatch(s, e) || i.default.getFirstMatch(/blackberry[\d]+\/(\d+(\.?_?\d+)+)/i, e);
                return r && (t.version = r), t;
              }
            }, {
              test: [/(web|hpw)[o0]s/i],
              describe: function describe(e) {
                var t = {
                    name: "WebOS Browser"
                  },
                  r = i.default.getFirstMatch(s, e) || i.default.getFirstMatch(/w(?:eb)?[o0]sbrowser\/(\d+(\.?_?\d+)+)/i, e);
                return r && (t.version = r), t;
              }
            }, {
              test: [/bada/i],
              describe: function describe(e) {
                var t = {
                    name: "Bada"
                  },
                  r = i.default.getFirstMatch(/dolfin\/(\d+(\.?_?\d+)+)/i, e);
                return r && (t.version = r), t;
              }
            }, {
              test: [/tizen/i],
              describe: function describe(e) {
                var t = {
                    name: "Tizen"
                  },
                  r = i.default.getFirstMatch(/(?:tizen\s?)?browser\/(\d+(\.?_?\d+)+)/i, e) || i.default.getFirstMatch(s, e);
                return r && (t.version = r), t;
              }
            }, {
              test: [/qupzilla/i],
              describe: function describe(e) {
                var t = {
                    name: "QupZilla"
                  },
                  r = i.default.getFirstMatch(/(?:qupzilla)[\s/](\d+(\.?_?\d+)+)/i, e) || i.default.getFirstMatch(s, e);
                return r && (t.version = r), t;
              }
            }, {
              test: [/firefox|iceweasel|fxios/i],
              describe: function describe(e) {
                var t = {
                    name: "Firefox"
                  },
                  r = i.default.getFirstMatch(/(?:firefox|iceweasel|fxios)[\s/](\d+(\.?_?\d+)+)/i, e);
                return r && (t.version = r), t;
              }
            }, {
              test: [/electron/i],
              describe: function describe(e) {
                var t = {
                    name: "Electron"
                  },
                  r = i.default.getFirstMatch(/(?:electron)\/(\d+(\.?_?\d+)+)/i, e);
                return r && (t.version = r), t;
              }
            }, {
              test: [/MiuiBrowser/i],
              describe: function describe(e) {
                var t = {
                    name: "Miui"
                  },
                  r = i.default.getFirstMatch(/(?:MiuiBrowser)[\s/](\d+(\.?_?\d+)+)/i, e);
                return r && (t.version = r), t;
              }
            }, {
              test: [/chromium/i],
              describe: function describe(e) {
                var t = {
                    name: "Chromium"
                  },
                  r = i.default.getFirstMatch(/(?:chromium)[\s/](\d+(\.?_?\d+)+)/i, e) || i.default.getFirstMatch(s, e);
                return r && (t.version = r), t;
              }
            }, {
              test: [/chrome|crios|crmo/i],
              describe: function describe(e) {
                var t = {
                    name: "Chrome"
                  },
                  r = i.default.getFirstMatch(/(?:chrome|crios|crmo)\/(\d+(\.?_?\d+)+)/i, e);
                return r && (t.version = r), t;
              }
            }, {
              test: [/GSA/i],
              describe: function describe(e) {
                var t = {
                    name: "Google Search"
                  },
                  r = i.default.getFirstMatch(/(?:GSA)\/(\d+(\.?_?\d+)+)/i, e);
                return r && (t.version = r), t;
              }
            }, {
              test: function test(e) {
                var t = !e.test(/like android/i),
                  r = e.test(/android/i);
                return t && r;
              },
              describe: function describe(e) {
                var t = {
                    name: "Android Browser"
                  },
                  r = i.default.getFirstMatch(s, e);
                return r && (t.version = r), t;
              }
            }, {
              test: [/playstation 4/i],
              describe: function describe(e) {
                var t = {
                    name: "PlayStation 4"
                  },
                  r = i.default.getFirstMatch(s, e);
                return r && (t.version = r), t;
              }
            }, {
              test: [/safari|applewebkit/i],
              describe: function describe(e) {
                var t = {
                    name: "Safari"
                  },
                  r = i.default.getFirstMatch(s, e);
                return r && (t.version = r), t;
              }
            }, {
              test: [/.*/i],
              describe: function describe(e) {
                var t = -1 !== e.search("\\(") ? /^(.*)\/(.*)[ \t]\((.*)/ : /^(.*)\/(.*) /;
                return {
                  name: i.default.getFirstMatch(t, e),
                  version: i.default.getSecondMatch(t, e)
                };
              }
            }];
          t.default = a, e.exports = t.default;
        },
        93: function _(e, t, r) {
          t.__esModule = !0, t.default = void 0;
          var n,
            i = (n = r(17)) && n.__esModule ? n : {
              default: n
            },
            s = r(18);
          var a = [{
            test: [/Roku\/DVP/],
            describe: function describe(e) {
              var t = i.default.getFirstMatch(/Roku\/DVP-(\d+\.\d+)/i, e);
              return {
                name: s.OS_MAP.Roku,
                version: t
              };
            }
          }, {
            test: [/windows phone/i],
            describe: function describe(e) {
              var t = i.default.getFirstMatch(/windows phone (?:os)?\s?(\d+(\.\d+)*)/i, e);
              return {
                name: s.OS_MAP.WindowsPhone,
                version: t
              };
            }
          }, {
            test: [/windows /i],
            describe: function describe(e) {
              var t = i.default.getFirstMatch(/Windows ((NT|XP)( \d\d?.\d)?)/i, e),
                r = i.default.getWindowsVersionName(t);
              return {
                name: s.OS_MAP.Windows,
                version: t,
                versionName: r
              };
            }
          }, {
            test: [/Macintosh(.*?) FxiOS(.*?)\//],
            describe: function describe(e) {
              var t = {
                  name: s.OS_MAP.iOS
                },
                r = i.default.getSecondMatch(/(Version\/)(\d[\d.]+)/, e);
              return r && (t.version = r), t;
            }
          }, {
            test: [/macintosh/i],
            describe: function describe(e) {
              var t = i.default.getFirstMatch(/mac os x (\d+(\.?_?\d+)+)/i, e).replace(/[_\s]/g, "."),
                r = i.default.getMacOSVersionName(t),
                n = {
                  name: s.OS_MAP.MacOS,
                  version: t
                };
              return r && (n.versionName = r), n;
            }
          }, {
            test: [/(ipod|iphone|ipad)/i],
            describe: function describe(e) {
              var t = i.default.getFirstMatch(/os (\d+([_\s]\d+)*) like mac os x/i, e).replace(/[_\s]/g, ".");
              return {
                name: s.OS_MAP.iOS,
                version: t
              };
            }
          }, {
            test: function test(e) {
              var t = !e.test(/like android/i),
                r = e.test(/android/i);
              return t && r;
            },
            describe: function describe(e) {
              var t = i.default.getFirstMatch(/android[\s/-](\d+(\.\d+)*)/i, e),
                r = i.default.getAndroidVersionName(t),
                n = {
                  name: s.OS_MAP.Android,
                  version: t
                };
              return r && (n.versionName = r), n;
            }
          }, {
            test: [/(web|hpw)[o0]s/i],
            describe: function describe(e) {
              var t = i.default.getFirstMatch(/(?:web|hpw)[o0]s\/(\d+(\.\d+)*)/i, e),
                r = {
                  name: s.OS_MAP.WebOS
                };
              return t && t.length && (r.version = t), r;
            }
          }, {
            test: [/blackberry|\bbb\d+/i, /rim\stablet/i],
            describe: function describe(e) {
              var t = i.default.getFirstMatch(/rim\stablet\sos\s(\d+(\.\d+)*)/i, e) || i.default.getFirstMatch(/blackberry\d+\/(\d+([_\s]\d+)*)/i, e) || i.default.getFirstMatch(/\bbb(\d+)/i, e);
              return {
                name: s.OS_MAP.BlackBerry,
                version: t
              };
            }
          }, {
            test: [/bada/i],
            describe: function describe(e) {
              var t = i.default.getFirstMatch(/bada\/(\d+(\.\d+)*)/i, e);
              return {
                name: s.OS_MAP.Bada,
                version: t
              };
            }
          }, {
            test: [/tizen/i],
            describe: function describe(e) {
              var t = i.default.getFirstMatch(/tizen[/\s](\d+(\.\d+)*)/i, e);
              return {
                name: s.OS_MAP.Tizen,
                version: t
              };
            }
          }, {
            test: [/linux/i],
            describe: function describe() {
              return {
                name: s.OS_MAP.Linux
              };
            }
          }, {
            test: [/CrOS/],
            describe: function describe() {
              return {
                name: s.OS_MAP.ChromeOS
              };
            }
          }, {
            test: [/PlayStation 4/],
            describe: function describe(e) {
              var t = i.default.getFirstMatch(/PlayStation 4[/\s](\d+(\.\d+)*)/i, e);
              return {
                name: s.OS_MAP.PlayStation4,
                version: t
              };
            }
          }];
          t.default = a, e.exports = t.default;
        },
        94: function _(e, t, r) {
          t.__esModule = !0, t.default = void 0;
          var n,
            i = (n = r(17)) && n.__esModule ? n : {
              default: n
            },
            s = r(18);
          var a = [{
            test: [/googlebot/i],
            describe: function describe() {
              return {
                type: "bot",
                vendor: "Google"
              };
            }
          }, {
            test: [/huawei/i],
            describe: function describe(e) {
              var t = i.default.getFirstMatch(/(can-l01)/i, e) && "Nova",
                r = {
                  type: s.PLATFORMS_MAP.mobile,
                  vendor: "Huawei"
                };
              return t && (r.model = t), r;
            }
          }, {
            test: [/nexus\s*(?:7|8|9|10).*/i],
            describe: function describe() {
              return {
                type: s.PLATFORMS_MAP.tablet,
                vendor: "Nexus"
              };
            }
          }, {
            test: [/ipad/i],
            describe: function describe() {
              return {
                type: s.PLATFORMS_MAP.tablet,
                vendor: "Apple",
                model: "iPad"
              };
            }
          }, {
            test: [/Macintosh(.*?) FxiOS(.*?)\//],
            describe: function describe() {
              return {
                type: s.PLATFORMS_MAP.tablet,
                vendor: "Apple",
                model: "iPad"
              };
            }
          }, {
            test: [/kftt build/i],
            describe: function describe() {
              return {
                type: s.PLATFORMS_MAP.tablet,
                vendor: "Amazon",
                model: "Kindle Fire HD 7"
              };
            }
          }, {
            test: [/silk/i],
            describe: function describe() {
              return {
                type: s.PLATFORMS_MAP.tablet,
                vendor: "Amazon"
              };
            }
          }, {
            test: [/tablet(?! pc)/i],
            describe: function describe() {
              return {
                type: s.PLATFORMS_MAP.tablet
              };
            }
          }, {
            test: function test(e) {
              var t = e.test(/ipod|iphone/i),
                r = e.test(/like (ipod|iphone)/i);
              return t && !r;
            },
            describe: function describe(e) {
              var t = i.default.getFirstMatch(/(ipod|iphone)/i, e);
              return {
                type: s.PLATFORMS_MAP.mobile,
                vendor: "Apple",
                model: t
              };
            }
          }, {
            test: [/nexus\s*[0-6].*/i, /galaxy nexus/i],
            describe: function describe() {
              return {
                type: s.PLATFORMS_MAP.mobile,
                vendor: "Nexus"
              };
            }
          }, {
            test: [/[^-]mobi/i],
            describe: function describe() {
              return {
                type: s.PLATFORMS_MAP.mobile
              };
            }
          }, {
            test: function test(e) {
              return "blackberry" === e.getBrowserName(!0);
            },
            describe: function describe() {
              return {
                type: s.PLATFORMS_MAP.mobile,
                vendor: "BlackBerry"
              };
            }
          }, {
            test: function test(e) {
              return "bada" === e.getBrowserName(!0);
            },
            describe: function describe() {
              return {
                type: s.PLATFORMS_MAP.mobile
              };
            }
          }, {
            test: function test(e) {
              return "windows phone" === e.getBrowserName();
            },
            describe: function describe() {
              return {
                type: s.PLATFORMS_MAP.mobile,
                vendor: "Microsoft"
              };
            }
          }, {
            test: function test(e) {
              var t = Number(String(e.getOSVersion()).split(".")[0]);
              return "android" === e.getOSName(!0) && t >= 3;
            },
            describe: function describe() {
              return {
                type: s.PLATFORMS_MAP.tablet
              };
            }
          }, {
            test: function test(e) {
              return "android" === e.getOSName(!0);
            },
            describe: function describe() {
              return {
                type: s.PLATFORMS_MAP.mobile
              };
            }
          }, {
            test: function test(e) {
              return "macos" === e.getOSName(!0);
            },
            describe: function describe() {
              return {
                type: s.PLATFORMS_MAP.desktop,
                vendor: "Apple"
              };
            }
          }, {
            test: function test(e) {
              return "windows" === e.getOSName(!0);
            },
            describe: function describe() {
              return {
                type: s.PLATFORMS_MAP.desktop
              };
            }
          }, {
            test: function test(e) {
              return "linux" === e.getOSName(!0);
            },
            describe: function describe() {
              return {
                type: s.PLATFORMS_MAP.desktop
              };
            }
          }, {
            test: function test(e) {
              return "playstation 4" === e.getOSName(!0);
            },
            describe: function describe() {
              return {
                type: s.PLATFORMS_MAP.tv
              };
            }
          }, {
            test: function test(e) {
              return "roku" === e.getOSName(!0);
            },
            describe: function describe() {
              return {
                type: s.PLATFORMS_MAP.tv
              };
            }
          }];
          t.default = a, e.exports = t.default;
        },
        95: function _(e, t, r) {
          t.__esModule = !0, t.default = void 0;
          var n,
            i = (n = r(17)) && n.__esModule ? n : {
              default: n
            },
            s = r(18);
          var a = [{
            test: function test(e) {
              return "microsoft edge" === e.getBrowserName(!0);
            },
            describe: function describe(e) {
              if (/\sedg\//i.test(e)) return {
                name: s.ENGINE_MAP.Blink
              };
              var t = i.default.getFirstMatch(/edge\/(\d+(\.?_?\d+)+)/i, e);
              return {
                name: s.ENGINE_MAP.EdgeHTML,
                version: t
              };
            }
          }, {
            test: [/trident/i],
            describe: function describe(e) {
              var t = {
                  name: s.ENGINE_MAP.Trident
                },
                r = i.default.getFirstMatch(/trident\/(\d+(\.?_?\d+)+)/i, e);
              return r && (t.version = r), t;
            }
          }, {
            test: function test(e) {
              return e.test(/presto/i);
            },
            describe: function describe(e) {
              var t = {
                  name: s.ENGINE_MAP.Presto
                },
                r = i.default.getFirstMatch(/presto\/(\d+(\.?_?\d+)+)/i, e);
              return r && (t.version = r), t;
            }
          }, {
            test: function test(e) {
              var t = e.test(/gecko/i),
                r = e.test(/like gecko/i);
              return t && !r;
            },
            describe: function describe(e) {
              var t = {
                  name: s.ENGINE_MAP.Gecko
                },
                r = i.default.getFirstMatch(/gecko\/(\d+(\.?_?\d+)+)/i, e);
              return r && (t.version = r), t;
            }
          }, {
            test: [/(apple)?webkit\/537\.36/i],
            describe: function describe() {
              return {
                name: s.ENGINE_MAP.Blink
              };
            }
          }, {
            test: [/(apple)?webkit/i],
            describe: function describe(e) {
              var t = {
                  name: s.ENGINE_MAP.WebKit
                },
                r = i.default.getFirstMatch(/webkit\/(\d+(\.?_?\d+)+)/i, e);
              return r && (t.version = r), t;
            }
          }];
          t.default = a, e.exports = t.default;
        }
      });
    });
  })(es5);
  var Bowser = /*@__PURE__*/getDefaultExportFromCjs(es5.exports);
  function getBrowserDetails() {
    var browser = Bowser.getParser(window.navigator.userAgent);
    return browser.getBrowser();
  }
  var logger$1 = {
    exports: {}
  };

  /*!
   * js-logger - http://github.com/jonnyreeves/js-logger
   * Jonny Reeves, http://jonnyreeves.co.uk/
   * js-logger may be freely distributed under the MIT license.
   */

  (function (module) {
    (function (global) {
      // Top level module for the global, static logger instance.
      var Logger = {};

      // For those that are at home that are keeping score.
      Logger.VERSION = "1.6.1";

      // Function which handles all incoming log messages.
      var logHandler;

      // Map of ContextualLogger instances by name; used by Logger.get() to return the same named instance.
      var contextualLoggersByNameMap = {};

      // Polyfill for ES5's Function.bind.
      var bind = function bind(scope, func) {
        return function () {
          return func.apply(scope, arguments);
        };
      };

      // Super exciting object merger-matron 9000 adding another 100 bytes to your download.
      var merge = function merge() {
        var args = arguments,
          target = args[0],
          key,
          i;
        for (i = 1; i < args.length; i++) {
          for (key in args[i]) {
            if (!(key in target) && args[i].hasOwnProperty(key)) {
              target[key] = args[i][key];
            }
          }
        }
        return target;
      };

      // Helper to define a logging level object; helps with optimisation.
      var defineLogLevel = function defineLogLevel(value, name) {
        return {
          value: value,
          name: name
        };
      };

      // Predefined logging levels.
      Logger.TRACE = defineLogLevel(1, 'TRACE');
      Logger.DEBUG = defineLogLevel(2, 'DEBUG');
      Logger.INFO = defineLogLevel(3, 'INFO');
      Logger.TIME = defineLogLevel(4, 'TIME');
      Logger.WARN = defineLogLevel(5, 'WARN');
      Logger.ERROR = defineLogLevel(8, 'ERROR');
      Logger.OFF = defineLogLevel(99, 'OFF');

      // Inner class which performs the bulk of the work; ContextualLogger instances can be configured independently
      // of each other.
      var ContextualLogger = function ContextualLogger(defaultContext) {
        this.context = defaultContext;
        this.setLevel(defaultContext.filterLevel);
        this.log = this.info; // Convenience alias.
      };

      ContextualLogger.prototype = {
        // Changes the current logging level for the logging instance.
        setLevel: function setLevel(newLevel) {
          // Ensure the supplied Level object looks valid.
          if (newLevel && "value" in newLevel) {
            this.context.filterLevel = newLevel;
          }
        },
        // Gets the current logging level for the logging instance
        getLevel: function getLevel() {
          return this.context.filterLevel;
        },
        // Is the logger configured to output messages at the supplied level?
        enabledFor: function enabledFor(lvl) {
          var filterLevel = this.context.filterLevel;
          return lvl.value >= filterLevel.value;
        },
        trace: function trace() {
          this.invoke(Logger.TRACE, arguments);
        },
        debug: function debug() {
          this.invoke(Logger.DEBUG, arguments);
        },
        info: function info() {
          this.invoke(Logger.INFO, arguments);
        },
        warn: function warn() {
          this.invoke(Logger.WARN, arguments);
        },
        error: function error() {
          this.invoke(Logger.ERROR, arguments);
        },
        time: function time(label) {
          if (typeof label === 'string' && label.length > 0) {
            this.invoke(Logger.TIME, [label, 'start']);
          }
        },
        timeEnd: function timeEnd(label) {
          if (typeof label === 'string' && label.length > 0) {
            this.invoke(Logger.TIME, [label, 'end']);
          }
        },
        // Invokes the logger callback if it's not being filtered.
        invoke: function invoke(level, msgArgs) {
          if (logHandler && this.enabledFor(level)) {
            logHandler(msgArgs, merge({
              level: level
            }, this.context));
          }
        }
      };

      // Protected instance which all calls to the to level `Logger` module will be routed through.
      var globalLogger = new ContextualLogger({
        filterLevel: Logger.OFF
      });

      // Configure the global Logger instance.
      (function () {
        // Shortcut for optimisers.
        var L = Logger;
        L.enabledFor = bind(globalLogger, globalLogger.enabledFor);
        L.trace = bind(globalLogger, globalLogger.trace);
        L.debug = bind(globalLogger, globalLogger.debug);
        L.time = bind(globalLogger, globalLogger.time);
        L.timeEnd = bind(globalLogger, globalLogger.timeEnd);
        L.info = bind(globalLogger, globalLogger.info);
        L.warn = bind(globalLogger, globalLogger.warn);
        L.error = bind(globalLogger, globalLogger.error);

        // Don't forget the convenience alias!
        L.log = L.info;
      })();

      // Set the global logging handler.  The supplied function should expect two arguments, the first being an arguments
      // object with the supplied log messages and the second being a context object which contains a hash of stateful
      // parameters which the logging function can consume.
      Logger.setHandler = function (func) {
        logHandler = func;
      };

      // Sets the global logging filter level which applies to *all* previously registered, and future Logger instances.
      // (note that named loggers (retrieved via `Logger.get`) can be configured independently if required).
      Logger.setLevel = function (level) {
        // Set the globalLogger's level.
        globalLogger.setLevel(level);

        // Apply this level to all registered contextual loggers.
        for (var key in contextualLoggersByNameMap) {
          if (contextualLoggersByNameMap.hasOwnProperty(key)) {
            contextualLoggersByNameMap[key].setLevel(level);
          }
        }
      };

      // Gets the global logging filter level
      Logger.getLevel = function () {
        return globalLogger.getLevel();
      };

      // Retrieve a ContextualLogger instance.  Note that named loggers automatically inherit the global logger's level,
      // default context and log handler.
      Logger.get = function (name) {
        // All logger instances are cached so they can be configured ahead of use.
        return contextualLoggersByNameMap[name] || (contextualLoggersByNameMap[name] = new ContextualLogger(merge({
          name: name
        }, globalLogger.context)));
      };

      // CreateDefaultHandler returns a handler function which can be passed to `Logger.setHandler()` which will
      // write to the window's console object (if present); the optional options object can be used to customise the
      // formatter used to format each log message.
      Logger.createDefaultHandler = function (options) {
        options = options || {};
        options.formatter = options.formatter || function defaultMessageFormatter(messages, context) {
          // Prepend the logger's name to the log message for easy identification.
          if (context.name) {
            messages.unshift("[" + context.name + "]");
          }
        };

        // Map of timestamps by timer labels used to track `#time` and `#timeEnd()` invocations in environments
        // that don't offer a native console method.
        var timerStartTimeByLabelMap = {};

        // Support for IE8+ (and other, slightly more sane environments)
        var invokeConsoleMethod = function invokeConsoleMethod(hdlr, messages) {
          Function.prototype.apply.call(hdlr, console, messages);
        };

        // Check for the presence of a logger.
        if (typeof console === "undefined") {
          return function () {/* no console */};
        }
        return function (messages, context) {
          // Convert arguments object to Array.
          messages = Array.prototype.slice.call(messages);
          var hdlr = console.log;
          var timerLabel;
          if (context.level === Logger.TIME) {
            timerLabel = (context.name ? '[' + context.name + '] ' : '') + messages[0];
            if (messages[1] === 'start') {
              if (console.time) {
                console.time(timerLabel);
              } else {
                timerStartTimeByLabelMap[timerLabel] = new Date().getTime();
              }
            } else {
              if (console.timeEnd) {
                console.timeEnd(timerLabel);
              } else {
                invokeConsoleMethod(hdlr, [timerLabel + ': ' + (new Date().getTime() - timerStartTimeByLabelMap[timerLabel]) + 'ms']);
              }
            }
          } else {
            // Delegate through to custom warn/error loggers if present on the console.
            if (context.level === Logger.WARN && console.warn) {
              hdlr = console.warn;
            } else if (context.level === Logger.ERROR && console.error) {
              hdlr = console.error;
            } else if (context.level === Logger.INFO && console.info) {
              hdlr = console.info;
            } else if (context.level === Logger.DEBUG && console.debug) {
              hdlr = console.debug;
            } else if (context.level === Logger.TRACE && console.trace) {
              hdlr = console.trace;
            }
            options.formatter(messages, context);
            invokeConsoleMethod(hdlr, messages);
          }
        };
      };

      // Configure and example a Default implementation which writes to the `window.console` (if present).  The
      // `options` hash can be used to configure the default logLevel and provide a custom message formatter.
      Logger.useDefaults = function (options) {
        Logger.setLevel(options && options.defaultLevel || Logger.DEBUG);
        Logger.setHandler(Logger.createDefaultHandler(options));
      };

      // Createa an alias to useDefaults to avoid reaking a react-hooks rule.
      Logger.setDefaults = Logger.useDefaults;

      // Export to popular environments boilerplate.
      if (module.exports) {
        module.exports = Logger;
      } else {
        Logger._prevLogger = global.Logger;
        Logger.noConflict = function () {
          global.Logger = Logger._prevLogger;
          return Logger;
        };
        global.Logger = Logger;
      }
    })(commonjsGlobal$3);
  })(logger$1);
  var Logger$3 = logger$1.exports;
  var DEFAULT_LOGGER_NAME = 'web-client-media-engine';
  var logger$4 = Logger$3.get(DEFAULT_LOGGER_NAME);
  logger$4.setLevel(Logger$3.DEBUG);
  function setLogHandler(logHandler) {
    Logger$3.setHandler(logHandler);
    Logger$1.setHandler(logHandler);
  }
  function toMediaStreamTrackKind(mediaType) {
    return [MediaType$1.VideoMain, MediaType$1.VideoSlides].includes(mediaType) ? MediaStreamTrackKind.Video : MediaStreamTrackKind.Audio;
  }
  function toMediaFamily(kind) {
    if (kind === MediaStreamTrackKind.Video) {
      return MediaFamily$1.Video;
    }
    return MediaFamily$1.Audio;
  }
  var MultistreamConnectionEventNames;
  (function (MultistreamConnectionEventNames) {
    MultistreamConnectionEventNames["VideoSourceCountUpdate"] = "video-source-count-update";
    MultistreamConnectionEventNames["AudioSourceCountUpdate"] = "audio-source-count-update";
    MultistreamConnectionEventNames["ActiveSpeakerNotification"] = "active-speaker-notification";
    MultistreamConnectionEventNames["ConnectionStateUpdate"] = "connection-state-update";
  })(MultistreamConnectionEventNames || (MultistreamConnectionEventNames = {}));
  var defaultMultistreamConnectionOptions = {
    floorControlledPresentation: false,
    disableSimulcast: getBrowserDetails().name === 'Firefox',
    streamSignalingMode: 'SSRC',
    bundlePolicy: 'max-compat',
    iceServers: undefined,
    disableContentSimulcast: true,
    enableMainAudio: true,
    enableMainVideo: true
  };
  class MultistreamConnection extends EventEmitter$5 {
    constructor() {
      var userOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var _a, _b;
      super();
      this.sendTransceivers = new Map();
      this.recvTransceivers = new Map();
      this.jmpSessions = new Map();
      this.pendingJmpTasks = [];
      this.metricsCallback = () => {};
      this.overuseUpdateCallback = () => {};
      this.customCodecParameters = new Map();
      this.midMap = new Map();
      this.currentMid = 0;
      this.options = Object.assign(Object.assign({}, defaultMultistreamConnectionOptions), userOptions);
      logger$4.info("Creating multistream connection with options ".concat(JSON.stringify(this.options)));
      this.initializePeerConnection();
      this.streamSignalerManager = new StreamSignalerManager(this.options.streamSignalingMode);
      this.overuseStateManager = new OveruseStateManager(overuseState => this.overuseUpdateCallback(overuseState));
      this.overuseStateManager.start();
      this.statsManager = new StatsManager(() => this.pc.getStats(), stats => this.preProcessStats(stats));
      var mainSceneId = generateSceneId();
      var videoMainEncodingOptions = this.getVideoEncodingOptions(MediaContent$1.Main);
      this.createSendTransceiver(MediaType$1.VideoMain, mainSceneId, videoMainEncodingOptions);
      this.createSendTransceiver(MediaType$1.AudioMain, mainSceneId);
      (_a = this.sendTransceivers.get(MediaType$1.VideoMain)) === null || _a === void 0 ? void 0 : _a.setActive(this.options.enableMainVideo);
      (_b = this.sendTransceivers.get(MediaType$1.AudioMain)) === null || _b === void 0 ? void 0 : _b.setActive(this.options.enableMainAudio);
      if (this.options.floorControlledPresentation) {
        var videoPresentationEncodingOptions = this.getVideoEncodingOptions(MediaContent$1.Slides);
        var contentSceneId = generateSceneId();
        this.createSendTransceiver(MediaType$1.VideoSlides, contentSceneId, videoPresentationEncodingOptions);
        this.createSendTransceiver(MediaType$1.AudioSlides, contentSceneId);
      }
    }
    addMid(mediaType) {
      var mid = this.currentMid++;
      var mids = this.midMap.get(mediaType) || [];
      mids.push("".concat(mid));
      this.midMap.set(mediaType, mids);
    }
    clearMids() {
      this.midMap = new Map();
      this.currentMid = 0;
    }
    initializePeerConnection() {
      var _a;
      (_a = this.pc) === null || _a === void 0 ? void 0 : _a.close();
      this.pc = new PeerConnection({
        iceServers: this.options.iceServers,
        bundlePolicy: this.options.bundlePolicy
      });
      this.pc.on(PeerConnection.Events.ConnectionStateChange, state => this.emit(MultistreamConnectionEventNames.ConnectionStateUpdate, state));
      this.attachMetricsObserver();
      this.createDataChannel();
    }
    getConnectionState() {
      return this.pc.getConnectionState();
    }
    getVideoEncodingOptions(content) {
      var enabledSimulcast = content === MediaContent$1.Main ? !this.options.disableSimulcast : !this.options.disableContentSimulcast;
      return enabledSimulcast ? [{
        scaleResolutionDownBy: 4,
        active: false
      }, {
        scaleResolutionDownBy: 2,
        active: false
      }, {
        active: false
      }] : [{
        active: false
      }];
    }
    createSendTransceiver(mediaType, sceneId, sendEncodingsOptions) {
      var rtcTransceiver;
      try {
        rtcTransceiver = this.pc.addTransceiver(toMediaStreamTrackKind(mediaType), {
          direction: 'sendrecv',
          sendEncodings: sendEncodingsOptions
        });
      } catch (e) {
        logger$4.error("addTransceiver failed due to : ".concat(e));
        throw e;
      }
      this.addMid(mediaType);
      var csi = generateCsi(getMediaFamily$1(mediaType), sceneId);
      this.sendTransceivers.set(mediaType, new SendOnlyTransceiver(rtcTransceiver, csi));
      this.createJmpSession(mediaType);
    }
    createJmpSession(mediaType) {
      var jmpSession = new JmpSession(getMediaFamily$1(mediaType), getMediaContent(mediaType));
      jmpSession.setTxCallback(msg => {
        var _a;
        if (((_a = this.dataChannel) === null || _a === void 0 ? void 0 : _a.readyState) !== 'open') {
          logger$4.error("DataChannel not created or not connected. Unable to send JMP message.");
          return;
        }
        logger$4.info("Sending JMP message: ".concat(msg));
        this.dataChannel.send(msg);
      });
      if (getMediaFamily$1(mediaType) === MediaFamily$1.Video) {
        var prevNumTotalSources = 0;
        var prevNumLiveSources = 0;
        jmpSession.on(JmpSessionEvents$1.SourceIndication, data => {
          data.sources.forEach(s => {
            var receiveSlot = this.getReceiveSlotById(s.id);
            if (!receiveSlot) {
              logger$4.warn("Got source indication for unknown receive slot: ".concat(s.id));
              return;
            }
            receiveSlot._updateSource(s.state, s.csi);
          });
          if (data.numTotalSources !== prevNumTotalSources || data.numLiveSources !== prevNumLiveSources) {
            prevNumTotalSources = data.numTotalSources;
            prevNumLiveSources = data.numLiveSources;
            this.emit(MultistreamConnectionEventNames.VideoSourceCountUpdate, data.numTotalSources, data.numLiveSources, getMediaContent(mediaType));
          }
        });
        jmpSession.on(JmpSessionEvents$1.ScrRequestReceived, data => {
          this.sendSourceWarnings(mediaType, data.requests);
          this.updateRequestedStreams(mediaType, data.requests);
        });
      }
      if (getMediaFamily$1(mediaType) === MediaFamily$1.Audio) {
        var _prevNumTotalSources = 0;
        var _prevNumLiveSources = 0;
        jmpSession.on(JmpSessionEvents$1.SourceIndication, data => {
          data.sources.forEach(s => {
            var receiveSlot = this.getReceiveSlotById(s.id);
            if (!receiveSlot) {
              logger$4.warn("Got source indication for unknown receive slot: ".concat(s.id));
              return;
            }
            receiveSlot._updateSource(s.state, s.csi);
          });
          if (data.numTotalSources !== _prevNumTotalSources || data.numLiveSources !== _prevNumLiveSources) {
            _prevNumTotalSources = data.numTotalSources;
            _prevNumLiveSources = data.numLiveSources;
            this.emit(MultistreamConnectionEventNames.AudioSourceCountUpdate, data.numTotalSources, data.numLiveSources, getMediaContent(mediaType));
          }
        });
        jmpSession.on(JmpSessionEvents$1.ActiveSpeaker, data => this.emit(MultistreamConnectionEventNames.ActiveSpeakerNotification, data));
        jmpSession.on(JmpSessionEvents$1.ScrRequestReceived, data => {
          this.updateRequestedStreams(mediaType, data.requests);
        });
      }
      this.jmpSessions.set(mediaType, jmpSession);
    }
    sendSourceWarnings(mediaType, requests) {
      var _a;
      if (getMediaFamily$1(mediaType) === MediaFamily$1.Video) {
        var sendTransceiver = this.getSendTransceiverOrThrow(mediaType);
        var signaler = this.streamSignalerManager.getEgressStreamSignalerOrThrow(sendTransceiver.mid);
        var activeSimulcastLayerNumber = ((_a = sendTransceiver.publishedTrack) === null || _a === void 0 ? void 0 : _a.getNumActiveSimulcastLayers()) || 0;
        var sourceWarnings = [];
        requests.forEach(_ref5 => {
          var {
            ids,
            policySpecificInfo
          } = _ref5;
          ids.forEach(id => {
            if (isValidReceiverSelectedInfo(policySpecificInfo) && sendTransceiver.csi !== policySpecificInfo.csi) {
              sourceWarnings.push({
                id,
                state: 'invalid source',
                csi: policySpecificInfo.csi
              });
            } else if (!signaler.getSenderIds().some(validId => compareStreamIds(id, validId))) {
              sourceWarnings.push({
                id,
                state: 'invalid source',
                csi: sendTransceiver.csi
              });
            } else if (signaler.getEncodingIndexForStreamId(id) > activeSimulcastLayerNumber) {
              sourceWarnings.push({
                id,
                state: 'no source',
                csi: sendTransceiver.csi
              });
            }
          });
        });
        if (sourceWarnings.length > 0) {
          var {
            publishedTrack
          } = sendTransceiver;
          var live = !!publishedTrack && publishedTrack.published && !publishedTrack.muted;
          this.sendSourceIndication(mediaType, +live, sourceWarnings);
        }
      }
    }
    updateRequestedStreams(mediaType, requests) {
      var sendTransceiver = this.getSendTransceiverOrThrow(mediaType);
      var signaler = this.streamSignalerManager.getEgressStreamSignalerOrThrow(sendTransceiver.mid);
      var requestedIdEncodingParamsMap = new Map();
      var rsRequests = requests.filter(r => isValidReceiverSelectedInfo(r.policySpecificInfo));
      if (rsRequests.length !== requests.length) {
        logger$4.warn('Ignoring non-receiver-selected requests');
      }
      rsRequests.forEach(_ref6 => {
        var {
          ids,
          policySpecificInfo,
          codecInfos,
          maxPayloadBitsPerSecond
        } = _ref6;
        var _a;
        if (ids.length > 1) {
          throw new Error("More than a single ID being unexpected/invalid ".concat(ids));
        }
        if (ids.length === 0) {
          return;
        }
        if (sendTransceiver.csi !== policySpecificInfo.csi) {
          logger$4.warn('csi in the scr request does not match');
          return;
        }
        var id = ids[0];
        var codecInfo = codecInfos[0];
        var streamIdsMatched = signaler.getSenderIds().some(validId => compareStreamIds(id, validId));
        if (streamIdsMatched) {
          var encodingIndex = signaler.getEncodingIndexForStreamId(id);
          if (encodingIndex !== -1) {
            requestedIdEncodingParamsMap.set(encodingIndex, {
              scaleDownRatio: sendTransceiver.getScaleDownRatio((_a = codecInfo === null || codecInfo === void 0 ? void 0 : codecInfo.h264) === null || _a === void 0 ? void 0 : _a.maxFs),
              maxPayloadBitsPerSecond
            });
          } else {
            logger$4.warn("".concat(mediaType, ": Unable to get encoding index for stream ID: ").concat(JSON.stringify(id)));
          }
        } else {
          logger$4.warn("".concat(mediaType, ": Unable to find matching stream ID for requested ID: ").concat(JSON.stringify(id)));
        }
      });
      sendTransceiver.setTrackRequested(requestedIdEncodingParamsMap.size > 0);
      if (getMediaFamily$1(mediaType) === MediaFamily$1.Video) {
        sendTransceiver.updateSimulcastStreamStates(requestedIdEncodingParamsMap);
      }
    }
    createDataChannel() {
      var dataChannel = this.pc.createDataChannel('datachannel', {});
      dataChannel.onopen = e => {
        logger$4.info('DataChannel opened: ', e);
        this.sendTransceivers.forEach((transceiver, mediaType) => {
          var track = transceiver.publishedTrack;
          if (track) {
            if (getMediaFamily$1(mediaType) === MediaFamily$1.Audio) {
              this.sendSourceIndication(mediaType, +!track.muted);
            } else {
              var signaler = this.streamSignalerManager.getEgressStreamSignalerOrThrow(transceiver.mid);
              var state = track.muted ? 'avatar' : 'live';
              var sources = signaler.getSenderIds().map(id => ({
                id,
                state,
                csi: transceiver.csi
              }));
              this.sendSourceIndication(mediaType, +!track.muted, sources);
            }
          } else {
            this.sendSourceIndication(mediaType, 0);
          }
        });
        logger$4.info("Flushing pending JMP task queue");
        this.pendingJmpTasks.forEach(t => t());
        this.pendingJmpTasks = [];
      };
      dataChannel.onmessage = e => {
        var parsed;
        try {
          parsed = JSON.parse(e.data);
        } catch (err) {
          logger$4.error("Error parsing datachannel JSON: ".concat(err));
          return;
        }
        logger$4.debug('DataChannel got msg: ', parsed);
        var homerMsg = HomerMsg.fromJson(parsed);
        if (!homerMsg) {
          logger$4.error("Received invalid datachannel message: ".concat(e));
          return;
        }
        var jmpMsg = homerMsg.payload;
        if (!isValidJmpMsg(jmpMsg)) {
          logger$4.error("Received invalid JMP msg: ".concat(jmpMsg));
          return;
        }
        var mediaType = getMediaType(jmpMsg.mediaFamily, jmpMsg.mediaContent);
        var jmpSession = this.jmpSessions.get(mediaType);
        if (!jmpSession) {
          logger$4.error("Unable to find JMP session for media type ".concat(mediaType, "."));
          return;
        }
        jmpSession.receive(jmpMsg);
      };
      dataChannel.onclose = e => {
        logger$4.info('DataChannel closed: ', e);
      };
      dataChannel.onerror = e => {
        logger$4.info('DataChannel error: ', e);
      };
      this.dataChannel = dataChannel;
    }
    close() {
      this.sendTransceivers.forEach(t => t.close());
      this.recvTransceivers.forEach(recvTransceivers => {
        recvTransceivers.forEach(t => t.close());
      });
      this.pc.close();
    }
    sendSourceIndication(mediaType, numLiveSources) {
      var sources = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
      var _a;
      var task = () => {
        var _a;
        (_a = this.jmpSessions.get(mediaType)) === null || _a === void 0 ? void 0 : _a.updateSourceIndication(1, numLiveSources, sources);
      };
      if (((_a = this.dataChannel) === null || _a === void 0 ? void 0 : _a.readyState) === 'open') {
        task();
      } else {
        this.pendingJmpTasks.push(task);
      }
    }
    publishTrack(track) {
      return __awaiter$3(this, void 0, void 0, function* () {
        var mediaContent;
        if (track instanceof LocalDisplayTrack && this.options.floorControlledPresentation) {
          mediaContent = MediaContent$1.Slides;
        } else {
          mediaContent = MediaContent$1.Main;
        }
        var mediaFamily = toMediaFamily(track.kind);
        var mediaType = getMediaType(mediaFamily, mediaContent);
        var sendTransceiver = this.getSendTransceiverOrThrow(mediaType);
        if (track === sendTransceiver.publishedTrack) {
          logger$4.warn("This track has already been published on the transceiver.");
          return Promise.resolve();
        }
        this.addTrackListeners(mediaType, track);
        return sendTransceiver.publishTrack(track);
      });
    }
    unpublishTrack(track) {
      return __awaiter$3(this, void 0, void 0, function* () {
        var mediaContent;
        if (track instanceof LocalDisplayTrack && this.options.floorControlledPresentation) {
          mediaContent = MediaContent$1.Slides;
        } else {
          mediaContent = MediaContent$1.Main;
        }
        var mediaFamily = toMediaFamily(track.kind);
        var mediaType = getMediaType(mediaFamily, mediaContent);
        var sendTransceiver = this.getSendTransceiverOrThrow(mediaType);
        return sendTransceiver.unpublishTrack();
      });
    }
    addTrackListeners(mediaType, track) {
      var onTrackResolutionChange = () => {
        var sources = this.getVideoSources(mediaType);
        if (sources != null) {
          this.sendSourceIndication(mediaType, 1, sources);
        }
      };
      track.on(LocalTrack.Events.TrackConstraintsChange, onTrackResolutionChange);
      var onTrackMute = event => {
        if (getMediaFamily$1(mediaType) === MediaFamily$1.Audio) {
          this.sendSourceIndication(mediaType, +!event.trackState.muted);
        } else {
          var sources = this.getVideoSources(mediaType);
          if (sources != null) {
            this.sendSourceIndication(mediaType, +!event.trackState.muted, sources);
          }
        }
      };
      track.on(LocalTrack.Events.Muted, onTrackMute);
      var onTrackPublish = event => {
        if (!event.isPublished) {
          track.off(LocalTrack.Events.Muted, onTrackMute);
          track.off(LocalTrack.Events.PublishedStateUpdate, onTrackPublish);
          track.off(LocalTrack.Events.TrackConstraintsChange, onTrackResolutionChange);
        }
        if (getMediaFamily$1(mediaType) === MediaFamily$1.Audio) {
          this.sendSourceIndication(mediaType, +event.isPublished);
        } else {
          var sources = this.getVideoSources(mediaType);
          if (sources != null) {
            this.sendSourceIndication(mediaType, +event.isPublished, sources);
          }
        }
      };
      track.on(LocalTrack.Events.PublishedStateUpdate, onTrackPublish);
    }
    getVideoSources(mediaType) {
      var _a, _b, _c;
      var sendTransceiver = this.getSendTransceiverOrThrow(mediaType);
      var signaler = this.streamSignalerManager.getEgressStreamSignaler(sendTransceiver.mid);
      if (!signaler) {
        return null;
      }
      var activeSimulcastLayerNumber = ((_a = sendTransceiver.publishedTrack) === null || _a === void 0 ? void 0 : _a.getNumActiveSimulcastLayers()) || 0;
      var published = (_b = sendTransceiver.publishedTrack) === null || _b === void 0 ? void 0 : _b.published;
      var muted = ((_c = sendTransceiver.publishedTrack) === null || _c === void 0 ? void 0 : _c.muted) === true;
      return signaler.getSenderIds().map(id => {
        var state;
        if (!published) {
          state = 'no source';
        } else if (muted) {
          state = 'avatar';
        } else if (activeSimulcastLayerNumber <= signaler.getEncodingIndexForStreamId(id)) {
          state = 'no source';
        } else {
          state = 'live';
        }
        return {
          id,
          state,
          csi: sendTransceiver.csi
        };
      });
    }
    createReceiveSlot(mediaType) {
      return __awaiter$3(this, void 0, void 0, function* () {
        var rtcRtpTransceiver = this.pc.addTransceiver(toMediaStreamTrackKind(mediaType), {
          direction: 'recvonly'
        });
        this.addMid(mediaType);
        var recvOnlyTransceiver = new ReceiveOnlyTransceiver(rtcRtpTransceiver, mid => {
          var ingressSignaler = this.streamSignalerManager.getIngressStreamSignaler(mid);
          if (!ingressSignaler) {
            return null;
          }
          return ingressSignaler.getReceiverId();
        });
        if (this.pc.getRemoteDescription()) {
          yield this.doLocalOfferAnswer();
        }
        this.recvTransceivers.set(mediaType, [...(this.recvTransceivers.get(mediaType) || []), recvOnlyTransceiver]);
        return recvOnlyTransceiver.receiveSlot;
      });
    }
    getIngressPayloadType(mediaType, mimeType) {
      var _a, _b, _c;
      var requestedMediaCodecType = mimeType.split('/')[1];
      var requestedMid = (_a = this.sendTransceivers.get(mediaType)) === null || _a === void 0 ? void 0 : _a.mid;
      var parsedOffer = parse$3((_b = this.pc.getLocalDescription()) === null || _b === void 0 ? void 0 : _b.sdp);
      var parsedAnswer = parse$3((_c = this.pc.getRemoteDescription()) === null || _c === void 0 ? void 0 : _c.sdp);
      var senderCodecs = parsedAnswer.avMedia.filter(media => requestedMid === media.mid).map(media => [...media.codecs.values()]).flat().filter(ci => ci.name === requestedMediaCodecType);
      var receiverCodecs = parsedOffer.avMedia.filter(media => requestedMid === media.mid).map(media => [...media.codecs.values()]).flat().filter(ci => ci.name === requestedMediaCodecType);
      if (!senderCodecs || !receiverCodecs || senderCodecs.length === 0 || receiverCodecs.length === 0) {
        throw new Error("sender codecs or receiver codecs is undefined or empty");
      }
      var senderCodec = senderCodecs[0];
      var targetCodec = receiverCodecs.find(receiverCodec => {
        return areCodecsCompatible(senderCodec, receiverCodec);
      });
      if (!targetCodec || !targetCodec.pt) {
        throw new Error("ingress payload type is not well defined in receiver codecs");
      }
      return targetCodec.pt;
    }
    createOffer() {
      return __awaiter$3(this, void 0, void 0, function* () {
        if (!this.pc.getLocalDescription()) {
          this.currentMid++;
        }
        return this.pc.createOffer().then(offer => {
          if (!offer.sdp) {
            throw new Error('No SDP offer');
          }
          offer.sdp = this.preProcessLocalOffer(offer.sdp);
          return this.pc.setLocalDescription(offer);
        }).then(() => getLocalDescriptionWithIceCandidates(this.pc)).then(offerWithCandidates => {
          var sdp = this.prepareLocalOfferForRemoteServer(offerWithCandidates.sdp);
          return {
            sdp,
            type: offerWithCandidates.type
          };
        });
      });
    }
    setAnswer(answer) {
      return __awaiter$3(this, void 0, void 0, function* () {
        var isInitialAnswer = !this.pc.getRemoteDescription();
        var sdp = this.preProcessRemoteAnswer(answer);
        return this.pc.setRemoteDescription({
          type: 'answer',
          sdp
        }).then(() => {
          if (isInitialAnswer && this.customCodecParameters.size > 0) {
            this.doLocalOfferAnswer();
          }
        });
      });
    }
    doLocalOfferAnswer() {
      var _a;
      return __awaiter$3(this, void 0, void 0, function* () {
        var offer = yield this.pc.createOffer();
        if (!offer.sdp) {
          throw new Error('No SDP offer');
        }
        offer.sdp = this.preProcessLocalOffer(offer.sdp);
        yield this.pc.setLocalDescription(offer);
        var answer = this.preProcessRemoteAnswer((_a = this.pc.getRemoteDescription()) === null || _a === void 0 ? void 0 : _a.sdp);
        return this.pc.setRemoteDescription({
          type: 'answer',
          sdp: answer
        });
      });
    }
    enableMultistreamAudio(enabled) {
      var sendTransceiver = this.sendTransceivers.get(MediaType$1.AudioMain);
      if (sendTransceiver) {
        return sendTransceiver.setActive(enabled);
      }
      return false;
    }
    preProcessLocalOffer(offer) {
      var parsed = parse$3(offer);
      filterCodecs(parsed, ['h264', 'opus', 'rtx']);
      setMaxBandwidth(parsed, 20000000);
      parsed.avMedia.filter(av => av.direction === 'recvonly').forEach(av => {
        var ingressSignaler = this.streamSignalerManager.getOrCreateIngressStreamSignaler(av.mid);
        ingressSignaler.signalLocalStreams(av);
      });
      parsed.avMedia.filter(av => av.direction === 'sendrecv').forEach(av => {
        var egressSignaler = this.streamSignalerManager.getOrCreateEgressStreamSignaler(av.mid);
        var simulcastEnabled = hasSimulcast(av);
        var rtxEnabled = av.type === 'video';
        egressSignaler.signalStreams(simulcastEnabled, rtxEnabled, av);
        if (av.type === 'video') {
          [...av.codecs.values()].filter(ci => ci.name === 'H264').forEach(ci => {
            ci.fmtParams.set('max-mbps', "".concat(defaultMaxVideoEncodeMbps));
            ci.fmtParams.set('max-fs', "".concat(defaultMaxVideoEncodeFrameSize));
          });
        }
        var mediaType = [...this.sendTransceivers.keys()].find(key => {
          var _a;
          return ((_a = this.sendTransceivers.get(key)) === null || _a === void 0 ? void 0 : _a.mid) === av.mid;
        });
        if (mediaType && this.customCodecParameters.has(mediaType)) {
          [...av.codecs.values()].filter(ci => ci.name === (av.type === 'audio' ? 'opus' : 'H264')).forEach(ci => {
            var _a;
            (_a = this.customCodecParameters.get(mediaType)) === null || _a === void 0 ? void 0 : _a.forEach((value, param) => {
              if (value === null) {
                ci.fmtParams.delete(param);
              } else {
                ci.fmtParams.set(param, "".concat(value));
              }
            });
          });
        }
      });
      if (getBrowserDetails().name !== 'Firefox') {
        setupBundle(parsed, this.options.bundlePolicy, this.midMap);
      }
      return parsed.toString();
    }
    prepareLocalOfferForRemoteServer(offer) {
      var parsed = parse$3(offer);
      var midContentMap = new Map();
      this.sendTransceivers.forEach((transceiver, mediaType) => {
        midContentMap.set(transceiver.mid, getMediaContent(mediaType));
      });
      injectContentTypes(parsed, midContentMap);
      var csiMap = new Map();
      this.sendTransceivers.forEach((transceiver, mediaType) => {
        csiMap.set(mediaType, transceiver.csi);
      });
      injectJmpAttributes(parsed, csiMap, this.options.streamSignalingMode);
      filterRecvOnlyMlines(parsed);
      parsed.avMedia.filter(av => av.direction === 'sendrecv' && av.type === 'video').forEach(av => {
        var ssrcGroup = av.ssrcGroups.find(sg => sg.semantics === 'SIM');
        if (ssrcGroup) {
          ssrcGroup.ssrcs.forEach((ssrc, index) => {
            av.addLine(new SsrcLine(ssrc, 'fmtp', "* max-fs=".concat(simulcastMaxFrameSizes[index])));
          });
        }
      });
      return parsed.toString();
    }
    preProcessRemoteAnswer(answer) {
      var _a;
      var parsedAnswer = parse$3(answer);
      var parsedOffer = parse$3((_a = this.pc.getLocalDescription()) === null || _a === void 0 ? void 0 : _a.sdp);
      matchMlinesInAnswer(parsedOffer, parsedAnswer, this.streamSignalerManager);
      if (getBrowserDetails().name === 'Firefox') {
        setupBundle(parsedAnswer, this.options.bundlePolicy, this.midMap);
      }
      return parsedAnswer.toString();
    }
    getSendTransceiverOrThrow(mediaType) {
      var sendTransceiver = this.sendTransceivers.get(mediaType);
      if (!sendTransceiver) {
        throw new Error("Unable to find matching transceiver for media type ".concat(mediaType));
      }
      return sendTransceiver;
    }
    getPublishedTracks() {
      return [...this.sendTransceivers.values()].map(transceiver => transceiver.publishedTrack).filter(Boolean);
    }
    setCodecParameters(mediaType, parameters) {
      return __awaiter$3(this, void 0, void 0, function* () {
        var currentParams = this.customCodecParameters.get(mediaType) || new Map();
        Object.entries(parameters).forEach(_ref7 => {
          var [param, value] = _ref7;
          currentParams.set(param, value);
        });
        this.customCodecParameters.set(mediaType, currentParams);
        if (this.pc.getRemoteDescription()) {
          yield this.doLocalOfferAnswer();
        }
      });
    }
    deleteCodecParameters(mediaType, parameters) {
      return __awaiter$3(this, void 0, void 0, function* () {
        var currentParams = this.customCodecParameters.get(mediaType) || new Map();
        parameters.forEach(param => {
          currentParams.set(param, null);
        });
        this.customCodecParameters.set(mediaType, currentParams);
        if (this.pc.getRemoteDescription()) {
          yield this.doLocalOfferAnswer();
        }
      });
    }
    requestMedia(mediaType, mediaRequests) {
      var _a;
      var task = () => {
        var _a;
        var jmpSession = this.jmpSessions.get(mediaType);
        if (!jmpSession) {
          logger$4.error("Unable to find jmp session for ".concat(mediaType));
          return;
        }
        var requestedReceiveSlotIds = [];
        mediaRequests.forEach(mr => mr.receiveSlots.forEach(rs => {
          if (!rs.id) {
            logger$4.error("Running subscribe task, but ReceiveSlot ID is missing!");
            return;
          }
          requestedReceiveSlotIds.push(rs.id);
        }));
        (_a = this.recvTransceivers.get(mediaType)) === null || _a === void 0 ? void 0 : _a.forEach(transceiver => {
          if (!requestedReceiveSlotIds.some(id => compareStreamIds(id, transceiver.receiveSlot.id))) {
            transceiver.receiveSlot._updateSource('no source', undefined);
          }
        });
        jmpSession.sendRequests(mediaRequests.map(mr => mr._toJmpScrRequest()));
      };
      if (((_a = this.dataChannel) === null || _a === void 0 ? void 0 : _a.readyState) === 'open') {
        task();
      } else {
        this.pendingJmpTasks.push(task);
      }
    }
    renewPeerConnection(userOptions) {
      if (userOptions) {
        this.options = Object.assign(Object.assign({}, defaultMultistreamConnectionOptions), userOptions);
      }
      logger$4.info("Renewing multistream connection with options ".concat(JSON.stringify(this.options)));
      this.clearMids();
      this.initializePeerConnection();
      this.streamSignalerManager = new StreamSignalerManager(this.options.streamSignalingMode);
      var mainSceneId = generateSceneId();
      this.sendTransceivers.forEach((transceiver, mediaType) => {
        var _a;
        this.addMid(mediaType);
        transceiver.replaceTransceiver(this.pc.addTransceiver(toMediaStreamTrackKind(mediaType), {
          direction: 'sendrecv',
          sendEncodings: getMediaFamily$1(mediaType) === MediaFamily$1.Video ? this.getVideoEncodingOptions(getMediaContent(mediaType)) : undefined
        }));
        transceiver.csi = generateCsi(getMediaFamily$1(mediaType), mainSceneId);
        (_a = this.jmpSessions.get(mediaType)) === null || _a === void 0 ? void 0 : _a.close();
        this.createJmpSession(mediaType);
      });
      this.recvTransceivers.forEach((transceivers, mediaType) => {
        transceivers.forEach(t => {
          this.addMid(mediaType);
          t.replaceTransceiver(this.pc.addTransceiver(toMediaStreamTrackKind(mediaType), {
            direction: 'recvonly'
          }));
        });
      });
    }
    getReceiveSlotById(id) {
      return [...this.recvTransceivers.values()].flat().map(transceiver => transceiver.receiveSlot).find(receiveSlot => {
        var receiveSlotId = receiveSlot.id || {};
        return Object.keys(receiveSlotId).length === Object.keys(id).length && Object.keys(receiveSlotId).every(key => Object.prototype.hasOwnProperty.call(id, key) && receiveSlotId[key] === id[key]);
      });
    }
    getStats() {
      return this.statsManager.getStats();
    }
    getTransceiverStats() {
      return __awaiter$3(this, void 0, void 0, function* () {
        return organizeTransceiverStats(this.sendTransceivers, this.recvTransceivers);
      });
    }
    preProcessStats(stats) {
      return __awaiter$3(this, void 0, void 0, function* () {
        yield Promise.all([...this.sendTransceivers.entries()].map(_ref8 => {
          var [mediaType, transceiver] = _ref8;
          return __awaiter$3(this, void 0, void 0, function* () {
            (yield transceiver.getStats()).forEach(senderStats => {
              var _a;
              if (senderStats.type === 'outbound-rtp') {
                var statsToModify = stats.get(senderStats.id);
                statsToModify.mid = transceiver.mid;
                statsToModify.csi = transceiver.csi;
                statsToModify.mediaType = mediaType;
                var trackSettings = (_a = transceiver.publishedTrack) === null || _a === void 0 ? void 0 : _a.underlyingTrack.getSettings();
                if (trackSettings === null || trackSettings === void 0 ? void 0 : trackSettings.frameRate) {
                  statsToModify.targetFrameRate = trackSettings === null || trackSettings === void 0 ? void 0 : trackSettings.frameRate;
                }
                stats.set(senderStats.id, statsToModify);
              }
            });
          });
        }));
        yield Promise.all([...this.recvTransceivers.entries()].map(_ref9 => {
          var [mediaType, transceivers] = _ref9;
          return __awaiter$3(this, void 0, void 0, function* () {
            yield Promise.all(transceivers.map(transceiver => __awaiter$3(this, void 0, void 0, function* () {
              (yield transceiver.getStats()).forEach(receiverStats => {
                var _a;
                if (receiverStats.type === 'inbound-rtp') {
                  var statsToModify = stats.get(receiverStats.id);
                  statsToModify.mid = (_a = transceiver.receiveSlot.id) === null || _a === void 0 ? void 0 : _a.mid;
                  statsToModify.csi = transceiver.receiveSlot.currentRxCsi;
                  statsToModify.mediaType = mediaType;
                  var signaler = this.streamSignalerManager.getIngressStreamSignaler(statsToModify.mid);
                  if (signaler) {
                    Object.assign(statsToModify, signaler.getReceiverId());
                  }
                  stats.set(receiverStats.id, statsToModify);
                }
              });
            })));
          });
        }));
      });
    }
    attachMetricsObserver() {
      rtcStats_1(this.pc.getUnderlyingRTCPeerConnection(), data => this.metricsCallback(data), 5000);
    }
    setMetricsCallback(callback) {
      this.metricsCallback = callback;
    }
    setOveruseUpdateCallback(callback) {
      this.overuseUpdateCallback = callback;
    }
    getCsiByMediaType(mediaType) {
      var _a;
      return (_a = this.sendTransceivers.get(mediaType)) === null || _a === void 0 ? void 0 : _a.csi;
    }
    getAllCsis() {
      return {
        audioMain: this.getCsiByMediaType(MediaType$1.AudioMain),
        audioSlides: this.getCsiByMediaType(MediaType$1.AudioSlides),
        videoMain: this.getCsiByMediaType(MediaType$1.VideoMain),
        videoSlides: this.getCsiByMediaType(MediaType$1.VideoSlides)
      };
    }
  }

  var Event$1;
  (function (Event) {
    Event["CONNECTION_STATE_CHANGED"] = "connectionState:changed";
    Event["REMOTE_TRACK_ADDED"] = "remoteTrack:added";
    Event["ROAP_MESSAGE_TO_SEND"] = "roap:messageToSend";
    Event["ROAP_STARTED"] = "roap:started";
    Event["ROAP_FAILURE"] = "roap:failure";
    Event["ROAP_DONE"] = "roap:done";
    Event["DTMF_TONE_CHANGED"] = "dtmfTone:changed";
    Event["ACTIVE_SPEAKERS_CHANGED"] = "activeSpeakers:changed";
    Event["VIDEO_SOURCES_COUNT_CHANGED"] = "videoSourcesCount:changed";
    Event["AUDIO_SOURCES_COUNT_CHANGED"] = "audioSourcesCount:changed";
  })(Event$1 || (Event$1 = {}));
  var RemoteTrackType;
  (function (RemoteTrackType) {
    RemoteTrackType["AUDIO"] = "audio";
    RemoteTrackType["VIDEO"] = "video";
    RemoteTrackType["SCREENSHARE_VIDEO"] = "screenShareVideo";
  })(RemoteTrackType || (RemoteTrackType = {}));
  var ErrorType;
  (function (ErrorType) {
    ErrorType["DOUBLECONFLICT"] = "DOUBLECONFLICT";
    ErrorType["CONFLICT"] = "CONFLICT";
    ErrorType["FAILED"] = "FAILED";
    ErrorType["INVALID_STATE"] = "INVALID_STATE";
    ErrorType["NOMATCH"] = "NOMATCH";
    ErrorType["OUT_OF_ORDER"] = "OUT_OF_ORDER";
    ErrorType["REFUSED"] = "REFUSED";
    ErrorType["RETRY"] = "RETRY";
    ErrorType["TIMEOUT"] = "TIMEOUT";
  })(ErrorType || (ErrorType = {}));

  function ownKeys$3(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$3(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$3(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var localTrackTypes = [{
    type: 'audio',
    kind: 'audio'
  }, {
    type: 'video',
    kind: 'video'
  }, {
    type: 'screenShareVideo',
    kind: 'video'
  }];
  class MediaConnection extends EventEmitter$3 {
    constructor(mediaConnectionConfig, options, debugId) {
      super();
      _defineProperty(this, "id", void 0);
      _defineProperty(this, "config", void 0);
      _defineProperty(this, "pc", void 0);
      _defineProperty(this, "localTracks", void 0);
      _defineProperty(this, "transceivers", void 0);
      _defineProperty(this, "receiveOptions", void 0);
      _defineProperty(this, "mediaConnectionState", void 0);
      _defineProperty(this, "lastEmittedMediaConnectionState", void 0);
      this.config = mediaConnectionConfig;
      this.receiveOptions = _objectSpread$3({}, options.receive);
      this.localTracks = _objectSpread$3({}, options.send);
      this.id = debugId || 'MediaConnection';
      this.transceivers = {};
      this.mediaConnectionState = ConnectionState.New;
      this.pc = new window.RTCPeerConnection({
        iceServers: this.config.iceServers,
        bundlePolicy: 'max-compat'
      });
      this.pc.ontrack = this.onTrack.bind(this);
      this.pc.oniceconnectionstatechange = this.onIceConnectionStateChange.bind(this);
      this.pc.onconnectionstatechange = this.onConnectionStateChange.bind(this);
    }
    log(action, description) {
      getLogger().info("".concat(this.id, ":").concat(action, " ").concat(description));
    }
    warn(action, description) {
      getLogger().warn("".concat(this.id, ":").concat(action, " ").concat(description));
    }
    error(action, description, error) {
      getLogger().error("".concat(this.id, ":").concat(action, " ").concat(description, " ").concat(getErrorDescription(error)));
    }
    createTransceivers() {
      localTrackTypes.forEach(_ref => {
        var {
          type,
          kind
        } = _ref;
        var trackType = type;
        var transceiverType = type;
        var trackInfo = getLocalTrackInfo(kind, this.receiveOptions[trackType], this.localTracks[trackType]);
        if (!this.config.skipInactiveTransceivers || trackInfo.direction !== 'inactive') {
          this.transceivers[transceiverType] = this.pc.addTransceiver(trackInfo.trackOrKind, {
            direction: trackInfo.direction
          });
        }
      });
      this.setupTransceiverListeners();
    }
    initializeTransceivers(incomingOffer) {
      if (this.pc.getTransceivers().length > 0) {
        this.error('initiateOffer()', 'SDP negotiation already started');
        throw new Error('SDP negotiation already started');
      }
      if (incomingOffer) {
        this.addLocalTracks();
      } else {
        this.createTransceivers();
      }
    }
    close() {
      this.pc.close();
      this.pc.ontrack = null;
      this.pc.oniceconnectionstatechange = null;
      this.pc.onconnectionstatechange = null;
      this.pc.onicegatheringstatechange = null;
      this.pc.onicecandidate = null;
      this.pc.onicecandidateerror = null;
    }
    getConfig() {
      return this.config;
    }
    getSendReceiveOptions() {
      return {
        send: this.localTracks,
        receive: this.receiveOptions
      };
    }
    updateRemoteQualityLevel(newValue) {
      if (newValue !== this.receiveOptions.remoteQualityLevel) {
        this.receiveOptions.remoteQualityLevel = newValue;
        return true;
      }
      return false;
    }
    updateTransceivers(options) {
      var newOfferNeeded = false;
      this.receiveOptions.audio = options.receive.audio;
      this.receiveOptions.video = options.receive.video;
      this.receiveOptions.screenShareVideo = options.receive.screenShareVideo;
      this.identifyTransceivers();
      localTrackTypes.forEach(_ref2 => {
        var {
          type,
          kind
        } = _ref2;
        var trackType = type;
        var transceiverType = type;
        var track = options.send[trackType];
        var transceiver = this.transceivers[transceiverType];
        if (track !== undefined && track !== this.localTracks[trackType]) {
          this.localTracks[trackType] = track;
          if (transceiver) {
            this.log('updateTransceivers()', "replacing sender track on \"".concat(type, "\" transceiver"));
            transceiver.sender.replaceTrack(track);
          }
        }
        if (transceiver) {
          var trackInfo = getLocalTrackInfo(kind, this.receiveOptions[trackType], this.localTracks[trackType]);
          if (transceiver.direction !== trackInfo.direction) {
            this.log('updateTransceivers()', "updating direction to ".concat(trackInfo.direction, " on \"").concat(type, "\" transceiver"));
            transceiver.direction = trackInfo.direction;
            newOfferNeeded = true;
          }
        }
      });
      return newOfferNeeded;
    }
    updateSendOptions(tracks) {
      return this.updateTransceivers({
        send: tracks,
        receive: _objectSpread$3({}, this.receiveOptions)
      });
    }
    updateReceiveOptions(options) {
      var sdpNegotiationNeeded = false;
      if (this.updateRemoteQualityLevel(options.remoteQualityLevel)) {
        sdpNegotiationNeeded = true;
      }
      if (this.updateTransceivers({
        send: this.localTracks,
        receive: options
      })) {
        sdpNegotiationNeeded = true;
      }
      return sdpNegotiationNeeded;
    }
    updateSendReceiveOptions(options) {
      var sdpNegotiationNeeded = false;
      if (this.updateRemoteQualityLevel(options.receive.remoteQualityLevel)) {
        sdpNegotiationNeeded = true;
      }
      if (this.updateTransceivers(options)) {
        sdpNegotiationNeeded = true;
      }
      return sdpNegotiationNeeded;
    }
    getConnectionState() {
      this.log('getConnectionState()', "called, returning ".concat(this.mediaConnectionState));
      return this.mediaConnectionState;
    }
    getStats() {
      return this.pc.getStats();
    }
    getTransceiverStats() {
      var _this = this;
      return _asyncToGenerator(function* () {
        var result = {
          audio: {
            senders: [],
            receivers: []
          },
          video: {
            senders: [],
            receivers: []
          },
          screenShareAudio: {
            senders: [],
            receivers: []
          },
          screenShareVideo: {
            senders: [],
            receivers: []
          }
        };
        var _loop = function* _loop(type) {
          var transceiver = _this.transceivers[type];
          if (transceiver) {
            yield transceiver.sender.getStats().then(statsReport => {
              var _transceiver$sender, _transceiver$sender$t;
              result[type].senders.push({
                report: statsReport,
                currentDirection: transceiver.currentDirection,
                localTrackLabel: (_transceiver$sender = transceiver.sender) === null || _transceiver$sender === void 0 ? void 0 : (_transceiver$sender$t = _transceiver$sender.track) === null || _transceiver$sender$t === void 0 ? void 0 : _transceiver$sender$t.label
              });
            });
            yield transceiver.receiver.getStats().then(statsReport => {
              var _transceiver$sender2, _transceiver$sender2$;
              result[type].receivers.push({
                report: statsReport,
                currentDirection: transceiver.currentDirection,
                localTrackLabel: (_transceiver$sender2 = transceiver.sender) === null || _transceiver$sender2 === void 0 ? void 0 : (_transceiver$sender2$ = _transceiver$sender2.track) === null || _transceiver$sender2$ === void 0 ? void 0 : _transceiver$sender2$.label
              });
            });
          }
        };
        for (var {
          type
        } of localTrackTypes) {
          yield* _loop(type);
        }
        return result;
      })();
    }
    insertDTMF(tones, duration, interToneGap) {
      if (!this.transceivers.audio) {
        throw new Error('audio transceiver missing');
      }
      if (!this.transceivers.audio.sender) {
        throw new Error('this.transceivers.audio.sender is null');
      }
      if (!this.transceivers.audio.sender.dtmf) {
        throw new Error('this.transceivers.audio.sender.dtmf is null');
      }
      this.transceivers.audio.sender.dtmf.insertDTMF(tones.toUpperCase(), duration, interToneGap);
    }
    setupTransceiverListeners() {
      var _this$transceivers$au, _this$transceivers$au2;
      if ((_this$transceivers$au = this.transceivers.audio) !== null && _this$transceivers$au !== void 0 && (_this$transceivers$au2 = _this$transceivers$au.sender) !== null && _this$transceivers$au2 !== void 0 && _this$transceivers$au2.dtmf) {
        this.transceivers.audio.sender.dtmf.ontonechange = this.onToneChange.bind(this);
      }
    }
    onToneChange(event) {
      this.log('onToneChange()', "emitting Event.DTMF_TONE_CHANGED with tone=\"".concat(event.tone, "\""));
      this.emit(Event$1.DTMF_TONE_CHANGED, {
        tone: event.tone
      });
    }
    identifyTransceivers() {
      if (!this.transceivers.audio && !this.transceivers.video && !this.transceivers.screenShareVideo) {
        var transceivers = this.pc.getTransceivers();
        this.log('identifyTransceivers()', "transceivers.length=".concat(transceivers.length));
        transceivers.forEach((transceiver, idx) => {
          this.log('identifyTransceivers()', "transceiver[".concat(idx, "].mid=").concat(transceiver.mid));
        });
        [this.transceivers.audio, this.transceivers.video, this.transceivers.screenShareVideo] = transceivers;
        this.setupTransceiverListeners();
      }
    }
    onTrack(event) {
      var _event$transceiver, _this$transceivers$au3, _this$transceivers$au4, _this$transceivers$au5, _this$transceivers$vi, _this$transceivers$vi2, _this$transceivers$vi3, _this$transceivers$sc, _this$transceivers$sc2, _this$transceivers$sc3;
      this.log('onTrack()', "callback called: event=".concat(JSON.stringify(event)));
      var MEDIA_ID = {
        AUDIO_TRACK: '0',
        VIDEO_TRACK: '1',
        SHARE_TRACK: '2'
      };
      var {
        track
      } = event;
      var trackMediaID = null;
      this.identifyTransceivers();
      if ((_event$transceiver = event.transceiver) !== null && _event$transceiver !== void 0 && _event$transceiver.mid) {
        this.log('onTrack()', 'identifying track by event.transceiver.mid');
        trackMediaID = event.transceiver.mid;
      } else if (track.id === ((_this$transceivers$au3 = this.transceivers.audio) === null || _this$transceivers$au3 === void 0 ? void 0 : (_this$transceivers$au4 = _this$transceivers$au3.receiver) === null || _this$transceivers$au4 === void 0 ? void 0 : (_this$transceivers$au5 = _this$transceivers$au4.track) === null || _this$transceivers$au5 === void 0 ? void 0 : _this$transceivers$au5.id)) {
        trackMediaID = MEDIA_ID.AUDIO_TRACK;
      } else if (track.id === ((_this$transceivers$vi = this.transceivers.video) === null || _this$transceivers$vi === void 0 ? void 0 : (_this$transceivers$vi2 = _this$transceivers$vi.receiver) === null || _this$transceivers$vi2 === void 0 ? void 0 : (_this$transceivers$vi3 = _this$transceivers$vi2.track) === null || _this$transceivers$vi3 === void 0 ? void 0 : _this$transceivers$vi3.id)) {
        trackMediaID = MEDIA_ID.VIDEO_TRACK;
      } else if (track.id === ((_this$transceivers$sc = this.transceivers.screenShareVideo) === null || _this$transceivers$sc === void 0 ? void 0 : (_this$transceivers$sc2 = _this$transceivers$sc.receiver) === null || _this$transceivers$sc2 === void 0 ? void 0 : (_this$transceivers$sc3 = _this$transceivers$sc2.track) === null || _this$transceivers$sc3 === void 0 ? void 0 : _this$transceivers$sc3.id)) {
        trackMediaID = MEDIA_ID.SHARE_TRACK;
      } else {
        trackMediaID = null;
      }
      this.log('onTrack()', "trackMediaID=".concat(trackMediaID));
      switch (trackMediaID) {
        case MEDIA_ID.AUDIO_TRACK:
          this.log('onTrack()', 'emitting Event.REMOTE_TRACK_ADDED with type=AUDIO');
          this.emit(Event$1.REMOTE_TRACK_ADDED, {
            type: RemoteTrackType.AUDIO,
            track
          });
          break;
        case MEDIA_ID.VIDEO_TRACK:
          this.log('onTrack()', 'emitting Event.REMOTE_TRACK_ADDED with type=VIDEO');
          this.emit(Event$1.REMOTE_TRACK_ADDED, {
            type: RemoteTrackType.VIDEO,
            track
          });
          break;
        case MEDIA_ID.SHARE_TRACK:
          this.log('onTrack()', 'emitting Event.REMOTE_TRACK_ADDED with type=SCREENSHARE_VIDEO');
          this.emit(Event$1.REMOTE_TRACK_ADDED, {
            type: RemoteTrackType.SCREENSHARE_VIDEO,
            track
          });
          break;
        default:
          {
            this.error('onTrack()', "failed to match remote track media id: ".concat(trackMediaID));
          }
      }
    }
    addLocalTracks() {
      this.log('addLocalTracks()', "adding tracks ".concat(JSON.stringify(this.localTracks)));
      if (this.localTracks.audio) {
        this.pc.addTrack(this.localTracks.audio);
      }
      if (this.localTracks.video) {
        this.pc.addTrack(this.localTracks.video);
      }
      if (this.localTracks.screenShareVideo) {
        this.pc.addTrack(this.localTracks.screenShareVideo);
      }
    }
    onConnectionStateChange() {
      this.log('onConnectionStateChange()', "callback called: connectionState=".concat(this.pc.connectionState));
      this.evaluateMediaConnectionState();
    }
    onIceConnectionStateChange() {
      this.log('onIceConnectionStateChange()', "callback called: iceConnectionState=".concat(this.pc.iceConnectionState));
      this.evaluateMediaConnectionState();
    }
    evaluateMediaConnectionState() {
      var rtcPcConnectionState = this.pc.connectionState;
      var iceState = this.pc.iceConnectionState;
      var connectionStates = [rtcPcConnectionState, iceState];
      if (connectionStates.some(value => value === 'closed')) {
        this.mediaConnectionState = ConnectionState.Closed;
      } else if (connectionStates.some(value => value === 'failed')) {
        this.mediaConnectionState = ConnectionState.Failed;
      } else if (connectionStates.some(value => value === 'disconnected')) {
        this.mediaConnectionState = ConnectionState.Disconnected;
      } else if (connectionStates.every(value => value === 'connected' || value === 'completed')) {
        this.mediaConnectionState = ConnectionState.Connected;
      } else {
        this.mediaConnectionState = ConnectionState.Connecting;
      }
      this.log('evaluateConnectionState', "iceConnectionState=".concat(iceState, " rtcPcConnectionState=").concat(rtcPcConnectionState, " => mediaConnectionState=").concat(this.mediaConnectionState));
      if (this.lastEmittedMediaConnectionState !== this.mediaConnectionState) {
        this.emit(Event$1.CONNECTION_STATE_CHANGED, {
          state: this.mediaConnectionState
        });
        this.lastEmittedMediaConnectionState = this.mediaConnectionState;
      }
    }
    createSdpMungingConfig() {
      if (this.receiveOptions.remoteQualityLevel) {
        var maxFsValues = {
          LOW: 1620,
          MEDIUM: 3600,
          HIGH: 8192
        };
        if (!maxFsValues[this.receiveOptions.remoteQualityLevel]) {
          throw new Error("invalid value for receiveOptions.remoteQualityLevel: ".concat(this.receiveOptions.remoteQualityLevel));
        }
        if (this.config.sdpMunging.h264MaxFs) {
          this.warn('createSdpMungingConfig', 'conflict: both config.sdpMunging.h264MaxFs and receiveOptions.remoteQualityLevel are set, remoteQualityLevel will override the config');
        }
        return _objectSpread$3(_objectSpread$3({}, this.config.sdpMunging), {}, {
          h264MaxFs: maxFsValues[this.receiveOptions.remoteQualityLevel]
        });
      }
      return this.config.sdpMunging;
    }
    createLocalOffer() {
      var sdpMungingConfig = this.createSdpMungingConfig();
      return this.pc.createOffer().then(description => {
        this.log('createLocalOffer', 'local SDP offer created');
        var mungedDescription = {
          type: description.type,
          sdp: mungeLocalSdpForBrowser(sdpMungingConfig, (description === null || description === void 0 ? void 0 : description.sdp) || '')
        };
        return this.pc.setLocalDescription(mungedDescription);
      }).then(() => this.waitForIceCandidates()).then(() => {
        var _this$pc$localDescrip;
        var mungedSdp = mungeLocalSdp(sdpMungingConfig, ((_this$pc$localDescrip = this.pc.localDescription) === null || _this$pc$localDescrip === void 0 ? void 0 : _this$pc$localDescrip.sdp) || '');
        return {
          sdp: mungedSdp
        };
      }).catch(error => {
        if (error instanceof IceGatheringError || error instanceof SdpError) {
          throw error;
        } else {
          throw new SdpOfferCreationError("createLocalOffer() failure: ".concat(error.message), {
            cause: error
          });
        }
      });
    }
    handleRemoteOffer(sdp) {
      this.log('handleRemoteOffer', 'called');
      if (!sdp) {
        return Promise.reject(new SdpOfferHandlingError('SDP missing'));
      }
      var mungedRemoteSdp = mungeRemoteSdp(this.config.sdpMunging, sdp);
      var sdpMungingConfig = this.createSdpMungingConfig();
      return this.pc.setRemoteDescription(new window.RTCSessionDescription({
        type: 'offer',
        sdp: mungedRemoteSdp
      })).then(() => this.pc.createAnswer()).then(answer => {
        var mungedAnswer = {
          type: answer.type,
          sdp: mungeLocalSdpForBrowser(sdpMungingConfig, (answer === null || answer === void 0 ? void 0 : answer.sdp) || '')
        };
        return this.pc.setLocalDescription(mungedAnswer);
      }).then(() => this.waitForIceCandidates()).then(() => {
        var _this$pc$localDescrip2;
        var mungedLocalSdp = mungeLocalSdp(sdpMungingConfig, ((_this$pc$localDescrip2 = this.pc.localDescription) === null || _this$pc$localDescrip2 === void 0 ? void 0 : _this$pc$localDescrip2.sdp) || '');
        return {
          sdp: mungedLocalSdp
        };
      }).catch(error => {
        if (error instanceof IceGatheringError || error instanceof SdpError) {
          throw error;
        } else {
          throw new SdpOfferHandlingError("handleRemoteOffer() failure: ".concat(error.message), {
            cause: error
          });
        }
      });
    }
    handleRemoteAnswer(sdp) {
      this.log('handleRemoteAnswer', 'called');
      if (!sdp) {
        return Promise.reject(new SdpAnswerHandlingError('SDP answer missing'));
      }
      var mungedRemoteSdp = mungeRemoteSdp(this.config.sdpMunging, sdp);
      return this.pc.setRemoteDescription(new window.RTCSessionDescription({
        type: 'answer',
        sdp: mungedRemoteSdp
      })).catch(error => {
        throw new SdpAnswerHandlingError("handleRemoteAnswer() failure: ".concat(error.message), {
          cause: error
        });
      });
    }
    waitForIceCandidates() {
      return new Promise((resolve, reject) => {
        var startTime = performance.now();
        var done = false;
        var runSdpCheckForErrors = () => {
          var _this$pc$localDescrip3;
          return checkSdpForErrors({
            allowPort0: !!this.config.sdpMunging.convertPort9to0,
            requireH264: !!this.config.requireH264
          }, (_this$pc$localDescrip3 = this.pc.localDescription) === null || _this$pc$localDescrip3 === void 0 ? void 0 : _this$pc$localDescrip3.sdp);
        };
        var doneGatheringIceCandidates = () => {
          if (!done) {
            var milliseconds = performance.now() - startTime;
            this.log('waitForIceCandidates()', "checking SDP...");
            var sdpError = runSdpCheckForErrors();
            if (sdpError) {
              this.error('waitForIceCandidates()', "SDP not valid after waiting: ".concat(sdpError.message));
              reject(sdpError);
            }
            this.log('waitForIceCandidates()', "It took ".concat(milliseconds, " milliseconds to gather ice candidates"));
            done = true;
            this.pc.onicegatheringstatechange = null;
            this.pc.onicecandidate = null;
            this.pc.onicecandidateerror = null;
            resolve();
          }
        };
        if (this.pc.iceGatheringState === 'complete' && runSdpCheckForErrors() === false) {
          this.log('waitForIceCandidates()', 'iceGatheringState is already "complete" and local SDP is valid');
          resolve();
          return;
        }
        this.log('waitForIceCandidates()', 'waiting for ICE candidates to be gathered...');
        this.pc.onicegatheringstatechange = () => {
          this.log('waitForIceCandidates()', "iceGatheringState changed to ".concat(this.pc.iceGatheringState));
          if (this.pc.iceGatheringState === 'complete') {
            doneGatheringIceCandidates();
          }
        };
        this.pc.onicecandidate = evt => {
          if (evt.candidate === null) {
            this.log('waitForIceCandidates()', 'evt.candidate === null received');
            doneGatheringIceCandidates();
          } else {
            var _evt$candidate, _evt$candidate2;
            this.log('waitForIceCandidates()', "ICE Candidate(".concat((_evt$candidate = evt.candidate) === null || _evt$candidate === void 0 ? void 0 : _evt$candidate.sdpMLineIndex, "): ").concat((_evt$candidate2 = evt.candidate) === null || _evt$candidate2 === void 0 ? void 0 : _evt$candidate2.candidate));
          }
        };
        this.pc.onicecandidateerror = event => {
          this.warn('waitForIceCandidates()', "onicecandidateerror: ".concat(event));
        };
      });
    }
  }

  /*
   *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
   *
   *  Use of this source code is governed by a BSD-style license
   *  that can be found in the LICENSE file in the root of the source
   *  tree.
   */

  var logDisabled_ = true;
  var deprecationWarnings_ = true;

  /**
   * Extract browser version out of the provided user agent string.
   *
   * @param {!string} uastring userAgent string.
   * @param {!string} expr Regular expression used as match criteria.
   * @param {!number} pos position in the version string to be returned.
   * @return {!number} browser version.
   */
  function extractVersion(uastring, expr, pos) {
    var match = uastring.match(expr);
    return match && match.length >= pos && parseInt(match[pos], 10);
  }

  // Wraps the peerconnection event eventNameToWrap in a function
  // which returns the modified event object (or false to prevent
  // the event).
  function wrapPeerConnectionEvent(window, eventNameToWrap, wrapper) {
    if (!window.RTCPeerConnection) {
      return;
    }
    var proto = window.RTCPeerConnection.prototype;
    var nativeAddEventListener = proto.addEventListener;
    proto.addEventListener = function (nativeEventName, cb) {
      if (nativeEventName !== eventNameToWrap) {
        return nativeAddEventListener.apply(this, arguments);
      }
      var wrappedCallback = e => {
        var modifiedEvent = wrapper(e);
        if (modifiedEvent) {
          if (cb.handleEvent) {
            cb.handleEvent(modifiedEvent);
          } else {
            cb(modifiedEvent);
          }
        }
      };
      this._eventMap = this._eventMap || {};
      if (!this._eventMap[eventNameToWrap]) {
        this._eventMap[eventNameToWrap] = new Map();
      }
      this._eventMap[eventNameToWrap].set(cb, wrappedCallback);
      return nativeAddEventListener.apply(this, [nativeEventName, wrappedCallback]);
    };
    var nativeRemoveEventListener = proto.removeEventListener;
    proto.removeEventListener = function (nativeEventName, cb) {
      if (nativeEventName !== eventNameToWrap || !this._eventMap || !this._eventMap[eventNameToWrap]) {
        return nativeRemoveEventListener.apply(this, arguments);
      }
      if (!this._eventMap[eventNameToWrap].has(cb)) {
        return nativeRemoveEventListener.apply(this, arguments);
      }
      var unwrappedCb = this._eventMap[eventNameToWrap].get(cb);
      this._eventMap[eventNameToWrap].delete(cb);
      if (this._eventMap[eventNameToWrap].size === 0) {
        delete this._eventMap[eventNameToWrap];
      }
      if (Object.keys(this._eventMap).length === 0) {
        delete this._eventMap;
      }
      return nativeRemoveEventListener.apply(this, [nativeEventName, unwrappedCb]);
    };
    Object.defineProperty(proto, 'on' + eventNameToWrap, {
      get() {
        return this['_on' + eventNameToWrap];
      },
      set(cb) {
        if (this['_on' + eventNameToWrap]) {
          this.removeEventListener(eventNameToWrap, this['_on' + eventNameToWrap]);
          delete this['_on' + eventNameToWrap];
        }
        if (cb) {
          this.addEventListener(eventNameToWrap, this['_on' + eventNameToWrap] = cb);
        }
      },
      enumerable: true,
      configurable: true
    });
  }
  function disableLog(bool) {
    if (typeof bool !== 'boolean') {
      return new Error('Argument type: ' + typeof bool + '. Please use a boolean.');
    }
    logDisabled_ = bool;
    return bool ? 'adapter.js logging disabled' : 'adapter.js logging enabled';
  }

  /**
   * Disable or enable deprecation warnings
   * @param {!boolean} bool set to true to disable warnings.
   */
  function disableWarnings(bool) {
    if (typeof bool !== 'boolean') {
      return new Error('Argument type: ' + typeof bool + '. Please use a boolean.');
    }
    deprecationWarnings_ = !bool;
    return 'adapter.js deprecation warnings ' + (bool ? 'disabled' : 'enabled');
  }
  function log$1$1() {
    if (typeof window === 'object') {
      if (logDisabled_) {
        return;
      }
      if (typeof console !== 'undefined' && typeof console.log === 'function') {
        console.log.apply(console, arguments);
      }
    }
  }

  /**
   * Shows a deprecation warning suggesting the modern and spec-compatible API.
   */
  function deprecated(oldMethod, newMethod) {
    if (!deprecationWarnings_) {
      return;
    }
    console.warn(oldMethod + ' is deprecated, please use ' + newMethod + ' instead.');
  }

  /**
   * Browser detector.
   *
   * @return {object} result containing browser and version
   *     properties.
   */
  function detectBrowser(window) {
    // Returned result object.
    var result = {
      browser: null,
      version: null
    };

    // Fail early if it's not a browser
    if (typeof window === 'undefined' || !window.navigator) {
      result.browser = 'Not a browser.';
      return result;
    }
    var {
      navigator
    } = window;
    if (navigator.mozGetUserMedia) {
      // Firefox.
      result.browser = 'firefox';
      result.version = extractVersion(navigator.userAgent, /Firefox\/(\d+)\./, 1);
    } else if (navigator.webkitGetUserMedia || window.isSecureContext === false && window.webkitRTCPeerConnection) {
      // Chrome, Chromium, Webview, Opera.
      // Version matches Chrome/WebRTC version.
      // Chrome 74 removed webkitGetUserMedia on http as well so we need the
      // more complicated fallback to webkitRTCPeerConnection.
      result.browser = 'chrome';
      result.version = extractVersion(navigator.userAgent, /Chrom(e|ium)\/(\d+)\./, 2);
    } else if (window.RTCPeerConnection && navigator.userAgent.match(/AppleWebKit\/(\d+)\./)) {
      // Safari.
      result.browser = 'safari';
      result.version = extractVersion(navigator.userAgent, /AppleWebKit\/(\d+)\./, 1);
      result.supportsUnifiedPlan = window.RTCRtpTransceiver && 'currentDirection' in window.RTCRtpTransceiver.prototype;
    } else {
      // Default fallthrough: not supported.
      result.browser = 'Not a supported browser.';
      return result;
    }
    return result;
  }

  /**
   * Checks if something is an object.
   *
   * @param {*} val The something you want to check.
   * @return true if val is an object, false otherwise.
   */
  function isObject(val) {
    return Object.prototype.toString.call(val) === '[object Object]';
  }

  /**
   * Remove all empty objects and undefined values
   * from a nested object -- an enhanced and vanilla version
   * of Lodash's `compact`.
   */
  function compactObject(data) {
    if (!isObject(data)) {
      return data;
    }
    return Object.keys(data).reduce(function (accumulator, key) {
      var isObj = isObject(data[key]);
      var value = isObj ? compactObject(data[key]) : data[key];
      var isEmptyObject = isObj && !Object.keys(value).length;
      if (value === undefined || isEmptyObject) {
        return accumulator;
      }
      return Object.assign(accumulator, {
        [key]: value
      });
    }, {});
  }

  /* iterates the stats graph recursively. */
  function walkStats(stats, base, resultSet) {
    if (!base || resultSet.has(base.id)) {
      return;
    }
    resultSet.set(base.id, base);
    Object.keys(base).forEach(name => {
      if (name.endsWith('Id')) {
        walkStats(stats, stats.get(base[name]), resultSet);
      } else if (name.endsWith('Ids')) {
        base[name].forEach(id => {
          walkStats(stats, stats.get(id), resultSet);
        });
      }
    });
  }

  /* filter getStats for a sender/receiver track. */
  function filterStats(result, track, outbound) {
    var streamStatsType = outbound ? 'outbound-rtp' : 'inbound-rtp';
    var filteredResult = new Map();
    if (track === null) {
      return filteredResult;
    }
    var trackStats = [];
    result.forEach(value => {
      if (value.type === 'track' && value.trackIdentifier === track.id) {
        trackStats.push(value);
      }
    });
    trackStats.forEach(trackStat => {
      result.forEach(stats => {
        if (stats.type === streamStatsType && stats.trackId === trackStat.id) {
          walkStats(result, stats, filteredResult);
        }
      });
    });
    return filteredResult;
  }

  /*
   *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
   *
   *  Use of this source code is governed by a BSD-style license
   *  that can be found in the LICENSE file in the root of the source
   *  tree.
   */
  var logging = log$1$1;
  function shimGetUserMedia$2(window, browserDetails) {
    var navigator = window && window.navigator;
    if (!navigator.mediaDevices) {
      return;
    }
    var constraintsToChrome_ = function constraintsToChrome_(c) {
      if (typeof c !== 'object' || c.mandatory || c.optional) {
        return c;
      }
      var cc = {};
      Object.keys(c).forEach(key => {
        if (key === 'require' || key === 'advanced' || key === 'mediaSource') {
          return;
        }
        var r = typeof c[key] === 'object' ? c[key] : {
          ideal: c[key]
        };
        if (r.exact !== undefined && typeof r.exact === 'number') {
          r.min = r.max = r.exact;
        }
        var oldname_ = function oldname_(prefix, name) {
          if (prefix) {
            return prefix + name.charAt(0).toUpperCase() + name.slice(1);
          }
          return name === 'deviceId' ? 'sourceId' : name;
        };
        if (r.ideal !== undefined) {
          cc.optional = cc.optional || [];
          var oc = {};
          if (typeof r.ideal === 'number') {
            oc[oldname_('min', key)] = r.ideal;
            cc.optional.push(oc);
            oc = {};
            oc[oldname_('max', key)] = r.ideal;
            cc.optional.push(oc);
          } else {
            oc[oldname_('', key)] = r.ideal;
            cc.optional.push(oc);
          }
        }
        if (r.exact !== undefined && typeof r.exact !== 'number') {
          cc.mandatory = cc.mandatory || {};
          cc.mandatory[oldname_('', key)] = r.exact;
        } else {
          ['min', 'max'].forEach(mix => {
            if (r[mix] !== undefined) {
              cc.mandatory = cc.mandatory || {};
              cc.mandatory[oldname_(mix, key)] = r[mix];
            }
          });
        }
      });
      if (c.advanced) {
        cc.optional = (cc.optional || []).concat(c.advanced);
      }
      return cc;
    };
    var shimConstraints_ = function shimConstraints_(constraints, func) {
      if (browserDetails.version >= 61) {
        return func(constraints);
      }
      constraints = JSON.parse(JSON.stringify(constraints));
      if (constraints && typeof constraints.audio === 'object') {
        var remap = function remap(obj, a, b) {
          if (a in obj && !(b in obj)) {
            obj[b] = obj[a];
            delete obj[a];
          }
        };
        constraints = JSON.parse(JSON.stringify(constraints));
        remap(constraints.audio, 'autoGainControl', 'googAutoGainControl');
        remap(constraints.audio, 'noiseSuppression', 'googNoiseSuppression');
        constraints.audio = constraintsToChrome_(constraints.audio);
      }
      if (constraints && typeof constraints.video === 'object') {
        // Shim facingMode for mobile & surface pro.
        var face = constraints.video.facingMode;
        face = face && (typeof face === 'object' ? face : {
          ideal: face
        });
        var getSupportedFacingModeLies = browserDetails.version < 66;
        if (face && (face.exact === 'user' || face.exact === 'environment' || face.ideal === 'user' || face.ideal === 'environment') && !(navigator.mediaDevices.getSupportedConstraints && navigator.mediaDevices.getSupportedConstraints().facingMode && !getSupportedFacingModeLies)) {
          delete constraints.video.facingMode;
          var matches;
          if (face.exact === 'environment' || face.ideal === 'environment') {
            matches = ['back', 'rear'];
          } else if (face.exact === 'user' || face.ideal === 'user') {
            matches = ['front'];
          }
          if (matches) {
            // Look for matches in label, or use last cam for back (typical).
            return navigator.mediaDevices.enumerateDevices().then(devices => {
              devices = devices.filter(d => d.kind === 'videoinput');
              var dev = devices.find(d => matches.some(match => d.label.toLowerCase().includes(match)));
              if (!dev && devices.length && matches.includes('back')) {
                dev = devices[devices.length - 1]; // more likely the back cam
              }

              if (dev) {
                constraints.video.deviceId = face.exact ? {
                  exact: dev.deviceId
                } : {
                  ideal: dev.deviceId
                };
              }
              constraints.video = constraintsToChrome_(constraints.video);
              logging('chrome: ' + JSON.stringify(constraints));
              return func(constraints);
            });
          }
        }
        constraints.video = constraintsToChrome_(constraints.video);
      }
      logging('chrome: ' + JSON.stringify(constraints));
      return func(constraints);
    };
    var shimError_ = function shimError_(e) {
      if (browserDetails.version >= 64) {
        return e;
      }
      return {
        name: {
          PermissionDeniedError: 'NotAllowedError',
          PermissionDismissedError: 'NotAllowedError',
          InvalidStateError: 'NotAllowedError',
          DevicesNotFoundError: 'NotFoundError',
          ConstraintNotSatisfiedError: 'OverconstrainedError',
          TrackStartError: 'NotReadableError',
          MediaDeviceFailedDueToShutdown: 'NotAllowedError',
          MediaDeviceKillSwitchOn: 'NotAllowedError',
          TabCaptureError: 'AbortError',
          ScreenCaptureError: 'AbortError',
          DeviceCaptureError: 'AbortError'
        }[e.name] || e.name,
        message: e.message,
        constraint: e.constraint || e.constraintName,
        toString() {
          return this.name + (this.message && ': ') + this.message;
        }
      };
    };
    var getUserMedia_ = function getUserMedia_(constraints, onSuccess, onError) {
      shimConstraints_(constraints, c => {
        navigator.webkitGetUserMedia(c, onSuccess, e => {
          if (onError) {
            onError(shimError_(e));
          }
        });
      });
    };
    navigator.getUserMedia = getUserMedia_.bind(navigator);

    // Even though Chrome 45 has navigator.mediaDevices and a getUserMedia
    // function which returns a Promise, it does not accept spec-style
    // constraints.
    if (navigator.mediaDevices.getUserMedia) {
      var origGetUserMedia = navigator.mediaDevices.getUserMedia.bind(navigator.mediaDevices);
      navigator.mediaDevices.getUserMedia = function (cs) {
        return shimConstraints_(cs, c => origGetUserMedia(c).then(stream => {
          if (c.audio && !stream.getAudioTracks().length || c.video && !stream.getVideoTracks().length) {
            stream.getTracks().forEach(track => {
              track.stop();
            });
            throw new DOMException('', 'NotFoundError');
          }
          return stream;
        }, e => Promise.reject(shimError_(e))));
      };
    }
  }

  /*
   *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.
   *
   *  Use of this source code is governed by a BSD-style license
   *  that can be found in the LICENSE file in the root of the source
   *  tree.
   */

  function shimGetDisplayMedia$1(window, getSourceId) {
    if (window.navigator.mediaDevices && 'getDisplayMedia' in window.navigator.mediaDevices) {
      return;
    }
    if (!window.navigator.mediaDevices) {
      return;
    }
    // getSourceId is a function that returns a promise resolving with
    // the sourceId of the screen/window/tab to be shared.
    if (typeof getSourceId !== 'function') {
      console.error('shimGetDisplayMedia: getSourceId argument is not ' + 'a function');
      return;
    }
    window.navigator.mediaDevices.getDisplayMedia = function getDisplayMedia(constraints) {
      return getSourceId(constraints).then(sourceId => {
        var widthSpecified = constraints.video && constraints.video.width;
        var heightSpecified = constraints.video && constraints.video.height;
        var frameRateSpecified = constraints.video && constraints.video.frameRate;
        constraints.video = {
          mandatory: {
            chromeMediaSource: 'desktop',
            chromeMediaSourceId: sourceId,
            maxFrameRate: frameRateSpecified || 3
          }
        };
        if (widthSpecified) {
          constraints.video.mandatory.maxWidth = widthSpecified;
        }
        if (heightSpecified) {
          constraints.video.mandatory.maxHeight = heightSpecified;
        }
        return window.navigator.mediaDevices.getUserMedia(constraints);
      });
    };
  }

  /*
   *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
   *
   *  Use of this source code is governed by a BSD-style license
   *  that can be found in the LICENSE file in the root of the source
   *  tree.
   */
  function shimMediaStream(window) {
    window.MediaStream = window.MediaStream || window.webkitMediaStream;
  }
  function shimOnTrack$1(window) {
    if (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in window.RTCPeerConnection.prototype)) {
      Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {
        get() {
          return this._ontrack;
        },
        set(f) {
          if (this._ontrack) {
            this.removeEventListener('track', this._ontrack);
          }
          this.addEventListener('track', this._ontrack = f);
        },
        enumerable: true,
        configurable: true
      });
      var origSetRemoteDescription = window.RTCPeerConnection.prototype.setRemoteDescription;
      window.RTCPeerConnection.prototype.setRemoteDescription = function setRemoteDescription() {
        if (!this._ontrackpoly) {
          this._ontrackpoly = e => {
            // onaddstream does not fire when a track is added to an existing
            // stream. But stream.onaddtrack is implemented so we use that.
            e.stream.addEventListener('addtrack', te => {
              var receiver;
              if (window.RTCPeerConnection.prototype.getReceivers) {
                receiver = this.getReceivers().find(r => r.track && r.track.id === te.track.id);
              } else {
                receiver = {
                  track: te.track
                };
              }
              var event = new Event('track');
              event.track = te.track;
              event.receiver = receiver;
              event.transceiver = {
                receiver
              };
              event.streams = [e.stream];
              this.dispatchEvent(event);
            });
            e.stream.getTracks().forEach(track => {
              var receiver;
              if (window.RTCPeerConnection.prototype.getReceivers) {
                receiver = this.getReceivers().find(r => r.track && r.track.id === track.id);
              } else {
                receiver = {
                  track
                };
              }
              var event = new Event('track');
              event.track = track;
              event.receiver = receiver;
              event.transceiver = {
                receiver
              };
              event.streams = [e.stream];
              this.dispatchEvent(event);
            });
          };
          this.addEventListener('addstream', this._ontrackpoly);
        }
        return origSetRemoteDescription.apply(this, arguments);
      };
    } else {
      // even if RTCRtpTransceiver is in window, it is only used and
      // emitted in unified-plan. Unfortunately this means we need
      // to unconditionally wrap the event.
      wrapPeerConnectionEvent(window, 'track', e => {
        if (!e.transceiver) {
          Object.defineProperty(e, 'transceiver', {
            value: {
              receiver: e.receiver
            }
          });
        }
        return e;
      });
    }
  }
  function shimGetSendersWithDtmf(window) {
    // Overrides addTrack/removeTrack, depends on shimAddTrackRemoveTrack.
    if (typeof window === 'object' && window.RTCPeerConnection && !('getSenders' in window.RTCPeerConnection.prototype) && 'createDTMFSender' in window.RTCPeerConnection.prototype) {
      var shimSenderWithDtmf = function shimSenderWithDtmf(pc, track) {
        return {
          track,
          get dtmf() {
            if (this._dtmf === undefined) {
              if (track.kind === 'audio') {
                this._dtmf = pc.createDTMFSender(track);
              } else {
                this._dtmf = null;
              }
            }
            return this._dtmf;
          },
          _pc: pc
        };
      };

      // augment addTrack when getSenders is not available.
      if (!window.RTCPeerConnection.prototype.getSenders) {
        window.RTCPeerConnection.prototype.getSenders = function getSenders() {
          this._senders = this._senders || [];
          return this._senders.slice(); // return a copy of the internal state.
        };

        var origAddTrack = window.RTCPeerConnection.prototype.addTrack;
        window.RTCPeerConnection.prototype.addTrack = function addTrack(track, stream) {
          var sender = origAddTrack.apply(this, arguments);
          if (!sender) {
            sender = shimSenderWithDtmf(this, track);
            this._senders.push(sender);
          }
          return sender;
        };
        var origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;
        window.RTCPeerConnection.prototype.removeTrack = function removeTrack(sender) {
          origRemoveTrack.apply(this, arguments);
          var idx = this._senders.indexOf(sender);
          if (idx !== -1) {
            this._senders.splice(idx, 1);
          }
        };
      }
      var origAddStream = window.RTCPeerConnection.prototype.addStream;
      window.RTCPeerConnection.prototype.addStream = function addStream(stream) {
        this._senders = this._senders || [];
        origAddStream.apply(this, [stream]);
        stream.getTracks().forEach(track => {
          this._senders.push(shimSenderWithDtmf(this, track));
        });
      };
      var origRemoveStream = window.RTCPeerConnection.prototype.removeStream;
      window.RTCPeerConnection.prototype.removeStream = function removeStream(stream) {
        this._senders = this._senders || [];
        origRemoveStream.apply(this, [stream]);
        stream.getTracks().forEach(track => {
          var sender = this._senders.find(s => s.track === track);
          if (sender) {
            // remove sender
            this._senders.splice(this._senders.indexOf(sender), 1);
          }
        });
      };
    } else if (typeof window === 'object' && window.RTCPeerConnection && 'getSenders' in window.RTCPeerConnection.prototype && 'createDTMFSender' in window.RTCPeerConnection.prototype && window.RTCRtpSender && !('dtmf' in window.RTCRtpSender.prototype)) {
      var origGetSenders = window.RTCPeerConnection.prototype.getSenders;
      window.RTCPeerConnection.prototype.getSenders = function getSenders() {
        var senders = origGetSenders.apply(this, []);
        senders.forEach(sender => sender._pc = this);
        return senders;
      };
      Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {
        get() {
          if (this._dtmf === undefined) {
            if (this.track.kind === 'audio') {
              this._dtmf = this._pc.createDTMFSender(this.track);
            } else {
              this._dtmf = null;
            }
          }
          return this._dtmf;
        }
      });
    }
  }
  function shimGetStats(window) {
    if (!window.RTCPeerConnection) {
      return;
    }
    var origGetStats = window.RTCPeerConnection.prototype.getStats;
    window.RTCPeerConnection.prototype.getStats = function getStats() {
      var [selector, onSucc, onErr] = arguments;

      // If selector is a function then we are in the old style stats so just
      // pass back the original getStats format to avoid breaking old users.
      if (arguments.length > 0 && typeof selector === 'function') {
        return origGetStats.apply(this, arguments);
      }

      // When spec-style getStats is supported, return those when called with
      // either no arguments or the selector argument is null.
      if (origGetStats.length === 0 && (arguments.length === 0 || typeof selector !== 'function')) {
        return origGetStats.apply(this, []);
      }
      var fixChromeStats_ = function fixChromeStats_(response) {
        var standardReport = {};
        var reports = response.result();
        reports.forEach(report => {
          var standardStats = {
            id: report.id,
            timestamp: report.timestamp,
            type: {
              localcandidate: 'local-candidate',
              remotecandidate: 'remote-candidate'
            }[report.type] || report.type
          };
          report.names().forEach(name => {
            standardStats[name] = report.stat(name);
          });
          standardReport[standardStats.id] = standardStats;
        });
        return standardReport;
      };

      // shim getStats with maplike support
      var makeMapStats = function makeMapStats(stats) {
        return new Map(Object.keys(stats).map(key => [key, stats[key]]));
      };
      if (arguments.length >= 2) {
        var successCallbackWrapper_ = function successCallbackWrapper_(response) {
          onSucc(makeMapStats(fixChromeStats_(response)));
        };
        return origGetStats.apply(this, [successCallbackWrapper_, selector]);
      }

      // promise-support
      return new Promise((resolve, reject) => {
        origGetStats.apply(this, [function (response) {
          resolve(makeMapStats(fixChromeStats_(response)));
        }, reject]);
      }).then(onSucc, onErr);
    };
  }
  function shimSenderReceiverGetStats(window) {
    if (!(typeof window === 'object' && window.RTCPeerConnection && window.RTCRtpSender && window.RTCRtpReceiver)) {
      return;
    }

    // shim sender stats.
    if (!('getStats' in window.RTCRtpSender.prototype)) {
      var origGetSenders = window.RTCPeerConnection.prototype.getSenders;
      if (origGetSenders) {
        window.RTCPeerConnection.prototype.getSenders = function getSenders() {
          var senders = origGetSenders.apply(this, []);
          senders.forEach(sender => sender._pc = this);
          return senders;
        };
      }
      var origAddTrack = window.RTCPeerConnection.prototype.addTrack;
      if (origAddTrack) {
        window.RTCPeerConnection.prototype.addTrack = function addTrack() {
          var sender = origAddTrack.apply(this, arguments);
          sender._pc = this;
          return sender;
        };
      }
      window.RTCRtpSender.prototype.getStats = function getStats() {
        var sender = this;
        return this._pc.getStats().then(result =>
        /* Note: this will include stats of all senders that
         *   send a track with the same id as sender.track as
         *   it is not possible to identify the RTCRtpSender.
         */
        filterStats(result, sender.track, true));
      };
    }

    // shim receiver stats.
    if (!('getStats' in window.RTCRtpReceiver.prototype)) {
      var origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;
      if (origGetReceivers) {
        window.RTCPeerConnection.prototype.getReceivers = function getReceivers() {
          var receivers = origGetReceivers.apply(this, []);
          receivers.forEach(receiver => receiver._pc = this);
          return receivers;
        };
      }
      wrapPeerConnectionEvent(window, 'track', e => {
        e.receiver._pc = e.srcElement;
        return e;
      });
      window.RTCRtpReceiver.prototype.getStats = function getStats() {
        var receiver = this;
        return this._pc.getStats().then(result => filterStats(result, receiver.track, false));
      };
    }
    if (!('getStats' in window.RTCRtpSender.prototype && 'getStats' in window.RTCRtpReceiver.prototype)) {
      return;
    }

    // shim RTCPeerConnection.getStats(track).
    var origGetStats = window.RTCPeerConnection.prototype.getStats;
    window.RTCPeerConnection.prototype.getStats = function getStats() {
      if (arguments.length > 0 && arguments[0] instanceof window.MediaStreamTrack) {
        var track = arguments[0];
        var sender;
        var receiver;
        var err;
        this.getSenders().forEach(s => {
          if (s.track === track) {
            if (sender) {
              err = true;
            } else {
              sender = s;
            }
          }
        });
        this.getReceivers().forEach(r => {
          if (r.track === track) {
            if (receiver) {
              err = true;
            } else {
              receiver = r;
            }
          }
          return r.track === track;
        });
        if (err || sender && receiver) {
          return Promise.reject(new DOMException('There are more than one sender or receiver for the track.', 'InvalidAccessError'));
        } else if (sender) {
          return sender.getStats();
        } else if (receiver) {
          return receiver.getStats();
        }
        return Promise.reject(new DOMException('There is no sender or receiver for the track.', 'InvalidAccessError'));
      }
      return origGetStats.apply(this, arguments);
    };
  }
  function shimAddTrackRemoveTrackWithNative(window) {
    // shim addTrack/removeTrack with native variants in order to make
    // the interactions with legacy getLocalStreams behave as in other browsers.
    // Keeps a mapping stream.id => [stream, rtpsenders...]
    window.RTCPeerConnection.prototype.getLocalStreams = function getLocalStreams() {
      this._shimmedLocalStreams = this._shimmedLocalStreams || {};
      return Object.keys(this._shimmedLocalStreams).map(streamId => this._shimmedLocalStreams[streamId][0]);
    };
    var origAddTrack = window.RTCPeerConnection.prototype.addTrack;
    window.RTCPeerConnection.prototype.addTrack = function addTrack(track, stream) {
      if (!stream) {
        return origAddTrack.apply(this, arguments);
      }
      this._shimmedLocalStreams = this._shimmedLocalStreams || {};
      var sender = origAddTrack.apply(this, arguments);
      if (!this._shimmedLocalStreams[stream.id]) {
        this._shimmedLocalStreams[stream.id] = [stream, sender];
      } else if (this._shimmedLocalStreams[stream.id].indexOf(sender) === -1) {
        this._shimmedLocalStreams[stream.id].push(sender);
      }
      return sender;
    };
    var origAddStream = window.RTCPeerConnection.prototype.addStream;
    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {
      this._shimmedLocalStreams = this._shimmedLocalStreams || {};
      stream.getTracks().forEach(track => {
        var alreadyExists = this.getSenders().find(s => s.track === track);
        if (alreadyExists) {
          throw new DOMException('Track already exists.', 'InvalidAccessError');
        }
      });
      var existingSenders = this.getSenders();
      origAddStream.apply(this, arguments);
      var newSenders = this.getSenders().filter(newSender => existingSenders.indexOf(newSender) === -1);
      this._shimmedLocalStreams[stream.id] = [stream].concat(newSenders);
    };
    var origRemoveStream = window.RTCPeerConnection.prototype.removeStream;
    window.RTCPeerConnection.prototype.removeStream = function removeStream(stream) {
      this._shimmedLocalStreams = this._shimmedLocalStreams || {};
      delete this._shimmedLocalStreams[stream.id];
      return origRemoveStream.apply(this, arguments);
    };
    var origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;
    window.RTCPeerConnection.prototype.removeTrack = function removeTrack(sender) {
      this._shimmedLocalStreams = this._shimmedLocalStreams || {};
      if (sender) {
        Object.keys(this._shimmedLocalStreams).forEach(streamId => {
          var idx = this._shimmedLocalStreams[streamId].indexOf(sender);
          if (idx !== -1) {
            this._shimmedLocalStreams[streamId].splice(idx, 1);
          }
          if (this._shimmedLocalStreams[streamId].length === 1) {
            delete this._shimmedLocalStreams[streamId];
          }
        });
      }
      return origRemoveTrack.apply(this, arguments);
    };
  }
  function shimAddTrackRemoveTrack(window, browserDetails) {
    if (!window.RTCPeerConnection) {
      return;
    }
    // shim addTrack and removeTrack.
    if (window.RTCPeerConnection.prototype.addTrack && browserDetails.version >= 65) {
      return shimAddTrackRemoveTrackWithNative(window);
    }

    // also shim pc.getLocalStreams when addTrack is shimmed
    // to return the original streams.
    var origGetLocalStreams = window.RTCPeerConnection.prototype.getLocalStreams;
    window.RTCPeerConnection.prototype.getLocalStreams = function getLocalStreams() {
      var nativeStreams = origGetLocalStreams.apply(this);
      this._reverseStreams = this._reverseStreams || {};
      return nativeStreams.map(stream => this._reverseStreams[stream.id]);
    };
    var origAddStream = window.RTCPeerConnection.prototype.addStream;
    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {
      this._streams = this._streams || {};
      this._reverseStreams = this._reverseStreams || {};
      stream.getTracks().forEach(track => {
        var alreadyExists = this.getSenders().find(s => s.track === track);
        if (alreadyExists) {
          throw new DOMException('Track already exists.', 'InvalidAccessError');
        }
      });
      // Add identity mapping for consistency with addTrack.
      // Unless this is being used with a stream from addTrack.
      if (!this._reverseStreams[stream.id]) {
        var newStream = new window.MediaStream(stream.getTracks());
        this._streams[stream.id] = newStream;
        this._reverseStreams[newStream.id] = stream;
        stream = newStream;
      }
      origAddStream.apply(this, [stream]);
    };
    var origRemoveStream = window.RTCPeerConnection.prototype.removeStream;
    window.RTCPeerConnection.prototype.removeStream = function removeStream(stream) {
      this._streams = this._streams || {};
      this._reverseStreams = this._reverseStreams || {};
      origRemoveStream.apply(this, [this._streams[stream.id] || stream]);
      delete this._reverseStreams[this._streams[stream.id] ? this._streams[stream.id].id : stream.id];
      delete this._streams[stream.id];
    };
    window.RTCPeerConnection.prototype.addTrack = function addTrack(track, stream) {
      if (this.signalingState === 'closed') {
        throw new DOMException('The RTCPeerConnection\'s signalingState is \'closed\'.', 'InvalidStateError');
      }
      var streams = [].slice.call(arguments, 1);
      if (streams.length !== 1 || !streams[0].getTracks().find(t => t === track)) {
        // this is not fully correct but all we can manage without
        // [[associated MediaStreams]] internal slot.
        throw new DOMException('The adapter.js addTrack polyfill only supports a single ' + ' stream which is associated with the specified track.', 'NotSupportedError');
      }
      var alreadyExists = this.getSenders().find(s => s.track === track);
      if (alreadyExists) {
        throw new DOMException('Track already exists.', 'InvalidAccessError');
      }
      this._streams = this._streams || {};
      this._reverseStreams = this._reverseStreams || {};
      var oldStream = this._streams[stream.id];
      if (oldStream) {
        // this is using odd Chrome behaviour, use with caution:
        // https://bugs.chromium.org/p/webrtc/issues/detail?id=7815
        // Note: we rely on the high-level addTrack/dtmf shim to
        // create the sender with a dtmf sender.
        oldStream.addTrack(track);

        // Trigger ONN async.
        Promise.resolve().then(() => {
          this.dispatchEvent(new Event('negotiationneeded'));
        });
      } else {
        var newStream = new window.MediaStream([track]);
        this._streams[stream.id] = newStream;
        this._reverseStreams[newStream.id] = stream;
        this.addStream(newStream);
      }
      return this.getSenders().find(s => s.track === track);
    };

    // replace the internal stream id with the external one and
    // vice versa.
    function replaceInternalStreamId(pc, description) {
      var sdp = description.sdp;
      Object.keys(pc._reverseStreams || []).forEach(internalId => {
        var externalStream = pc._reverseStreams[internalId];
        var internalStream = pc._streams[externalStream.id];
        sdp = sdp.replace(new RegExp(internalStream.id, 'g'), externalStream.id);
      });
      return new RTCSessionDescription({
        type: description.type,
        sdp
      });
    }
    function replaceExternalStreamId(pc, description) {
      var sdp = description.sdp;
      Object.keys(pc._reverseStreams || []).forEach(internalId => {
        var externalStream = pc._reverseStreams[internalId];
        var internalStream = pc._streams[externalStream.id];
        sdp = sdp.replace(new RegExp(externalStream.id, 'g'), internalStream.id);
      });
      return new RTCSessionDescription({
        type: description.type,
        sdp
      });
    }
    ['createOffer', 'createAnswer'].forEach(function (method) {
      var nativeMethod = window.RTCPeerConnection.prototype[method];
      var methodObj = {
        [method]() {
          var args = arguments;
          var isLegacyCall = arguments.length && typeof arguments[0] === 'function';
          if (isLegacyCall) {
            return nativeMethod.apply(this, [description => {
              var desc = replaceInternalStreamId(this, description);
              args[0].apply(null, [desc]);
            }, err => {
              if (args[1]) {
                args[1].apply(null, err);
              }
            }, arguments[2]]);
          }
          return nativeMethod.apply(this, arguments).then(description => replaceInternalStreamId(this, description));
        }
      };
      window.RTCPeerConnection.prototype[method] = methodObj[method];
    });
    var origSetLocalDescription = window.RTCPeerConnection.prototype.setLocalDescription;
    window.RTCPeerConnection.prototype.setLocalDescription = function setLocalDescription() {
      if (!arguments.length || !arguments[0].type) {
        return origSetLocalDescription.apply(this, arguments);
      }
      arguments[0] = replaceExternalStreamId(this, arguments[0]);
      return origSetLocalDescription.apply(this, arguments);
    };

    // TODO: mangle getStats: https://w3c.github.io/webrtc-stats/#dom-rtcmediastreamstats-streamidentifier

    var origLocalDescription = Object.getOwnPropertyDescriptor(window.RTCPeerConnection.prototype, 'localDescription');
    Object.defineProperty(window.RTCPeerConnection.prototype, 'localDescription', {
      get() {
        var description = origLocalDescription.get.apply(this);
        if (description.type === '') {
          return description;
        }
        return replaceInternalStreamId(this, description);
      }
    });
    window.RTCPeerConnection.prototype.removeTrack = function removeTrack(sender) {
      if (this.signalingState === 'closed') {
        throw new DOMException('The RTCPeerConnection\'s signalingState is \'closed\'.', 'InvalidStateError');
      }
      // We can not yet check for sender instanceof RTCRtpSender
      // since we shim RTPSender. So we check if sender._pc is set.
      if (!sender._pc) {
        throw new DOMException('Argument 1 of RTCPeerConnection.removeTrack ' + 'does not implement interface RTCRtpSender.', 'TypeError');
      }
      var isLocal = sender._pc === this;
      if (!isLocal) {
        throw new DOMException('Sender was not created by this connection.', 'InvalidAccessError');
      }

      // Search for the native stream the senders track belongs to.
      this._streams = this._streams || {};
      var stream;
      Object.keys(this._streams).forEach(streamid => {
        var hasTrack = this._streams[streamid].getTracks().find(track => sender.track === track);
        if (hasTrack) {
          stream = this._streams[streamid];
        }
      });
      if (stream) {
        if (stream.getTracks().length === 1) {
          // if this is the last track of the stream, remove the stream. This
          // takes care of any shimmed _senders.
          this.removeStream(this._reverseStreams[stream.id]);
        } else {
          // relying on the same odd chrome behaviour as above.
          stream.removeTrack(sender.track);
        }
        this.dispatchEvent(new Event('negotiationneeded'));
      }
    };
  }
  function shimPeerConnection$1(window, browserDetails) {
    if (!window.RTCPeerConnection && window.webkitRTCPeerConnection) {
      // very basic support for old versions.
      window.RTCPeerConnection = window.webkitRTCPeerConnection;
    }
    if (!window.RTCPeerConnection) {
      return;
    }

    // shim implicit creation of RTCSessionDescription/RTCIceCandidate
    if (browserDetails.version < 53) {
      ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate'].forEach(function (method) {
        var nativeMethod = window.RTCPeerConnection.prototype[method];
        var methodObj = {
          [method]() {
            arguments[0] = new (method === 'addIceCandidate' ? window.RTCIceCandidate : window.RTCSessionDescription)(arguments[0]);
            return nativeMethod.apply(this, arguments);
          }
        };
        window.RTCPeerConnection.prototype[method] = methodObj[method];
      });
    }
  }

  // Attempt to fix ONN in plan-b mode.
  function fixNegotiationNeeded(window, browserDetails) {
    wrapPeerConnectionEvent(window, 'negotiationneeded', e => {
      var pc = e.target;
      if (browserDetails.version < 72 || pc.getConfiguration && pc.getConfiguration().sdpSemantics === 'plan-b') {
        if (pc.signalingState !== 'stable') {
          return;
        }
      }
      return e;
    });
  }

  var chromeShim = /*#__PURE__*/Object.freeze({
    __proto__: null,
    shimMediaStream: shimMediaStream,
    shimOnTrack: shimOnTrack$1,
    shimGetSendersWithDtmf: shimGetSendersWithDtmf,
    shimGetStats: shimGetStats,
    shimSenderReceiverGetStats: shimSenderReceiverGetStats,
    shimAddTrackRemoveTrackWithNative: shimAddTrackRemoveTrackWithNative,
    shimAddTrackRemoveTrack: shimAddTrackRemoveTrack,
    shimPeerConnection: shimPeerConnection$1,
    fixNegotiationNeeded: fixNegotiationNeeded,
    shimGetUserMedia: shimGetUserMedia$2,
    shimGetDisplayMedia: shimGetDisplayMedia$1
  });

  /*
   *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
   *
   *  Use of this source code is governed by a BSD-style license
   *  that can be found in the LICENSE file in the root of the source
   *  tree.
   */
  function shimGetUserMedia$1(window, browserDetails) {
    var navigator = window && window.navigator;
    var MediaStreamTrack = window && window.MediaStreamTrack;
    navigator.getUserMedia = function (constraints, onSuccess, onError) {
      // Replace Firefox 44+'s deprecation warning with unprefixed version.
      deprecated('navigator.getUserMedia', 'navigator.mediaDevices.getUserMedia');
      navigator.mediaDevices.getUserMedia(constraints).then(onSuccess, onError);
    };
    if (!(browserDetails.version > 55 && 'autoGainControl' in navigator.mediaDevices.getSupportedConstraints())) {
      var remap = function remap(obj, a, b) {
        if (a in obj && !(b in obj)) {
          obj[b] = obj[a];
          delete obj[a];
        }
      };
      var nativeGetUserMedia = navigator.mediaDevices.getUserMedia.bind(navigator.mediaDevices);
      navigator.mediaDevices.getUserMedia = function (c) {
        if (typeof c === 'object' && typeof c.audio === 'object') {
          c = JSON.parse(JSON.stringify(c));
          remap(c.audio, 'autoGainControl', 'mozAutoGainControl');
          remap(c.audio, 'noiseSuppression', 'mozNoiseSuppression');
        }
        return nativeGetUserMedia(c);
      };
      if (MediaStreamTrack && MediaStreamTrack.prototype.getSettings) {
        var nativeGetSettings = MediaStreamTrack.prototype.getSettings;
        MediaStreamTrack.prototype.getSettings = function () {
          var obj = nativeGetSettings.apply(this, arguments);
          remap(obj, 'mozAutoGainControl', 'autoGainControl');
          remap(obj, 'mozNoiseSuppression', 'noiseSuppression');
          return obj;
        };
      }
      if (MediaStreamTrack && MediaStreamTrack.prototype.applyConstraints) {
        var nativeApplyConstraints = MediaStreamTrack.prototype.applyConstraints;
        MediaStreamTrack.prototype.applyConstraints = function (c) {
          if (this.kind === 'audio' && typeof c === 'object') {
            c = JSON.parse(JSON.stringify(c));
            remap(c, 'autoGainControl', 'mozAutoGainControl');
            remap(c, 'noiseSuppression', 'mozNoiseSuppression');
          }
          return nativeApplyConstraints.apply(this, [c]);
        };
      }
    }
  }

  /*
   *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.
   *
   *  Use of this source code is governed by a BSD-style license
   *  that can be found in the LICENSE file in the root of the source
   *  tree.
   */

  function shimGetDisplayMedia(window, preferredMediaSource) {
    if (window.navigator.mediaDevices && 'getDisplayMedia' in window.navigator.mediaDevices) {
      return;
    }
    if (!window.navigator.mediaDevices) {
      return;
    }
    window.navigator.mediaDevices.getDisplayMedia = function getDisplayMedia(constraints) {
      if (!(constraints && constraints.video)) {
        var err = new DOMException('getDisplayMedia without video ' + 'constraints is undefined');
        err.name = 'NotFoundError';
        // from https://heycam.github.io/webidl/#idl-DOMException-error-names
        err.code = 8;
        return Promise.reject(err);
      }
      if (constraints.video === true) {
        constraints.video = {
          mediaSource: preferredMediaSource
        };
      } else {
        constraints.video.mediaSource = preferredMediaSource;
      }
      return window.navigator.mediaDevices.getUserMedia(constraints);
    };
  }

  /*
   *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
   *
   *  Use of this source code is governed by a BSD-style license
   *  that can be found in the LICENSE file in the root of the source
   *  tree.
   */
  function shimOnTrack(window) {
    if (typeof window === 'object' && window.RTCTrackEvent && 'receiver' in window.RTCTrackEvent.prototype && !('transceiver' in window.RTCTrackEvent.prototype)) {
      Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {
        get() {
          return {
            receiver: this.receiver
          };
        }
      });
    }
  }
  function shimPeerConnection(window, browserDetails) {
    if (typeof window !== 'object' || !(window.RTCPeerConnection || window.mozRTCPeerConnection)) {
      return; // probably media.peerconnection.enabled=false in about:config
    }

    if (!window.RTCPeerConnection && window.mozRTCPeerConnection) {
      // very basic support for old versions.
      window.RTCPeerConnection = window.mozRTCPeerConnection;
    }
    if (browserDetails.version < 53) {
      // shim away need for obsolete RTCIceCandidate/RTCSessionDescription.
      ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate'].forEach(function (method) {
        var nativeMethod = window.RTCPeerConnection.prototype[method];
        var methodObj = {
          [method]() {
            arguments[0] = new (method === 'addIceCandidate' ? window.RTCIceCandidate : window.RTCSessionDescription)(arguments[0]);
            return nativeMethod.apply(this, arguments);
          }
        };
        window.RTCPeerConnection.prototype[method] = methodObj[method];
      });
    }
    var modernStatsTypes = {
      inboundrtp: 'inbound-rtp',
      outboundrtp: 'outbound-rtp',
      candidatepair: 'candidate-pair',
      localcandidate: 'local-candidate',
      remotecandidate: 'remote-candidate'
    };
    var nativeGetStats = window.RTCPeerConnection.prototype.getStats;
    window.RTCPeerConnection.prototype.getStats = function getStats() {
      var [selector, onSucc, onErr] = arguments;
      return nativeGetStats.apply(this, [selector || null]).then(stats => {
        if (browserDetails.version < 53 && !onSucc) {
          // Shim only promise getStats with spec-hyphens in type names
          // Leave callback version alone; misc old uses of forEach before Map
          try {
            stats.forEach(stat => {
              stat.type = modernStatsTypes[stat.type] || stat.type;
            });
          } catch (e) {
            if (e.name !== 'TypeError') {
              throw e;
            }
            // Avoid TypeError: "type" is read-only, in old versions. 34-43ish
            stats.forEach((stat, i) => {
              stats.set(i, Object.assign({}, stat, {
                type: modernStatsTypes[stat.type] || stat.type
              }));
            });
          }
        }
        return stats;
      }).then(onSucc, onErr);
    };
  }
  function shimSenderGetStats(window) {
    if (!(typeof window === 'object' && window.RTCPeerConnection && window.RTCRtpSender)) {
      return;
    }
    if (window.RTCRtpSender && 'getStats' in window.RTCRtpSender.prototype) {
      return;
    }
    var origGetSenders = window.RTCPeerConnection.prototype.getSenders;
    if (origGetSenders) {
      window.RTCPeerConnection.prototype.getSenders = function getSenders() {
        var senders = origGetSenders.apply(this, []);
        senders.forEach(sender => sender._pc = this);
        return senders;
      };
    }
    var origAddTrack = window.RTCPeerConnection.prototype.addTrack;
    if (origAddTrack) {
      window.RTCPeerConnection.prototype.addTrack = function addTrack() {
        var sender = origAddTrack.apply(this, arguments);
        sender._pc = this;
        return sender;
      };
    }
    window.RTCRtpSender.prototype.getStats = function getStats() {
      return this.track ? this._pc.getStats(this.track) : Promise.resolve(new Map());
    };
  }
  function shimReceiverGetStats(window) {
    if (!(typeof window === 'object' && window.RTCPeerConnection && window.RTCRtpSender)) {
      return;
    }
    if (window.RTCRtpSender && 'getStats' in window.RTCRtpReceiver.prototype) {
      return;
    }
    var origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;
    if (origGetReceivers) {
      window.RTCPeerConnection.prototype.getReceivers = function getReceivers() {
        var receivers = origGetReceivers.apply(this, []);
        receivers.forEach(receiver => receiver._pc = this);
        return receivers;
      };
    }
    wrapPeerConnectionEvent(window, 'track', e => {
      e.receiver._pc = e.srcElement;
      return e;
    });
    window.RTCRtpReceiver.prototype.getStats = function getStats() {
      return this._pc.getStats(this.track);
    };
  }
  function shimRemoveStream(window) {
    if (!window.RTCPeerConnection || 'removeStream' in window.RTCPeerConnection.prototype) {
      return;
    }
    window.RTCPeerConnection.prototype.removeStream = function removeStream(stream) {
      deprecated('removeStream', 'removeTrack');
      this.getSenders().forEach(sender => {
        if (sender.track && stream.getTracks().includes(sender.track)) {
          this.removeTrack(sender);
        }
      });
    };
  }
  function shimRTCDataChannel(window) {
    // rename DataChannel to RTCDataChannel (native fix in FF60):
    // https://bugzilla.mozilla.org/show_bug.cgi?id=1173851
    if (window.DataChannel && !window.RTCDataChannel) {
      window.RTCDataChannel = window.DataChannel;
    }
  }
  function shimAddTransceiver(window) {
    // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647
    // Firefox ignores the init sendEncodings options passed to addTransceiver
    // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918
    if (!(typeof window === 'object' && window.RTCPeerConnection)) {
      return;
    }
    var origAddTransceiver = window.RTCPeerConnection.prototype.addTransceiver;
    if (origAddTransceiver) {
      window.RTCPeerConnection.prototype.addTransceiver = function addTransceiver() {
        this.setParametersPromises = [];
        // WebIDL input coercion and validation
        var sendEncodings = arguments[1] && arguments[1].sendEncodings;
        if (sendEncodings === undefined) {
          sendEncodings = [];
        }
        sendEncodings = [...sendEncodings];
        var shouldPerformCheck = sendEncodings.length > 0;
        if (shouldPerformCheck) {
          // If sendEncodings params are provided, validate grammar
          sendEncodings.forEach(encodingParam => {
            if ('rid' in encodingParam) {
              var ridRegex = /^[a-z0-9]{0,16}$/i;
              if (!ridRegex.test(encodingParam.rid)) {
                throw new TypeError('Invalid RID value provided.');
              }
            }
            if ('scaleResolutionDownBy' in encodingParam) {
              if (!(parseFloat(encodingParam.scaleResolutionDownBy) >= 1.0)) {
                throw new RangeError('scale_resolution_down_by must be >= 1.0');
              }
            }
            if ('maxFramerate' in encodingParam) {
              if (!(parseFloat(encodingParam.maxFramerate) >= 0)) {
                throw new RangeError('max_framerate must be >= 0.0');
              }
            }
          });
        }
        var transceiver = origAddTransceiver.apply(this, arguments);
        if (shouldPerformCheck) {
          // Check if the init options were applied. If not we do this in an
          // asynchronous way and save the promise reference in a global object.
          // This is an ugly hack, but at the same time is way more robust than
          // checking the sender parameters before and after the createOffer
          // Also note that after the createoffer we are not 100% sure that
          // the params were asynchronously applied so we might miss the
          // opportunity to recreate offer.
          var {
            sender
          } = transceiver;
          var params = sender.getParameters();
          if (!('encodings' in params) ||
          // Avoid being fooled by patched getParameters() below.
          params.encodings.length === 1 && Object.keys(params.encodings[0]).length === 0) {
            params.encodings = sendEncodings;
            sender.sendEncodings = sendEncodings;
            this.setParametersPromises.push(sender.setParameters(params).then(() => {
              delete sender.sendEncodings;
            }).catch(() => {
              delete sender.sendEncodings;
            }));
          }
        }
        return transceiver;
      };
    }
  }
  function shimGetParameters(window) {
    if (!(typeof window === 'object' && window.RTCRtpSender)) {
      return;
    }
    var origGetParameters = window.RTCRtpSender.prototype.getParameters;
    if (origGetParameters) {
      window.RTCRtpSender.prototype.getParameters = function getParameters() {
        var params = origGetParameters.apply(this, arguments);
        if (!('encodings' in params)) {
          params.encodings = [].concat(this.sendEncodings || [{}]);
        }
        return params;
      };
    }
  }
  function shimCreateOffer(window) {
    // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647
    // Firefox ignores the init sendEncodings options passed to addTransceiver
    // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918
    if (!(typeof window === 'object' && window.RTCPeerConnection)) {
      return;
    }
    var origCreateOffer = window.RTCPeerConnection.prototype.createOffer;
    window.RTCPeerConnection.prototype.createOffer = function createOffer() {
      if (this.setParametersPromises && this.setParametersPromises.length) {
        return Promise.all(this.setParametersPromises).then(() => {
          return origCreateOffer.apply(this, arguments);
        }).finally(() => {
          this.setParametersPromises = [];
        });
      }
      return origCreateOffer.apply(this, arguments);
    };
  }
  function shimCreateAnswer(window) {
    // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647
    // Firefox ignores the init sendEncodings options passed to addTransceiver
    // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918
    if (!(typeof window === 'object' && window.RTCPeerConnection)) {
      return;
    }
    var origCreateAnswer = window.RTCPeerConnection.prototype.createAnswer;
    window.RTCPeerConnection.prototype.createAnswer = function createAnswer() {
      if (this.setParametersPromises && this.setParametersPromises.length) {
        return Promise.all(this.setParametersPromises).then(() => {
          return origCreateAnswer.apply(this, arguments);
        }).finally(() => {
          this.setParametersPromises = [];
        });
      }
      return origCreateAnswer.apply(this, arguments);
    };
  }

  var firefoxShim = /*#__PURE__*/Object.freeze({
    __proto__: null,
    shimOnTrack: shimOnTrack,
    shimPeerConnection: shimPeerConnection,
    shimSenderGetStats: shimSenderGetStats,
    shimReceiverGetStats: shimReceiverGetStats,
    shimRemoveStream: shimRemoveStream,
    shimRTCDataChannel: shimRTCDataChannel,
    shimAddTransceiver: shimAddTransceiver,
    shimGetParameters: shimGetParameters,
    shimCreateOffer: shimCreateOffer,
    shimCreateAnswer: shimCreateAnswer,
    shimGetUserMedia: shimGetUserMedia$1,
    shimGetDisplayMedia: shimGetDisplayMedia
  });

  /*
   *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
   *
   *  Use of this source code is governed by a BSD-style license
   *  that can be found in the LICENSE file in the root of the source
   *  tree.
   */
  function shimLocalStreamsAPI(window) {
    if (typeof window !== 'object' || !window.RTCPeerConnection) {
      return;
    }
    if (!('getLocalStreams' in window.RTCPeerConnection.prototype)) {
      window.RTCPeerConnection.prototype.getLocalStreams = function getLocalStreams() {
        if (!this._localStreams) {
          this._localStreams = [];
        }
        return this._localStreams;
      };
    }
    if (!('addStream' in window.RTCPeerConnection.prototype)) {
      var _addTrack = window.RTCPeerConnection.prototype.addTrack;
      window.RTCPeerConnection.prototype.addStream = function addStream(stream) {
        if (!this._localStreams) {
          this._localStreams = [];
        }
        if (!this._localStreams.includes(stream)) {
          this._localStreams.push(stream);
        }
        // Try to emulate Chrome's behaviour of adding in audio-video order.
        // Safari orders by track id.
        stream.getAudioTracks().forEach(track => _addTrack.call(this, track, stream));
        stream.getVideoTracks().forEach(track => _addTrack.call(this, track, stream));
      };
      window.RTCPeerConnection.prototype.addTrack = function addTrack(track) {
        for (var _len = arguments.length, streams = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          streams[_key - 1] = arguments[_key];
        }
        if (streams) {
          streams.forEach(stream => {
            if (!this._localStreams) {
              this._localStreams = [stream];
            } else if (!this._localStreams.includes(stream)) {
              this._localStreams.push(stream);
            }
          });
        }
        return _addTrack.apply(this, arguments);
      };
    }
    if (!('removeStream' in window.RTCPeerConnection.prototype)) {
      window.RTCPeerConnection.prototype.removeStream = function removeStream(stream) {
        if (!this._localStreams) {
          this._localStreams = [];
        }
        var index = this._localStreams.indexOf(stream);
        if (index === -1) {
          return;
        }
        this._localStreams.splice(index, 1);
        var tracks = stream.getTracks();
        this.getSenders().forEach(sender => {
          if (tracks.includes(sender.track)) {
            this.removeTrack(sender);
          }
        });
      };
    }
  }
  function shimRemoteStreamsAPI(window) {
    if (typeof window !== 'object' || !window.RTCPeerConnection) {
      return;
    }
    if (!('getRemoteStreams' in window.RTCPeerConnection.prototype)) {
      window.RTCPeerConnection.prototype.getRemoteStreams = function getRemoteStreams() {
        return this._remoteStreams ? this._remoteStreams : [];
      };
    }
    if (!('onaddstream' in window.RTCPeerConnection.prototype)) {
      Object.defineProperty(window.RTCPeerConnection.prototype, 'onaddstream', {
        get() {
          return this._onaddstream;
        },
        set(f) {
          if (this._onaddstream) {
            this.removeEventListener('addstream', this._onaddstream);
            this.removeEventListener('track', this._onaddstreampoly);
          }
          this.addEventListener('addstream', this._onaddstream = f);
          this.addEventListener('track', this._onaddstreampoly = e => {
            e.streams.forEach(stream => {
              if (!this._remoteStreams) {
                this._remoteStreams = [];
              }
              if (this._remoteStreams.includes(stream)) {
                return;
              }
              this._remoteStreams.push(stream);
              var event = new Event('addstream');
              event.stream = stream;
              this.dispatchEvent(event);
            });
          });
        }
      });
      var origSetRemoteDescription = window.RTCPeerConnection.prototype.setRemoteDescription;
      window.RTCPeerConnection.prototype.setRemoteDescription = function setRemoteDescription() {
        var pc = this;
        if (!this._onaddstreampoly) {
          this.addEventListener('track', this._onaddstreampoly = function (e) {
            e.streams.forEach(stream => {
              if (!pc._remoteStreams) {
                pc._remoteStreams = [];
              }
              if (pc._remoteStreams.indexOf(stream) >= 0) {
                return;
              }
              pc._remoteStreams.push(stream);
              var event = new Event('addstream');
              event.stream = stream;
              pc.dispatchEvent(event);
            });
          });
        }
        return origSetRemoteDescription.apply(pc, arguments);
      };
    }
  }
  function shimCallbacksAPI(window) {
    if (typeof window !== 'object' || !window.RTCPeerConnection) {
      return;
    }
    var prototype = window.RTCPeerConnection.prototype;
    var origCreateOffer = prototype.createOffer;
    var origCreateAnswer = prototype.createAnswer;
    var setLocalDescription = prototype.setLocalDescription;
    var setRemoteDescription = prototype.setRemoteDescription;
    var addIceCandidate = prototype.addIceCandidate;
    prototype.createOffer = function createOffer(successCallback, failureCallback) {
      var options = arguments.length >= 2 ? arguments[2] : arguments[0];
      var promise = origCreateOffer.apply(this, [options]);
      if (!failureCallback) {
        return promise;
      }
      promise.then(successCallback, failureCallback);
      return Promise.resolve();
    };
    prototype.createAnswer = function createAnswer(successCallback, failureCallback) {
      var options = arguments.length >= 2 ? arguments[2] : arguments[0];
      var promise = origCreateAnswer.apply(this, [options]);
      if (!failureCallback) {
        return promise;
      }
      promise.then(successCallback, failureCallback);
      return Promise.resolve();
    };
    var withCallback = function withCallback(description, successCallback, failureCallback) {
      var promise = setLocalDescription.apply(this, [description]);
      if (!failureCallback) {
        return promise;
      }
      promise.then(successCallback, failureCallback);
      return Promise.resolve();
    };
    prototype.setLocalDescription = withCallback;
    withCallback = function withCallback(description, successCallback, failureCallback) {
      var promise = setRemoteDescription.apply(this, [description]);
      if (!failureCallback) {
        return promise;
      }
      promise.then(successCallback, failureCallback);
      return Promise.resolve();
    };
    prototype.setRemoteDescription = withCallback;
    withCallback = function withCallback(candidate, successCallback, failureCallback) {
      var promise = addIceCandidate.apply(this, [candidate]);
      if (!failureCallback) {
        return promise;
      }
      promise.then(successCallback, failureCallback);
      return Promise.resolve();
    };
    prototype.addIceCandidate = withCallback;
  }
  function shimGetUserMedia(window) {
    var navigator = window && window.navigator;
    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
      // shim not needed in Safari 12.1
      var mediaDevices = navigator.mediaDevices;
      var _getUserMedia = mediaDevices.getUserMedia.bind(mediaDevices);
      navigator.mediaDevices.getUserMedia = constraints => {
        return _getUserMedia(shimConstraints(constraints));
      };
    }
    if (!navigator.getUserMedia && navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
      navigator.getUserMedia = function getUserMedia(constraints, cb, errcb) {
        navigator.mediaDevices.getUserMedia(constraints).then(cb, errcb);
      }.bind(navigator);
    }
  }
  function shimConstraints(constraints) {
    if (constraints && constraints.video !== undefined) {
      return Object.assign({}, constraints, {
        video: compactObject(constraints.video)
      });
    }
    return constraints;
  }
  function shimRTCIceServerUrls(window) {
    if (!window.RTCPeerConnection) {
      return;
    }
    // migrate from non-spec RTCIceServer.url to RTCIceServer.urls
    var OrigPeerConnection = window.RTCPeerConnection;
    window.RTCPeerConnection = function RTCPeerConnection(pcConfig, pcConstraints) {
      if (pcConfig && pcConfig.iceServers) {
        var newIceServers = [];
        for (var i = 0; i < pcConfig.iceServers.length; i++) {
          var server = pcConfig.iceServers[i];
          if (!server.hasOwnProperty('urls') && server.hasOwnProperty('url')) {
            deprecated('RTCIceServer.url', 'RTCIceServer.urls');
            server = JSON.parse(JSON.stringify(server));
            server.urls = server.url;
            delete server.url;
            newIceServers.push(server);
          } else {
            newIceServers.push(pcConfig.iceServers[i]);
          }
        }
        pcConfig.iceServers = newIceServers;
      }
      return new OrigPeerConnection(pcConfig, pcConstraints);
    };
    window.RTCPeerConnection.prototype = OrigPeerConnection.prototype;
    // wrap static methods. Currently just generateCertificate.
    if ('generateCertificate' in OrigPeerConnection) {
      Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {
        get() {
          return OrigPeerConnection.generateCertificate;
        }
      });
    }
  }
  function shimTrackEventTransceiver(window) {
    // Add event.transceiver member over deprecated event.receiver
    if (typeof window === 'object' && window.RTCTrackEvent && 'receiver' in window.RTCTrackEvent.prototype && !('transceiver' in window.RTCTrackEvent.prototype)) {
      Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {
        get() {
          return {
            receiver: this.receiver
          };
        }
      });
    }
  }
  function shimCreateOfferLegacy(window) {
    var origCreateOffer = window.RTCPeerConnection.prototype.createOffer;
    window.RTCPeerConnection.prototype.createOffer = function createOffer(offerOptions) {
      if (offerOptions) {
        if (typeof offerOptions.offerToReceiveAudio !== 'undefined') {
          // support bit values
          offerOptions.offerToReceiveAudio = !!offerOptions.offerToReceiveAudio;
        }
        var audioTransceiver = this.getTransceivers().find(transceiver => transceiver.receiver.track.kind === 'audio');
        if (offerOptions.offerToReceiveAudio === false && audioTransceiver) {
          if (audioTransceiver.direction === 'sendrecv') {
            if (audioTransceiver.setDirection) {
              audioTransceiver.setDirection('sendonly');
            } else {
              audioTransceiver.direction = 'sendonly';
            }
          } else if (audioTransceiver.direction === 'recvonly') {
            if (audioTransceiver.setDirection) {
              audioTransceiver.setDirection('inactive');
            } else {
              audioTransceiver.direction = 'inactive';
            }
          }
        } else if (offerOptions.offerToReceiveAudio === true && !audioTransceiver) {
          this.addTransceiver('audio', {
            direction: 'recvonly'
          });
        }
        if (typeof offerOptions.offerToReceiveVideo !== 'undefined') {
          // support bit values
          offerOptions.offerToReceiveVideo = !!offerOptions.offerToReceiveVideo;
        }
        var videoTransceiver = this.getTransceivers().find(transceiver => transceiver.receiver.track.kind === 'video');
        if (offerOptions.offerToReceiveVideo === false && videoTransceiver) {
          if (videoTransceiver.direction === 'sendrecv') {
            if (videoTransceiver.setDirection) {
              videoTransceiver.setDirection('sendonly');
            } else {
              videoTransceiver.direction = 'sendonly';
            }
          } else if (videoTransceiver.direction === 'recvonly') {
            if (videoTransceiver.setDirection) {
              videoTransceiver.setDirection('inactive');
            } else {
              videoTransceiver.direction = 'inactive';
            }
          }
        } else if (offerOptions.offerToReceiveVideo === true && !videoTransceiver) {
          this.addTransceiver('video', {
            direction: 'recvonly'
          });
        }
      }
      return origCreateOffer.apply(this, arguments);
    };
  }
  function shimAudioContext(window) {
    if (typeof window !== 'object' || window.AudioContext) {
      return;
    }
    window.AudioContext = window.webkitAudioContext;
  }

  var safariShim = /*#__PURE__*/Object.freeze({
    __proto__: null,
    shimLocalStreamsAPI: shimLocalStreamsAPI,
    shimRemoteStreamsAPI: shimRemoteStreamsAPI,
    shimCallbacksAPI: shimCallbacksAPI,
    shimGetUserMedia: shimGetUserMedia,
    shimConstraints: shimConstraints,
    shimRTCIceServerUrls: shimRTCIceServerUrls,
    shimTrackEventTransceiver: shimTrackEventTransceiver,
    shimCreateOfferLegacy: shimCreateOfferLegacy,
    shimAudioContext: shimAudioContext
  });

  var sdp$1 = {exports: {}};

  /* eslint-env node */
  (function (module) {

    // SDP helpers.
    var SDPUtils = {};

    // Generate an alphanumeric identifier for cname or mids.
    // TODO: use UUIDs instead? https://gist.github.com/jed/982883
    SDPUtils.generateIdentifier = function () {
      return Math.random().toString(36).substr(2, 10);
    };

    // The RTCP CNAME used by all peerconnections from the same JS.
    SDPUtils.localCName = SDPUtils.generateIdentifier();

    // Splits SDP into lines, dealing with both CRLF and LF.
    SDPUtils.splitLines = function (blob) {
      return blob.trim().split('\n').map(line => line.trim());
    };
    // Splits SDP into sessionpart and mediasections. Ensures CRLF.
    SDPUtils.splitSections = function (blob) {
      var parts = blob.split('\nm=');
      return parts.map((part, index) => (index > 0 ? 'm=' + part : part).trim() + '\r\n');
    };

    // Returns the session description.
    SDPUtils.getDescription = function (blob) {
      var sections = SDPUtils.splitSections(blob);
      return sections && sections[0];
    };

    // Returns the individual media sections.
    SDPUtils.getMediaSections = function (blob) {
      var sections = SDPUtils.splitSections(blob);
      sections.shift();
      return sections;
    };

    // Returns lines that start with a certain prefix.
    SDPUtils.matchPrefix = function (blob, prefix) {
      return SDPUtils.splitLines(blob).filter(line => line.indexOf(prefix) === 0);
    };

    // Parses an ICE candidate line. Sample input:
    // candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8
    // rport 55996"
    // Input can be prefixed with a=.
    SDPUtils.parseCandidate = function (line) {
      var parts;
      // Parse both variants.
      if (line.indexOf('a=candidate:') === 0) {
        parts = line.substring(12).split(' ');
      } else {
        parts = line.substring(10).split(' ');
      }
      var candidate = {
        foundation: parts[0],
        component: {
          1: 'rtp',
          2: 'rtcp'
        }[parts[1]] || parts[1],
        protocol: parts[2].toLowerCase(),
        priority: parseInt(parts[3], 10),
        ip: parts[4],
        address: parts[4],
        // address is an alias for ip.
        port: parseInt(parts[5], 10),
        // skip parts[6] == 'typ'
        type: parts[7]
      };
      for (var i = 8; i < parts.length; i += 2) {
        switch (parts[i]) {
          case 'raddr':
            candidate.relatedAddress = parts[i + 1];
            break;
          case 'rport':
            candidate.relatedPort = parseInt(parts[i + 1], 10);
            break;
          case 'tcptype':
            candidate.tcpType = parts[i + 1];
            break;
          case 'ufrag':
            candidate.ufrag = parts[i + 1]; // for backward compatibility.
            candidate.usernameFragment = parts[i + 1];
            break;
          default:
            // extension handling, in particular ufrag. Don't overwrite.
            if (candidate[parts[i]] === undefined) {
              candidate[parts[i]] = parts[i + 1];
            }
            break;
        }
      }
      return candidate;
    };

    // Translates a candidate object into SDP candidate attribute.
    // This does not include the a= prefix!
    SDPUtils.writeCandidate = function (candidate) {
      var sdp = [];
      sdp.push(candidate.foundation);
      var component = candidate.component;
      if (component === 'rtp') {
        sdp.push(1);
      } else if (component === 'rtcp') {
        sdp.push(2);
      } else {
        sdp.push(component);
      }
      sdp.push(candidate.protocol.toUpperCase());
      sdp.push(candidate.priority);
      sdp.push(candidate.address || candidate.ip);
      sdp.push(candidate.port);
      var type = candidate.type;
      sdp.push('typ');
      sdp.push(type);
      if (type !== 'host' && candidate.relatedAddress && candidate.relatedPort) {
        sdp.push('raddr');
        sdp.push(candidate.relatedAddress);
        sdp.push('rport');
        sdp.push(candidate.relatedPort);
      }
      if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {
        sdp.push('tcptype');
        sdp.push(candidate.tcpType);
      }
      if (candidate.usernameFragment || candidate.ufrag) {
        sdp.push('ufrag');
        sdp.push(candidate.usernameFragment || candidate.ufrag);
      }
      return 'candidate:' + sdp.join(' ');
    };

    // Parses an ice-options line, returns an array of option tags.
    // Sample input:
    // a=ice-options:foo bar
    SDPUtils.parseIceOptions = function (line) {
      return line.substr(14).split(' ');
    };

    // Parses a rtpmap line, returns RTCRtpCoddecParameters. Sample input:
    // a=rtpmap:111 opus/48000/2
    SDPUtils.parseRtpMap = function (line) {
      var parts = line.substr(9).split(' ');
      var parsed = {
        payloadType: parseInt(parts.shift(), 10) // was: id
      };

      parts = parts[0].split('/');
      parsed.name = parts[0];
      parsed.clockRate = parseInt(parts[1], 10); // was: clockrate
      parsed.channels = parts.length === 3 ? parseInt(parts[2], 10) : 1;
      // legacy alias, got renamed back to channels in ORTC.
      parsed.numChannels = parsed.channels;
      return parsed;
    };

    // Generates a rtpmap line from RTCRtpCodecCapability or
    // RTCRtpCodecParameters.
    SDPUtils.writeRtpMap = function (codec) {
      var pt = codec.payloadType;
      if (codec.preferredPayloadType !== undefined) {
        pt = codec.preferredPayloadType;
      }
      var channels = codec.channels || codec.numChannels || 1;
      return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate + (channels !== 1 ? '/' + channels : '') + '\r\n';
    };

    // Parses a extmap line (headerextension from RFC 5285). Sample input:
    // a=extmap:2 urn:ietf:params:rtp-hdrext:toffset
    // a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset
    SDPUtils.parseExtmap = function (line) {
      var parts = line.substr(9).split(' ');
      return {
        id: parseInt(parts[0], 10),
        direction: parts[0].indexOf('/') > 0 ? parts[0].split('/')[1] : 'sendrecv',
        uri: parts[1]
      };
    };

    // Generates an extmap line from RTCRtpHeaderExtensionParameters or
    // RTCRtpHeaderExtension.
    SDPUtils.writeExtmap = function (headerExtension) {
      return 'a=extmap:' + (headerExtension.id || headerExtension.preferredId) + (headerExtension.direction && headerExtension.direction !== 'sendrecv' ? '/' + headerExtension.direction : '') + ' ' + headerExtension.uri + '\r\n';
    };

    // Parses a fmtp line, returns dictionary. Sample input:
    // a=fmtp:96 vbr=on;cng=on
    // Also deals with vbr=on; cng=on
    SDPUtils.parseFmtp = function (line) {
      var parsed = {};
      var kv;
      var parts = line.substr(line.indexOf(' ') + 1).split(';');
      for (var j = 0; j < parts.length; j++) {
        kv = parts[j].trim().split('=');
        parsed[kv[0].trim()] = kv[1];
      }
      return parsed;
    };

    // Generates a fmtp line from RTCRtpCodecCapability or RTCRtpCodecParameters.
    SDPUtils.writeFmtp = function (codec) {
      var line = '';
      var pt = codec.payloadType;
      if (codec.preferredPayloadType !== undefined) {
        pt = codec.preferredPayloadType;
      }
      if (codec.parameters && Object.keys(codec.parameters).length) {
        var params = [];
        Object.keys(codec.parameters).forEach(param => {
          if (codec.parameters[param] !== undefined) {
            params.push(param + '=' + codec.parameters[param]);
          } else {
            params.push(param);
          }
        });
        line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\r\n';
      }
      return line;
    };

    // Parses a rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:
    // a=rtcp-fb:98 nack rpsi
    SDPUtils.parseRtcpFb = function (line) {
      var parts = line.substr(line.indexOf(' ') + 1).split(' ');
      return {
        type: parts.shift(),
        parameter: parts.join(' ')
      };
    };

    // Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.
    SDPUtils.writeRtcpFb = function (codec) {
      var lines = '';
      var pt = codec.payloadType;
      if (codec.preferredPayloadType !== undefined) {
        pt = codec.preferredPayloadType;
      }
      if (codec.rtcpFeedback && codec.rtcpFeedback.length) {
        // FIXME: special handling for trr-int?
        codec.rtcpFeedback.forEach(fb => {
          lines += 'a=rtcp-fb:' + pt + ' ' + fb.type + (fb.parameter && fb.parameter.length ? ' ' + fb.parameter : '') + '\r\n';
        });
      }
      return lines;
    };

    // Parses a RFC 5576 ssrc media attribute. Sample input:
    // a=ssrc:3735928559 cname:something
    SDPUtils.parseSsrcMedia = function (line) {
      var sp = line.indexOf(' ');
      var parts = {
        ssrc: parseInt(line.substr(7, sp - 7), 10)
      };
      var colon = line.indexOf(':', sp);
      if (colon > -1) {
        parts.attribute = line.substr(sp + 1, colon - sp - 1);
        parts.value = line.substr(colon + 1);
      } else {
        parts.attribute = line.substr(sp + 1);
      }
      return parts;
    };

    // Parse a ssrc-group line (see RFC 5576). Sample input:
    // a=ssrc-group:semantics 12 34
    SDPUtils.parseSsrcGroup = function (line) {
      var parts = line.substr(13).split(' ');
      return {
        semantics: parts.shift(),
        ssrcs: parts.map(ssrc => parseInt(ssrc, 10))
      };
    };

    // Extracts the MID (RFC 5888) from a media section.
    // Returns the MID or undefined if no mid line was found.
    SDPUtils.getMid = function (mediaSection) {
      var mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0];
      if (mid) {
        return mid.substr(6);
      }
    };

    // Parses a fingerprint line for DTLS-SRTP.
    SDPUtils.parseFingerprint = function (line) {
      var parts = line.substr(14).split(' ');
      return {
        algorithm: parts[0].toLowerCase(),
        // algorithm is case-sensitive in Edge.
        value: parts[1].toUpperCase() // the definition is upper-case in RFC 4572.
      };
    };

    // Extracts DTLS parameters from SDP media section or sessionpart.
    // FIXME: for consistency with other functions this should only
    //   get the fingerprint line as input. See also getIceParameters.
    SDPUtils.getDtlsParameters = function (mediaSection, sessionpart) {
      var lines = SDPUtils.matchPrefix(mediaSection + sessionpart, 'a=fingerprint:');
      // Note: a=setup line is ignored since we use the 'auto' role in Edge.
      return {
        role: 'auto',
        fingerprints: lines.map(SDPUtils.parseFingerprint)
      };
    };

    // Serializes DTLS parameters to SDP.
    SDPUtils.writeDtlsParameters = function (params, setupType) {
      var sdp = 'a=setup:' + setupType + '\r\n';
      params.fingerprints.forEach(fp => {
        sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\r\n';
      });
      return sdp;
    };

    // Parses a=crypto lines into
    //   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#dictionary-rtcsrtpsdesparameters-members
    SDPUtils.parseCryptoLine = function (line) {
      var parts = line.substr(9).split(' ');
      return {
        tag: parseInt(parts[0], 10),
        cryptoSuite: parts[1],
        keyParams: parts[2],
        sessionParams: parts.slice(3)
      };
    };
    SDPUtils.writeCryptoLine = function (parameters) {
      return 'a=crypto:' + parameters.tag + ' ' + parameters.cryptoSuite + ' ' + (typeof parameters.keyParams === 'object' ? SDPUtils.writeCryptoKeyParams(parameters.keyParams) : parameters.keyParams) + (parameters.sessionParams ? ' ' + parameters.sessionParams.join(' ') : '') + '\r\n';
    };

    // Parses the crypto key parameters into
    //   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#rtcsrtpkeyparam*
    SDPUtils.parseCryptoKeyParams = function (keyParams) {
      if (keyParams.indexOf('inline:') !== 0) {
        return null;
      }
      var parts = keyParams.substr(7).split('|');
      return {
        keyMethod: 'inline',
        keySalt: parts[0],
        lifeTime: parts[1],
        mkiValue: parts[2] ? parts[2].split(':')[0] : undefined,
        mkiLength: parts[2] ? parts[2].split(':')[1] : undefined
      };
    };
    SDPUtils.writeCryptoKeyParams = function (keyParams) {
      return keyParams.keyMethod + ':' + keyParams.keySalt + (keyParams.lifeTime ? '|' + keyParams.lifeTime : '') + (keyParams.mkiValue && keyParams.mkiLength ? '|' + keyParams.mkiValue + ':' + keyParams.mkiLength : '');
    };

    // Extracts all SDES parameters.
    SDPUtils.getCryptoParameters = function (mediaSection, sessionpart) {
      var lines = SDPUtils.matchPrefix(mediaSection + sessionpart, 'a=crypto:');
      return lines.map(SDPUtils.parseCryptoLine);
    };

    // Parses ICE information from SDP media section or sessionpart.
    // FIXME: for consistency with other functions this should only
    //   get the ice-ufrag and ice-pwd lines as input.
    SDPUtils.getIceParameters = function (mediaSection, sessionpart) {
      var ufrag = SDPUtils.matchPrefix(mediaSection + sessionpart, 'a=ice-ufrag:')[0];
      var pwd = SDPUtils.matchPrefix(mediaSection + sessionpart, 'a=ice-pwd:')[0];
      if (!(ufrag && pwd)) {
        return null;
      }
      return {
        usernameFragment: ufrag.substr(12),
        password: pwd.substr(10)
      };
    };

    // Serializes ICE parameters to SDP.
    SDPUtils.writeIceParameters = function (params) {
      var sdp = 'a=ice-ufrag:' + params.usernameFragment + '\r\n' + 'a=ice-pwd:' + params.password + '\r\n';
      if (params.iceLite) {
        sdp += 'a=ice-lite\r\n';
      }
      return sdp;
    };

    // Parses the SDP media section and returns RTCRtpParameters.
    SDPUtils.parseRtpParameters = function (mediaSection) {
      var description = {
        codecs: [],
        headerExtensions: [],
        fecMechanisms: [],
        rtcp: []
      };
      var lines = SDPUtils.splitLines(mediaSection);
      var mline = lines[0].split(' ');
      for (var i = 3; i < mline.length; i++) {
        // find all codecs from mline[3..]
        var pt = mline[i];
        var rtpmapline = SDPUtils.matchPrefix(mediaSection, 'a=rtpmap:' + pt + ' ')[0];
        if (rtpmapline) {
          var codec = SDPUtils.parseRtpMap(rtpmapline);
          var fmtps = SDPUtils.matchPrefix(mediaSection, 'a=fmtp:' + pt + ' ');
          // Only the first a=fmtp:<pt> is considered.
          codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};
          codec.rtcpFeedback = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-fb:' + pt + ' ').map(SDPUtils.parseRtcpFb);
          description.codecs.push(codec);
          // parse FEC mechanisms from rtpmap lines.
          switch (codec.name.toUpperCase()) {
            case 'RED':
            case 'ULPFEC':
              description.fecMechanisms.push(codec.name.toUpperCase());
              break;
          }
        }
      }
      SDPUtils.matchPrefix(mediaSection, 'a=extmap:').forEach(line => {
        description.headerExtensions.push(SDPUtils.parseExtmap(line));
      });
      // FIXME: parse rtcp.
      return description;
    };

    // Generates parts of the SDP media section describing the capabilities /
    // parameters.
    SDPUtils.writeRtpDescription = function (kind, caps) {
      var sdp = '';

      // Build the mline.
      sdp += 'm=' + kind + ' ';
      sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.
      sdp += ' UDP/TLS/RTP/SAVPF ';
      sdp += caps.codecs.map(codec => {
        if (codec.preferredPayloadType !== undefined) {
          return codec.preferredPayloadType;
        }
        return codec.payloadType;
      }).join(' ') + '\r\n';
      sdp += 'c=IN IP4 0.0.0.0\r\n';
      sdp += 'a=rtcp:9 IN IP4 0.0.0.0\r\n';

      // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.
      caps.codecs.forEach(codec => {
        sdp += SDPUtils.writeRtpMap(codec);
        sdp += SDPUtils.writeFmtp(codec);
        sdp += SDPUtils.writeRtcpFb(codec);
      });
      var maxptime = 0;
      caps.codecs.forEach(codec => {
        if (codec.maxptime > maxptime) {
          maxptime = codec.maxptime;
        }
      });
      if (maxptime > 0) {
        sdp += 'a=maxptime:' + maxptime + '\r\n';
      }
      if (caps.headerExtensions) {
        caps.headerExtensions.forEach(extension => {
          sdp += SDPUtils.writeExtmap(extension);
        });
      }
      // FIXME: write fecMechanisms.
      return sdp;
    };

    // Parses the SDP media section and returns an array of
    // RTCRtpEncodingParameters.
    SDPUtils.parseRtpEncodingParameters = function (mediaSection) {
      var encodingParameters = [];
      var description = SDPUtils.parseRtpParameters(mediaSection);
      var hasRed = description.fecMechanisms.indexOf('RED') !== -1;
      var hasUlpfec = description.fecMechanisms.indexOf('ULPFEC') !== -1;

      // filter a=ssrc:... cname:, ignore PlanB-msid
      var ssrcs = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:').map(line => SDPUtils.parseSsrcMedia(line)).filter(parts => parts.attribute === 'cname');
      var primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;
      var secondarySsrc;
      var flows = SDPUtils.matchPrefix(mediaSection, 'a=ssrc-group:FID').map(line => {
        var parts = line.substr(17).split(' ');
        return parts.map(part => parseInt(part, 10));
      });
      if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {
        secondarySsrc = flows[0][1];
      }
      description.codecs.forEach(codec => {
        if (codec.name.toUpperCase() === 'RTX' && codec.parameters.apt) {
          var encParam = {
            ssrc: primarySsrc,
            codecPayloadType: parseInt(codec.parameters.apt, 10)
          };
          if (primarySsrc && secondarySsrc) {
            encParam.rtx = {
              ssrc: secondarySsrc
            };
          }
          encodingParameters.push(encParam);
          if (hasRed) {
            encParam = JSON.parse(JSON.stringify(encParam));
            encParam.fec = {
              ssrc: primarySsrc,
              mechanism: hasUlpfec ? 'red+ulpfec' : 'red'
            };
            encodingParameters.push(encParam);
          }
        }
      });
      if (encodingParameters.length === 0 && primarySsrc) {
        encodingParameters.push({
          ssrc: primarySsrc
        });
      }

      // we support both b=AS and b=TIAS but interpret AS as TIAS.
      var bandwidth = SDPUtils.matchPrefix(mediaSection, 'b=');
      if (bandwidth.length) {
        if (bandwidth[0].indexOf('b=TIAS:') === 0) {
          bandwidth = parseInt(bandwidth[0].substr(7), 10);
        } else if (bandwidth[0].indexOf('b=AS:') === 0) {
          // use formula from JSEP to convert b=AS to TIAS value.
          bandwidth = parseInt(bandwidth[0].substr(5), 10) * 1000 * 0.95 - 50 * 40 * 8;
        } else {
          bandwidth = undefined;
        }
        encodingParameters.forEach(params => {
          params.maxBitrate = bandwidth;
        });
      }
      return encodingParameters;
    };

    // parses http://draft.ortc.org/#rtcrtcpparameters*
    SDPUtils.parseRtcpParameters = function (mediaSection) {
      var rtcpParameters = {};

      // Gets the first SSRC. Note that with RTX there might be multiple
      // SSRCs.
      var remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:').map(line => SDPUtils.parseSsrcMedia(line)).filter(obj => obj.attribute === 'cname')[0];
      if (remoteSsrc) {
        rtcpParameters.cname = remoteSsrc.value;
        rtcpParameters.ssrc = remoteSsrc.ssrc;
      }

      // Edge uses the compound attribute instead of reducedSize
      // compound is !reducedSize
      var rsize = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-rsize');
      rtcpParameters.reducedSize = rsize.length > 0;
      rtcpParameters.compound = rsize.length === 0;

      // parses the rtcp-mux attrіbute.
      // Note that Edge does not support unmuxed RTCP.
      var mux = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-mux');
      rtcpParameters.mux = mux.length > 0;
      return rtcpParameters;
    };
    SDPUtils.writeRtcpParameters = function (rtcpParameters) {
      var sdp = '';
      if (rtcpParameters.reducedSize) {
        sdp += 'a=rtcp-rsize\r\n';
      }
      if (rtcpParameters.mux) {
        sdp += 'a=rtcp-mux\r\n';
      }
      if (rtcpParameters.ssrc !== undefined && rtcpParameters.cname) {
        sdp += 'a=ssrc:' + rtcpParameters.ssrc + ' cname:' + rtcpParameters.cname + '\r\n';
      }
      return sdp;
    };

    // parses either a=msid: or a=ssrc:... msid lines and returns
    // the id of the MediaStream and MediaStreamTrack.
    SDPUtils.parseMsid = function (mediaSection) {
      var parts;
      var spec = SDPUtils.matchPrefix(mediaSection, 'a=msid:');
      if (spec.length === 1) {
        parts = spec[0].substr(7).split(' ');
        return {
          stream: parts[0],
          track: parts[1]
        };
      }
      var planB = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:').map(line => SDPUtils.parseSsrcMedia(line)).filter(msidParts => msidParts.attribute === 'msid');
      if (planB.length > 0) {
        parts = planB[0].value.split(' ');
        return {
          stream: parts[0],
          track: parts[1]
        };
      }
    };

    // SCTP
    // parses draft-ietf-mmusic-sctp-sdp-26 first and falls back
    // to draft-ietf-mmusic-sctp-sdp-05
    SDPUtils.parseSctpDescription = function (mediaSection) {
      var mline = SDPUtils.parseMLine(mediaSection);
      var maxSizeLine = SDPUtils.matchPrefix(mediaSection, 'a=max-message-size:');
      var maxMessageSize;
      if (maxSizeLine.length > 0) {
        maxMessageSize = parseInt(maxSizeLine[0].substr(19), 10);
      }
      if (isNaN(maxMessageSize)) {
        maxMessageSize = 65536;
      }
      var sctpPort = SDPUtils.matchPrefix(mediaSection, 'a=sctp-port:');
      if (sctpPort.length > 0) {
        return {
          port: parseInt(sctpPort[0].substr(12), 10),
          protocol: mline.fmt,
          maxMessageSize
        };
      }
      var sctpMapLines = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:');
      if (sctpMapLines.length > 0) {
        var parts = sctpMapLines[0].substr(10).split(' ');
        return {
          port: parseInt(parts[0], 10),
          protocol: parts[1],
          maxMessageSize
        };
      }
    };

    // SCTP
    // outputs the draft-ietf-mmusic-sctp-sdp-26 version that all browsers
    // support by now receiving in this format, unless we originally parsed
    // as the draft-ietf-mmusic-sctp-sdp-05 format (indicated by the m-line
    // protocol of DTLS/SCTP -- without UDP/ or TCP/)
    SDPUtils.writeSctpDescription = function (media, sctp) {
      var output = [];
      if (media.protocol !== 'DTLS/SCTP') {
        output = ['m=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.protocol + '\r\n', 'c=IN IP4 0.0.0.0\r\n', 'a=sctp-port:' + sctp.port + '\r\n'];
      } else {
        output = ['m=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.port + '\r\n', 'c=IN IP4 0.0.0.0\r\n', 'a=sctpmap:' + sctp.port + ' ' + sctp.protocol + ' 65535\r\n'];
      }
      if (sctp.maxMessageSize !== undefined) {
        output.push('a=max-message-size:' + sctp.maxMessageSize + '\r\n');
      }
      return output.join('');
    };

    // Generate a session ID for SDP.
    // https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-20#section-5.2.1
    // recommends using a cryptographically random +ve 64-bit value
    // but right now this should be acceptable and within the right range
    SDPUtils.generateSessionId = function () {
      return Math.random().toString().substr(2, 21);
    };

    // Write boiler plate for start of SDP
    // sessId argument is optional - if not supplied it will
    // be generated randomly
    // sessVersion is optional and defaults to 2
    // sessUser is optional and defaults to 'thisisadapterortc'
    SDPUtils.writeSessionBoilerplate = function (sessId, sessVer, sessUser) {
      var sessionId;
      var version = sessVer !== undefined ? sessVer : 2;
      if (sessId) {
        sessionId = sessId;
      } else {
        sessionId = SDPUtils.generateSessionId();
      }
      var user = sessUser || 'thisisadapterortc';
      // FIXME: sess-id should be an NTP timestamp.
      return 'v=0\r\n' + 'o=' + user + ' ' + sessionId + ' ' + version + ' IN IP4 127.0.0.1\r\n' + 's=-\r\n' + 't=0 0\r\n';
    };

    // Gets the direction from the mediaSection or the sessionpart.
    SDPUtils.getDirection = function (mediaSection, sessionpart) {
      // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.
      var lines = SDPUtils.splitLines(mediaSection);
      for (var i = 0; i < lines.length; i++) {
        switch (lines[i]) {
          case 'a=sendrecv':
          case 'a=sendonly':
          case 'a=recvonly':
          case 'a=inactive':
            return lines[i].substr(2);
          // FIXME: What should happen here?
        }
      }

      if (sessionpart) {
        return SDPUtils.getDirection(sessionpart);
      }
      return 'sendrecv';
    };
    SDPUtils.getKind = function (mediaSection) {
      var lines = SDPUtils.splitLines(mediaSection);
      var mline = lines[0].split(' ');
      return mline[0].substr(2);
    };
    SDPUtils.isRejected = function (mediaSection) {
      return mediaSection.split(' ', 2)[1] === '0';
    };
    SDPUtils.parseMLine = function (mediaSection) {
      var lines = SDPUtils.splitLines(mediaSection);
      var parts = lines[0].substr(2).split(' ');
      return {
        kind: parts[0],
        port: parseInt(parts[1], 10),
        protocol: parts[2],
        fmt: parts.slice(3).join(' ')
      };
    };
    SDPUtils.parseOLine = function (mediaSection) {
      var line = SDPUtils.matchPrefix(mediaSection, 'o=')[0];
      var parts = line.substr(2).split(' ');
      return {
        username: parts[0],
        sessionId: parts[1],
        sessionVersion: parseInt(parts[2], 10),
        netType: parts[3],
        addressType: parts[4],
        address: parts[5]
      };
    };

    // a very naive interpretation of a valid SDP.
    SDPUtils.isValidSDP = function (blob) {
      if (typeof blob !== 'string' || blob.length === 0) {
        return false;
      }
      var lines = SDPUtils.splitLines(blob);
      for (var i = 0; i < lines.length; i++) {
        if (lines[i].length < 2 || lines[i].charAt(1) !== '=') {
          return false;
        }
        // TODO: check the modifier a bit more.
      }

      return true;
    };

    // Expose public methods.
    {
      module.exports = SDPUtils;
    }
  })(sdp$1);
  var SDPUtils = sdp$1.exports;

  var sdp = /*#__PURE__*/_mergeNamespaces$1({
    __proto__: null,
    'default': SDPUtils
  }, [sdp$1.exports]);

  /*
   *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.
   *
   *  Use of this source code is governed by a BSD-style license
   *  that can be found in the LICENSE file in the root of the source
   *  tree.
   */
  function shimRTCIceCandidate(window) {
    // foundation is arbitrarily chosen as an indicator for full support for
    // https://w3c.github.io/webrtc-pc/#rtcicecandidate-interface
    if (!window.RTCIceCandidate || window.RTCIceCandidate && 'foundation' in window.RTCIceCandidate.prototype) {
      return;
    }
    var NativeRTCIceCandidate = window.RTCIceCandidate;
    window.RTCIceCandidate = function RTCIceCandidate(args) {
      // Remove the a= which shouldn't be part of the candidate string.
      if (typeof args === 'object' && args.candidate && args.candidate.indexOf('a=') === 0) {
        args = JSON.parse(JSON.stringify(args));
        args.candidate = args.candidate.substr(2);
      }
      if (args.candidate && args.candidate.length) {
        // Augment the native candidate with the parsed fields.
        var nativeCandidate = new NativeRTCIceCandidate(args);
        var parsedCandidate = SDPUtils.parseCandidate(args.candidate);
        var augmentedCandidate = Object.assign(nativeCandidate, parsedCandidate);

        // Add a serializer that does not serialize the extra attributes.
        augmentedCandidate.toJSON = function toJSON() {
          return {
            candidate: augmentedCandidate.candidate,
            sdpMid: augmentedCandidate.sdpMid,
            sdpMLineIndex: augmentedCandidate.sdpMLineIndex,
            usernameFragment: augmentedCandidate.usernameFragment
          };
        };
        return augmentedCandidate;
      }
      return new NativeRTCIceCandidate(args);
    };
    window.RTCIceCandidate.prototype = NativeRTCIceCandidate.prototype;

    // Hook up the augmented candidate in onicecandidate and
    // addEventListener('icecandidate', ...)
    wrapPeerConnectionEvent(window, 'icecandidate', e => {
      if (e.candidate) {
        Object.defineProperty(e, 'candidate', {
          value: new window.RTCIceCandidate(e.candidate),
          writable: 'false'
        });
      }
      return e;
    });
  }
  function shimMaxMessageSize(window, browserDetails) {
    if (!window.RTCPeerConnection) {
      return;
    }
    if (!('sctp' in window.RTCPeerConnection.prototype)) {
      Object.defineProperty(window.RTCPeerConnection.prototype, 'sctp', {
        get() {
          return typeof this._sctp === 'undefined' ? null : this._sctp;
        }
      });
    }
    var sctpInDescription = function sctpInDescription(description) {
      if (!description || !description.sdp) {
        return false;
      }
      var sections = SDPUtils.splitSections(description.sdp);
      sections.shift();
      return sections.some(mediaSection => {
        var mLine = SDPUtils.parseMLine(mediaSection);
        return mLine && mLine.kind === 'application' && mLine.protocol.indexOf('SCTP') !== -1;
      });
    };
    var getRemoteFirefoxVersion = function getRemoteFirefoxVersion(description) {
      // TODO: Is there a better solution for detecting Firefox?
      var match = description.sdp.match(/mozilla...THIS_IS_SDPARTA-(\d+)/);
      if (match === null || match.length < 2) {
        return -1;
      }
      var version = parseInt(match[1], 10);
      // Test for NaN (yes, this is ugly)
      return version !== version ? -1 : version;
    };
    var getCanSendMaxMessageSize = function getCanSendMaxMessageSize(remoteIsFirefox) {
      // Every implementation we know can send at least 64 KiB.
      // Note: Although Chrome is technically able to send up to 256 KiB, the
      //       data does not reach the other peer reliably.
      //       See: https://bugs.chromium.org/p/webrtc/issues/detail?id=8419
      var canSendMaxMessageSize = 65536;
      if (browserDetails.browser === 'firefox') {
        if (browserDetails.version < 57) {
          if (remoteIsFirefox === -1) {
            // FF < 57 will send in 16 KiB chunks using the deprecated PPID
            // fragmentation.
            canSendMaxMessageSize = 16384;
          } else {
            // However, other FF (and RAWRTC) can reassemble PPID-fragmented
            // messages. Thus, supporting ~2 GiB when sending.
            canSendMaxMessageSize = 2147483637;
          }
        } else if (browserDetails.version < 60) {
          // Currently, all FF >= 57 will reset the remote maximum message size
          // to the default value when a data channel is created at a later
          // stage. :(
          // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831
          canSendMaxMessageSize = browserDetails.version === 57 ? 65535 : 65536;
        } else {
          // FF >= 60 supports sending ~2 GiB
          canSendMaxMessageSize = 2147483637;
        }
      }
      return canSendMaxMessageSize;
    };
    var getMaxMessageSize = function getMaxMessageSize(description, remoteIsFirefox) {
      // Note: 65536 bytes is the default value from the SDP spec. Also,
      //       every implementation we know supports receiving 65536 bytes.
      var maxMessageSize = 65536;

      // FF 57 has a slightly incorrect default remote max message size, so
      // we need to adjust it here to avoid a failure when sending.
      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1425697
      if (browserDetails.browser === 'firefox' && browserDetails.version === 57) {
        maxMessageSize = 65535;
      }
      var match = SDPUtils.matchPrefix(description.sdp, 'a=max-message-size:');
      if (match.length > 0) {
        maxMessageSize = parseInt(match[0].substr(19), 10);
      } else if (browserDetails.browser === 'firefox' && remoteIsFirefox !== -1) {
        // If the maximum message size is not present in the remote SDP and
        // both local and remote are Firefox, the remote peer can receive
        // ~2 GiB.
        maxMessageSize = 2147483637;
      }
      return maxMessageSize;
    };
    var origSetRemoteDescription = window.RTCPeerConnection.prototype.setRemoteDescription;
    window.RTCPeerConnection.prototype.setRemoteDescription = function setRemoteDescription() {
      this._sctp = null;
      // Chrome decided to not expose .sctp in plan-b mode.
      // As usual, adapter.js has to do an 'ugly worakaround'
      // to cover up the mess.
      if (browserDetails.browser === 'chrome' && browserDetails.version >= 76) {
        var {
          sdpSemantics
        } = this.getConfiguration();
        if (sdpSemantics === 'plan-b') {
          Object.defineProperty(this, 'sctp', {
            get() {
              return typeof this._sctp === 'undefined' ? null : this._sctp;
            },
            enumerable: true,
            configurable: true
          });
        }
      }
      if (sctpInDescription(arguments[0])) {
        // Check if the remote is FF.
        var isFirefox = getRemoteFirefoxVersion(arguments[0]);

        // Get the maximum message size the local peer is capable of sending
        var canSendMMS = getCanSendMaxMessageSize(isFirefox);

        // Get the maximum message size of the remote peer.
        var remoteMMS = getMaxMessageSize(arguments[0], isFirefox);

        // Determine final maximum message size
        var maxMessageSize;
        if (canSendMMS === 0 && remoteMMS === 0) {
          maxMessageSize = Number.POSITIVE_INFINITY;
        } else if (canSendMMS === 0 || remoteMMS === 0) {
          maxMessageSize = Math.max(canSendMMS, remoteMMS);
        } else {
          maxMessageSize = Math.min(canSendMMS, remoteMMS);
        }

        // Create a dummy RTCSctpTransport object and the 'maxMessageSize'
        // attribute.
        var sctp = {};
        Object.defineProperty(sctp, 'maxMessageSize', {
          get() {
            return maxMessageSize;
          }
        });
        this._sctp = sctp;
      }
      return origSetRemoteDescription.apply(this, arguments);
    };
  }
  function shimSendThrowTypeError(window) {
    if (!(window.RTCPeerConnection && 'createDataChannel' in window.RTCPeerConnection.prototype)) {
      return;
    }

    // Note: Although Firefox >= 57 has a native implementation, the maximum
    //       message size can be reset for all data channels at a later stage.
    //       See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831

    function wrapDcSend(dc, pc) {
      var origDataChannelSend = dc.send;
      dc.send = function send() {
        var data = arguments[0];
        var length = data.length || data.size || data.byteLength;
        if (dc.readyState === 'open' && pc.sctp && length > pc.sctp.maxMessageSize) {
          throw new TypeError('Message too large (can send a maximum of ' + pc.sctp.maxMessageSize + ' bytes)');
        }
        return origDataChannelSend.apply(dc, arguments);
      };
    }
    var origCreateDataChannel = window.RTCPeerConnection.prototype.createDataChannel;
    window.RTCPeerConnection.prototype.createDataChannel = function createDataChannel() {
      var dataChannel = origCreateDataChannel.apply(this, arguments);
      wrapDcSend(dataChannel, this);
      return dataChannel;
    };
    wrapPeerConnectionEvent(window, 'datachannel', e => {
      wrapDcSend(e.channel, e.target);
      return e;
    });
  }

  /* shims RTCConnectionState by pretending it is the same as iceConnectionState.
   * See https://bugs.chromium.org/p/webrtc/issues/detail?id=6145#c12
   * for why this is a valid hack in Chrome. In Firefox it is slightly incorrect
   * since DTLS failures would be hidden. See
   * https://bugzilla.mozilla.org/show_bug.cgi?id=1265827
   * for the Firefox tracking bug.
   */
  function shimConnectionState(window) {
    if (!window.RTCPeerConnection || 'connectionState' in window.RTCPeerConnection.prototype) {
      return;
    }
    var proto = window.RTCPeerConnection.prototype;
    Object.defineProperty(proto, 'connectionState', {
      get() {
        return {
          completed: 'connected',
          checking: 'connecting'
        }[this.iceConnectionState] || this.iceConnectionState;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(proto, 'onconnectionstatechange', {
      get() {
        return this._onconnectionstatechange || null;
      },
      set(cb) {
        if (this._onconnectionstatechange) {
          this.removeEventListener('connectionstatechange', this._onconnectionstatechange);
          delete this._onconnectionstatechange;
        }
        if (cb) {
          this.addEventListener('connectionstatechange', this._onconnectionstatechange = cb);
        }
      },
      enumerable: true,
      configurable: true
    });
    ['setLocalDescription', 'setRemoteDescription'].forEach(method => {
      var origMethod = proto[method];
      proto[method] = function () {
        if (!this._connectionstatechangepoly) {
          this._connectionstatechangepoly = e => {
            var pc = e.target;
            if (pc._lastConnectionState !== pc.connectionState) {
              pc._lastConnectionState = pc.connectionState;
              var newEvent = new Event('connectionstatechange', e);
              pc.dispatchEvent(newEvent);
            }
            return e;
          };
          this.addEventListener('iceconnectionstatechange', this._connectionstatechangepoly);
        }
        return origMethod.apply(this, arguments);
      };
    });
  }
  function removeExtmapAllowMixed(window, browserDetails) {
    /* remove a=extmap-allow-mixed for webrtc.org < M71 */
    if (!window.RTCPeerConnection) {
      return;
    }
    if (browserDetails.browser === 'chrome' && browserDetails.version >= 71) {
      return;
    }
    if (browserDetails.browser === 'safari' && browserDetails.version >= 605) {
      return;
    }
    var nativeSRD = window.RTCPeerConnection.prototype.setRemoteDescription;
    window.RTCPeerConnection.prototype.setRemoteDescription = function setRemoteDescription(desc) {
      if (desc && desc.sdp && desc.sdp.indexOf('\na=extmap-allow-mixed') !== -1) {
        var sdp = desc.sdp.split('\n').filter(line => {
          return line.trim() !== 'a=extmap-allow-mixed';
        }).join('\n');
        // Safari enforces read-only-ness of RTCSessionDescription fields.
        if (window.RTCSessionDescription && desc instanceof window.RTCSessionDescription) {
          arguments[0] = new window.RTCSessionDescription({
            type: desc.type,
            sdp
          });
        } else {
          desc.sdp = sdp;
        }
      }
      return nativeSRD.apply(this, arguments);
    };
  }
  function shimAddIceCandidateNullOrEmpty(window, browserDetails) {
    // Support for addIceCandidate(null or undefined)
    // as well as addIceCandidate({candidate: "", ...})
    // https://bugs.chromium.org/p/chromium/issues/detail?id=978582
    // Note: must be called before other polyfills which change the signature.
    if (!(window.RTCPeerConnection && window.RTCPeerConnection.prototype)) {
      return;
    }
    var nativeAddIceCandidate = window.RTCPeerConnection.prototype.addIceCandidate;
    if (!nativeAddIceCandidate || nativeAddIceCandidate.length === 0) {
      return;
    }
    window.RTCPeerConnection.prototype.addIceCandidate = function addIceCandidate() {
      if (!arguments[0]) {
        if (arguments[1]) {
          arguments[1].apply(null);
        }
        return Promise.resolve();
      }
      // Firefox 68+ emits and processes {candidate: "", ...}, ignore
      // in older versions.
      // Native support for ignoring exists for Chrome M77+.
      // Safari ignores as well, exact version unknown but works in the same
      // version that also ignores addIceCandidate(null).
      if ((browserDetails.browser === 'chrome' && browserDetails.version < 78 || browserDetails.browser === 'firefox' && browserDetails.version < 68 || browserDetails.browser === 'safari') && arguments[0] && arguments[0].candidate === '') {
        return Promise.resolve();
      }
      return nativeAddIceCandidate.apply(this, arguments);
    };
  }

  // Note: Make sure to call this ahead of APIs that modify
  // setLocalDescription.length
  function shimParameterlessSetLocalDescription(window, browserDetails) {
    if (!(window.RTCPeerConnection && window.RTCPeerConnection.prototype)) {
      return;
    }
    var nativeSetLocalDescription = window.RTCPeerConnection.prototype.setLocalDescription;
    if (!nativeSetLocalDescription || nativeSetLocalDescription.length === 0) {
      return;
    }
    window.RTCPeerConnection.prototype.setLocalDescription = function setLocalDescription() {
      var desc = arguments[0] || {};
      if (typeof desc !== 'object' || desc.type && desc.sdp) {
        return nativeSetLocalDescription.apply(this, arguments);
      }
      // The remaining steps should technically happen when SLD comes off the
      // RTCPeerConnection's operations chain (not ahead of going on it), but
      // this is too difficult to shim. Instead, this shim only covers the
      // common case where the operations chain is empty. This is imperfect, but
      // should cover many cases. Rationale: Even if we can't reduce the glare
      // window to zero on imperfect implementations, there's value in tapping
      // into the perfect negotiation pattern that several browsers support.
      desc = {
        type: desc.type,
        sdp: desc.sdp
      };
      if (!desc.type) {
        switch (this.signalingState) {
          case 'stable':
          case 'have-local-offer':
          case 'have-remote-pranswer':
            desc.type = 'offer';
            break;
          default:
            desc.type = 'answer';
            break;
        }
      }
      if (desc.sdp || desc.type !== 'offer' && desc.type !== 'answer') {
        return nativeSetLocalDescription.apply(this, [desc]);
      }
      var func = desc.type === 'offer' ? this.createOffer : this.createAnswer;
      return func.apply(this).then(d => nativeSetLocalDescription.apply(this, [d]));
    };
  }

  var commonShim = /*#__PURE__*/Object.freeze({
    __proto__: null,
    shimRTCIceCandidate: shimRTCIceCandidate,
    shimMaxMessageSize: shimMaxMessageSize,
    shimSendThrowTypeError: shimSendThrowTypeError,
    shimConnectionState: shimConnectionState,
    removeExtmapAllowMixed: removeExtmapAllowMixed,
    shimAddIceCandidateNullOrEmpty: shimAddIceCandidateNullOrEmpty,
    shimParameterlessSetLocalDescription: shimParameterlessSetLocalDescription
  });

  /*
   *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
   *
   *  Use of this source code is governed by a BSD-style license
   *  that can be found in the LICENSE file in the root of the source
   *  tree.
   */

  // Shimming starts here.
  function adapterFactory() {
    var {
      window
    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
      shimChrome: true,
      shimFirefox: true,
      shimSafari: true
    };
    // Utils.
    var logging = log$1$1;
    var browserDetails = detectBrowser(window);
    var adapter = {
      browserDetails,
      commonShim,
      extractVersion: extractVersion,
      disableLog: disableLog,
      disableWarnings: disableWarnings,
      // Expose sdp as a convenience. For production apps include directly.
      sdp
    };

    // Shim browser if found.
    switch (browserDetails.browser) {
      case 'chrome':
        if (!chromeShim || !shimPeerConnection$1 || !options.shimChrome) {
          logging('Chrome shim is not included in this adapter release.');
          return adapter;
        }
        if (browserDetails.version === null) {
          logging('Chrome shim can not determine version, not shimming.');
          return adapter;
        }
        logging('adapter.js shimming chrome.');
        // Export to the adapter global object visible in the browser.
        adapter.browserShim = chromeShim;

        // Must be called before shimPeerConnection.
        shimAddIceCandidateNullOrEmpty(window, browserDetails);
        shimParameterlessSetLocalDescription(window);
        shimGetUserMedia$2(window, browserDetails);
        shimMediaStream(window);
        shimPeerConnection$1(window, browserDetails);
        shimOnTrack$1(window);
        shimAddTrackRemoveTrack(window, browserDetails);
        shimGetSendersWithDtmf(window);
        shimGetStats(window);
        shimSenderReceiverGetStats(window);
        fixNegotiationNeeded(window, browserDetails);
        shimRTCIceCandidate(window);
        shimConnectionState(window);
        shimMaxMessageSize(window, browserDetails);
        shimSendThrowTypeError(window);
        removeExtmapAllowMixed(window, browserDetails);
        break;
      case 'firefox':
        if (!firefoxShim || !shimPeerConnection || !options.shimFirefox) {
          logging('Firefox shim is not included in this adapter release.');
          return adapter;
        }
        logging('adapter.js shimming firefox.');
        // Export to the adapter global object visible in the browser.
        adapter.browserShim = firefoxShim;

        // Must be called before shimPeerConnection.
        shimAddIceCandidateNullOrEmpty(window, browserDetails);
        shimParameterlessSetLocalDescription(window);
        shimGetUserMedia$1(window, browserDetails);
        shimPeerConnection(window, browserDetails);
        shimOnTrack(window);
        shimRemoveStream(window);
        shimSenderGetStats(window);
        shimReceiverGetStats(window);
        shimRTCDataChannel(window);
        shimAddTransceiver(window);
        shimGetParameters(window);
        shimCreateOffer(window);
        shimCreateAnswer(window);
        shimRTCIceCandidate(window);
        shimConnectionState(window);
        shimMaxMessageSize(window, browserDetails);
        shimSendThrowTypeError(window);
        break;
      case 'safari':
        if (!safariShim || !options.shimSafari) {
          logging('Safari shim is not included in this adapter release.');
          return adapter;
        }
        logging('adapter.js shimming safari.');
        // Export to the adapter global object visible in the browser.
        adapter.browserShim = safariShim;

        // Must be called before shimCallbackAPI.
        shimAddIceCandidateNullOrEmpty(window, browserDetails);
        shimParameterlessSetLocalDescription(window);
        shimRTCIceServerUrls(window);
        shimCreateOfferLegacy(window);
        shimCallbacksAPI(window);
        shimLocalStreamsAPI(window);
        shimRemoteStreamsAPI(window);
        shimTrackEventTransceiver(window);
        shimGetUserMedia(window);
        shimAudioContext(window);
        shimRTCIceCandidate(window);
        shimMaxMessageSize(window, browserDetails);
        shimSendThrowTypeError(window);
        removeExtmapAllowMixed(window, browserDetails);
        break;
      default:
        logging('Unsupported browser!');
        break;
    }
    return adapter;
  }

  /*
   *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
   *
   *  Use of this source code is governed by a BSD-style license
   *  that can be found in the LICENSE file in the root of the source
   *  tree.
   */
  adapterFactory({
    window: typeof window === 'undefined' ? undefined : window
  });

  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation.

  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */

  var _assign = function __assign() {
    _assign = Object.assign || function __assign(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) {
          if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
      }
      return t;
    };
    return _assign.apply(this, arguments);
  };
  function __rest$1(s, e) {
    var t = {};
    for (var p in s) {
      if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    }
    if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
  }
  function __values$1(o) {
    var s = typeof Symbol === "function" && Symbol.iterator,
      m = s && o[s],
      i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
      next: function next() {
        if (o && i >= o.length) o = void 0;
        return {
          value: o && o[i++],
          done: !o
        };
      }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
  }
  function __read$1(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o),
      r,
      ar = [],
      e;
    try {
      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {
        ar.push(r.value);
      }
    } catch (error) {
      e = {
        error: error
      };
    } finally {
      try {
        if (r && !r.done && (m = i["return"])) m.call(i);
      } finally {
        if (e) throw e.error;
      }
    }
    return ar;
  }
  function __spreadArray$1(to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar) ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
  }

  var ActionTypes$1;
  (function (ActionTypes) {
    ActionTypes["Start"] = "xstate.start";
    ActionTypes["Stop"] = "xstate.stop";
    ActionTypes["Raise"] = "xstate.raise";
    ActionTypes["Send"] = "xstate.send";
    ActionTypes["Cancel"] = "xstate.cancel";
    ActionTypes["NullEvent"] = "";
    ActionTypes["Assign"] = "xstate.assign";
    ActionTypes["After"] = "xstate.after";
    ActionTypes["DoneState"] = "done.state";
    ActionTypes["DoneInvoke"] = "done.invoke";
    ActionTypes["Log"] = "xstate.log";
    ActionTypes["Init"] = "xstate.init";
    ActionTypes["Invoke"] = "xstate.invoke";
    ActionTypes["ErrorExecution"] = "error.execution";
    ActionTypes["ErrorCommunication"] = "error.communication";
    ActionTypes["ErrorPlatform"] = "error.platform";
    ActionTypes["ErrorCustom"] = "xstate.error";
    ActionTypes["Update"] = "xstate.update";
    ActionTypes["Pure"] = "xstate.pure";
    ActionTypes["Choose"] = "xstate.choose";
  })(ActionTypes$1 || (ActionTypes$1 = {}));
  var SpecialTargets$1;
  (function (SpecialTargets) {
    SpecialTargets["Parent"] = "#_parent";
    SpecialTargets["Internal"] = "#_internal";
  })(SpecialTargets$1 || (SpecialTargets$1 = {}));

  var start$1$1 = ActionTypes$1.Start;
  var stop$1$1 = ActionTypes$1.Stop;
  var raise$1$1 = ActionTypes$1.Raise;
  var send$1$1 = ActionTypes$1.Send;
  var cancel$1$1 = ActionTypes$1.Cancel;
  var nullEvent$1 = ActionTypes$1.NullEvent;
  var assign$2 = ActionTypes$1.Assign;
  ActionTypes$1.After;
  ActionTypes$1.DoneState;
  var log$4 = ActionTypes$1.Log;
  var init$1 = ActionTypes$1.Init;
  var invoke$1 = ActionTypes$1.Invoke;
  ActionTypes$1.ErrorExecution;
  var errorPlatform$1 = ActionTypes$1.ErrorPlatform;
  var error$1$1 = ActionTypes$1.ErrorCustom;
  var update$1 = ActionTypes$1.Update;
  var choose$1 = ActionTypes$1.Choose;
  var pure$1 = ActionTypes$1.Pure;

  var STATE_DELIMITER$1 = '.';
  var EMPTY_ACTIVITY_MAP$1 = {};
  var DEFAULT_GUARD_TYPE$1 = 'xstate.guard';
  var TARGETLESS_KEY$1 = '';

  var _a$8;
  function matchesState$1(parentStateId, childStateId, delimiter) {
    if (delimiter === void 0) {
      delimiter = STATE_DELIMITER$1;
    }
    var parentStateValue = toStateValue$1(parentStateId, delimiter);
    var childStateValue = toStateValue$1(childStateId, delimiter);
    if (isString$1(childStateValue)) {
      if (isString$1(parentStateValue)) {
        return childStateValue === parentStateValue;
      } // Parent more specific than child

      return false;
    }
    if (isString$1(parentStateValue)) {
      return parentStateValue in childStateValue;
    }
    return Object.keys(parentStateValue).every(function (key) {
      if (!(key in childStateValue)) {
        return false;
      }
      return matchesState$1(parentStateValue[key], childStateValue[key]);
    });
  }
  function getEventType$1(event) {
    try {
      return isString$1(event) || typeof event === 'number' ? "".concat(event) : event.type;
    } catch (e) {
      throw new Error('Events must be strings or objects with a string event.type property.');
    }
  }
  function toStatePath$1(stateId, delimiter) {
    try {
      if (isArray$1(stateId)) {
        return stateId;
      }
      return stateId.toString().split(delimiter);
    } catch (e) {
      throw new Error("'".concat(stateId, "' is not a valid state path."));
    }
  }
  function isStateLike$1(state) {
    return typeof state === 'object' && 'value' in state && 'context' in state && 'event' in state && '_event' in state;
  }
  function toStateValue$1(stateValue, delimiter) {
    if (isStateLike$1(stateValue)) {
      return stateValue.value;
    }
    if (isArray$1(stateValue)) {
      return pathToStateValue$1(stateValue);
    }
    if (typeof stateValue !== 'string') {
      return stateValue;
    }
    var statePath = toStatePath$1(stateValue, delimiter);
    return pathToStateValue$1(statePath);
  }
  function pathToStateValue$1(statePath) {
    if (statePath.length === 1) {
      return statePath[0];
    }
    var value = {};
    var marker = value;
    for (var i = 0; i < statePath.length - 1; i++) {
      if (i === statePath.length - 2) {
        marker[statePath[i]] = statePath[i + 1];
      } else {
        marker[statePath[i]] = {};
        marker = marker[statePath[i]];
      }
    }
    return value;
  }
  function mapValues$1(collection, iteratee) {
    var result = {};
    var collectionKeys = Object.keys(collection);
    for (var i = 0; i < collectionKeys.length; i++) {
      var key = collectionKeys[i];
      result[key] = iteratee(collection[key], key, collection, i);
    }
    return result;
  }
  function mapFilterValues$1(collection, iteratee, predicate) {
    var e_1, _a;
    var result = {};
    try {
      for (var _b = __values$1(Object.keys(collection)), _c = _b.next(); !_c.done; _c = _b.next()) {
        var key = _c.value;
        var item = collection[key];
        if (!predicate(item)) {
          continue;
        }
        result[key] = iteratee(item, key, collection);
      }
    } catch (e_1_1) {
      e_1 = {
        error: e_1_1
      };
    } finally {
      try {
        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
      } finally {
        if (e_1) throw e_1.error;
      }
    }
    return result;
  }
  /**
   * Retrieves a value at the given path.
   * @param props The deep path to the prop of the desired value
   */

  var path$1 = function path(props) {
    return function (object) {
      var e_2, _a;
      var result = object;
      try {
        for (var props_1 = __values$1(props), props_1_1 = props_1.next(); !props_1_1.done; props_1_1 = props_1.next()) {
          var prop = props_1_1.value;
          result = result[prop];
        }
      } catch (e_2_1) {
        e_2 = {
          error: e_2_1
        };
      } finally {
        try {
          if (props_1_1 && !props_1_1.done && (_a = props_1.return)) _a.call(props_1);
        } finally {
          if (e_2) throw e_2.error;
        }
      }
      return result;
    };
  };
  /**
   * Retrieves a value at the given path via the nested accessor prop.
   * @param props The deep path to the prop of the desired value
   */

  function nestedPath$1(props, accessorProp) {
    return function (object) {
      var e_3, _a;
      var result = object;
      try {
        for (var props_2 = __values$1(props), props_2_1 = props_2.next(); !props_2_1.done; props_2_1 = props_2.next()) {
          var prop = props_2_1.value;
          result = result[accessorProp][prop];
        }
      } catch (e_3_1) {
        e_3 = {
          error: e_3_1
        };
      } finally {
        try {
          if (props_2_1 && !props_2_1.done && (_a = props_2.return)) _a.call(props_2);
        } finally {
          if (e_3) throw e_3.error;
        }
      }
      return result;
    };
  }
  function toStatePaths$1(stateValue) {
    if (!stateValue) {
      return [[]];
    }
    if (isString$1(stateValue)) {
      return [[stateValue]];
    }
    var result = flatten$1(Object.keys(stateValue).map(function (key) {
      var subStateValue = stateValue[key];
      if (typeof subStateValue !== 'string' && (!subStateValue || !Object.keys(subStateValue).length)) {
        return [[key]];
      }
      return toStatePaths$1(stateValue[key]).map(function (subPath) {
        return [key].concat(subPath);
      });
    }));
    return result;
  }
  function flatten$1(array) {
    var _a;
    return (_a = []).concat.apply(_a, __spreadArray$1([], __read$1(array), false));
  }
  function toArrayStrict$1(value) {
    if (isArray$1(value)) {
      return value;
    }
    return [value];
  }
  function toArray$1(value) {
    if (value === undefined) {
      return [];
    }
    return toArrayStrict$1(value);
  }
  function mapContext$1(mapper, context, _event) {
    var e_5, _a;
    if (isFunction$1(mapper)) {
      return mapper(context, _event.data);
    }
    var result = {};
    try {
      for (var _b = __values$1(Object.keys(mapper)), _c = _b.next(); !_c.done; _c = _b.next()) {
        var key = _c.value;
        var subMapper = mapper[key];
        if (isFunction$1(subMapper)) {
          result[key] = subMapper(context, _event.data);
        } else {
          result[key] = subMapper;
        }
      }
    } catch (e_5_1) {
      e_5 = {
        error: e_5_1
      };
    } finally {
      try {
        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
      } finally {
        if (e_5) throw e_5.error;
      }
    }
    return result;
  }
  function isBuiltInEvent$1(eventType) {
    return /^(done|error)\./.test(eventType);
  }
  function isPromiseLike$1(value) {
    if (value instanceof Promise) {
      return true;
    } // Check if shape matches the Promise/A+ specification for a "thenable".

    if (value !== null && (isFunction$1(value) || typeof value === 'object') && isFunction$1(value.then)) {
      return true;
    }
    return false;
  }
  function isBehavior$1(value) {
    return value !== null && typeof value === 'object' && 'transition' in value && typeof value.transition === 'function';
  }
  function partition$1(items, predicate) {
    var e_6, _a;
    var _b = __read$1([[], []], 2),
      truthy = _b[0],
      falsy = _b[1];
    try {
      for (var items_1 = __values$1(items), items_1_1 = items_1.next(); !items_1_1.done; items_1_1 = items_1.next()) {
        var item = items_1_1.value;
        if (predicate(item)) {
          truthy.push(item);
        } else {
          falsy.push(item);
        }
      }
    } catch (e_6_1) {
      e_6 = {
        error: e_6_1
      };
    } finally {
      try {
        if (items_1_1 && !items_1_1.done && (_a = items_1.return)) _a.call(items_1);
      } finally {
        if (e_6) throw e_6.error;
      }
    }
    return [truthy, falsy];
  }
  function updateHistoryStates$1(hist, stateValue) {
    return mapValues$1(hist.states, function (subHist, key) {
      if (!subHist) {
        return undefined;
      }
      var subStateValue = (isString$1(stateValue) ? undefined : stateValue[key]) || (subHist ? subHist.current : undefined);
      if (!subStateValue) {
        return undefined;
      }
      return {
        current: subStateValue,
        states: updateHistoryStates$1(subHist, subStateValue)
      };
    });
  }
  function updateHistoryValue$1(hist, stateValue) {
    return {
      current: stateValue,
      states: updateHistoryStates$1(hist, stateValue)
    };
  }
  function updateContext$1(context, _event, assignActions, state) {
    {
      warn$1(!!context, 'Attempting to update undefined context');
    }
    var updatedContext = context ? assignActions.reduce(function (acc, assignAction) {
      var e_7, _a;
      var assignment = assignAction.assignment;
      var meta = {
        state: state,
        action: assignAction,
        _event: _event
      };
      var partialUpdate = {};
      if (isFunction$1(assignment)) {
        partialUpdate = assignment(acc, _event.data, meta);
      } else {
        try {
          for (var _b = __values$1(Object.keys(assignment)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var key = _c.value;
            var propAssignment = assignment[key];
            partialUpdate[key] = isFunction$1(propAssignment) ? propAssignment(acc, _event.data, meta) : propAssignment;
          }
        } catch (e_7_1) {
          e_7 = {
            error: e_7_1
          };
        } finally {
          try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
          } finally {
            if (e_7) throw e_7.error;
          }
        }
      }
      return Object.assign({}, acc, partialUpdate);
    }, context) : context;
    return updatedContext;
  } // tslint:disable-next-line:no-empty

  var warn$1 = function warn() {};
  {
    warn$1 = function warn(condition, message) {
      var error = condition instanceof Error ? condition : undefined;
      if (!error && condition) {
        return;
      }
      if (console !== undefined) {
        var args = ["Warning: ".concat(message)];
        if (error) {
          args.push(error);
        } // tslint:disable-next-line:no-console

        console.warn.apply(console, args);
      }
    };
  }
  function isArray$1(value) {
    return Array.isArray(value);
  } // tslint:disable-next-line:ban-types

  function isFunction$1(value) {
    return typeof value === 'function';
  }
  function isString$1(value) {
    return typeof value === 'string';
  }
  function toGuard$1(condition, guardMap) {
    if (!condition) {
      return undefined;
    }
    if (isString$1(condition)) {
      return {
        type: DEFAULT_GUARD_TYPE$1,
        name: condition,
        predicate: guardMap ? guardMap[condition] : undefined
      };
    }
    if (isFunction$1(condition)) {
      return {
        type: DEFAULT_GUARD_TYPE$1,
        name: condition.name,
        predicate: condition
      };
    }
    return condition;
  }
  function isObservable$1(value) {
    try {
      return 'subscribe' in value && isFunction$1(value.subscribe);
    } catch (e) {
      return false;
    }
  }
  var symbolObservable$1 = /*#__PURE__*/function () {
    return typeof Symbol === 'function' && Symbol.observable || '@@observable';
  }(); // TODO: to be removed in v5, left it out just to minimize the scope of the change and maintain compatibility with older versions of integration paackages

  (_a$8 = {}, _a$8[symbolObservable$1] = function () {
    return this;
  }, _a$8[Symbol.observable] = function () {
    return this;
  });
  function isMachine$1(value) {
    return !!value && '__xstatenode' in value;
  }
  function isActor$1$1(value) {
    return !!value && typeof value.send === 'function';
  }
  function toEventObject$1(event, payload // id?: TEvent['type']
  ) {
    if (isString$1(event) || typeof event === 'number') {
      return _assign({
        type: event
      }, payload);
    }
    return event;
  }
  function toSCXMLEvent$1(event, scxmlEvent) {
    if (!isString$1(event) && '$$type' in event && event.$$type === 'scxml') {
      return event;
    }
    var eventObject = toEventObject$1(event);
    return _assign({
      name: eventObject.type,
      data: eventObject,
      $$type: 'scxml',
      type: 'external'
    }, scxmlEvent);
  }
  function toTransitionConfigArray$1(event, configLike) {
    var transitions = toArrayStrict$1(configLike).map(function (transitionLike) {
      if (typeof transitionLike === 'undefined' || typeof transitionLike === 'string' || isMachine$1(transitionLike)) {
        return {
          target: transitionLike,
          event: event
        };
      }
      return _assign(_assign({}, transitionLike), {
        event: event
      });
    });
    return transitions;
  }
  function normalizeTarget$1(target) {
    if (target === undefined || target === TARGETLESS_KEY$1) {
      return undefined;
    }
    return toArray$1(target);
  }
  function reportUnhandledExceptionOnInvocation$1(originalError, currentError, id) {
    {
      var originalStackTrace = originalError.stack ? " Stacktrace was '".concat(originalError.stack, "'") : '';
      if (originalError === currentError) {
        // tslint:disable-next-line:no-console
        console.error("Missing onError handler for invocation '".concat(id, "', error was '").concat(originalError, "'.").concat(originalStackTrace));
      } else {
        var stackTrace = currentError.stack ? " Stacktrace was '".concat(currentError.stack, "'") : ''; // tslint:disable-next-line:no-console

        console.error("Missing onError handler and/or unhandled exception/promise rejection for invocation '".concat(id, "'. ") + "Original error: '".concat(originalError, "'. ").concat(originalStackTrace, " Current error is '").concat(currentError, "'.").concat(stackTrace));
      }
    }
  }
  function evaluateGuard$1(machine, guard, context, _event, state) {
    var guards = machine.options.guards;
    var guardMeta = {
      state: state,
      cond: guard,
      _event: _event
    }; // TODO: do not hardcode!

    if (guard.type === DEFAULT_GUARD_TYPE$1) {
      return ((guards === null || guards === void 0 ? void 0 : guards[guard.name]) || guard.predicate)(context, _event.data, guardMeta);
    }
    var condFn = guards === null || guards === void 0 ? void 0 : guards[guard.type];
    if (!condFn) {
      throw new Error("Guard '".concat(guard.type, "' is not implemented on machine '").concat(machine.id, "'."));
    }
    return condFn(context, _event.data, guardMeta);
  }
  function toInvokeSource$1$1(src) {
    if (typeof src === 'string') {
      return {
        type: src
      };
    }
    return src;
  }
  function toObserver$1(nextHandler, errorHandler, completionHandler) {
    var noop = function noop() {};
    var isObserver = typeof nextHandler === 'object';
    var self = isObserver ? nextHandler : null;
    return {
      next: ((isObserver ? nextHandler.next : nextHandler) || noop).bind(self),
      error: ((isObserver ? nextHandler.error : errorHandler) || noop).bind(self),
      complete: ((isObserver ? nextHandler.complete : completionHandler) || noop).bind(self)
    };
  }
  function createInvokeId$1(stateNodeId, index) {
    return "".concat(stateNodeId, ":invocation[").concat(index, "]");
  }

  var initEvent$1 = /*#__PURE__*/toSCXMLEvent$1({
    type: init$1
  });
  function getActionFunction$1(actionType, actionFunctionMap) {
    return actionFunctionMap ? actionFunctionMap[actionType] || undefined : undefined;
  }
  function toActionObject$1(action, actionFunctionMap) {
    var actionObject;
    if (isString$1(action) || typeof action === 'number') {
      var exec = getActionFunction$1(action, actionFunctionMap);
      if (isFunction$1(exec)) {
        actionObject = {
          type: action,
          exec: exec
        };
      } else if (exec) {
        actionObject = exec;
      } else {
        actionObject = {
          type: action,
          exec: undefined
        };
      }
    } else if (isFunction$1(action)) {
      actionObject = {
        // Convert action to string if unnamed
        type: action.name || action.toString(),
        exec: action
      };
    } else {
      var exec = getActionFunction$1(action.type, actionFunctionMap);
      if (isFunction$1(exec)) {
        actionObject = _assign(_assign({}, action), {
          exec: exec
        });
      } else if (exec) {
        var actionType = exec.type || action.type;
        actionObject = _assign(_assign(_assign({}, exec), action), {
          type: actionType
        });
      } else {
        actionObject = action;
      }
    }
    return actionObject;
  }
  var toActionObjects$1 = function toActionObjects(action, actionFunctionMap) {
    if (!action) {
      return [];
    }
    var actions = isArray$1(action) ? action : [action];
    return actions.map(function (subAction) {
      return toActionObject$1(subAction, actionFunctionMap);
    });
  };
  function toActivityDefinition$1(action) {
    var actionObject = toActionObject$1(action);
    return _assign(_assign({
      id: isString$1(action) ? action : actionObject.id
    }, actionObject), {
      type: actionObject.type
    });
  }
  /**
   * Raises an event. This places the event in the internal event queue, so that
   * the event is immediately consumed by the machine in the current step.
   *
   * @param eventType The event to raise.
   */

  function raise$2(event) {
    if (!isString$1(event)) {
      return send$2(event, {
        to: SpecialTargets$1.Internal
      });
    }
    return {
      type: raise$1$1,
      event: event
    };
  }
  function resolveRaise$1(action) {
    return {
      type: raise$1$1,
      _event: toSCXMLEvent$1(action.event)
    };
  }
  /**
   * Sends an event. This returns an action that will be read by an interpreter to
   * send the event in the next step, after the current step is finished executing.
   *
   * @param event The event to send.
   * @param options Options to pass into the send event:
   *  - `id` - The unique send event identifier (used with `cancel()`).
   *  - `delay` - The number of milliseconds to delay the sending of the event.
   *  - `to` - The target of this event (by default, the machine the event was sent from).
   */

  function send$2(event, options) {
    return {
      to: options ? options.to : undefined,
      type: send$1$1,
      event: isFunction$1(event) ? event : toEventObject$1(event),
      delay: options ? options.delay : undefined,
      id: options && options.id !== undefined ? options.id : isFunction$1(event) ? event.name : getEventType$1(event)
    };
  }
  function resolveSend$1(action, ctx, _event, delaysMap) {
    var meta = {
      _event: _event
    }; // TODO: helper function for resolving Expr

    var resolvedEvent = toSCXMLEvent$1(isFunction$1(action.event) ? action.event(ctx, _event.data, meta) : action.event);
    var resolvedDelay;
    if (isString$1(action.delay)) {
      var configDelay = delaysMap && delaysMap[action.delay];
      resolvedDelay = isFunction$1(configDelay) ? configDelay(ctx, _event.data, meta) : configDelay;
    } else {
      resolvedDelay = isFunction$1(action.delay) ? action.delay(ctx, _event.data, meta) : action.delay;
    }
    var resolvedTarget = isFunction$1(action.to) ? action.to(ctx, _event.data, meta) : action.to;
    return _assign(_assign({}, action), {
      to: resolvedTarget,
      _event: resolvedEvent,
      event: resolvedEvent.data,
      delay: resolvedDelay
    });
  }
  var resolveLog$1 = function resolveLog(action, ctx, _event) {
    return _assign(_assign({}, action), {
      value: isString$1(action.expr) ? action.expr : action.expr(ctx, _event.data, {
        _event: _event
      })
    });
  };
  /**
   * Cancels an in-flight `send(...)` action. A canceled sent action will not
   * be executed, nor will its event be sent, unless it has already been sent
   * (e.g., if `cancel(...)` is called after the `send(...)` action's `delay`).
   *
   * @param sendId The `id` of the `send(...)` action to cancel.
   */

  var cancel$2 = function cancel(sendId) {
    return {
      type: cancel$1$1,
      sendId: sendId
    };
  };
  /**
   * Starts an activity.
   *
   * @param activity The activity to start.
   */

  function start$2(activity) {
    var activityDef = toActivityDefinition$1(activity);
    return {
      type: ActionTypes$1.Start,
      activity: activityDef,
      exec: undefined
    };
  }
  /**
   * Stops an activity.
   *
   * @param actorRef The activity to stop.
   */

  function stop$2(actorRef) {
    var activity = isFunction$1(actorRef) ? actorRef : toActivityDefinition$1(actorRef);
    return {
      type: ActionTypes$1.Stop,
      activity: activity,
      exec: undefined
    };
  }
  function resolveStop$1(action, context, _event) {
    var actorRefOrString = isFunction$1(action.activity) ? action.activity(context, _event.data) : action.activity;
    var resolvedActorRef = typeof actorRefOrString === 'string' ? {
      id: actorRefOrString
    } : actorRefOrString;
    var actionObject = {
      type: ActionTypes$1.Stop,
      activity: resolvedActorRef
    };
    return actionObject;
  }
  /**
   * Updates the current context of the machine.
   *
   * @param assignment An object that represents the partial context to update.
   */

  var assign$1 = function assign(assignment) {
    return {
      type: assign$2,
      assignment: assignment
    };
  };
  /**
   * Returns an event type that represents an implicit event that
   * is sent after the specified `delay`.
   *
   * @param delayRef The delay in milliseconds
   * @param id The state node ID where this event is handled
   */

  function after$1(delayRef, id) {
    var idSuffix = id ? "#".concat(id) : '';
    return "".concat(ActionTypes$1.After, "(").concat(delayRef, ")").concat(idSuffix);
  }
  /**
   * Returns an event that represents that a final state node
   * has been reached in the parent state node.
   *
   * @param id The final state node's parent state node `id`
   * @param data The data to pass into the event
   */

  function done$1(id, data) {
    var type = "".concat(ActionTypes$1.DoneState, ".").concat(id);
    var eventObject = {
      type: type,
      data: data
    };
    eventObject.toString = function () {
      return type;
    };
    return eventObject;
  }
  /**
   * Returns an event that represents that an invoked service has terminated.
   *
   * An invoked service is terminated when it has reached a top-level final state node,
   * but not when it is canceled.
   *
   * @param id The final state node ID
   * @param data The data to pass into the event
   */

  function doneInvoke$1(id, data) {
    var type = "".concat(ActionTypes$1.DoneInvoke, ".").concat(id);
    var eventObject = {
      type: type,
      data: data
    };
    eventObject.toString = function () {
      return type;
    };
    return eventObject;
  }
  function error$2(id, data) {
    var type = "".concat(ActionTypes$1.ErrorPlatform, ".").concat(id);
    var eventObject = {
      type: type,
      data: data
    };
    eventObject.toString = function () {
      return type;
    };
    return eventObject;
  }
  function resolveActions$1(machine, currentState, currentContext, _event, actions, predictableExec, preserveActionOrder) {
    if (preserveActionOrder === void 0) {
      preserveActionOrder = false;
    }
    var _a = __read$1(preserveActionOrder ? [[], actions] : partition$1(actions, function (action) {
        return action.type === assign$2;
      }), 2),
      assignActions = _a[0],
      otherActions = _a[1];
    var updatedContext = assignActions.length ? updateContext$1(currentContext, _event, assignActions, currentState) : currentContext;
    var preservedContexts = preserveActionOrder ? [currentContext] : undefined;
    var resolvedActions = flatten$1(otherActions.map(function (actionObject) {
      var _a;
      switch (actionObject.type) {
        case raise$1$1:
          {
            return resolveRaise$1(actionObject);
          }
        case send$1$1:
          var sendAction = resolveSend$1(actionObject, updatedContext, _event, machine.options.delays); // TODO: fix ActionTypes.Init

          {
            // warn after resolving as we can create better contextual message here
            warn$1(!isString$1(actionObject.delay) || typeof sendAction.delay === 'number',
            // tslint:disable-next-line:max-line-length
            "No delay reference for delay expression '".concat(actionObject.delay, "' was found on machine '").concat(machine.id, "'"));
          }
          if (sendAction.to !== SpecialTargets$1.Internal) {
            predictableExec === null || predictableExec === void 0 ? void 0 : predictableExec(sendAction, updatedContext, _event);
          }
          return sendAction;
        case log$4:
          {
            var resolved = resolveLog$1(actionObject, updatedContext, _event);
            predictableExec === null || predictableExec === void 0 ? void 0 : predictableExec(resolved, updatedContext, _event);
            return resolved;
          }
        case choose$1:
          {
            var chooseAction = actionObject;
            var matchedActions = (_a = chooseAction.conds.find(function (condition) {
              var guard = toGuard$1(condition.cond, machine.options.guards);
              return !guard || evaluateGuard$1(machine, guard, updatedContext, _event, !predictableExec ? currentState : undefined);
            })) === null || _a === void 0 ? void 0 : _a.actions;
            if (!matchedActions) {
              return [];
            }
            var _b = __read$1(resolveActions$1(machine, currentState, updatedContext, _event, toActionObjects$1(toArray$1(matchedActions), machine.options.actions), predictableExec, preserveActionOrder), 2),
              resolvedActionsFromChoose = _b[0],
              resolvedContextFromChoose = _b[1];
            updatedContext = resolvedContextFromChoose;
            preservedContexts === null || preservedContexts === void 0 ? void 0 : preservedContexts.push(updatedContext);
            return resolvedActionsFromChoose;
          }
        case pure$1:
          {
            var matchedActions = actionObject.get(updatedContext, _event.data);
            if (!matchedActions) {
              return [];
            }
            var _c = __read$1(resolveActions$1(machine, currentState, updatedContext, _event, toActionObjects$1(toArray$1(matchedActions), machine.options.actions), predictableExec, preserveActionOrder), 2),
              resolvedActionsFromPure = _c[0],
              resolvedContext = _c[1];
            updatedContext = resolvedContext;
            preservedContexts === null || preservedContexts === void 0 ? void 0 : preservedContexts.push(updatedContext);
            return resolvedActionsFromPure;
          }
        case stop$1$1:
          {
            var resolved = resolveStop$1(actionObject, updatedContext, _event);
            predictableExec === null || predictableExec === void 0 ? void 0 : predictableExec(resolved, updatedContext, _event);
            return resolved;
          }
        case assign$2:
          {
            updatedContext = updateContext$1(updatedContext, _event, [actionObject], !predictableExec ? currentState : undefined);
            preservedContexts === null || preservedContexts === void 0 ? void 0 : preservedContexts.push(updatedContext);
            break;
          }
        default:
          var resolvedActionObject = toActionObject$1(actionObject, machine.options.actions);
          var exec_1 = resolvedActionObject.exec;
          if (predictableExec) {
            predictableExec(resolvedActionObject, updatedContext, _event);
          } else if (exec_1 && preservedContexts) {
            var contextIndex_1 = preservedContexts.length - 1;
            resolvedActionObject = _assign(_assign({}, resolvedActionObject), {
              exec: function exec(_ctx) {
                var args = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                  args[_i - 1] = arguments[_i];
                }
                exec_1.apply(void 0, __spreadArray$1([preservedContexts[contextIndex_1]], __read$1(args), false));
              }
            });
          }
          return resolvedActionObject;
      }
    }).filter(function (a) {
      return !!a;
    }));
    return [resolvedActions, updatedContext];
  }

  /**
   * Maintains a stack of the current service in scope.
   * This is used to provide the correct service to spawn().
   */
  var provide$1 = function provide(service, fn) {
    var result = fn(service);
    return result;
  };

  function createNullActor$1(id) {
    var _a;
    return _a = {
      id: id,
      send: function send() {
        return void 0;
      },
      subscribe: function subscribe() {
        return {
          unsubscribe: function unsubscribe() {
            return void 0;
          }
        };
      },
      getSnapshot: function getSnapshot() {
        return undefined;
      },
      toJSON: function toJSON() {
        return {
          id: id
        };
      }
    }, _a[symbolObservable$1] = function () {
      return this;
    }, _a;
  }
  /**
   * Creates a deferred actor that is able to be invoked given the provided
   * invocation information in its `.meta` value.
   *
   * @param invokeDefinition The meta information needed to invoke the actor.
   */

  function createInvocableActor$1(invokeDefinition, machine, context, _event) {
    var _a;
    var invokeSrc = toInvokeSource$1$1(invokeDefinition.src);
    var serviceCreator = (_a = machine === null || machine === void 0 ? void 0 : machine.options.services) === null || _a === void 0 ? void 0 : _a[invokeSrc.type];
    var resolvedData = invokeDefinition.data ? mapContext$1(invokeDefinition.data, context, _event) : undefined;
    var tempActor = serviceCreator ? createDeferredActor$1(serviceCreator, invokeDefinition.id, resolvedData) : createNullActor$1(invokeDefinition.id); // @ts-ignore

    tempActor.meta = invokeDefinition;
    return tempActor;
  }
  function createDeferredActor$1(entity, id, data) {
    var tempActor = createNullActor$1(id); // @ts-ignore

    tempActor.deferred = true;
    if (isMachine$1(entity)) {
      // "mute" the existing service scope so potential spawned actors within the `.initialState` stay deferred here
      var initialState_1 = tempActor.state = provide$1(undefined, function () {
        return (data ? entity.withContext(data) : entity).initialState;
      });
      tempActor.getSnapshot = function () {
        return initialState_1;
      };
    }
    return tempActor;
  }
  function isActor$2(item) {
    try {
      return typeof item.send === 'function';
    } catch (e) {
      return false;
    }
  }
  function isSpawnedActor$1(item) {
    return isActor$2(item) && 'id' in item;
  } // TODO: refactor the return type, this could be written in a better way but it's best to avoid unneccessary breaking changes now

  function toActorRef$1(actorRefLike) {
    var _a;
    return _assign((_a = {
      subscribe: function subscribe() {
        return {
          unsubscribe: function unsubscribe() {
            return void 0;
          }
        };
      },
      id: 'anonymous',
      getSnapshot: function getSnapshot() {
        return undefined;
      }
    }, _a[symbolObservable$1] = function () {
      return this;
    }, _a), actorRefLike);
  }

  var isLeafNode$1 = function isLeafNode(stateNode) {
    return stateNode.type === 'atomic' || stateNode.type === 'final';
  };
  function getAllChildren(stateNode) {
    return Object.keys(stateNode.states).map(function (key) {
      return stateNode.states[key];
    });
  }
  function getChildren$1(stateNode) {
    return getAllChildren(stateNode).filter(function (sn) {
      return sn.type !== 'history';
    });
  }
  function getAllStateNodes$1(stateNode) {
    var stateNodes = [stateNode];
    if (isLeafNode$1(stateNode)) {
      return stateNodes;
    }
    return stateNodes.concat(flatten$1(getChildren$1(stateNode).map(getAllStateNodes$1)));
  }
  function getConfiguration$1(prevStateNodes, stateNodes) {
    var e_1, _a, e_2, _b, e_3, _c, e_4, _d;
    var prevConfiguration = new Set(prevStateNodes);
    var prevAdjList = getAdjList$1(prevConfiguration);
    var configuration = new Set(stateNodes);
    try {
      // add all ancestors
      for (var configuration_1 = __values$1(configuration), configuration_1_1 = configuration_1.next(); !configuration_1_1.done; configuration_1_1 = configuration_1.next()) {
        var s = configuration_1_1.value;
        var m = s.parent;
        while (m && !configuration.has(m)) {
          configuration.add(m);
          m = m.parent;
        }
      }
    } catch (e_1_1) {
      e_1 = {
        error: e_1_1
      };
    } finally {
      try {
        if (configuration_1_1 && !configuration_1_1.done && (_a = configuration_1.return)) _a.call(configuration_1);
      } finally {
        if (e_1) throw e_1.error;
      }
    }
    var adjList = getAdjList$1(configuration);
    try {
      // add descendants
      for (var configuration_2 = __values$1(configuration), configuration_2_1 = configuration_2.next(); !configuration_2_1.done; configuration_2_1 = configuration_2.next()) {
        var s = configuration_2_1.value; // if previously active, add existing child nodes

        if (s.type === 'compound' && (!adjList.get(s) || !adjList.get(s).length)) {
          if (prevAdjList.get(s)) {
            prevAdjList.get(s).forEach(function (sn) {
              return configuration.add(sn);
            });
          } else {
            s.initialStateNodes.forEach(function (sn) {
              return configuration.add(sn);
            });
          }
        } else {
          if (s.type === 'parallel') {
            try {
              for (var _e = (e_3 = void 0, __values$1(getChildren$1(s))), _f = _e.next(); !_f.done; _f = _e.next()) {
                var child = _f.value;
                if (!configuration.has(child)) {
                  configuration.add(child);
                  if (prevAdjList.get(child)) {
                    prevAdjList.get(child).forEach(function (sn) {
                      return configuration.add(sn);
                    });
                  } else {
                    child.initialStateNodes.forEach(function (sn) {
                      return configuration.add(sn);
                    });
                  }
                }
              }
            } catch (e_3_1) {
              e_3 = {
                error: e_3_1
              };
            } finally {
              try {
                if (_f && !_f.done && (_c = _e.return)) _c.call(_e);
              } finally {
                if (e_3) throw e_3.error;
              }
            }
          }
        }
      }
    } catch (e_2_1) {
      e_2 = {
        error: e_2_1
      };
    } finally {
      try {
        if (configuration_2_1 && !configuration_2_1.done && (_b = configuration_2.return)) _b.call(configuration_2);
      } finally {
        if (e_2) throw e_2.error;
      }
    }
    try {
      // add all ancestors
      for (var configuration_3 = __values$1(configuration), configuration_3_1 = configuration_3.next(); !configuration_3_1.done; configuration_3_1 = configuration_3.next()) {
        var s = configuration_3_1.value;
        var m = s.parent;
        while (m && !configuration.has(m)) {
          configuration.add(m);
          m = m.parent;
        }
      }
    } catch (e_4_1) {
      e_4 = {
        error: e_4_1
      };
    } finally {
      try {
        if (configuration_3_1 && !configuration_3_1.done && (_d = configuration_3.return)) _d.call(configuration_3);
      } finally {
        if (e_4) throw e_4.error;
      }
    }
    return configuration;
  }
  function getValueFromAdj$1(baseNode, adjList) {
    var childStateNodes = adjList.get(baseNode);
    if (!childStateNodes) {
      return {}; // todo: fix?
    }

    if (baseNode.type === 'compound') {
      var childStateNode = childStateNodes[0];
      if (childStateNode) {
        if (isLeafNode$1(childStateNode)) {
          return childStateNode.key;
        }
      } else {
        return {};
      }
    }
    var stateValue = {};
    childStateNodes.forEach(function (csn) {
      stateValue[csn.key] = getValueFromAdj$1(csn, adjList);
    });
    return stateValue;
  }
  function getAdjList$1(configuration) {
    var e_5, _a;
    var adjList = new Map();
    try {
      for (var configuration_4 = __values$1(configuration), configuration_4_1 = configuration_4.next(); !configuration_4_1.done; configuration_4_1 = configuration_4.next()) {
        var s = configuration_4_1.value;
        if (!adjList.has(s)) {
          adjList.set(s, []);
        }
        if (s.parent) {
          if (!adjList.has(s.parent)) {
            adjList.set(s.parent, []);
          }
          adjList.get(s.parent).push(s);
        }
      }
    } catch (e_5_1) {
      e_5 = {
        error: e_5_1
      };
    } finally {
      try {
        if (configuration_4_1 && !configuration_4_1.done && (_a = configuration_4.return)) _a.call(configuration_4);
      } finally {
        if (e_5) throw e_5.error;
      }
    }
    return adjList;
  }
  function getValue$1(rootNode, configuration) {
    var config = getConfiguration$1([rootNode], configuration);
    return getValueFromAdj$1(rootNode, getAdjList$1(config));
  }
  function has$1(iterable, item) {
    if (Array.isArray(iterable)) {
      return iterable.some(function (member) {
        return member === item;
      });
    }
    if (iterable instanceof Set) {
      return iterable.has(item);
    }
    return false; // TODO: fix
  }

  function nextEvents$1(configuration) {
    return __spreadArray$1([], __read$1(new Set(flatten$1(__spreadArray$1([], __read$1(configuration.map(function (sn) {
      return sn.ownEvents;
    })), false)))), false);
  }
  function isInFinalState$1(configuration, stateNode) {
    if (stateNode.type === 'compound') {
      return getChildren$1(stateNode).some(function (s) {
        return s.type === 'final' && has$1(configuration, s);
      });
    }
    if (stateNode.type === 'parallel') {
      return getChildren$1(stateNode).every(function (sn) {
        return isInFinalState$1(configuration, sn);
      });
    }
    return false;
  }
  function getMeta$1(configuration) {
    if (configuration === void 0) {
      configuration = [];
    }
    return configuration.reduce(function (acc, stateNode) {
      if (stateNode.meta !== undefined) {
        acc[stateNode.id] = stateNode.meta;
      }
      return acc;
    }, {});
  }
  function getTagsFromConfiguration$1(configuration) {
    return new Set(flatten$1(configuration.map(function (sn) {
      return sn.tags;
    })));
  }

  function stateValuesEqual$1(a, b) {
    if (a === b) {
      return true;
    }
    if (a === undefined || b === undefined) {
      return false;
    }
    if (isString$1(a) || isString$1(b)) {
      return a === b;
    }
    var aKeys = Object.keys(a);
    var bKeys = Object.keys(b);
    return aKeys.length === bKeys.length && aKeys.every(function (key) {
      return stateValuesEqual$1(a[key], b[key]);
    });
  }
  function isStateConfig$1(state) {
    if (typeof state !== 'object' || state === null) {
      return false;
    }
    return 'value' in state && '_event' in state;
  }
  function bindActionToState$1(action, state) {
    var exec = action.exec;
    var boundAction = _assign(_assign({}, action), {
      exec: exec !== undefined ? function () {
        return exec(state.context, state.event, {
          action: action,
          state: state,
          _event: state._event
        });
      } : undefined
    });
    return boundAction;
  }
  var State$1 = /*#__PURE__*/

  /** @class */
  function () {
    /**
     * Creates a new State instance.
     * @param value The state value
     * @param context The extended state
     * @param historyValue The tree representing historical values of the state nodes
     * @param history The previous state
     * @param actions An array of action objects to execute as side-effects
     * @param activities A mapping of activities and whether they are started (`true`) or stopped (`false`).
     * @param meta
     * @param events Internal event queue. Should be empty with run-to-completion semantics.
     * @param configuration
     */
    function State(config) {
      var _this = this;
      var _a;
      this.actions = [];
      this.activities = EMPTY_ACTIVITY_MAP$1;
      this.meta = {};
      this.events = [];
      this.value = config.value;
      this.context = config.context;
      this._event = config._event;
      this._sessionid = config._sessionid;
      this.event = this._event.data;
      this.historyValue = config.historyValue;
      this.history = config.history;
      this.actions = config.actions || [];
      this.activities = config.activities || EMPTY_ACTIVITY_MAP$1;
      this.meta = getMeta$1(config.configuration);
      this.events = config.events || [];
      this.matches = this.matches.bind(this);
      this.toStrings = this.toStrings.bind(this);
      this.configuration = config.configuration;
      this.transitions = config.transitions;
      this.children = config.children;
      this.done = !!config.done;
      this.tags = (_a = Array.isArray(config.tags) ? new Set(config.tags) : config.tags) !== null && _a !== void 0 ? _a : new Set();
      this.machine = config.machine;
      Object.defineProperty(this, 'nextEvents', {
        get: function get() {
          return nextEvents$1(_this.configuration);
        }
      });
    }
    /**
     * Creates a new State instance for the given `stateValue` and `context`.
     * @param stateValue
     * @param context
     */

    State.from = function (stateValue, context) {
      if (stateValue instanceof State) {
        if (stateValue.context !== context) {
          return new State({
            value: stateValue.value,
            context: context,
            _event: stateValue._event,
            _sessionid: null,
            historyValue: stateValue.historyValue,
            history: stateValue.history,
            actions: [],
            activities: stateValue.activities,
            meta: {},
            events: [],
            configuration: [],
            transitions: [],
            children: {}
          });
        }
        return stateValue;
      }
      var _event = initEvent$1;
      return new State({
        value: stateValue,
        context: context,
        _event: _event,
        _sessionid: null,
        historyValue: undefined,
        history: undefined,
        actions: [],
        activities: undefined,
        meta: undefined,
        events: [],
        configuration: [],
        transitions: [],
        children: {}
      });
    };
    /**
     * Creates a new State instance for the given `config`.
     * @param config The state config
     */

    State.create = function (config) {
      return new State(config);
    };
    /**
     * Creates a new `State` instance for the given `stateValue` and `context` with no actions (side-effects).
     * @param stateValue
     * @param context
     */

    State.inert = function (stateValue, context) {
      if (stateValue instanceof State) {
        if (!stateValue.actions.length) {
          return stateValue;
        }
        var _event = initEvent$1;
        return new State({
          value: stateValue.value,
          context: context,
          _event: _event,
          _sessionid: null,
          historyValue: stateValue.historyValue,
          history: stateValue.history,
          activities: stateValue.activities,
          configuration: stateValue.configuration,
          transitions: [],
          children: {}
        });
      }
      return State.from(stateValue, context);
    };
    /**
     * Returns an array of all the string leaf state node paths.
     * @param stateValue
     * @param delimiter The character(s) that separate each subpath in the string state node path.
     */

    State.prototype.toStrings = function (stateValue, delimiter) {
      var _this = this;
      if (stateValue === void 0) {
        stateValue = this.value;
      }
      if (delimiter === void 0) {
        delimiter = '.';
      }
      if (isString$1(stateValue)) {
        return [stateValue];
      }
      var valueKeys = Object.keys(stateValue);
      return valueKeys.concat.apply(valueKeys, __spreadArray$1([], __read$1(valueKeys.map(function (key) {
        return _this.toStrings(stateValue[key], delimiter).map(function (s) {
          return key + delimiter + s;
        });
      })), false));
    };
    State.prototype.toJSON = function () {
      var _a = this;
      _a.configuration;
      _a.transitions;
      var tags = _a.tags;
      _a.machine;
      var jsonValues = __rest$1(_a, ["configuration", "transitions", "tags", "machine"]);
      return _assign(_assign({}, jsonValues), {
        tags: Array.from(tags)
      });
    };
    State.prototype.matches = function (parentStateValue) {
      return matchesState$1(parentStateValue, this.value);
    };
    /**
     * Whether the current state configuration has a state node with the specified `tag`.
     * @param tag
     */

    State.prototype.hasTag = function (tag) {
      return this.tags.has(tag);
    };
    /**
     * Determines whether sending the `event` will cause a non-forbidden transition
     * to be selected, even if the transitions have no actions nor
     * change the state value.
     *
     * @param event The event to test
     * @returns Whether the event will cause a transition
     */

    State.prototype.can = function (event) {
      var _a;
      var transitionData = (_a = this.machine) === null || _a === void 0 ? void 0 : _a.getTransitionData(this, event);
      return !!(transitionData === null || transitionData === void 0 ? void 0 : transitionData.transitions.length) &&
      // Check that at least one transition is not forbidden
      transitionData.transitions.some(function (t) {
        return t.target !== undefined || t.actions.length;
      });
    };
    return State;
  }();

  var defaultOptions$1 = {
    deferEvents: false
  };
  var Scheduler$1 = /*#__PURE__*/

  /** @class */
  function () {
    function Scheduler(options) {
      this.processingEvent = false;
      this.queue = [];
      this.initialized = false;
      this.options = _assign(_assign({}, defaultOptions$1), options);
    }
    Scheduler.prototype.initialize = function (callback) {
      this.initialized = true;
      if (callback) {
        if (!this.options.deferEvents) {
          this.schedule(callback);
          return;
        }
        this.process(callback);
      }
      this.flushEvents();
    };
    Scheduler.prototype.schedule = function (task) {
      if (!this.initialized || this.processingEvent) {
        this.queue.push(task);
        return;
      }
      if (this.queue.length !== 0) {
        throw new Error('Event queue should be empty when it is not processing events');
      }
      this.process(task);
      this.flushEvents();
    };
    Scheduler.prototype.clear = function () {
      this.queue = [];
    };
    Scheduler.prototype.flushEvents = function () {
      var nextCallback = this.queue.shift();
      while (nextCallback) {
        this.process(nextCallback);
        nextCallback = this.queue.shift();
      }
    };
    Scheduler.prototype.process = function (callback) {
      this.processingEvent = true;
      try {
        callback();
      } catch (e) {
        // there is no use to keep the future events
        // as the situation is not anymore the same
        this.clear();
        throw e;
      } finally {
        this.processingEvent = false;
      }
    };
    return Scheduler;
  }();

  var children$1 = /*#__PURE__*/new Map();
  var sessionIdIndex$1 = 0;
  var registry$1 = {
    bookId: function bookId() {
      return "x:".concat(sessionIdIndex$1++);
    },
    register: function register(id, actor) {
      children$1.set(id, actor);
      return id;
    },
    get: function get(id) {
      return children$1.get(id);
    },
    free: function free(id) {
      children$1.delete(id);
    }
  };

  function getGlobal$1() {
    if (typeof globalThis !== 'undefined') {
      return globalThis;
    }
    if (typeof self !== 'undefined') {
      return self;
    }
    if (typeof window !== 'undefined') {
      return window;
    }
    if (typeof global$1 !== 'undefined') {
      return global$1;
    }
    {
      console.warn('XState could not find a global object in this environment. Please let the maintainers know and raise an issue here: https://github.com/statelyai/xstate/issues');
    }
  }
  function getDevTools$1() {
    var global = getGlobal$1();
    if (global && '__xstate__' in global) {
      return global.__xstate__;
    }
    return undefined;
  }
  function registerService$1(service) {
    if (!getGlobal$1()) {
      return;
    }
    var devTools = getDevTools$1();
    if (devTools) {
      devTools.register(service);
    }
  }

  function spawnBehavior$1(behavior, options) {
    if (options === void 0) {
      options = {};
    }
    var state = behavior.initialState;
    var observers = new Set();
    var mailbox = [];
    var flushing = false;
    var flush = function flush() {
      if (flushing) {
        return;
      }
      flushing = true;
      while (mailbox.length > 0) {
        var event_1 = mailbox.shift();
        state = behavior.transition(state, event_1, actorCtx);
        observers.forEach(function (observer) {
          return observer.next(state);
        });
      }
      flushing = false;
    };
    var actor = toActorRef$1({
      id: options.id,
      send: function send(event) {
        mailbox.push(event);
        flush();
      },
      getSnapshot: function getSnapshot() {
        return state;
      },
      subscribe: function subscribe(next, handleError, complete) {
        var observer = toObserver$1(next, handleError, complete);
        observers.add(observer);
        observer.next(state);
        return {
          unsubscribe: function unsubscribe() {
            observers.delete(observer);
          }
        };
      }
    });
    var actorCtx = {
      parent: options.parent,
      self: actor,
      id: options.id || 'anonymous',
      observers: observers
    };
    state = behavior.start ? behavior.start(actorCtx) : state;
    return actor;
  }

  var DEFAULT_SPAWN_OPTIONS$1 = {
    sync: false,
    autoForward: false
  };
  var InterpreterStatus$1;
  (function (InterpreterStatus) {
    InterpreterStatus[InterpreterStatus["NotStarted"] = 0] = "NotStarted";
    InterpreterStatus[InterpreterStatus["Running"] = 1] = "Running";
    InterpreterStatus[InterpreterStatus["Stopped"] = 2] = "Stopped";
  })(InterpreterStatus$1 || (InterpreterStatus$1 = {}));
  var Interpreter$1 = /*#__PURE__*/

  /** @class */
  function () {
    /**
     * Creates a new Interpreter instance (i.e., service) for the given machine with the provided options, if any.
     *
     * @param machine The machine to be interpreted
     * @param options Interpreter options
     */
    function Interpreter(machine, options) {
      var _this = this;
      if (options === void 0) {
        options = Interpreter.defaultOptions;
      }
      this.machine = machine;
      this.delayedEventsMap = {};
      this.listeners = new Set();
      this.contextListeners = new Set();
      this.stopListeners = new Set();
      this.doneListeners = new Set();
      this.eventListeners = new Set();
      this.sendListeners = new Set();
      /**
       * Whether the service is started.
       */

      this.initialized = false;
      this.status = InterpreterStatus$1.NotStarted;
      this.children = new Map();
      this.forwardTo = new Set();
      /**
       * Alias for Interpreter.prototype.start
       */

      this.init = this.start;
      /**
       * Sends an event to the running interpreter to trigger a transition.
       *
       * An array of events (batched) can be sent as well, which will send all
       * batched events to the running interpreter. The listeners will be
       * notified only **once** when all events are processed.
       *
       * @param event The event(s) to send
       */

      this.send = function (event, payload) {
        if (isArray$1(event)) {
          _this.batch(event);
          return _this.state;
        }
        var _event = toSCXMLEvent$1(toEventObject$1(event, payload));
        if (_this.status === InterpreterStatus$1.Stopped) {
          // do nothing
          {
            warn$1(false, "Event \"".concat(_event.name, "\" was sent to stopped service \"").concat(_this.machine.id, "\". This service has already reached its final state, and will not transition.\nEvent: ").concat(JSON.stringify(_event.data)));
          }
          return _this.state;
        }
        if (_this.status !== InterpreterStatus$1.Running && !_this.options.deferEvents) {
          throw new Error("Event \"".concat(_event.name, "\" was sent to uninitialized service \"").concat(_this.machine.id // tslint:disable-next-line:max-line-length
          , "\". Make sure .start() is called for this service, or set { deferEvents: true } in the service options.\nEvent: ").concat(JSON.stringify(_event.data)));
        }
        _this.scheduler.schedule(function () {
          // Forward copy of event to child actors
          _this.forward(_event);
          var nextState = _this.nextState(_event);
          _this.update(nextState, _event);
        });
        return _this._state; // TODO: deprecate (should return void)
        // tslint:disable-next-line:semicolon
      };

      this.sendTo = function (event, to) {
        var isParent = _this.parent && (to === SpecialTargets$1.Parent || _this.parent.id === to);
        var target = isParent ? _this.parent : isString$1(to) ? _this.children.get(to) || registry$1.get(to) : isActor$1$1(to) ? to : undefined;
        if (!target) {
          if (!isParent) {
            throw new Error("Unable to send event to child '".concat(to, "' from service '").concat(_this.id, "'."));
          } // tslint:disable-next-line:no-console

          {
            warn$1(false, "Service '".concat(_this.id, "' has no parent: unable to send event ").concat(event.type));
          }
          return;
        }
        if ('machine' in target) {
          // perhaps those events should be rejected in the parent
          // but atm it doesn't have easy access to all of the information that is required to do it reliably
          if (_this.status !== InterpreterStatus$1.Stopped || _this.parent !== target ||
          // we need to send events to the parent from exit handlers of a machine that reached its final state
          _this.state.done) {
            // Send SCXML events to machines
            target.send(_assign(_assign({}, event), {
              name: event.name === error$1$1 ? "".concat(error$2(_this.id)) : event.name,
              origin: _this.sessionId
            }));
          }
        } else {
          // Send normal events to other targets
          target.send(event.data);
        }
      };
      this._exec = function (action, context, _event, actionFunctionMap) {
        if (actionFunctionMap === void 0) {
          actionFunctionMap = _this.machine.options.actions;
        }
        var actionOrExec = action.exec || getActionFunction$1(action.type, actionFunctionMap);
        var exec = isFunction$1(actionOrExec) ? actionOrExec : actionOrExec ? actionOrExec.exec : action.exec;
        if (exec) {
          try {
            return exec(context, _event.data, !_this.machine.config.predictableActionArguments ? {
              action: action,
              state: _this.state,
              _event: _event
            } : {
              action: action,
              _event: _event
            });
          } catch (err) {
            if (_this.parent) {
              _this.parent.send({
                type: 'xstate.error',
                data: err
              });
            }
            throw err;
          }
        }
        switch (action.type) {
          case send$1$1:
            var sendAction = action;
            if (typeof sendAction.delay === 'number') {
              _this.defer(sendAction);
              return;
            } else {
              if (sendAction.to) {
                _this.sendTo(sendAction._event, sendAction.to);
              } else {
                _this.send(sendAction._event);
              }
            }
            break;
          case cancel$1$1:
            _this.cancel(action.sendId);
            break;
          case start$1$1:
            {
              if (_this.status !== InterpreterStatus$1.Running) {
                return;
              }
              var activity = action.activity; // If the activity will be stopped right after it's started
              // (such as in transient states)
              // don't bother starting the activity.

              if (
              // in v4 with `predictableActionArguments` invokes are called eagerly when the `this.state` still points to the previous state
              !_this.machine.config.predictableActionArguments && !_this.state.activities[activity.id || activity.type]) {
                break;
              } // Invoked services

              if (activity.type === ActionTypes$1.Invoke) {
                var invokeSource = toInvokeSource$1$1(activity.src);
                var serviceCreator = _this.machine.options.services ? _this.machine.options.services[invokeSource.type] : undefined;
                var id = activity.id,
                  data = activity.data;
                {
                  warn$1(!('forward' in activity),
                  // tslint:disable-next-line:max-line-length
                  "`forward` property is deprecated (found in invocation of '".concat(activity.src, "' in in machine '").concat(_this.machine.id, "'). ") + "Please use `autoForward` instead.");
                }
                var autoForward = 'autoForward' in activity ? activity.autoForward : !!activity.forward;
                if (!serviceCreator) {
                  // tslint:disable-next-line:no-console
                  {
                    warn$1(false, "No service found for invocation '".concat(activity.src, "' in machine '").concat(_this.machine.id, "'."));
                  }
                  return;
                }
                var resolvedData = data ? mapContext$1(data, context, _event) : undefined;
                if (typeof serviceCreator === 'string') {
                  // TODO: warn
                  return;
                }
                var source = isFunction$1(serviceCreator) ? serviceCreator(context, _event.data, {
                  data: resolvedData,
                  src: invokeSource,
                  meta: activity.meta
                }) : serviceCreator;
                if (!source) {
                  // TODO: warn?
                  return;
                }
                var options = void 0;
                if (isMachine$1(source)) {
                  source = resolvedData ? source.withContext(resolvedData) : source;
                  options = {
                    autoForward: autoForward
                  };
                }
                _this.spawn(source, id, options);
              } else {
                _this.spawnActivity(activity);
              }
              break;
            }
          case stop$1$1:
            {
              _this.stopChild(action.activity.id);
              break;
            }
          case log$4:
            var label = action.label,
              value = action.value;
            if (label) {
              _this.logger(label, value);
            } else {
              _this.logger(value);
            }
            break;
          default:
            {
              warn$1(false, "No implementation found for action type '".concat(action.type, "'"));
            }
            break;
        }
      };
      var resolvedOptions = _assign(_assign({}, Interpreter.defaultOptions), options);
      var clock = resolvedOptions.clock,
        logger = resolvedOptions.logger,
        parent = resolvedOptions.parent,
        id = resolvedOptions.id;
      var resolvedId = id !== undefined ? id : machine.id;
      this.id = resolvedId;
      this.logger = logger;
      this.clock = clock;
      this.parent = parent;
      this.options = resolvedOptions;
      this.scheduler = new Scheduler$1({
        deferEvents: this.options.deferEvents
      });
      this.sessionId = registry$1.bookId();
    }
    Object.defineProperty(Interpreter.prototype, "initialState", {
      get: function get() {
        var _this = this;
        if (this._initialState) {
          return this._initialState;
        }
        return provide$1(this, function () {
          _this._initialState = _this.machine.initialState;
          return _this._initialState;
        });
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Interpreter.prototype, "state", {
      get: function get() {
        {
          warn$1(this.status !== InterpreterStatus$1.NotStarted, "Attempted to read state from uninitialized service '".concat(this.id, "'. Make sure the service is started first."));
        }
        return this._state;
      },
      enumerable: false,
      configurable: true
    });
    /**
     * Executes the actions of the given state, with that state's `context` and `event`.
     *
     * @param state The state whose actions will be executed
     * @param actionsConfig The action implementations to use
     */

    Interpreter.prototype.execute = function (state, actionsConfig) {
      var e_1, _a;
      try {
        for (var _b = __values$1(state.actions), _c = _b.next(); !_c.done; _c = _b.next()) {
          var action = _c.value;
          this.exec(action, state, actionsConfig);
        }
      } catch (e_1_1) {
        e_1 = {
          error: e_1_1
        };
      } finally {
        try {
          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        } finally {
          if (e_1) throw e_1.error;
        }
      }
    };
    Interpreter.prototype.update = function (state, _event) {
      var e_2, _a, e_3, _b, e_4, _c, e_5, _d;
      var _this = this; // Attach session ID to state

      state._sessionid = this.sessionId; // Update state

      this._state = state; // Execute actions

      if ((!this.machine.config.predictableActionArguments ||
      // this is currently required to execute initial actions as the `initialState` gets cached
      // we can't just recompute it (and execute actions while doing so) because we try to preserve identity of actors created within initial assigns
      _event === initEvent$1) && this.options.execute) {
        this.execute(this.state);
      } // Update children

      this.children.forEach(function (child) {
        _this.state.children[child.id] = child;
      }); // Dev tools

      if (this.devTools) {
        this.devTools.send(_event.data, state);
      } // Execute listeners

      if (state.event) {
        try {
          for (var _e = __values$1(this.eventListeners), _f = _e.next(); !_f.done; _f = _e.next()) {
            var listener = _f.value;
            listener(state.event);
          }
        } catch (e_2_1) {
          e_2 = {
            error: e_2_1
          };
        } finally {
          try {
            if (_f && !_f.done && (_a = _e.return)) _a.call(_e);
          } finally {
            if (e_2) throw e_2.error;
          }
        }
      }
      try {
        for (var _g = __values$1(this.listeners), _h = _g.next(); !_h.done; _h = _g.next()) {
          var listener = _h.value;
          listener(state, state.event);
        }
      } catch (e_3_1) {
        e_3 = {
          error: e_3_1
        };
      } finally {
        try {
          if (_h && !_h.done && (_b = _g.return)) _b.call(_g);
        } finally {
          if (e_3) throw e_3.error;
        }
      }
      try {
        for (var _j = __values$1(this.contextListeners), _k = _j.next(); !_k.done; _k = _j.next()) {
          var contextListener = _k.value;
          contextListener(this.state.context, this.state.history ? this.state.history.context : undefined);
        }
      } catch (e_4_1) {
        e_4 = {
          error: e_4_1
        };
      } finally {
        try {
          if (_k && !_k.done && (_c = _j.return)) _c.call(_j);
        } finally {
          if (e_4) throw e_4.error;
        }
      }
      if (this.state.done) {
        // get final child state node
        var finalChildStateNode = state.configuration.find(function (sn) {
          return sn.type === 'final' && sn.parent === _this.machine;
        });
        var doneData = finalChildStateNode && finalChildStateNode.doneData ? mapContext$1(finalChildStateNode.doneData, state.context, _event) : undefined;
        try {
          for (var _l = __values$1(this.doneListeners), _m = _l.next(); !_m.done; _m = _l.next()) {
            var listener = _m.value;
            listener(doneInvoke$1(this.id, doneData));
          }
        } catch (e_5_1) {
          e_5 = {
            error: e_5_1
          };
        } finally {
          try {
            if (_m && !_m.done && (_d = _l.return)) _d.call(_l);
          } finally {
            if (e_5) throw e_5.error;
          }
        }
        this._stop();
      }
    };
    /*
     * Adds a listener that is notified whenever a state transition happens. The listener is called with
     * the next state and the event object that caused the state transition.
     *
     * @param listener The state listener
     */

    Interpreter.prototype.onTransition = function (listener) {
      this.listeners.add(listener); // Send current state to listener

      if (this.status === InterpreterStatus$1.Running) {
        listener(this.state, this.state.event);
      }
      return this;
    };
    Interpreter.prototype.subscribe = function (nextListenerOrObserver, _,
    // TODO: error listener
    completeListener) {
      var _this = this;
      var observer = toObserver$1(nextListenerOrObserver, _, completeListener);
      this.listeners.add(observer.next); // Send current state to listener

      if (this.status !== InterpreterStatus$1.NotStarted) {
        observer.next(this.state);
      }
      var completeOnce = function completeOnce() {
        _this.doneListeners.delete(completeOnce);
        _this.stopListeners.delete(completeOnce);
        observer.complete();
      };
      if (this.status === InterpreterStatus$1.Stopped) {
        observer.complete();
      } else {
        this.onDone(completeOnce);
        this.onStop(completeOnce);
      }
      return {
        unsubscribe: function unsubscribe() {
          _this.listeners.delete(observer.next);
          _this.doneListeners.delete(completeOnce);
          _this.stopListeners.delete(completeOnce);
        }
      };
    };
    /**
     * Adds an event listener that is notified whenever an event is sent to the running interpreter.
     * @param listener The event listener
     */

    Interpreter.prototype.onEvent = function (listener) {
      this.eventListeners.add(listener);
      return this;
    };
    /**
     * Adds an event listener that is notified whenever a `send` event occurs.
     * @param listener The event listener
     */

    Interpreter.prototype.onSend = function (listener) {
      this.sendListeners.add(listener);
      return this;
    };
    /**
     * Adds a context listener that is notified whenever the state context changes.
     * @param listener The context listener
     */

    Interpreter.prototype.onChange = function (listener) {
      this.contextListeners.add(listener);
      return this;
    };
    /**
     * Adds a listener that is notified when the machine is stopped.
     * @param listener The listener
     */

    Interpreter.prototype.onStop = function (listener) {
      this.stopListeners.add(listener);
      return this;
    };
    /**
     * Adds a state listener that is notified when the statechart has reached its final state.
     * @param listener The state listener
     */

    Interpreter.prototype.onDone = function (listener) {
      this.doneListeners.add(listener);
      return this;
    };
    /**
     * Removes a listener.
     * @param listener The listener to remove
     */

    Interpreter.prototype.off = function (listener) {
      this.listeners.delete(listener);
      this.eventListeners.delete(listener);
      this.sendListeners.delete(listener);
      this.stopListeners.delete(listener);
      this.doneListeners.delete(listener);
      this.contextListeners.delete(listener);
      return this;
    };
    /**
     * Starts the interpreter from the given state, or the initial state.
     * @param initialState The state to start the statechart from
     */

    Interpreter.prototype.start = function (initialState) {
      var _this = this;
      if (this.status === InterpreterStatus$1.Running) {
        // Do not restart the service if it is already started
        return this;
      } // yes, it's a hack but we need the related cache to be populated for some things to work (like delayed transitions)
      // this is usually called by `machine.getInitialState` but if we rehydrate from a state we might bypass this call
      // we also don't want to call this method here as it resolves the full initial state which might involve calling assign actions
      // and that could potentially lead to some unwanted side-effects (even such as creating some rogue actors)

      this.machine._init();
      registry$1.register(this.sessionId, this);
      this.initialized = true;
      this.status = InterpreterStatus$1.Running;
      var resolvedState = initialState === undefined ? this.initialState : provide$1(this, function () {
        return isStateConfig$1(initialState) ? _this.machine.resolveState(initialState) : _this.machine.resolveState(State$1.from(initialState, _this.machine.context));
      });
      if (this.options.devTools) {
        this.attachDev();
      }
      this.scheduler.initialize(function () {
        _this.update(resolvedState, initEvent$1);
      });
      return this;
    };
    Interpreter.prototype._stop = function () {
      var e_6, _a, e_7, _b, e_8, _c, e_9, _d, e_10, _e;
      try {
        for (var _f = __values$1(this.listeners), _g = _f.next(); !_g.done; _g = _f.next()) {
          var listener = _g.value;
          this.listeners.delete(listener);
        }
      } catch (e_6_1) {
        e_6 = {
          error: e_6_1
        };
      } finally {
        try {
          if (_g && !_g.done && (_a = _f.return)) _a.call(_f);
        } finally {
          if (e_6) throw e_6.error;
        }
      }
      try {
        for (var _h = __values$1(this.stopListeners), _j = _h.next(); !_j.done; _j = _h.next()) {
          var listener = _j.value; // call listener, then remove

          listener();
          this.stopListeners.delete(listener);
        }
      } catch (e_7_1) {
        e_7 = {
          error: e_7_1
        };
      } finally {
        try {
          if (_j && !_j.done && (_b = _h.return)) _b.call(_h);
        } finally {
          if (e_7) throw e_7.error;
        }
      }
      try {
        for (var _k = __values$1(this.contextListeners), _l = _k.next(); !_l.done; _l = _k.next()) {
          var listener = _l.value;
          this.contextListeners.delete(listener);
        }
      } catch (e_8_1) {
        e_8 = {
          error: e_8_1
        };
      } finally {
        try {
          if (_l && !_l.done && (_c = _k.return)) _c.call(_k);
        } finally {
          if (e_8) throw e_8.error;
        }
      }
      try {
        for (var _m = __values$1(this.doneListeners), _o = _m.next(); !_o.done; _o = _m.next()) {
          var listener = _o.value;
          this.doneListeners.delete(listener);
        }
      } catch (e_9_1) {
        e_9 = {
          error: e_9_1
        };
      } finally {
        try {
          if (_o && !_o.done && (_d = _m.return)) _d.call(_m);
        } finally {
          if (e_9) throw e_9.error;
        }
      }
      if (!this.initialized) {
        // Interpreter already stopped; do nothing
        return this;
      }
      this.initialized = false;
      this.status = InterpreterStatus$1.Stopped;
      this._initialState = undefined;
      try {
        // we are going to stop within the current sync frame
        // so we can safely just cancel this here as nothing async should be fired anyway
        for (var _p = __values$1(Object.keys(this.delayedEventsMap)), _q = _p.next(); !_q.done; _q = _p.next()) {
          var key = _q.value;
          this.clock.clearTimeout(this.delayedEventsMap[key]);
        }
      } catch (e_10_1) {
        e_10 = {
          error: e_10_1
        };
      } finally {
        try {
          if (_q && !_q.done && (_e = _p.return)) _e.call(_p);
        } finally {
          if (e_10) throw e_10.error;
        }
      } // clear everything that might be enqueued

      this.scheduler.clear();
      this.scheduler = new Scheduler$1({
        deferEvents: this.options.deferEvents
      });
    };
    /**
     * Stops the interpreter and unsubscribe all listeners.
     *
     * This will also notify the `onStop` listeners.
     */

    Interpreter.prototype.stop = function () {
      // TODO: add warning for stopping non-root interpreters
      var _this = this; // grab the current scheduler as it will be replaced in _stop

      var scheduler = this.scheduler;
      this._stop(); // let what is currently processed to be finished

      scheduler.schedule(function () {
        // it feels weird to handle this here but we need to handle this even slightly "out of band"
        var _event = toSCXMLEvent$1({
          type: 'xstate.stop'
        });
        var nextState = provide$1(_this, function () {
          var exitActions = flatten$1(__spreadArray$1([], __read$1(_this.state.configuration), false).sort(function (a, b) {
            return b.order - a.order;
          }).map(function (stateNode) {
            return toActionObjects$1(stateNode.onExit, _this.machine.options.actions);
          }));
          var _a = __read$1(resolveActions$1(_this.machine, _this.state, _this.state.context, _event, exitActions, _this.machine.config.predictableActionArguments ? _this._exec : undefined, _this.machine.config.predictableActionArguments || _this.machine.config.preserveActionOrder), 2),
            resolvedActions = _a[0],
            updatedContext = _a[1];
          var newState = new State$1({
            value: _this.state.value,
            context: updatedContext,
            _event: _event,
            _sessionid: _this.sessionId,
            historyValue: undefined,
            history: _this.state,
            actions: resolvedActions.filter(function (action) {
              return action.type !== raise$1$1 && (action.type !== send$1$1 || !!action.to && action.to !== SpecialTargets$1.Internal);
            }),
            activities: {},
            events: [],
            configuration: [],
            transitions: [],
            children: {},
            done: _this.state.done,
            tags: _this.state.tags,
            machine: _this.machine
          });
          newState.changed = true;
          return newState;
        });
        _this.update(nextState, _event); // TODO: think about converting those to actions
        // Stop all children

        _this.children.forEach(function (child) {
          if (isFunction$1(child.stop)) {
            child.stop();
          }
        });
        _this.children.clear();
        registry$1.free(_this.sessionId);
      });
      return this;
    };
    Interpreter.prototype.batch = function (events) {
      var _this = this;
      if (this.status === InterpreterStatus$1.NotStarted && this.options.deferEvents) {
        // tslint:disable-next-line:no-console
        {
          warn$1(false, "".concat(events.length, " event(s) were sent to uninitialized service \"").concat(this.machine.id, "\" and are deferred. Make sure .start() is called for this service.\nEvent: ").concat(JSON.stringify(event)));
        }
      } else if (this.status !== InterpreterStatus$1.Running) {
        throw new Error(
        // tslint:disable-next-line:max-line-length
        "".concat(events.length, " event(s) were sent to uninitialized service \"").concat(this.machine.id, "\". Make sure .start() is called for this service, or set { deferEvents: true } in the service options."));
      }
      this.scheduler.schedule(function () {
        var e_11, _a;
        var nextState = _this.state;
        var batchChanged = false;
        var batchedActions = [];
        var _loop_1 = function _loop_1(event_1) {
          var _event = toSCXMLEvent$1(event_1);
          _this.forward(_event);
          nextState = provide$1(_this, function () {
            return _this.machine.transition(nextState, _event);
          });
          batchedActions.push.apply(batchedActions, __spreadArray$1([], __read$1(nextState.actions.map(function (a) {
            return bindActionToState$1(a, nextState);
          })), false));
          batchChanged = batchChanged || !!nextState.changed;
        };
        try {
          for (var events_1 = __values$1(events), events_1_1 = events_1.next(); !events_1_1.done; events_1_1 = events_1.next()) {
            var event_1 = events_1_1.value;
            _loop_1(event_1);
          }
        } catch (e_11_1) {
          e_11 = {
            error: e_11_1
          };
        } finally {
          try {
            if (events_1_1 && !events_1_1.done && (_a = events_1.return)) _a.call(events_1);
          } finally {
            if (e_11) throw e_11.error;
          }
        }
        nextState.changed = batchChanged;
        nextState.actions = batchedActions;
        _this.update(nextState, toSCXMLEvent$1(events[events.length - 1]));
      });
    };
    /**
     * Returns a send function bound to this interpreter instance.
     *
     * @param event The event to be sent by the sender.
     */

    Interpreter.prototype.sender = function (event) {
      return this.send.bind(this, event);
    };
    Interpreter.prototype._nextState = function (event) {
      var _this = this;
      var _event = toSCXMLEvent$1(event);
      if (_event.name.indexOf(errorPlatform$1) === 0 && !this.state.nextEvents.some(function (nextEvent) {
        return nextEvent.indexOf(errorPlatform$1) === 0;
      })) {
        throw _event.data.data;
      }
      var nextState = provide$1(this, function () {
        return _this.machine.transition(_this.state, _event, undefined, _this.machine.config.predictableActionArguments ? _this._exec : undefined);
      });
      return nextState;
    };
    /**
     * Returns the next state given the interpreter's current state and the event.
     *
     * This is a pure method that does _not_ update the interpreter's state.
     *
     * @param event The event to determine the next state
     */

    Interpreter.prototype.nextState = function (event) {
      return this._nextState(event);
    };
    Interpreter.prototype.forward = function (event) {
      var e_12, _a;
      try {
        for (var _b = __values$1(this.forwardTo), _c = _b.next(); !_c.done; _c = _b.next()) {
          var id = _c.value;
          var child = this.children.get(id);
          if (!child) {
            throw new Error("Unable to forward event '".concat(event, "' from interpreter '").concat(this.id, "' to nonexistant child '").concat(id, "'."));
          }
          child.send(event);
        }
      } catch (e_12_1) {
        e_12 = {
          error: e_12_1
        };
      } finally {
        try {
          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        } finally {
          if (e_12) throw e_12.error;
        }
      }
    };
    Interpreter.prototype.defer = function (sendAction) {
      var _this = this;
      this.delayedEventsMap[sendAction.id] = this.clock.setTimeout(function () {
        if (sendAction.to) {
          _this.sendTo(sendAction._event, sendAction.to);
        } else {
          _this.send(sendAction._event);
        }
      }, sendAction.delay);
    };
    Interpreter.prototype.cancel = function (sendId) {
      this.clock.clearTimeout(this.delayedEventsMap[sendId]);
      delete this.delayedEventsMap[sendId];
    };
    Interpreter.prototype.exec = function (action, state, actionFunctionMap) {
      if (actionFunctionMap === void 0) {
        actionFunctionMap = this.machine.options.actions;
      }
      this._exec(action, state.context, state._event, actionFunctionMap);
    };
    Interpreter.prototype.removeChild = function (childId) {
      var _a;
      this.children.delete(childId);
      this.forwardTo.delete(childId); // this.state might not exist at the time this is called,
      // such as when a child is added then removed while initializing the state

      (_a = this.state) === null || _a === void 0 ? true : delete _a.children[childId];
    };
    Interpreter.prototype.stopChild = function (childId) {
      var child = this.children.get(childId);
      if (!child) {
        return;
      }
      this.removeChild(childId);
      if (isFunction$1(child.stop)) {
        child.stop();
      }
    };
    Interpreter.prototype.spawn = function (entity, name, options) {
      if (this.status !== InterpreterStatus$1.Running) {
        return createDeferredActor$1(entity, name);
      }
      if (isPromiseLike$1(entity)) {
        return this.spawnPromise(Promise.resolve(entity), name);
      } else if (isFunction$1(entity)) {
        return this.spawnCallback(entity, name);
      } else if (isSpawnedActor$1(entity)) {
        return this.spawnActor(entity, name);
      } else if (isObservable$1(entity)) {
        return this.spawnObservable(entity, name);
      } else if (isMachine$1(entity)) {
        return this.spawnMachine(entity, _assign(_assign({}, options), {
          id: name
        }));
      } else if (isBehavior$1(entity)) {
        return this.spawnBehavior(entity, name);
      } else {
        throw new Error("Unable to spawn entity \"".concat(name, "\" of type \"").concat(typeof entity, "\"."));
      }
    };
    Interpreter.prototype.spawnMachine = function (machine, options) {
      var _this = this;
      if (options === void 0) {
        options = {};
      }
      var childService = new Interpreter(machine, _assign(_assign({}, this.options), {
        parent: this,
        id: options.id || machine.id
      }));
      var resolvedOptions = _assign(_assign({}, DEFAULT_SPAWN_OPTIONS$1), options);
      if (resolvedOptions.sync) {
        childService.onTransition(function (state) {
          _this.send(update$1, {
            state: state,
            id: childService.id
          });
        });
      }
      var actor = childService;
      this.children.set(childService.id, actor);
      if (resolvedOptions.autoForward) {
        this.forwardTo.add(childService.id);
      }
      childService.onDone(function (doneEvent) {
        _this.removeChild(childService.id);
        _this.send(toSCXMLEvent$1(doneEvent, {
          origin: childService.id
        }));
      }).start();
      return actor;
    };
    Interpreter.prototype.spawnBehavior = function (behavior, id) {
      var actorRef = spawnBehavior$1(behavior, {
        id: id,
        parent: this
      });
      this.children.set(id, actorRef);
      return actorRef;
    };
    Interpreter.prototype.spawnPromise = function (promise, id) {
      var _a;
      var _this = this;
      var canceled = false;
      var resolvedData;
      promise.then(function (response) {
        if (!canceled) {
          resolvedData = response;
          _this.removeChild(id);
          _this.send(toSCXMLEvent$1(doneInvoke$1(id, response), {
            origin: id
          }));
        }
      }, function (errorData) {
        if (!canceled) {
          _this.removeChild(id);
          var errorEvent = error$2(id, errorData);
          try {
            // Send "error.platform.id" to this (parent).
            _this.send(toSCXMLEvent$1(errorEvent, {
              origin: id
            }));
          } catch (error) {
            reportUnhandledExceptionOnInvocation$1(errorData, error, id);
            if (_this.devTools) {
              _this.devTools.send(errorEvent, _this.state);
            }
            if (_this.machine.strict) {
              // it would be better to always stop the state machine if unhandled
              // exception/promise rejection happens but because we don't want to
              // break existing code so enforce it on strict mode only especially so
              // because documentation says that onError is optional
              _this.stop();
            }
          }
        }
      });
      var actor = (_a = {
        id: id,
        send: function send() {
          return void 0;
        },
        subscribe: function subscribe(next, handleError, complete) {
          var observer = toObserver$1(next, handleError, complete);
          var unsubscribed = false;
          promise.then(function (response) {
            if (unsubscribed) {
              return;
            }
            observer.next(response);
            if (unsubscribed) {
              return;
            }
            observer.complete();
          }, function (err) {
            if (unsubscribed) {
              return;
            }
            observer.error(err);
          });
          return {
            unsubscribe: function unsubscribe() {
              return unsubscribed = true;
            }
          };
        },
        stop: function stop() {
          canceled = true;
        },
        toJSON: function toJSON() {
          return {
            id: id
          };
        },
        getSnapshot: function getSnapshot() {
          return resolvedData;
        }
      }, _a[symbolObservable$1] = function () {
        return this;
      }, _a);
      this.children.set(id, actor);
      return actor;
    };
    Interpreter.prototype.spawnCallback = function (callback, id) {
      var _a;
      var _this = this;
      var canceled = false;
      var receivers = new Set();
      var listeners = new Set();
      var emitted;
      var receive = function receive(e) {
        emitted = e;
        listeners.forEach(function (listener) {
          return listener(e);
        });
        if (canceled) {
          return;
        }
        _this.send(toSCXMLEvent$1(e, {
          origin: id
        }));
      };
      var callbackStop;
      try {
        callbackStop = callback(receive, function (newListener) {
          receivers.add(newListener);
        });
      } catch (err) {
        this.send(error$2(id, err));
      }
      if (isPromiseLike$1(callbackStop)) {
        // it turned out to be an async function, can't reliably check this before calling `callback`
        // because transpiled async functions are not recognizable
        return this.spawnPromise(callbackStop, id);
      }
      var actor = (_a = {
        id: id,
        send: function send(event) {
          return receivers.forEach(function (receiver) {
            return receiver(event);
          });
        },
        subscribe: function subscribe(next) {
          var observer = toObserver$1(next);
          listeners.add(observer.next);
          return {
            unsubscribe: function unsubscribe() {
              listeners.delete(observer.next);
            }
          };
        },
        stop: function stop() {
          canceled = true;
          if (isFunction$1(callbackStop)) {
            callbackStop();
          }
        },
        toJSON: function toJSON() {
          return {
            id: id
          };
        },
        getSnapshot: function getSnapshot() {
          return emitted;
        }
      }, _a[symbolObservable$1] = function () {
        return this;
      }, _a);
      this.children.set(id, actor);
      return actor;
    };
    Interpreter.prototype.spawnObservable = function (source, id) {
      var _a;
      var _this = this;
      var emitted;
      var subscription = source.subscribe(function (value) {
        emitted = value;
        _this.send(toSCXMLEvent$1(value, {
          origin: id
        }));
      }, function (err) {
        _this.removeChild(id);
        _this.send(toSCXMLEvent$1(error$2(id, err), {
          origin: id
        }));
      }, function () {
        _this.removeChild(id);
        _this.send(toSCXMLEvent$1(doneInvoke$1(id), {
          origin: id
        }));
      });
      var actor = (_a = {
        id: id,
        send: function send() {
          return void 0;
        },
        subscribe: function subscribe(next, handleError, complete) {
          return source.subscribe(next, handleError, complete);
        },
        stop: function stop() {
          return subscription.unsubscribe();
        },
        getSnapshot: function getSnapshot() {
          return emitted;
        },
        toJSON: function toJSON() {
          return {
            id: id
          };
        }
      }, _a[symbolObservable$1] = function () {
        return this;
      }, _a);
      this.children.set(id, actor);
      return actor;
    };
    Interpreter.prototype.spawnActor = function (actor, name) {
      this.children.set(name, actor);
      return actor;
    };
    Interpreter.prototype.spawnActivity = function (activity) {
      var implementation = this.machine.options && this.machine.options.activities ? this.machine.options.activities[activity.type] : undefined;
      if (!implementation) {
        {
          warn$1(false, "No implementation found for activity '".concat(activity.type, "'"));
        } // tslint:disable-next-line:no-console

        return;
      } // Start implementation

      var dispose = implementation(this.state.context, activity);
      this.spawnEffect(activity.id, dispose);
    };
    Interpreter.prototype.spawnEffect = function (id, dispose) {
      var _a;
      this.children.set(id, (_a = {
        id: id,
        send: function send() {
          return void 0;
        },
        subscribe: function subscribe() {
          return {
            unsubscribe: function unsubscribe() {
              return void 0;
            }
          };
        },
        stop: dispose || undefined,
        getSnapshot: function getSnapshot() {
          return undefined;
        },
        toJSON: function toJSON() {
          return {
            id: id
          };
        }
      }, _a[symbolObservable$1] = function () {
        return this;
      }, _a));
    };
    Interpreter.prototype.attachDev = function () {
      var global = getGlobal$1();
      if (this.options.devTools && global) {
        if (global.__REDUX_DEVTOOLS_EXTENSION__) {
          var devToolsOptions = typeof this.options.devTools === 'object' ? this.options.devTools : undefined;
          this.devTools = global.__REDUX_DEVTOOLS_EXTENSION__.connect(_assign(_assign({
            name: this.id,
            autoPause: true,
            stateSanitizer: function stateSanitizer(state) {
              return {
                value: state.value,
                context: state.context,
                actions: state.actions
              };
            }
          }, devToolsOptions), {
            features: _assign({
              jump: false,
              skip: false
            }, devToolsOptions ? devToolsOptions.features : undefined)
          }), this.machine);
          this.devTools.init(this.state);
        } // add XState-specific dev tooling hook

        registerService$1(this);
      }
    };
    Interpreter.prototype.toJSON = function () {
      return {
        id: this.id
      };
    };
    Interpreter.prototype[symbolObservable$1] = function () {
      return this;
    };
    Interpreter.prototype.getSnapshot = function () {
      if (this.status === InterpreterStatus$1.NotStarted) {
        return this.initialState;
      }
      return this._state;
    };
    /**
     * The default interpreter options:
     *
     * - `clock` uses the global `setTimeout` and `clearTimeout` functions
     * - `logger` uses the global `console.log()` method
     */

    Interpreter.defaultOptions = {
      execute: true,
      deferEvents: true,
      clock: {
        setTimeout: function (_setTimeout) {
          function setTimeout(_x, _x2) {
            return _setTimeout.apply(this, arguments);
          }
          setTimeout.toString = function () {
            return _setTimeout.toString();
          };
          return setTimeout;
        }(function (fn, ms) {
          return setTimeout(fn, ms);
        }),
        clearTimeout: function (_clearTimeout) {
          function clearTimeout(_x3) {
            return _clearTimeout.apply(this, arguments);
          }
          clearTimeout.toString = function () {
            return _clearTimeout.toString();
          };
          return clearTimeout;
        }(function (id) {
          return clearTimeout(id);
        })
      },
      logger: /*#__PURE__*/console.log.bind(console),
      devTools: false
    };
    Interpreter.interpret = interpret$1;
    return Interpreter;
  }();
  /**
   * Creates a new Interpreter instance for the given machine with the provided options, if any.
   *
   * @param machine The machine to interpret
   * @param options Interpreter options
   */

  function interpret$1(machine, options) {
    var interpreter = new Interpreter$1(machine, options);
    return interpreter;
  }

  function toInvokeSource$2(src) {
    if (typeof src === 'string') {
      var simpleSrc = {
        type: src
      };
      simpleSrc.toString = function () {
        return src;
      }; // v4 compat - TODO: remove in v5

      return simpleSrc;
    }
    return src;
  }
  function toInvokeDefinition$1(invokeConfig) {
    return _assign(_assign({
      type: invoke$1
    }, invokeConfig), {
      toJSON: function toJSON() {
        invokeConfig.onDone;
        invokeConfig.onError;
        var invokeDef = __rest$1(invokeConfig, ["onDone", "onError"]);
        return _assign(_assign({}, invokeDef), {
          type: invoke$1,
          src: toInvokeSource$2(invokeConfig.src)
        });
      }
    });
  }

  var NULL_EVENT$1 = '';
  var STATE_IDENTIFIER$1 = '#';
  var WILDCARD$1 = '*';
  var EMPTY_OBJECT$1 = {};
  var isStateId$1 = function isStateId(str) {
    return str[0] === STATE_IDENTIFIER$1;
  };
  var createDefaultOptions$1 = function createDefaultOptions() {
    return {
      actions: {},
      guards: {},
      services: {},
      activities: {},
      delays: {}
    };
  };
  var validateArrayifiedTransitions$1 = function validateArrayifiedTransitions(stateNode, event, transitions) {
    var hasNonLastUnguardedTarget = transitions.slice(0, -1).some(function (transition) {
      return !('cond' in transition) && !('in' in transition) && (isString$1(transition.target) || isMachine$1(transition.target));
    });
    var eventText = event === NULL_EVENT$1 ? 'the transient event' : "event '".concat(event, "'");
    warn$1(!hasNonLastUnguardedTarget, "One or more transitions for ".concat(eventText, " on state '").concat(stateNode.id, "' are unreachable. ") + "Make sure that the default transition is the last one defined.");
  };
  var StateNode$1 = /*#__PURE__*/

  /** @class */
  function () {
    function StateNode(
    /**
     * The raw config used to create the machine.
     */
    config, options,
    /**
     * The initial extended state
     */
    _context,
    // TODO: this is unsafe, but we're removing it in v5 anyway
    _stateInfo) {
      var _this = this;
      if (_context === void 0) {
        _context = 'context' in config ? config.context : undefined;
      }
      var _a;
      this.config = config;
      this._context = _context;
      /**
       * The order this state node appears. Corresponds to the implicit SCXML document order.
       */

      this.order = -1;
      this.__xstatenode = true;
      this.__cache = {
        events: undefined,
        relativeValue: new Map(),
        initialStateValue: undefined,
        initialState: undefined,
        on: undefined,
        transitions: undefined,
        candidates: {},
        delayedTransitions: undefined
      };
      this.idMap = {};
      this.tags = [];
      this.options = Object.assign(createDefaultOptions$1(), options);
      this.parent = _stateInfo === null || _stateInfo === void 0 ? void 0 : _stateInfo.parent;
      this.key = this.config.key || (_stateInfo === null || _stateInfo === void 0 ? void 0 : _stateInfo.key) || this.config.id || '(machine)';
      this.machine = this.parent ? this.parent.machine : this;
      this.path = this.parent ? this.parent.path.concat(this.key) : [];
      this.delimiter = this.config.delimiter || (this.parent ? this.parent.delimiter : STATE_DELIMITER$1);
      this.id = this.config.id || __spreadArray$1([this.machine.key], __read$1(this.path), false).join(this.delimiter);
      this.version = this.parent ? this.parent.version : this.config.version;
      this.type = this.config.type || (this.config.parallel ? 'parallel' : this.config.states && Object.keys(this.config.states).length ? 'compound' : this.config.history ? 'history' : 'atomic');
      this.schema = this.parent ? this.machine.schema : (_a = this.config.schema) !== null && _a !== void 0 ? _a : {};
      this.description = this.config.description;
      {
        warn$1(!('parallel' in this.config), "The \"parallel\" property is deprecated and will be removed in version 4.1. ".concat(this.config.parallel ? "Replace with `type: 'parallel'`" : "Use `type: '".concat(this.type, "'`"), " in the config for state node '").concat(this.id, "' instead."));
      }
      this.initial = this.config.initial;
      this.states = this.config.states ? mapValues$1(this.config.states, function (stateConfig, key) {
        var _a;
        var stateNode = new StateNode(stateConfig, {}, undefined, {
          parent: _this,
          key: key
        });
        Object.assign(_this.idMap, _assign((_a = {}, _a[stateNode.id] = stateNode, _a), stateNode.idMap));
        return stateNode;
      }) : EMPTY_OBJECT$1; // Document order

      var order = 0;
      function dfs(stateNode) {
        var e_1, _a;
        stateNode.order = order++;
        try {
          for (var _b = __values$1(getAllChildren(stateNode)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var child = _c.value;
            dfs(child);
          }
        } catch (e_1_1) {
          e_1 = {
            error: e_1_1
          };
        } finally {
          try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
          } finally {
            if (e_1) throw e_1.error;
          }
        }
      }
      dfs(this); // History config

      this.history = this.config.history === true ? 'shallow' : this.config.history || false;
      this._transient = !!this.config.always || (!this.config.on ? false : Array.isArray(this.config.on) ? this.config.on.some(function (_a) {
        var event = _a.event;
        return event === NULL_EVENT$1;
      }) : NULL_EVENT$1 in this.config.on);
      this.strict = !!this.config.strict; // TODO: deprecate (entry)

      this.onEntry = toArray$1(this.config.entry || this.config.onEntry).map(function (action) {
        return toActionObject$1(action);
      }); // TODO: deprecate (exit)

      this.onExit = toArray$1(this.config.exit || this.config.onExit).map(function (action) {
        return toActionObject$1(action);
      });
      this.meta = this.config.meta;
      this.doneData = this.type === 'final' ? this.config.data : undefined;
      this.invoke = toArray$1(this.config.invoke).map(function (invokeConfig, i) {
        var _a, _b;
        if (isMachine$1(invokeConfig)) {
          var invokeId = createInvokeId$1(_this.id, i);
          _this.machine.options.services = _assign((_a = {}, _a[invokeId] = invokeConfig, _a), _this.machine.options.services);
          return toInvokeDefinition$1({
            src: invokeId,
            id: invokeId
          });
        } else if (isString$1(invokeConfig.src)) {
          var invokeId = invokeConfig.id || createInvokeId$1(_this.id, i);
          return toInvokeDefinition$1(_assign(_assign({}, invokeConfig), {
            id: invokeId,
            src: invokeConfig.src
          }));
        } else if (isMachine$1(invokeConfig.src) || isFunction$1(invokeConfig.src)) {
          var invokeId = invokeConfig.id || createInvokeId$1(_this.id, i);
          _this.machine.options.services = _assign((_b = {}, _b[invokeId] = invokeConfig.src, _b), _this.machine.options.services);
          return toInvokeDefinition$1(_assign(_assign({
            id: invokeId
          }, invokeConfig), {
            src: invokeId
          }));
        } else {
          var invokeSource = invokeConfig.src;
          return toInvokeDefinition$1(_assign(_assign({
            id: createInvokeId$1(_this.id, i)
          }, invokeConfig), {
            src: invokeSource
          }));
        }
      });
      this.activities = toArray$1(this.config.activities).concat(this.invoke).map(function (activity) {
        return toActivityDefinition$1(activity);
      });
      this.transition = this.transition.bind(this);
      this.tags = toArray$1(this.config.tags); // TODO: this is the real fix for initialization once
      // state node getters are deprecated
      // if (!this.parent) {
      //   this._init();
      // }
    }

    StateNode.prototype._init = function () {
      if (this.__cache.transitions) {
        return;
      }
      getAllStateNodes$1(this).forEach(function (stateNode) {
        return stateNode.on;
      });
    };
    /**
     * Clones this state machine with custom options and context.
     *
     * @param options Options (actions, guards, activities, services) to recursively merge with the existing options.
     * @param context Custom context (will override predefined context)
     */

    StateNode.prototype.withConfig = function (options, context) {
      var _a = this.options,
        actions = _a.actions,
        activities = _a.activities,
        guards = _a.guards,
        services = _a.services,
        delays = _a.delays;
      return new StateNode(this.config, {
        actions: _assign(_assign({}, actions), options.actions),
        activities: _assign(_assign({}, activities), options.activities),
        guards: _assign(_assign({}, guards), options.guards),
        services: _assign(_assign({}, services), options.services),
        delays: _assign(_assign({}, delays), options.delays)
      }, context !== null && context !== void 0 ? context : this.context);
    };
    /**
     * Clones this state machine with custom context.
     *
     * @param context Custom context (will override predefined context, not recursive)
     */

    StateNode.prototype.withContext = function (context) {
      return new StateNode(this.config, this.options, context);
    };
    Object.defineProperty(StateNode.prototype, "context", {
      get: function get() {
        return isFunction$1(this._context) ? this._context() : this._context;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StateNode.prototype, "definition", {
      /**
       * The well-structured state node definition.
       */
      get: function get() {
        return {
          id: this.id,
          key: this.key,
          version: this.version,
          context: this.context,
          type: this.type,
          initial: this.initial,
          history: this.history,
          states: mapValues$1(this.states, function (state) {
            return state.definition;
          }),
          on: this.on,
          transitions: this.transitions,
          entry: this.onEntry,
          exit: this.onExit,
          activities: this.activities || [],
          meta: this.meta,
          order: this.order || -1,
          data: this.doneData,
          invoke: this.invoke,
          description: this.description,
          tags: this.tags
        };
      },
      enumerable: false,
      configurable: true
    });
    StateNode.prototype.toJSON = function () {
      return this.definition;
    };
    Object.defineProperty(StateNode.prototype, "on", {
      /**
       * The mapping of events to transitions.
       */
      get: function get() {
        if (this.__cache.on) {
          return this.__cache.on;
        }
        var transitions = this.transitions;
        return this.__cache.on = transitions.reduce(function (map, transition) {
          map[transition.eventType] = map[transition.eventType] || [];
          map[transition.eventType].push(transition);
          return map;
        }, {});
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StateNode.prototype, "after", {
      get: function get() {
        return this.__cache.delayedTransitions || (this.__cache.delayedTransitions = this.getDelayedTransitions(), this.__cache.delayedTransitions);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StateNode.prototype, "transitions", {
      /**
       * All the transitions that can be taken from this state node.
       */
      get: function get() {
        return this.__cache.transitions || (this.__cache.transitions = this.formatTransitions(), this.__cache.transitions);
      },
      enumerable: false,
      configurable: true
    });
    StateNode.prototype.getCandidates = function (eventName) {
      if (this.__cache.candidates[eventName]) {
        return this.__cache.candidates[eventName];
      }
      var transient = eventName === NULL_EVENT$1;
      var candidates = this.transitions.filter(function (transition) {
        var sameEventType = transition.eventType === eventName; // null events should only match against eventless transitions

        return transient ? sameEventType : sameEventType || transition.eventType === WILDCARD$1;
      });
      this.__cache.candidates[eventName] = candidates;
      return candidates;
    };
    /**
     * All delayed transitions from the config.
     */

    StateNode.prototype.getDelayedTransitions = function () {
      var _this = this;
      var afterConfig = this.config.after;
      if (!afterConfig) {
        return [];
      }
      var mutateEntryExit = function mutateEntryExit(delay, i) {
        var delayRef = isFunction$1(delay) ? "".concat(_this.id, ":delay[").concat(i, "]") : delay;
        var eventType = after$1(delayRef, _this.id);
        _this.onEntry.push(send$2(eventType, {
          delay: delay
        }));
        _this.onExit.push(cancel$2(eventType));
        return eventType;
      };
      var delayedTransitions = isArray$1(afterConfig) ? afterConfig.map(function (transition, i) {
        var eventType = mutateEntryExit(transition.delay, i);
        return _assign(_assign({}, transition), {
          event: eventType
        });
      }) : flatten$1(Object.keys(afterConfig).map(function (delay, i) {
        var configTransition = afterConfig[delay];
        var resolvedTransition = isString$1(configTransition) ? {
          target: configTransition
        } : configTransition;
        var resolvedDelay = !isNaN(+delay) ? +delay : delay;
        var eventType = mutateEntryExit(resolvedDelay, i);
        return toArray$1(resolvedTransition).map(function (transition) {
          return _assign(_assign({}, transition), {
            event: eventType,
            delay: resolvedDelay
          });
        });
      }));
      return delayedTransitions.map(function (delayedTransition) {
        var delay = delayedTransition.delay;
        return _assign(_assign({}, _this.formatTransition(delayedTransition)), {
          delay: delay
        });
      });
    };
    /**
     * Returns the state nodes represented by the current state value.
     *
     * @param state The state value or State instance
     */

    StateNode.prototype.getStateNodes = function (state) {
      var _a;
      var _this = this;
      if (!state) {
        return [];
      }
      var stateValue = state instanceof State$1 ? state.value : toStateValue$1(state, this.delimiter);
      if (isString$1(stateValue)) {
        var initialStateValue = this.getStateNode(stateValue).initial;
        return initialStateValue !== undefined ? this.getStateNodes((_a = {}, _a[stateValue] = initialStateValue, _a)) : [this, this.states[stateValue]];
      }
      var subStateKeys = Object.keys(stateValue);
      var subStateNodes = [this];
      subStateNodes.push.apply(subStateNodes, __spreadArray$1([], __read$1(flatten$1(subStateKeys.map(function (subStateKey) {
        return _this.getStateNode(subStateKey).getStateNodes(stateValue[subStateKey]);
      }))), false));
      return subStateNodes;
    };
    /**
     * Returns `true` if this state node explicitly handles the given event.
     *
     * @param event The event in question
     */

    StateNode.prototype.handles = function (event) {
      var eventType = getEventType$1(event);
      return this.events.includes(eventType);
    };
    /**
     * Resolves the given `state` to a new `State` instance relative to this machine.
     *
     * This ensures that `.events` and `.nextEvents` represent the correct values.
     *
     * @param state The state to resolve
     */

    StateNode.prototype.resolveState = function (state) {
      var stateFromConfig = state instanceof State$1 ? state : State$1.create(state);
      var configuration = Array.from(getConfiguration$1([], this.getStateNodes(stateFromConfig.value)));
      return new State$1(_assign(_assign({}, stateFromConfig), {
        value: this.resolve(stateFromConfig.value),
        configuration: configuration,
        done: isInFinalState$1(configuration, this),
        tags: getTagsFromConfiguration$1(configuration),
        machine: this.machine
      }));
    };
    StateNode.prototype.transitionLeafNode = function (stateValue, state, _event) {
      var stateNode = this.getStateNode(stateValue);
      var next = stateNode.next(state, _event);
      if (!next || !next.transitions.length) {
        return this.next(state, _event);
      }
      return next;
    };
    StateNode.prototype.transitionCompoundNode = function (stateValue, state, _event) {
      var subStateKeys = Object.keys(stateValue);
      var stateNode = this.getStateNode(subStateKeys[0]);
      var next = stateNode._transition(stateValue[subStateKeys[0]], state, _event);
      if (!next || !next.transitions.length) {
        return this.next(state, _event);
      }
      return next;
    };
    StateNode.prototype.transitionParallelNode = function (stateValue, state, _event) {
      var e_2, _a;
      var transitionMap = {};
      try {
        for (var _b = __values$1(Object.keys(stateValue)), _c = _b.next(); !_c.done; _c = _b.next()) {
          var subStateKey = _c.value;
          var subStateValue = stateValue[subStateKey];
          if (!subStateValue) {
            continue;
          }
          var subStateNode = this.getStateNode(subStateKey);
          var next = subStateNode._transition(subStateValue, state, _event);
          if (next) {
            transitionMap[subStateKey] = next;
          }
        }
      } catch (e_2_1) {
        e_2 = {
          error: e_2_1
        };
      } finally {
        try {
          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        } finally {
          if (e_2) throw e_2.error;
        }
      }
      var stateTransitions = Object.keys(transitionMap).map(function (key) {
        return transitionMap[key];
      });
      var enabledTransitions = flatten$1(stateTransitions.map(function (st) {
        return st.transitions;
      }));
      var willTransition = stateTransitions.some(function (st) {
        return st.transitions.length > 0;
      });
      if (!willTransition) {
        return this.next(state, _event);
      }
      var entryNodes = flatten$1(stateTransitions.map(function (t) {
        return t.entrySet;
      }));
      var configuration = flatten$1(Object.keys(transitionMap).map(function (key) {
        return transitionMap[key].configuration;
      }));
      return {
        transitions: enabledTransitions,
        entrySet: entryNodes,
        exitSet: flatten$1(stateTransitions.map(function (t) {
          return t.exitSet;
        })),
        configuration: configuration,
        source: state,
        actions: flatten$1(Object.keys(transitionMap).map(function (key) {
          return transitionMap[key].actions;
        }))
      };
    };
    StateNode.prototype._transition = function (stateValue, state, _event) {
      // leaf node
      if (isString$1(stateValue)) {
        return this.transitionLeafNode(stateValue, state, _event);
      } // hierarchical node

      if (Object.keys(stateValue).length === 1) {
        return this.transitionCompoundNode(stateValue, state, _event);
      } // orthogonal node

      return this.transitionParallelNode(stateValue, state, _event);
    };
    StateNode.prototype.getTransitionData = function (state, event) {
      return this._transition(state.value, state, toSCXMLEvent$1(event));
    };
    StateNode.prototype.next = function (state, _event) {
      var e_3, _a;
      var _this = this;
      var eventName = _event.name;
      var actions = [];
      var nextStateNodes = [];
      var selectedTransition;
      try {
        for (var _b = __values$1(this.getCandidates(eventName)), _c = _b.next(); !_c.done; _c = _b.next()) {
          var candidate = _c.value;
          var cond = candidate.cond,
            stateIn = candidate.in;
          var resolvedContext = state.context;
          var isInState = stateIn ? isString$1(stateIn) && isStateId$1(stateIn) ?
          // Check if in state by ID
          state.matches(toStateValue$1(this.getStateNodeById(stateIn).path, this.delimiter)) :
          // Check if in state by relative grandparent
          matchesState$1(toStateValue$1(stateIn, this.delimiter), path$1(this.path.slice(0, -2))(state.value)) : true;
          var guardPassed = false;
          try {
            guardPassed = !cond || evaluateGuard$1(this.machine, cond, resolvedContext, _event, state);
          } catch (err) {
            throw new Error("Unable to evaluate guard '".concat(cond.name || cond.type, "' in transition for event '").concat(eventName, "' in state node '").concat(this.id, "':\n").concat(err.message));
          }
          if (guardPassed && isInState) {
            if (candidate.target !== undefined) {
              nextStateNodes = candidate.target;
            }
            actions.push.apply(actions, __spreadArray$1([], __read$1(candidate.actions), false));
            selectedTransition = candidate;
            break;
          }
        }
      } catch (e_3_1) {
        e_3 = {
          error: e_3_1
        };
      } finally {
        try {
          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        } finally {
          if (e_3) throw e_3.error;
        }
      }
      if (!selectedTransition) {
        return undefined;
      }
      if (!nextStateNodes.length) {
        return {
          transitions: [selectedTransition],
          entrySet: [],
          exitSet: [],
          configuration: state.value ? [this] : [],
          source: state,
          actions: actions
        };
      }
      var allNextStateNodes = flatten$1(nextStateNodes.map(function (stateNode) {
        return _this.getRelativeStateNodes(stateNode, state.historyValue);
      }));
      var isInternal = !!selectedTransition.internal;
      var reentryNodes = [];
      if (!isInternal) {
        nextStateNodes.forEach(function (targetNode) {
          reentryNodes.push.apply(reentryNodes, __spreadArray$1([], __read$1(_this.getExternalReentryNodes(targetNode)), false));
        });
      }
      return {
        transitions: [selectedTransition],
        entrySet: reentryNodes,
        exitSet: isInternal ? [] : [this],
        configuration: allNextStateNodes,
        source: state,
        actions: actions
      };
    };
    StateNode.prototype.getExternalReentryNodes = function (targetNode) {
      var nodes = [];
      var _a = __read$1(targetNode.order > this.order ? [targetNode, this] : [this, targetNode], 2),
        marker = _a[0],
        possibleAncestor = _a[1];
      while (marker && marker !== possibleAncestor) {
        nodes.push(marker);
        marker = marker.parent;
      }
      if (marker !== possibleAncestor) {
        // we never got to `possibleAncestor`, therefore the initial `marker` "escapes" it
        // it's in a different part of the tree so no states will be reentered for such an external transition
        return [];
      }
      nodes.push(possibleAncestor);
      return nodes;
    };
    StateNode.prototype.getActions = function (resolvedConfig, isDone, transition, currentContext, _event, prevState) {
      var e_4, _a, e_5, _b;
      var prevConfig = getConfiguration$1([], prevState ? this.getStateNodes(prevState.value) : [this]);
      try {
        for (var resolvedConfig_1 = __values$1(resolvedConfig), resolvedConfig_1_1 = resolvedConfig_1.next(); !resolvedConfig_1_1.done; resolvedConfig_1_1 = resolvedConfig_1.next()) {
          var sn = resolvedConfig_1_1.value;
          if (!has$1(prevConfig, sn) || has$1(transition.entrySet, sn.parent)) {
            transition.entrySet.push(sn);
          }
        }
      } catch (e_4_1) {
        e_4 = {
          error: e_4_1
        };
      } finally {
        try {
          if (resolvedConfig_1_1 && !resolvedConfig_1_1.done && (_a = resolvedConfig_1.return)) _a.call(resolvedConfig_1);
        } finally {
          if (e_4) throw e_4.error;
        }
      }
      try {
        for (var prevConfig_1 = __values$1(prevConfig), prevConfig_1_1 = prevConfig_1.next(); !prevConfig_1_1.done; prevConfig_1_1 = prevConfig_1.next()) {
          var sn = prevConfig_1_1.value;
          if (!has$1(resolvedConfig, sn) || has$1(transition.exitSet, sn.parent)) {
            transition.exitSet.push(sn);
          }
        }
      } catch (e_5_1) {
        e_5 = {
          error: e_5_1
        };
      } finally {
        try {
          if (prevConfig_1_1 && !prevConfig_1_1.done && (_b = prevConfig_1.return)) _b.call(prevConfig_1);
        } finally {
          if (e_5) throw e_5.error;
        }
      }
      var doneEvents = flatten$1(transition.entrySet.map(function (sn) {
        var events = [];
        if (sn.type !== 'final') {
          return events;
        }
        var parent = sn.parent;
        if (!parent.parent) {
          return events;
        }
        events.push(done$1(sn.id, sn.doneData),
        // TODO: deprecate - final states should not emit done events for their own state.
        done$1(parent.id, sn.doneData ? mapContext$1(sn.doneData, currentContext, _event) : undefined));
        var grandparent = parent.parent;
        if (grandparent.type === 'parallel') {
          if (getChildren$1(grandparent).every(function (parentNode) {
            return isInFinalState$1(transition.configuration, parentNode);
          })) {
            events.push(done$1(grandparent.id));
          }
        }
        return events;
      }));
      transition.exitSet.sort(function (a, b) {
        return b.order - a.order;
      });
      transition.entrySet.sort(function (a, b) {
        return a.order - b.order;
      });
      var entryStates = new Set(transition.entrySet);
      var exitStates = new Set(transition.exitSet);
      var _c = __read$1([flatten$1(Array.from(entryStates).map(function (stateNode) {
          return __spreadArray$1(__spreadArray$1([], __read$1(stateNode.activities.map(function (activity) {
            return start$2(activity);
          })), false), __read$1(stateNode.onEntry), false);
        })).concat(doneEvents.map(raise$2)), flatten$1(Array.from(exitStates).map(function (stateNode) {
          return __spreadArray$1(__spreadArray$1([], __read$1(stateNode.onExit), false), __read$1(stateNode.activities.map(function (activity) {
            return stop$2(activity);
          })), false);
        }))], 2),
        entryActions = _c[0],
        exitActions = _c[1];
      var actions = toActionObjects$1(exitActions.concat(transition.actions).concat(entryActions), this.machine.options.actions);
      if (isDone) {
        var stopActions = toActionObjects$1(flatten$1(__spreadArray$1([], __read$1(resolvedConfig), false).sort(function (a, b) {
          return b.order - a.order;
        }).map(function (stateNode) {
          return stateNode.onExit;
        })), this.machine.options.actions).filter(function (action) {
          return action.type !== raise$1$1 && (action.type !== send$1$1 || !!action.to && action.to !== SpecialTargets$1.Internal);
        });
        return actions.concat(stopActions);
      }
      return actions;
    };
    /**
     * Determines the next state given the current `state` and sent `event`.
     *
     * @param state The current State instance or state value
     * @param event The event that was sent at the current state
     * @param context The current context (extended state) of the current state
     */

    StateNode.prototype.transition = function (state, event, context, exec) {
      if (state === void 0) {
        state = this.initialState;
      }
      var _event = toSCXMLEvent$1(event);
      var currentState;
      if (state instanceof State$1) {
        currentState = context === undefined ? state : this.resolveState(State$1.from(state, context));
      } else {
        var resolvedStateValue = isString$1(state) ? this.resolve(pathToStateValue$1(this.getResolvedPath(state))) : this.resolve(state);
        var resolvedContext = context !== null && context !== void 0 ? context : this.machine.context;
        currentState = this.resolveState(State$1.from(resolvedStateValue, resolvedContext));
      }
      if (_event.name === WILDCARD$1) {
        throw new Error("An event cannot have the wildcard type ('".concat(WILDCARD$1, "')"));
      }
      if (this.strict) {
        if (!this.events.includes(_event.name) && !isBuiltInEvent$1(_event.name)) {
          throw new Error("Machine '".concat(this.id, "' does not accept event '").concat(_event.name, "'"));
        }
      }
      var stateTransition = this._transition(currentState.value, currentState, _event) || {
        transitions: [],
        configuration: [],
        entrySet: [],
        exitSet: [],
        source: currentState,
        actions: []
      };
      var prevConfig = getConfiguration$1([], this.getStateNodes(currentState.value));
      var resolvedConfig = stateTransition.configuration.length ? getConfiguration$1(prevConfig, stateTransition.configuration) : prevConfig;
      stateTransition.configuration = __spreadArray$1([], __read$1(resolvedConfig), false);
      return this.resolveTransition(stateTransition, currentState, currentState.context, exec, _event);
    };
    StateNode.prototype.resolveRaisedTransition = function (state, _event, originalEvent, predictableExec) {
      var _a;
      var currentActions = state.actions;
      state = this.transition(state, _event, undefined, predictableExec); // Save original event to state
      // TODO: this should be the raised event! Delete in V5 (breaking)

      state._event = originalEvent;
      state.event = originalEvent.data;
      (_a = state.actions).unshift.apply(_a, __spreadArray$1([], __read$1(currentActions), false));
      return state;
    };
    StateNode.prototype.resolveTransition = function (stateTransition, currentState, context, predictableExec, _event) {
      var e_6, _a;
      var _this = this;
      if (_event === void 0) {
        _event = initEvent$1;
      }
      var configuration = stateTransition.configuration; // Transition will "apply" if:
      // - this is the initial state (there is no current state)
      // - OR there are transitions

      var willTransition = !currentState || stateTransition.transitions.length > 0;
      var resolvedConfiguration = willTransition ? stateTransition.configuration : currentState ? currentState.configuration : [];
      var isDone = isInFinalState$1(resolvedConfiguration, this);
      var resolvedStateValue = willTransition ? getValue$1(this.machine, configuration) : undefined;
      var historyValue = currentState ? currentState.historyValue ? currentState.historyValue : stateTransition.source ? this.machine.historyValue(currentState.value) : undefined : undefined;
      var actions = this.getActions(new Set(resolvedConfiguration), isDone, stateTransition, context, _event, currentState);
      var activities = currentState ? _assign({}, currentState.activities) : {};
      try {
        for (var actions_1 = __values$1(actions), actions_1_1 = actions_1.next(); !actions_1_1.done; actions_1_1 = actions_1.next()) {
          var action = actions_1_1.value;
          if (action.type === start$1$1) {
            activities[action.activity.id || action.activity.type] = action;
          } else if (action.type === stop$1$1) {
            activities[action.activity.id || action.activity.type] = false;
          }
        }
      } catch (e_6_1) {
        e_6 = {
          error: e_6_1
        };
      } finally {
        try {
          if (actions_1_1 && !actions_1_1.done && (_a = actions_1.return)) _a.call(actions_1);
        } finally {
          if (e_6) throw e_6.error;
        }
      }
      var _b = __read$1(resolveActions$1(this, currentState, context, _event, actions, predictableExec, this.machine.config.predictableActionArguments || this.machine.config.preserveActionOrder), 2),
        resolvedActions = _b[0],
        updatedContext = _b[1];
      var _c = __read$1(partition$1(resolvedActions, function (action) {
          return action.type === raise$1$1 || action.type === send$1$1 && action.to === SpecialTargets$1.Internal;
        }), 2),
        raisedEvents = _c[0],
        nonRaisedActions = _c[1];
      var invokeActions = resolvedActions.filter(function (action) {
        var _a;
        return action.type === start$1$1 && ((_a = action.activity) === null || _a === void 0 ? void 0 : _a.type) === invoke$1;
      });
      var children = invokeActions.reduce(function (acc, action) {
        acc[action.activity.id] = createInvocableActor$1(action.activity, _this.machine, updatedContext, _event);
        return acc;
      }, currentState ? _assign({}, currentState.children) : {});
      var nextState = new State$1({
        value: resolvedStateValue || currentState.value,
        context: updatedContext,
        _event: _event,
        // Persist _sessionid between states
        _sessionid: currentState ? currentState._sessionid : null,
        historyValue: resolvedStateValue ? historyValue ? updateHistoryValue$1(historyValue, resolvedStateValue) : undefined : currentState ? currentState.historyValue : undefined,
        history: !resolvedStateValue || stateTransition.source ? currentState : undefined,
        actions: resolvedStateValue ? nonRaisedActions : [],
        activities: resolvedStateValue ? activities : currentState ? currentState.activities : {},
        events: [],
        configuration: resolvedConfiguration,
        transitions: stateTransition.transitions,
        children: children,
        done: isDone,
        tags: getTagsFromConfiguration$1(resolvedConfiguration),
        machine: this
      });
      var didUpdateContext = context !== updatedContext;
      nextState.changed = _event.name === update$1 || didUpdateContext; // Dispose of penultimate histories to prevent memory leaks

      var history = nextState.history;
      if (history) {
        delete history.history;
      } // There are transient transitions if the machine is not in a final state
      // and if some of the state nodes have transient ("always") transitions.

      var hasAlwaysTransitions = !isDone && (this._transient || configuration.some(function (stateNode) {
        return stateNode._transient;
      })); // If there are no enabled transitions, check if there are transient transitions.
      // If there are transient transitions, continue checking for more transitions
      // because an transient transition should be triggered even if there are no
      // enabled transitions.
      //
      // If we're already working on an transient transition then stop to prevent an infinite loop.
      //
      // Otherwise, if there are no enabled nor transient transitions, we are done.

      if (!willTransition && (!hasAlwaysTransitions || _event.name === NULL_EVENT$1)) {
        return nextState;
      }
      var maybeNextState = nextState;
      if (!isDone) {
        if (hasAlwaysTransitions) {
          maybeNextState = this.resolveRaisedTransition(maybeNextState, {
            type: nullEvent$1
          }, _event, predictableExec);
        }
        while (raisedEvents.length) {
          var raisedEvent = raisedEvents.shift();
          maybeNextState = this.resolveRaisedTransition(maybeNextState, raisedEvent._event, _event, predictableExec);
        }
      } // Detect if state changed

      var changed = maybeNextState.changed || (history ? !!maybeNextState.actions.length || didUpdateContext || typeof history.value !== typeof maybeNextState.value || !stateValuesEqual$1(maybeNextState.value, history.value) : undefined);
      maybeNextState.changed = changed; // Preserve original history after raised events

      maybeNextState.history = history;
      return maybeNextState;
    };
    /**
     * Returns the child state node from its relative `stateKey`, or throws.
     */

    StateNode.prototype.getStateNode = function (stateKey) {
      if (isStateId$1(stateKey)) {
        return this.machine.getStateNodeById(stateKey);
      }
      if (!this.states) {
        throw new Error("Unable to retrieve child state '".concat(stateKey, "' from '").concat(this.id, "'; no child states exist."));
      }
      var result = this.states[stateKey];
      if (!result) {
        throw new Error("Child state '".concat(stateKey, "' does not exist on '").concat(this.id, "'"));
      }
      return result;
    };
    /**
     * Returns the state node with the given `stateId`, or throws.
     *
     * @param stateId The state ID. The prefix "#" is removed.
     */

    StateNode.prototype.getStateNodeById = function (stateId) {
      var resolvedStateId = isStateId$1(stateId) ? stateId.slice(STATE_IDENTIFIER$1.length) : stateId;
      if (resolvedStateId === this.id) {
        return this;
      }
      var stateNode = this.machine.idMap[resolvedStateId];
      if (!stateNode) {
        throw new Error("Child state node '#".concat(resolvedStateId, "' does not exist on machine '").concat(this.id, "'"));
      }
      return stateNode;
    };
    /**
     * Returns the relative state node from the given `statePath`, or throws.
     *
     * @param statePath The string or string array relative path to the state node.
     */

    StateNode.prototype.getStateNodeByPath = function (statePath) {
      if (typeof statePath === 'string' && isStateId$1(statePath)) {
        try {
          return this.getStateNodeById(statePath.slice(1));
        } catch (e) {// try individual paths
          // throw e;
        }
      }
      var arrayStatePath = toStatePath$1(statePath, this.delimiter).slice();
      var currentStateNode = this;
      while (arrayStatePath.length) {
        var key = arrayStatePath.shift();
        if (!key.length) {
          break;
        }
        currentStateNode = currentStateNode.getStateNode(key);
      }
      return currentStateNode;
    };
    /**
     * Resolves a partial state value with its full representation in this machine.
     *
     * @param stateValue The partial state value to resolve.
     */

    StateNode.prototype.resolve = function (stateValue) {
      var _a;
      var _this = this;
      if (!stateValue) {
        return this.initialStateValue || EMPTY_OBJECT$1; // TODO: type-specific properties
      }

      switch (this.type) {
        case 'parallel':
          return mapValues$1(this.initialStateValue, function (subStateValue, subStateKey) {
            return subStateValue ? _this.getStateNode(subStateKey).resolve(stateValue[subStateKey] || subStateValue) : EMPTY_OBJECT$1;
          });
        case 'compound':
          if (isString$1(stateValue)) {
            var subStateNode = this.getStateNode(stateValue);
            if (subStateNode.type === 'parallel' || subStateNode.type === 'compound') {
              return _a = {}, _a[stateValue] = subStateNode.initialStateValue, _a;
            }
            return stateValue;
          }
          if (!Object.keys(stateValue).length) {
            return this.initialStateValue || {};
          }
          return mapValues$1(stateValue, function (subStateValue, subStateKey) {
            return subStateValue ? _this.getStateNode(subStateKey).resolve(subStateValue) : EMPTY_OBJECT$1;
          });
        default:
          return stateValue || EMPTY_OBJECT$1;
      }
    };
    StateNode.prototype.getResolvedPath = function (stateIdentifier) {
      if (isStateId$1(stateIdentifier)) {
        var stateNode = this.machine.idMap[stateIdentifier.slice(STATE_IDENTIFIER$1.length)];
        if (!stateNode) {
          throw new Error("Unable to find state node '".concat(stateIdentifier, "'"));
        }
        return stateNode.path;
      }
      return toStatePath$1(stateIdentifier, this.delimiter);
    };
    Object.defineProperty(StateNode.prototype, "initialStateValue", {
      get: function get() {
        var _a;
        if (this.__cache.initialStateValue) {
          return this.__cache.initialStateValue;
        }
        var initialStateValue;
        if (this.type === 'parallel') {
          initialStateValue = mapFilterValues$1(this.states, function (state) {
            return state.initialStateValue || EMPTY_OBJECT$1;
          }, function (stateNode) {
            return !(stateNode.type === 'history');
          });
        } else if (this.initial !== undefined) {
          if (!this.states[this.initial]) {
            throw new Error("Initial state '".concat(this.initial, "' not found on '").concat(this.key, "'"));
          }
          initialStateValue = isLeafNode$1(this.states[this.initial]) ? this.initial : (_a = {}, _a[this.initial] = this.states[this.initial].initialStateValue, _a);
        } else {
          // The finite state value of a machine without child states is just an empty object
          initialStateValue = {};
        }
        this.__cache.initialStateValue = initialStateValue;
        return this.__cache.initialStateValue;
      },
      enumerable: false,
      configurable: true
    });
    StateNode.prototype.getInitialState = function (stateValue, context) {
      this._init(); // TODO: this should be in the constructor (see note in constructor)

      var configuration = this.getStateNodes(stateValue);
      return this.resolveTransition({
        configuration: configuration,
        entrySet: __spreadArray$1([], __read$1(configuration), false),
        exitSet: [],
        transitions: [],
        source: undefined,
        actions: []
      }, undefined, context !== null && context !== void 0 ? context : this.machine.context, undefined);
    };
    Object.defineProperty(StateNode.prototype, "initialState", {
      /**
       * The initial State instance, which includes all actions to be executed from
       * entering the initial state.
       */
      get: function get() {
        var initialStateValue = this.initialStateValue;
        if (!initialStateValue) {
          throw new Error("Cannot retrieve initial state from simple state '".concat(this.id, "'."));
        }
        return this.getInitialState(initialStateValue);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StateNode.prototype, "target", {
      /**
       * The target state value of the history state node, if it exists. This represents the
       * default state value to transition to if no history value exists yet.
       */
      get: function get() {
        var target;
        if (this.type === 'history') {
          var historyConfig = this.config;
          if (isString$1(historyConfig.target)) {
            target = isStateId$1(historyConfig.target) ? pathToStateValue$1(this.machine.getStateNodeById(historyConfig.target).path.slice(this.path.length - 1)) : historyConfig.target;
          } else {
            target = historyConfig.target;
          }
        }
        return target;
      },
      enumerable: false,
      configurable: true
    });
    /**
     * Returns the leaf nodes from a state path relative to this state node.
     *
     * @param relativeStateId The relative state path to retrieve the state nodes
     * @param history The previous state to retrieve history
     * @param resolve Whether state nodes should resolve to initial child state nodes
     */

    StateNode.prototype.getRelativeStateNodes = function (relativeStateId, historyValue, resolve) {
      if (resolve === void 0) {
        resolve = true;
      }
      return resolve ? relativeStateId.type === 'history' ? relativeStateId.resolveHistory(historyValue) : relativeStateId.initialStateNodes : [relativeStateId];
    };
    Object.defineProperty(StateNode.prototype, "initialStateNodes", {
      get: function get() {
        var _this = this;
        if (isLeafNode$1(this)) {
          return [this];
        } // Case when state node is compound but no initial state is defined

        if (this.type === 'compound' && !this.initial) {
          {
            warn$1(false, "Compound state node '".concat(this.id, "' has no initial state."));
          }
          return [this];
        }
        var initialStateNodePaths = toStatePaths$1(this.initialStateValue);
        return flatten$1(initialStateNodePaths.map(function (initialPath) {
          return _this.getFromRelativePath(initialPath);
        }));
      },
      enumerable: false,
      configurable: true
    });
    /**
     * Retrieves state nodes from a relative path to this state node.
     *
     * @param relativePath The relative path from this state node
     * @param historyValue
     */

    StateNode.prototype.getFromRelativePath = function (relativePath) {
      if (!relativePath.length) {
        return [this];
      }
      var _a = __read$1(relativePath),
        stateKey = _a[0],
        childStatePath = _a.slice(1);
      if (!this.states) {
        throw new Error("Cannot retrieve subPath '".concat(stateKey, "' from node with no states"));
      }
      var childStateNode = this.getStateNode(stateKey);
      if (childStateNode.type === 'history') {
        return childStateNode.resolveHistory();
      }
      if (!this.states[stateKey]) {
        throw new Error("Child state '".concat(stateKey, "' does not exist on '").concat(this.id, "'"));
      }
      return this.states[stateKey].getFromRelativePath(childStatePath);
    };
    StateNode.prototype.historyValue = function (relativeStateValue) {
      if (!Object.keys(this.states).length) {
        return undefined;
      }
      return {
        current: relativeStateValue || this.initialStateValue,
        states: mapFilterValues$1(this.states, function (stateNode, key) {
          if (!relativeStateValue) {
            return stateNode.historyValue();
          }
          var subStateValue = isString$1(relativeStateValue) ? undefined : relativeStateValue[key];
          return stateNode.historyValue(subStateValue || stateNode.initialStateValue);
        }, function (stateNode) {
          return !stateNode.history;
        })
      };
    };
    /**
     * Resolves to the historical value(s) of the parent state node,
     * represented by state nodes.
     *
     * @param historyValue
     */

    StateNode.prototype.resolveHistory = function (historyValue) {
      var _this = this;
      if (this.type !== 'history') {
        return [this];
      }
      var parent = this.parent;
      if (!historyValue) {
        var historyTarget = this.target;
        return historyTarget ? flatten$1(toStatePaths$1(historyTarget).map(function (relativeChildPath) {
          return parent.getFromRelativePath(relativeChildPath);
        })) : parent.initialStateNodes;
      }
      var subHistoryValue = nestedPath$1(parent.path, 'states')(historyValue).current;
      if (isString$1(subHistoryValue)) {
        return [parent.getStateNode(subHistoryValue)];
      }
      return flatten$1(toStatePaths$1(subHistoryValue).map(function (subStatePath) {
        return _this.history === 'deep' ? parent.getFromRelativePath(subStatePath) : [parent.states[subStatePath[0]]];
      }));
    };
    Object.defineProperty(StateNode.prototype, "stateIds", {
      /**
       * All the state node IDs of this state node and its descendant state nodes.
       */
      get: function get() {
        var _this = this;
        var childStateIds = flatten$1(Object.keys(this.states).map(function (stateKey) {
          return _this.states[stateKey].stateIds;
        }));
        return [this.id].concat(childStateIds);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StateNode.prototype, "events", {
      /**
       * All the event types accepted by this state node and its descendants.
       */
      get: function get() {
        var e_7, _a, e_8, _b;
        if (this.__cache.events) {
          return this.__cache.events;
        }
        var states = this.states;
        var events = new Set(this.ownEvents);
        if (states) {
          try {
            for (var _c = __values$1(Object.keys(states)), _d = _c.next(); !_d.done; _d = _c.next()) {
              var stateId = _d.value;
              var state = states[stateId];
              if (state.states) {
                try {
                  for (var _e = (e_8 = void 0, __values$1(state.events)), _f = _e.next(); !_f.done; _f = _e.next()) {
                    var event_1 = _f.value;
                    events.add("".concat(event_1));
                  }
                } catch (e_8_1) {
                  e_8 = {
                    error: e_8_1
                  };
                } finally {
                  try {
                    if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                  } finally {
                    if (e_8) throw e_8.error;
                  }
                }
              }
            }
          } catch (e_7_1) {
            e_7 = {
              error: e_7_1
            };
          } finally {
            try {
              if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            } finally {
              if (e_7) throw e_7.error;
            }
          }
        }
        return this.__cache.events = Array.from(events);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StateNode.prototype, "ownEvents", {
      /**
       * All the events that have transitions directly from this state node.
       *
       * Excludes any inert events.
       */
      get: function get() {
        var events = new Set(this.transitions.filter(function (transition) {
          return !(!transition.target && !transition.actions.length && transition.internal);
        }).map(function (transition) {
          return transition.eventType;
        }));
        return Array.from(events);
      },
      enumerable: false,
      configurable: true
    });
    StateNode.prototype.resolveTarget = function (_target) {
      var _this = this;
      if (_target === undefined) {
        // an undefined target signals that the state node should not transition from that state when receiving that event
        return undefined;
      }
      return _target.map(function (target) {
        if (!isString$1(target)) {
          return target;
        }
        var isInternalTarget = target[0] === _this.delimiter; // If internal target is defined on machine,
        // do not include machine key on target

        if (isInternalTarget && !_this.parent) {
          return _this.getStateNodeByPath(target.slice(1));
        }
        var resolvedTarget = isInternalTarget ? _this.key + target : target;
        if (_this.parent) {
          try {
            var targetStateNode = _this.parent.getStateNodeByPath(resolvedTarget);
            return targetStateNode;
          } catch (err) {
            throw new Error("Invalid transition definition for state node '".concat(_this.id, "':\n").concat(err.message));
          }
        } else {
          return _this.getStateNodeByPath(resolvedTarget);
        }
      });
    };
    StateNode.prototype.formatTransition = function (transitionConfig) {
      var _this = this;
      var normalizedTarget = normalizeTarget$1(transitionConfig.target);
      var internal = 'internal' in transitionConfig ? transitionConfig.internal : normalizedTarget ? normalizedTarget.some(function (_target) {
        return isString$1(_target) && _target[0] === _this.delimiter;
      }) : true;
      var guards = this.machine.options.guards;
      var target = this.resolveTarget(normalizedTarget);
      var transition = _assign(_assign({}, transitionConfig), {
        actions: toActionObjects$1(toArray$1(transitionConfig.actions)),
        cond: toGuard$1(transitionConfig.cond, guards),
        target: target,
        source: this,
        internal: internal,
        eventType: transitionConfig.event,
        toJSON: function toJSON() {
          return _assign(_assign({}, transition), {
            target: transition.target ? transition.target.map(function (t) {
              return "#".concat(t.id);
            }) : undefined,
            source: "#".concat(_this.id)
          });
        }
      });
      return transition;
    };
    StateNode.prototype.formatTransitions = function () {
      var e_9, _a;
      var _this = this;
      var onConfig;
      if (!this.config.on) {
        onConfig = [];
      } else if (Array.isArray(this.config.on)) {
        onConfig = this.config.on;
      } else {
        var _b = this.config.on,
          _c = WILDCARD$1,
          _d = _b[_c],
          wildcardConfigs = _d === void 0 ? [] : _d,
          strictTransitionConfigs_1 = __rest$1(_b, [typeof _c === "symbol" ? _c : _c + ""]);
        onConfig = flatten$1(Object.keys(strictTransitionConfigs_1).map(function (key) {
          if (key === NULL_EVENT$1) {
            warn$1(false, "Empty string transition configs (e.g., `{ on: { '': ... }}`) for transient transitions are deprecated. Specify the transition in the `{ always: ... }` property instead. " + "Please check the `on` configuration for \"#".concat(_this.id, "\"."));
          }
          var transitionConfigArray = toTransitionConfigArray$1(key, strictTransitionConfigs_1[key]);
          {
            validateArrayifiedTransitions$1(_this, key, transitionConfigArray);
          }
          return transitionConfigArray;
        }).concat(toTransitionConfigArray$1(WILDCARD$1, wildcardConfigs)));
      }
      var eventlessConfig = this.config.always ? toTransitionConfigArray$1('', this.config.always) : [];
      var doneConfig = this.config.onDone ? toTransitionConfigArray$1(String(done$1(this.id)), this.config.onDone) : [];
      {
        warn$1(!(this.config.onDone && !this.parent), "Root nodes cannot have an \".onDone\" transition. Please check the config of \"".concat(this.id, "\"."));
      }
      var invokeConfig = flatten$1(this.invoke.map(function (invokeDef) {
        var settleTransitions = [];
        if (invokeDef.onDone) {
          settleTransitions.push.apply(settleTransitions, __spreadArray$1([], __read$1(toTransitionConfigArray$1(String(doneInvoke$1(invokeDef.id)), invokeDef.onDone)), false));
        }
        if (invokeDef.onError) {
          settleTransitions.push.apply(settleTransitions, __spreadArray$1([], __read$1(toTransitionConfigArray$1(String(error$2(invokeDef.id)), invokeDef.onError)), false));
        }
        return settleTransitions;
      }));
      var delayedTransitions = this.after;
      var formattedTransitions = flatten$1(__spreadArray$1(__spreadArray$1(__spreadArray$1(__spreadArray$1([], __read$1(doneConfig), false), __read$1(invokeConfig), false), __read$1(onConfig), false), __read$1(eventlessConfig), false).map(function (transitionConfig) {
        return toArray$1(transitionConfig).map(function (transition) {
          return _this.formatTransition(transition);
        });
      }));
      try {
        for (var delayedTransitions_1 = __values$1(delayedTransitions), delayedTransitions_1_1 = delayedTransitions_1.next(); !delayedTransitions_1_1.done; delayedTransitions_1_1 = delayedTransitions_1.next()) {
          var delayedTransition = delayedTransitions_1_1.value;
          formattedTransitions.push(delayedTransition);
        }
      } catch (e_9_1) {
        e_9 = {
          error: e_9_1
        };
      } finally {
        try {
          if (delayedTransitions_1_1 && !delayedTransitions_1_1.done && (_a = delayedTransitions_1.return)) _a.call(delayedTransitions_1);
        } finally {
          if (e_9) throw e_9.error;
        }
      }
      return formattedTransitions;
    };
    return StateNode;
  }();

  var warned = false;
  function createMachine$1(config, options) {
    if (!config.predictableActionArguments && !warned) {
      warned = true;
      console.warn('It is highly recommended to set `predictableActionArguments` to `true` when using `createMachine`. https://xstate.js.org/docs/guides/actions.html');
    }
    return new StateNode$1(config, options);
  }

  var assign$3 = assign$1;

  function ownKeys$2(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var WEB_TIEBREAKER_VALUE = 0xfffffffe;
  var MAX_RETRIES = 2;
  class Roap extends EventEmitter$3 {
    constructor(createLocalOfferCallback, handleRemoteOfferCallback, handleRemoteAnswerCallback, debugId, initialSeq) {
      super();
      _defineProperty(this, "id", void 0);
      _defineProperty(this, "createLocalOfferCallback", void 0);
      _defineProperty(this, "handleRemoteOfferCallback", void 0);
      _defineProperty(this, "handleRemoteAnswerCallback", void 0);
      _defineProperty(this, "stateMachine", void 0);
      _defineProperty(this, "initiateOfferPromises", void 0);
      this.id = debugId || 'ROAP';
      this.createLocalOfferCallback = createLocalOfferCallback;
      this.handleRemoteOfferCallback = handleRemoteOfferCallback;
      this.handleRemoteAnswerCallback = handleRemoteAnswerCallback;
      this.initiateOfferPromises = [];
      var fsm = createMachine$1({
        tsTypes: {},
        schema: {
          context: {},
          events: {},
          services: {}
        },
        preserveActionOrder: true,
        id: 'roap',
        initial: 'idle',
        context: {
          seq: initialSeq || 0,
          pendingLocalOffer: false,
          isHandlingOfferRequest: false,
          retryCounter: 0
        },
        states: {
          browserError: {
            onEntry: (context, event) => {
              this.error('FSM', "browserError state onEntry: context=".concat(JSON.stringify(context), ":"), event.data);
              this.emit(Event$1.ROAP_FAILURE, event.data);
            }
          },
          remoteError: {
            onEntry: (_, event) => {
              this.log('FSM', 'remoteError state onEntry called, emitting Event.ROAP_FAILURE');
              this.emit(Event$1.ROAP_FAILURE, event.data);
            }
          },
          idle: {
            always: {
              cond: 'isPendingLocalOffer',
              actions: ['increaseSeq', 'sendStartedEvent'],
              target: 'creatingLocalOffer'
            },
            on: {
              INITIATE_OFFER: {
                actions: ['increaseSeq', 'sendStartedEvent'],
                target: 'creatingLocalOffer'
              },
              REMOTE_OFFER_ARRIVED: [{
                cond: 'isSameSeq',
                actions: 'sendOutOfOrderError'
              }, {
                actions: ['updateSeq', 'sendStartedEvent'],
                target: 'settingRemoteOffer'
              }],
              REMOTE_OFFER_REQUEST_ARRIVED: [{
                cond: 'isSameSeq',
                actions: 'sendOutOfOrderError'
              }, {
                actions: ['updateSeq', 'setOfferRequestFlag', 'sendStartedEvent'],
                target: 'creatingLocalOffer'
              }],
              REMOTE_ANSWER_ARRIVED: [{
                cond: 'isSameSeq',
                actions: 'ignoreDuplicate'
              }, {
                actions: 'sendInvalidStateError'
              }],
              REMOTE_OK_ARRIVED: {
                actions: 'sendInvalidStateError'
              }
            }
          },
          creatingLocalOffer: {
            invoke: {
              src: 'createLocalOffer',
              onDone: [{
                cond: 'isPendingLocalOffer',
                target: 'creatingLocalOffer'
              }, {
                cond: 'isHandlingOfferRequest',
                actions: ['sendRoapOfferResponseMessage', 'resolvePendingInitiateOfferPromises'],
                target: 'waitingForAnswer'
              }, {
                actions: ['sendRoapOfferMessage', 'resolvePendingInitiateOfferPromises'],
                target: 'waitingForAnswer'
              }],
              onError: {
                actions: 'rejectPendingInitiateOfferPromises',
                target: 'browserError'
              }
            },
            onEntry: ['resetPendingLocalOffer'],
            on: {
              INITIATE_OFFER: {
                actions: 'enqueueNewOfferCreation'
              },
              REMOTE_OFFER_ARRIVED: [{
                actions: 'handleGlare'
              }],
              REMOTE_OFFER_REQUEST_ARRIVED: [{
                cond: 'isHandlingOfferRequest',
                actions: 'ignoreDuplicate'
              }, {
                actions: 'handleGlare'
              }],
              REMOTE_ANSWER_ARRIVED: {
                actions: 'sendInvalidStateError'
              },
              REMOTE_OK_ARRIVED: {
                actions: 'sendInvalidStateError'
              }
            }
          },
          waitingForAnswer: {
            on: {
              REMOTE_ANSWER_ARRIVED: [{
                actions: ['resetRetryCounter', 'updateSeq'],
                target: 'settingRemoteAnswer'
              }],
              INITIATE_OFFER: {
                actions: 'enqueueNewOfferCreation'
              },
              REMOTE_OFFER_ARRIVED: {
                actions: 'handleGlare'
              },
              REMOTE_OFFER_REQUEST_ARRIVED: [{
                cond: 'isHandlingOfferRequest',
                actions: 'ignoreDuplicate'
              }, {
                actions: 'handleGlare'
              }],
              REMOTE_OK_ARRIVED: {
                actions: 'sendInvalidStateError'
              },
              ERROR_ARRIVED: [{
                cond: 'shouldErrorTriggerOfferRetry',
                actions: ['increaseSeq', 'increaseRetryCounter'],
                target: 'creatingLocalOffer'
              }, {
                cond: 'isSameSeq',
                target: 'remoteError'
              }]
            }
          },
          settingRemoteAnswer: {
            invoke: {
              src: 'handleRemoteAnswer',
              onDone: {
                actions: ['sendRoapOKMessage', 'resetOfferRequestFlag', 'sendDoneEvent'],
                target: 'idle'
              },
              onError: {
                actions: 'sendGenericError',
                target: 'browserError'
              }
            },
            on: {
              INITIATE_OFFER: {
                actions: 'enqueueNewOfferCreation'
              },
              REMOTE_OFFER_ARRIVED: {
                actions: 'sendInvalidStateError'
              },
              REMOTE_OFFER_REQUEST_ARRIVED: {
                actions: 'sendInvalidStateError'
              },
              REMOTE_ANSWER_ARRIVED: [{
                cond: 'isSameSeq',
                actions: 'ignoreDuplicate'
              }, {
                actions: 'sendInvalidStateError'
              }],
              REMOTE_OK_ARRIVED: {
                actions: 'sendInvalidStateError'
              }
            }
          },
          settingRemoteOffer: {
            invoke: {
              src: 'handleRemoteOffer',
              onDone: {
                actions: ['sendRoapAnswerMessage'],
                target: 'waitingForOK'
              },
              onError: {
                actions: 'sendGenericError',
                target: 'browserError'
              }
            },
            on: {
              INITIATE_OFFER: {
                actions: 'enqueueNewOfferCreation'
              },
              REMOTE_OFFER_ARRIVED: [{
                cond: 'isSameSeq',
                actions: 'ignoreDuplicate'
              }, {
                actions: 'sendRetryAfterError'
              }],
              REMOTE_OFFER_REQUEST_ARRIVED: {
                actions: 'sendInvalidStateError'
              },
              REMOTE_ANSWER_ARRIVED: {
                actions: 'sendInvalidStateError'
              },
              REMOTE_OK_ARRIVED: {
                actions: 'sendInvalidStateError'
              }
            }
          },
          waitingForOK: {
            on: {
              REMOTE_OK_ARRIVED: [{
                actions: ['updateSeq', 'sendDoneEvent'],
                target: 'idle'
              }],
              INITIATE_OFFER: {
                actions: 'enqueueNewOfferCreation'
              },
              REMOTE_OFFER_ARRIVED: [{
                cond: 'isSameSeq',
                actions: 'ignoreDuplicate'
              }, {
                actions: 'sendInvalidStateError'
              }],
              REMOTE_OFFER_REQUEST_ARRIVED: {
                actions: 'sendInvalidStateError'
              },
              REMOTE_ANSWER_ARRIVED: {
                actions: 'sendInvalidStateError'
              },
              ERROR_ARRIVED: {
                cond: 'isSameSeq',
                target: 'remoteError'
              }
            }
          }
        }
      }, {
        services: {
          createLocalOffer: () => this.createLocalOfferCallback(),
          handleRemoteAnswer: (_context, event) => this.handleRemoteAnswerCallback(event.sdp),
          handleRemoteOffer: (_context, event) => this.handleRemoteOfferCallback(event.sdp)
        },
        actions: {
          enqueueNewOfferCreation: assign$3(context => _objectSpread$2(_objectSpread$2({}, context), {}, {
            pendingLocalOffer: true
          })),
          resetPendingLocalOffer: assign$3(context => _objectSpread$2(_objectSpread$2({}, context), {}, {
            pendingLocalOffer: false
          })),
          increaseSeq: assign$3(context => _objectSpread$2(_objectSpread$2({}, context), {}, {
            seq: context.seq + 1
          })),
          updateSeq: assign$3((context, event) => _objectSpread$2(_objectSpread$2({}, context), {}, {
            seq: event.seq
          })),
          increaseRetryCounter: assign$3(context => _objectSpread$2(_objectSpread$2({}, context), {}, {
            retryCounter: context.retryCounter + 1
          })),
          resetRetryCounter: assign$3(context => _objectSpread$2(_objectSpread$2({}, context), {}, {
            retryCounter: 0
          })),
          setOfferRequestFlag: assign$3(context => _objectSpread$2(_objectSpread$2({}, context), {}, {
            isHandlingOfferRequest: true
          })),
          resetOfferRequestFlag: assign$3(context => _objectSpread$2(_objectSpread$2({}, context), {}, {
            isHandlingOfferRequest: false
          })),
          handleGlare: (_context, event) => {
            if (event.tieBreaker === WEB_TIEBREAKER_VALUE) {
              this.sendErrorMessage(event.seq, ErrorType.DOUBLECONFLICT);
            } else {
              this.sendErrorMessage(event.seq, ErrorType.CONFLICT);
            }
          },
          sendRoapOfferMessage: (context, event) => this.sendRoapOfferMessage(context.seq, event.data.sdp),
          sendRoapOfferResponseMessage: (context, event) => this.sendRoapOfferResponseMessage(context.seq, event.data.sdp),
          sendRoapOKMessage: context => this.sendRoapOkMessage(context.seq),
          sendRoapAnswerMessage: (context, event) => this.sendRoapAnswerMessage(context.seq, event.data.sdp),
          sendStartedEvent: () => this.sendStartedEvent(),
          sendDoneEvent: () => this.sendDoneEvent(),
          sendGenericError: context => this.sendErrorMessage(context.seq, ErrorType.FAILED),
          sendInvalidStateError: (_context, event) => this.sendErrorMessage(event.seq, ErrorType.INVALID_STATE),
          sendOutOfOrderError: (_context, event) => this.sendErrorMessage(event.seq, ErrorType.OUT_OF_ORDER),
          sendRetryAfterError: (_context, event) => this.sendErrorMessage(event.seq, ErrorType.FAILED, {
            retryAfter: Math.floor(Math.random() * 11)
          }),
          ignoreDuplicate: (_context, event) => this.log('FSM', "ignoring duplicate roap message ".concat(event.type, " with seq=").concat(event.seq)),
          resolvePendingInitiateOfferPromises: () => this.resolvePendingInitiateOfferPromises(),
          rejectPendingInitiateOfferPromises: (_context, event) => this.rejectPendingInitiateOfferPromises(event.data)
        },
        guards: {
          isPendingLocalOffer: context => context.pendingLocalOffer,
          isHandlingOfferRequest: context => context.isHandlingOfferRequest,
          isSameSeq: (context, event) => {
            if (event.seq === context.seq) {
              this.log('FSM', "incoming roap message seq is same as current context seq: ".concat(event.seq));
              return true;
            }
            return false;
          },
          shouldErrorTriggerOfferRetry: (context, event) => {
            var retryableErrorTypes = [ErrorType.DOUBLECONFLICT, ErrorType.INVALID_STATE, ErrorType.OUT_OF_ORDER, ErrorType.RETRY];
            if (retryableErrorTypes.includes(event.errorType)) {
              if (event.seq === context.seq && context.retryCounter < MAX_RETRIES) {
                this.log('FSM', "retryable error message received with matching seq and retryCounter ".concat(context.retryCounter, " < ").concat(MAX_RETRIES));
                return true;
              }
              if (event.seq !== context.seq) {
                this.log('FSM', "ignoring error message with wrong seq: ".concat(event.seq, " !== ").concat(context.seq));
              } else {
                this.log('FSM', "reached max retries: retryCounter=".concat(context.retryCounter));
              }
            }
            return false;
          }
        }
      });
      this.stateMachine = interpret$1(fsm).onTransition((state, event) => this.log('onTransition', "state=".concat(state.value, ", event=").concat(JSON.stringify(event)))).start();
    }
    log(action, description) {
      getLogger().info("".concat(this.id, ":").concat(action, " ").concat(description));
    }
    error(action, description, error) {
      getLogger().error("".concat(this.id, ":").concat(action, " ").concat(description, " ").concat(getErrorDescription(error)));
    }
    sendRoapOfferMessage(seq, sdp) {
      this.log('sendRoapOfferMessage', 'emitting ROAP OFFER');
      this.emit(Event$1.ROAP_MESSAGE_TO_SEND, {
        roapMessage: {
          seq,
          messageType: 'OFFER',
          sdp,
          tieBreaker: WEB_TIEBREAKER_VALUE
        }
      });
    }
    sendRoapOfferResponseMessage(seq, sdp) {
      this.log('sendRoapOfferResponseMessage', 'emitting ROAP OFFER RESPONSE');
      this.emit(Event$1.ROAP_MESSAGE_TO_SEND, {
        roapMessage: {
          seq,
          messageType: 'OFFER_RESPONSE',
          sdp
        }
      });
    }
    sendRoapOkMessage(seq) {
      this.log('sendRoapOkMessage', 'emitting ROAP OK');
      this.emit(Event$1.ROAP_MESSAGE_TO_SEND, {
        roapMessage: {
          seq,
          messageType: 'OK'
        }
      });
    }
    sendRoapAnswerMessage(seq, sdp) {
      this.log('sendRoapAnswerMessage', 'emitting ROAP ANSWER');
      this.emit(Event$1.ROAP_MESSAGE_TO_SEND, {
        roapMessage: {
          seq,
          messageType: 'ANSWER',
          sdp
        }
      });
    }
    sendDoneEvent() {
      this.log('sendDoneEvent', 'emitting ROAP DONE');
      this.emit(Event$1.ROAP_DONE);
    }
    sendStartedEvent() {
      this.log('sendStartedEvent', 'emitting ROAP STARTED');
      this.emit(Event$1.ROAP_STARTED);
    }
    sendErrorMessage(seq, errorType) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var {
        retryAfter
      } = options;
      this.log('sendErrorMessage', "emitting ROAP ERROR (".concat(errorType, ")"));
      this.emit(Event$1.ROAP_MESSAGE_TO_SEND, {
        roapMessage: {
          seq,
          messageType: 'ERROR',
          errorType,
          retryAfter
        }
      });
    }
    getStateMachine() {
      return this.stateMachine;
    }
    initiateOffer() {
      return new Promise((resolve, reject) => {
        this.initiateOfferPromises.push({
          resolve,
          reject
        });
        this.stateMachine.send('INITIATE_OFFER');
      });
    }
    resolvePendingInitiateOfferPromises() {
      while (this.initiateOfferPromises.length > 0) {
        var promise = this.initiateOfferPromises.shift();
        promise === null || promise === void 0 ? void 0 : promise.resolve();
      }
    }
    rejectPendingInitiateOfferPromises(error) {
      while (this.initiateOfferPromises.length > 0) {
        var promise = this.initiateOfferPromises.shift();
        promise === null || promise === void 0 ? void 0 : promise.reject(error);
      }
    }
    validateIncomingRoapMessage(roapMessage) {
      var {
        errorType,
        messageType,
        seq
      } = roapMessage;
      var isValid = true;
      var errorToSend;
      if (seq < this.stateMachine.state.context.seq) {
        isValid = false;
        if (messageType !== 'ERROR') {
          errorToSend = ErrorType.OUT_OF_ORDER;
          this.error('validateIncomingRoapMessage', "received roap message ".concat(messageType, " with seq too low: ").concat(seq, " < ").concat(this.stateMachine.state.context.seq));
        } else {
          this.error('validateIncomingRoapMessage', "received ERROR message ".concat(errorType, " with seq too low: ").concat(seq, " < ").concat(this.stateMachine.state.context.seq, ", ignoring it"));
        }
      }
      return {
        isValid,
        errorToSend
      };
    }
    roapMessageReceived(roapMessage) {
      var {
        errorCause,
        errorType,
        messageType,
        sdp,
        seq,
        tieBreaker
      } = roapMessage;
      var {
        isValid,
        errorToSend
      } = this.validateIncomingRoapMessage(roapMessage);
      if (!isValid) {
        if (errorToSend) {
          this.sendErrorMessage(seq, errorToSend);
        }
        return;
      }
      switch (messageType) {
        case 'ANSWER':
          this.stateMachine.send('REMOTE_ANSWER_ARRIVED', {
            sdp,
            seq
          });
          break;
        case 'OFFER':
          this.stateMachine.send('REMOTE_OFFER_ARRIVED', {
            sdp,
            seq,
            tieBreaker
          });
          break;
        case 'OFFER_REQUEST':
          this.stateMachine.send('REMOTE_OFFER_REQUEST_ARRIVED', {
            seq,
            tieBreaker
          });
          break;
        case 'OK':
          this.stateMachine.send('REMOTE_OK_ARRIVED', {
            sdp,
            seq
          });
          break;
        case 'ERROR':
          this.error('roapMessageReceived', "Error received: seq=".concat(seq, " type=").concat(errorType, " cause=").concat(errorCause));
          if (errorType === ErrorType.CONFLICT) {
            this.error('roapMessageReceived', "CONFLICT error type received - this should never happen, because we use the tieBreaker value ".concat(WEB_TIEBREAKER_VALUE));
          }
          this.stateMachine.send('ERROR_ARRIVED', {
            seq,
            errorType
          });
          break;
        case 'OFFER_RESPONSE':
          this.error('roapMessageReceived', "Received unexpected OFFER_RESPONSE: seq=".concat(seq));
          break;
        default:
          this.error('roapMessageReceived()', "unsupported messageType: ".concat(messageType));
          throw new Error('unhandled messageType');
      }
    }
    stop() {
      this.stateMachine.stop();
    }
    getSeq() {
      return this.stateMachine.state.context.seq;
    }
  }

  function ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  class RoapMediaConnection extends EventEmitter$3 {
    constructor(mediaConnectionConfig, options, debugId) {
      super();
      _defineProperty(this, "id", void 0);
      _defineProperty(this, "debugId", void 0);
      _defineProperty(this, "mediaConnection", void 0);
      _defineProperty(this, "roap", void 0);
      _defineProperty(this, "sdpNegotiationStarted", void 0);
      this.debugId = debugId;
      this.id = debugId || 'RoapMediaConnection';
      this.sdpNegotiationStarted = false;
      this.log('constructor()', "config: ".concat(JSON.stringify(mediaConnectionConfig), ", options: ").concat(JSON.stringify(options)));
      this.mediaConnection = this.createMediaConnection(mediaConnectionConfig, options, debugId);
      this.roap = this.createRoap(debugId);
    }
    log(action, description) {
      getLogger().info("".concat(this.id, ":").concat(action, " ").concat(description));
    }
    error(action, description, error) {
      getLogger().error("".concat(this.id, ":").concat(action, " ").concat(description, " ").concat(getErrorDescription(error)));
    }
    createMediaConnection(mediaConnectionConfig, options, debugId) {
      var mediaConnection = new MediaConnection(mediaConnectionConfig, options, debugId);
      mediaConnection.on(Event$1.REMOTE_TRACK_ADDED, this.onRemoteTrack.bind(this));
      mediaConnection.on(Event$1.CONNECTION_STATE_CHANGED, this.onConnectionStateChanged.bind(this));
      mediaConnection.on(Event$1.DTMF_TONE_CHANGED, this.onDtmfToneChanged.bind(this));
      return mediaConnection;
    }
    createRoap(debugId, seq) {
      var roap = new Roap(this.createLocalOffer.bind(this), this.handleRemoteOffer.bind(this), this.handleRemoteAnswer.bind(this), debugId, seq);
      roap.on(Event$1.ROAP_MESSAGE_TO_SEND, event => this.emit(Event$1.ROAP_MESSAGE_TO_SEND, event));
      roap.on(Event$1.ROAP_STARTED, () => this.emit(Event$1.ROAP_STARTED));
      roap.on(Event$1.ROAP_DONE, () => this.emit(Event$1.ROAP_DONE));
      roap.on(Event$1.ROAP_FAILURE, error => this.emit(Event$1.ROAP_FAILURE, error));
      return roap;
    }
    initiateOffer() {
      this.log('initiateOffer()', 'called');
      if (this.sdpNegotiationStarted) {
        this.error('initiateOffer()', 'SDP negotiation already started');
        return Promise.reject(new Error('SDP negotiation already started'));
      }
      this.mediaConnection.initializeTransceivers(false);
      this.sdpNegotiationStarted = true;
      return this.roap.initiateOffer();
    }
    close() {
      this.log('close()', 'called');
      this.closeMediaConnection();
      this.stopRoapSession();
    }
    closeMediaConnection() {
      this.mediaConnection.close();
      this.mediaConnection.removeAllListeners();
    }
    stopRoapSession() {
      this.roap.stop();
      this.roap.removeAllListeners();
    }
    reconnect(iceServers) {
      var initiateOffer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      this.log('reconnect()', "iceServers: ".concat(JSON.stringify(iceServers)));
      var config = _objectSpread$1(_objectSpread$1({}, this.mediaConnection.getConfig()), {}, {
        iceServers
      });
      var options = this.mediaConnection.getSendReceiveOptions();
      var seq = this.roap.getSeq();
      this.stopRoapSession();
      this.closeMediaConnection();
      this.sdpNegotiationStarted = false;
      this.mediaConnection = this.createMediaConnection(config, options, this.debugId);
      this.roap = this.createRoap(this.debugId, seq);
      if (initiateOffer) {
        return this.initiateOffer();
      }
      return Promise.resolve();
    }
    updateSendOptions(tracks) {
      this.log('updateSendOptions()', "called with ".concat(JSON.stringify(tracks)));
      var newOfferNeeded = this.mediaConnection.updateSendOptions(tracks);
      if (newOfferNeeded) {
        this.log('updateSendOptions()', 'triggering offer...');
        return this.roap.initiateOffer();
      }
      return Promise.resolve();
    }
    updateReceiveOptions(options) {
      this.log('updateReceiveOptions()', "called with ".concat(JSON.stringify(options)));
      var newOfferNeeded = this.mediaConnection.updateReceiveOptions(options);
      if (newOfferNeeded) {
        this.log('updateReceiveOptions()', 'triggering offer...');
        return this.roap.initiateOffer();
      }
      return Promise.resolve();
    }
    updateSendReceiveOptions(options) {
      this.log('updateSendReceiveOptions()', "called with ".concat(JSON.stringify(options)));
      var newOfferNeeded = this.mediaConnection.updateSendReceiveOptions(options);
      if (newOfferNeeded) {
        this.log('updateSendReceiveOptions()', 'triggering offer...');
        return this.roap.initiateOffer();
      }
      return Promise.resolve();
    }
    getConnectionState() {
      return this.mediaConnection.getConnectionState();
    }
    getStats() {
      return this.mediaConnection.getStats();
    }
    getTransceiverStats() {
      return this.mediaConnection.getTransceiverStats();
    }
    insertDTMF(tones, duration, interToneGap) {
      this.log('insertDTMF()', "called with tones=\"".concat(tones, "\", duration=").concat(duration, ", interToneGap=").concat(interToneGap));
      this.mediaConnection.insertDTMF(tones, duration, interToneGap);
    }
    roapMessageReceived(roapMessage) {
      this.log('roapMessageReceived()', "called with messageType=".concat(roapMessage.messageType, ", seq=").concat(roapMessage.seq));
      if (!this.sdpNegotiationStarted) {
        if (roapMessage.messageType === 'OFFER') {
          this.sdpNegotiationStarted = true;
          this.mediaConnection.initializeTransceivers(true);
        }
        if (roapMessage.messageType === 'OFFER_REQUEST') {
          this.sdpNegotiationStarted = true;
          this.mediaConnection.initializeTransceivers(false);
        }
      }
      this.roap.roapMessageReceived(roapMessage);
    }
    onRemoteTrack(event) {
      this.emit(Event$1.REMOTE_TRACK_ADDED, event);
    }
    onConnectionStateChanged(event) {
      this.emit(Event$1.CONNECTION_STATE_CHANGED, event);
    }
    onDtmfToneChanged(event) {
      this.emit(Event$1.DTMF_TONE_CHANGED, event);
    }
    createLocalOffer() {
      return this.mediaConnection.createLocalOffer();
    }
    handleRemoteOffer(sdp) {
      return this.mediaConnection.handleRemoteOffer(sdp);
    }
    handleRemoteAnswer(sdp) {
      return this.mediaConnection.handleRemoteAnswer(sdp);
    }
  }

  var commonjsGlobal$5 = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global$1 !== 'undefined' ? global$1 : typeof self !== 'undefined' ? self : {};
  var logger = {
    exports: {}
  };

  /*!
   * js-logger - http://github.com/jonnyreeves/js-logger
   * Jonny Reeves, http://jonnyreeves.co.uk/
   * js-logger may be freely distributed under the MIT license.
   */

  (function (module) {
    (function (global) {
      // Top level module for the global, static logger instance.
      var Logger = {};

      // For those that are at home that are keeping score.
      Logger.VERSION = "1.6.1";

      // Function which handles all incoming log messages.
      var logHandler;

      // Map of ContextualLogger instances by name; used by Logger.get() to return the same named instance.
      var contextualLoggersByNameMap = {};

      // Polyfill for ES5's Function.bind.
      var bind = function bind(scope, func) {
        return function () {
          return func.apply(scope, arguments);
        };
      };

      // Super exciting object merger-matron 9000 adding another 100 bytes to your download.
      var merge = function merge() {
        var args = arguments,
          target = args[0],
          key,
          i;
        for (i = 1; i < args.length; i++) {
          for (key in args[i]) {
            if (!(key in target) && args[i].hasOwnProperty(key)) {
              target[key] = args[i][key];
            }
          }
        }
        return target;
      };

      // Helper to define a logging level object; helps with optimisation.
      var defineLogLevel = function defineLogLevel(value, name) {
        return {
          value: value,
          name: name
        };
      };

      // Predefined logging levels.
      Logger.TRACE = defineLogLevel(1, 'TRACE');
      Logger.DEBUG = defineLogLevel(2, 'DEBUG');
      Logger.INFO = defineLogLevel(3, 'INFO');
      Logger.TIME = defineLogLevel(4, 'TIME');
      Logger.WARN = defineLogLevel(5, 'WARN');
      Logger.ERROR = defineLogLevel(8, 'ERROR');
      Logger.OFF = defineLogLevel(99, 'OFF');

      // Inner class which performs the bulk of the work; ContextualLogger instances can be configured independently
      // of each other.
      var ContextualLogger = function ContextualLogger(defaultContext) {
        this.context = defaultContext;
        this.setLevel(defaultContext.filterLevel);
        this.log = this.info; // Convenience alias.
      };

      ContextualLogger.prototype = {
        // Changes the current logging level for the logging instance.
        setLevel: function setLevel(newLevel) {
          // Ensure the supplied Level object looks valid.
          if (newLevel && "value" in newLevel) {
            this.context.filterLevel = newLevel;
          }
        },
        // Gets the current logging level for the logging instance
        getLevel: function getLevel() {
          return this.context.filterLevel;
        },
        // Is the logger configured to output messages at the supplied level?
        enabledFor: function enabledFor(lvl) {
          var filterLevel = this.context.filterLevel;
          return lvl.value >= filterLevel.value;
        },
        trace: function trace() {
          this.invoke(Logger.TRACE, arguments);
        },
        debug: function debug() {
          this.invoke(Logger.DEBUG, arguments);
        },
        info: function info() {
          this.invoke(Logger.INFO, arguments);
        },
        warn: function warn() {
          this.invoke(Logger.WARN, arguments);
        },
        error: function error() {
          this.invoke(Logger.ERROR, arguments);
        },
        time: function time(label) {
          if (typeof label === 'string' && label.length > 0) {
            this.invoke(Logger.TIME, [label, 'start']);
          }
        },
        timeEnd: function timeEnd(label) {
          if (typeof label === 'string' && label.length > 0) {
            this.invoke(Logger.TIME, [label, 'end']);
          }
        },
        // Invokes the logger callback if it's not being filtered.
        invoke: function invoke(level, msgArgs) {
          if (logHandler && this.enabledFor(level)) {
            logHandler(msgArgs, merge({
              level: level
            }, this.context));
          }
        }
      };

      // Protected instance which all calls to the to level `Logger` module will be routed through.
      var globalLogger = new ContextualLogger({
        filterLevel: Logger.OFF
      });

      // Configure the global Logger instance.
      (function () {
        // Shortcut for optimisers.
        var L = Logger;
        L.enabledFor = bind(globalLogger, globalLogger.enabledFor);
        L.trace = bind(globalLogger, globalLogger.trace);
        L.debug = bind(globalLogger, globalLogger.debug);
        L.time = bind(globalLogger, globalLogger.time);
        L.timeEnd = bind(globalLogger, globalLogger.timeEnd);
        L.info = bind(globalLogger, globalLogger.info);
        L.warn = bind(globalLogger, globalLogger.warn);
        L.error = bind(globalLogger, globalLogger.error);

        // Don't forget the convenience alias!
        L.log = L.info;
      })();

      // Set the global logging handler.  The supplied function should expect two arguments, the first being an arguments
      // object with the supplied log messages and the second being a context object which contains a hash of stateful
      // parameters which the logging function can consume.
      Logger.setHandler = function (func) {
        logHandler = func;
      };

      // Sets the global logging filter level which applies to *all* previously registered, and future Logger instances.
      // (note that named loggers (retrieved via `Logger.get`) can be configured independently if required).
      Logger.setLevel = function (level) {
        // Set the globalLogger's level.
        globalLogger.setLevel(level);

        // Apply this level to all registered contextual loggers.
        for (var key in contextualLoggersByNameMap) {
          if (contextualLoggersByNameMap.hasOwnProperty(key)) {
            contextualLoggersByNameMap[key].setLevel(level);
          }
        }
      };

      // Gets the global logging filter level
      Logger.getLevel = function () {
        return globalLogger.getLevel();
      };

      // Retrieve a ContextualLogger instance.  Note that named loggers automatically inherit the global logger's level,
      // default context and log handler.
      Logger.get = function (name) {
        // All logger instances are cached so they can be configured ahead of use.
        return contextualLoggersByNameMap[name] || (contextualLoggersByNameMap[name] = new ContextualLogger(merge({
          name: name
        }, globalLogger.context)));
      };

      // CreateDefaultHandler returns a handler function which can be passed to `Logger.setHandler()` which will
      // write to the window's console object (if present); the optional options object can be used to customise the
      // formatter used to format each log message.
      Logger.createDefaultHandler = function (options) {
        options = options || {};
        options.formatter = options.formatter || function defaultMessageFormatter(messages, context) {
          // Prepend the logger's name to the log message for easy identification.
          if (context.name) {
            messages.unshift("[" + context.name + "]");
          }
        };

        // Map of timestamps by timer labels used to track `#time` and `#timeEnd()` invocations in environments
        // that don't offer a native console method.
        var timerStartTimeByLabelMap = {};

        // Support for IE8+ (and other, slightly more sane environments)
        var invokeConsoleMethod = function invokeConsoleMethod(hdlr, messages) {
          Function.prototype.apply.call(hdlr, console, messages);
        };

        // Check for the presence of a logger.
        if (typeof console === "undefined") {
          return function () {/* no console */};
        }
        return function (messages, context) {
          // Convert arguments object to Array.
          messages = Array.prototype.slice.call(messages);
          var hdlr = console.log;
          var timerLabel;
          if (context.level === Logger.TIME) {
            timerLabel = (context.name ? '[' + context.name + '] ' : '') + messages[0];
            if (messages[1] === 'start') {
              if (console.time) {
                console.time(timerLabel);
              } else {
                timerStartTimeByLabelMap[timerLabel] = new Date().getTime();
              }
            } else {
              if (console.timeEnd) {
                console.timeEnd(timerLabel);
              } else {
                invokeConsoleMethod(hdlr, [timerLabel + ': ' + (new Date().getTime() - timerStartTimeByLabelMap[timerLabel]) + 'ms']);
              }
            }
          } else {
            // Delegate through to custom warn/error loggers if present on the console.
            if (context.level === Logger.WARN && console.warn) {
              hdlr = console.warn;
            } else if (context.level === Logger.ERROR && console.error) {
              hdlr = console.error;
            } else if (context.level === Logger.INFO && console.info) {
              hdlr = console.info;
            } else if (context.level === Logger.DEBUG && console.debug) {
              hdlr = console.debug;
            } else if (context.level === Logger.TRACE && console.trace) {
              hdlr = console.trace;
            }
            options.formatter(messages, context);
            invokeConsoleMethod(hdlr, messages);
          }
        };
      };

      // Configure and example a Default implementation which writes to the `window.console` (if present).  The
      // `options` hash can be used to configure the default logLevel and provide a custom message formatter.
      Logger.useDefaults = function (options) {
        Logger.setLevel(options && options.defaultLevel || Logger.DEBUG);
        Logger.setHandler(Logger.createDefaultHandler(options));
      };

      // Createa an alias to useDefaults to avoid reaking a react-hooks rule.
      Logger.setDefaults = Logger.useDefaults;

      // Export to popular environments boilerplate.
      if (module.exports) {
        module.exports = Logger;
      } else {
        Logger._prevLogger = global.Logger;
        Logger.noConflict = function () {
          global.Logger = Logger._prevLogger;
          return Logger;
        };
        global.Logger = Logger;
      }
    })(commonjsGlobal$5);
  })(logger);
  var Logger = logger.exports;
  Logger.useDefaults({
    defaultLevel: Logger.DEBUG,
    formatter: (messages, context) => {
      messages.unshift("[".concat(context.name, "] "));
    }
  });
  class ActiveSpeakerInfo {
    constructor(priority, crossPriorityDuplication, crossPolicyDuplication, preferLiveVideo) {
      this.priority = priority;
      this.crossPriorityDuplication = crossPriorityDuplication;
      this.crossPolicyDuplication = crossPolicyDuplication;
      this.preferLiveVideo = preferLiveVideo;
    }
    toString() {
      return "ActiveSpeakerInfo(priority=".concat(this.priority, ", crossPriorityDuplication=").concat(this.crossPriorityDuplication, ", crossPolicyDuplication=").concat(this.crossPolicyDuplication, ", preferLiveVideo=").concat(this.preferLiveVideo, ")");
    }
  }
  var HomerMsgType;
  (function (HomerMsgType) {
    HomerMsgType["Multistream"] = "multistream";
  })(HomerMsgType || (HomerMsgType = {}));
  var JmpMsgType;
  (function (JmpMsgType) {
    JmpMsgType["Scr"] = "scr";
    JmpMsgType["ScrAck"] = "scrAck";
    JmpMsgType["ActiveSpeakerNotification"] = "activeSpeakerNotification";
    JmpMsgType["SourceIndication"] = "sourceIndication";
    JmpMsgType["SourceIndicationAck"] = "sourceIndicationAck";
  })(JmpMsgType || (JmpMsgType = {}));
  class CodecInfo {
    constructor(payloadType, h264) {
      this.payloadType = payloadType;
      this.h264 = h264;
    }
  }
  class H264Codec {
    constructor(maxFs, maxFps, maxMbps, maxWidth, maxHeight) {
      this.maxFs = maxFs;
      this.maxFps = maxFps;
      this.maxMbps = maxMbps;
      this.maxWidth = maxWidth;
      this.maxHeight = maxHeight;
    }
  }
  class ReceiverSelectedInfo {
    constructor(csi) {
      this.csi = csi;
    }
    toString() {
      return "ReceiverSelectedInfo(csi=".concat(this.csi, ")");
    }
  }
  var MediaFamily;
  (function (MediaFamily) {
    MediaFamily["Audio"] = "AUDIO";
    MediaFamily["Video"] = "VIDEO";
  })(MediaFamily || (MediaFamily = {}));
  var MediaContent;
  (function (MediaContent) {
    MediaContent["Main"] = "MAIN";
    MediaContent["Slides"] = "SLIDES";
  })(MediaContent || (MediaContent = {}));
  var Policy;
  (function (Policy) {
    Policy["ActiveSpeaker"] = "active-speaker";
    Policy["ReceiverSelected"] = "receiver-selected";
  })(Policy || (Policy = {}));
  var MediaType;
  (function (MediaType) {
    MediaType["VideoMain"] = "VIDEO-MAIN";
    MediaType["VideoSlides"] = "VIDEO-SLIDES";
    MediaType["AudioMain"] = "AUDIO-MAIN";
    MediaType["AudioSlides"] = "AUDIO-SLIDES";
  })(MediaType || (MediaType = {}));
  function getMediaFamily(mediaType) {
    return [MediaType.VideoMain, MediaType.VideoSlides].includes(mediaType) ? MediaFamily.Video : MediaFamily.Audio;
  }
  var JmpSessionEvents;
  (function (JmpSessionEvents) {
    JmpSessionEvents["SourceIndication"] = "source-indication";
    JmpSessionEvents["ActiveSpeaker"] = "active-speaker";
    JmpSessionEvents["ScrRequestReceived"] = "scr-request-received";
  })(JmpSessionEvents || (JmpSessionEvents = {}));

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  class MultistreamRoapMediaConnection extends EventEmitter$4 {
    constructor(mediaConnectionConfig, debugId) {
      super();
      _defineProperty(this, "id", void 0);
      _defineProperty(this, "debugId", void 0);
      _defineProperty(this, "multistreamConnection", void 0);
      _defineProperty(this, "roap", void 0);
      _defineProperty(this, "sdpNegotiationStarted", false);
      this.debugId = debugId;
      this.id = debugId || 'MultistreamRoapMediaConnection';
      this.configureWcmeLogger(debugId);
      this.log('constructor()', "config: ".concat(JSON.stringify(mediaConnectionConfig)));
      this.multistreamConnection = this.createMultistreamConnection(mediaConnectionConfig);
      this.roap = this.createRoap(debugId);
    }
    configureWcmeLogger(debugId) {
      var logger = getLogger();
      setLogHandler((messages, context) => {
        var logMessages = Array.from(messages).map(message => typeof message === 'object' ? JSON.stringify(message) : message);
        logMessages.unshift("".concat(debugId || '', ":[").concat(context.name, "]"));
        switch (context.level.name) {
          case 'TRACE':
            logger.trace(...logMessages);
            break;
          case 'DEBUG':
            logger.debug(...logMessages);
            break;
          case 'INFO':
            logger.info(...logMessages);
            break;
          case 'WARN':
            logger.warn(...logMessages);
            break;
          case 'ERROR':
            logger.error(...logMessages);
            break;
        }
      });
    }
    log(action, description) {
      getLogger().info("".concat(this.id, ":").concat(action, " ").concat(description));
    }
    error(action, description, error) {
      getLogger().error("".concat(this.id, ":").concat(action, " ").concat(description, " ").concat(getErrorDescription(error)));
    }
    createMultistreamConnection(mediaConnectionConfig) {
      this.log('createMultistreamConnection()', 'creating MultistreamConnection with floorControlledPresentation: true');
      var multistreamConnection = new MultistreamConnection(_objectSpread(_objectSpread({}, mediaConnectionConfig), {}, {
        floorControlledPresentation: true
      }));
      multistreamConnection.on(MultistreamConnectionEventNames.ActiveSpeakerNotification, data => {
        this.emit(Event$1.ACTIVE_SPEAKERS_CHANGED, {
          csis: data.csis
        });
      });
      multistreamConnection.on(MultistreamConnectionEventNames.AudioSourceCountUpdate, (numTotalSources, numLiveSources, mediaContent) => {
        this.emit(Event$1.AUDIO_SOURCES_COUNT_CHANGED, numTotalSources, numLiveSources, mediaContent);
      });
      multistreamConnection.on(MultistreamConnectionEventNames.VideoSourceCountUpdate, (numTotalSources, numLiveSources, mediaContent) => {
        this.emit(Event$1.VIDEO_SOURCES_COUNT_CHANGED, numTotalSources, numLiveSources, mediaContent);
      });
      multistreamConnection.on(MultistreamConnectionEventNames.ConnectionStateUpdate, state => {
        this.emit(Event$1.CONNECTION_STATE_CHANGED, {
          state
        });
      });
      return multistreamConnection;
    }
    createRoap(debugId, seq) {
      var roap = new Roap(this.createLocalOffer.bind(this), this.handleRemoteOffer.bind(this), this.handleRemoteAnswer.bind(this), debugId, seq);
      roap.on(Event$1.ROAP_MESSAGE_TO_SEND, event => this.emit(Event$1.ROAP_MESSAGE_TO_SEND, event));
      roap.on(Event$1.ROAP_STARTED, () => this.emit(Event$1.ROAP_STARTED));
      roap.on(Event$1.ROAP_DONE, () => this.emit(Event$1.ROAP_DONE));
      roap.on(Event$1.ROAP_FAILURE, error => this.emit(Event$1.ROAP_FAILURE, error));
      return roap;
    }
    initiateOffer() {
      this.log('initiateOffer()', 'called');
      if (this.sdpNegotiationStarted) {
        this.error('initiateOffer()', 'SDP negotiation already started');
        return Promise.reject(new Error('SDP negotiation already started'));
      }
      this.sdpNegotiationStarted = true;
      return this.roap.initiateOffer();
    }
    close() {
      this.log('close()', 'called');
      this.closeMediaConnection();
      this.stopRoapSession();
    }
    closeMediaConnection() {
      this.multistreamConnection.close();
      this.multistreamConnection.removeAllListeners();
    }
    stopRoapSession() {
      this.roap.stop();
      this.roap.removeAllListeners();
    }
    reconnect(iceServers) {
      var initiateOffer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      this.log('reconnect()', "iceServers: ".concat(JSON.stringify(iceServers)));
      var seq = this.roap.getSeq();
      this.stopRoapSession();
      this.sdpNegotiationStarted = false;
      this.multistreamConnection.renewPeerConnection({
        iceServers
      });
      this.roap = this.createRoap(this.debugId, seq);
      if (initiateOffer) {
        return this.initiateOffer();
      }
      return Promise.resolve();
    }
    getConnectionState() {
      var connectionState = this.multistreamConnection.getConnectionState();
      this.log('getConnectionState()', "called, returning ".concat(connectionState));
      return connectionState;
    }
    getStats() {
      return this.multistreamConnection.getStats();
    }
    getTransceiverStats() {
      return this.multistreamConnection.getTransceiverStats();
    }
    roapMessageReceived(roapMessage) {
      this.log('roapMessageReceived()', "called with messageType=".concat(roapMessage.messageType, ", seq=").concat(roapMessage.seq));
      if (!this.sdpNegotiationStarted && roapMessage.messageType === 'OFFER') {
        throw new Error('incoming first offer is not supported by MultistreamRoapMediaConnection');
      }
      this.roap.roapMessageReceived(roapMessage);
    }
    enableMultistreamAudio(enabled) {
      this.log('enableMultistreamAudio()', 'called');
      var sdpNegotiationNeeded = this.multistreamConnection.enableMultistreamAudio(enabled);
      if (sdpNegotiationNeeded) {
        return this.roap.initiateOffer();
      }
      return Promise.resolve();
    }
    publishTrack(track) {
      this.log('publishTrack()', 'called');
      return this.multistreamConnection.publishTrack(track);
    }
    unpublishTrack(track) {
      this.log('unpublishTrack()', 'called');
      return this.multistreamConnection.unpublishTrack(track);
    }
    createReceiveSlot(mediaType) {
      this.log('createReceiveSlot()', "called");
      return this.multistreamConnection.createReceiveSlot(mediaType);
    }
    requestMedia(mediaType, mediaRequests) {
      this.log('requestMedia()', "called");
      return this.multistreamConnection.requestMedia(mediaType, mediaRequests);
    }
    createLocalOffer() {
      return this.multistreamConnection.createOffer().then(result => {
        if (result.sdp) {
          return {
            sdp: result.sdp
          };
        }
        return Promise.reject(new SdpOfferCreationError('empty local SDP'));
      }).catch(error => {
        throw new SdpOfferCreationError("createLocalOffer() failure: ".concat(error.message), {
          cause: error
        });
      });
    }
    handleRemoteOffer() {
      return Promise.reject(new SdpOfferHandlingError('remote offers not supported by WCME'));
    }
    handleRemoteAnswer(sdp) {
      if (sdp) {
        var mungedSdp = mungeRemoteSdp({}, sdp);
        mungedSdp = mungedSdp.replace(/\r\nb=TIAS:.*\r\n/g, '\r\n');
        return this.multistreamConnection.setAnswer(mungedSdp).catch(error => {
          throw new SdpAnswerHandlingError("handleRemoteAnswer() failure: ".concat(error.message), {
            cause: error
          });
        });
      }
      return Promise.reject(new SdpAnswerHandlingError('empty answer'));
    }
  }

  var Errors = Error$1;

  function isBrowserSupported() {
    var isSupported = false;
    logger$5.info({
      mediaType: MEDIA,
      action: 'isBrowserSupported()',
      description: 'Checking is current browser supported by webrtc'
    });
    if ((DetectRTC.exports.browser.isChrome || DetectRTC.exports.browser.isFirefox || DetectRTC.exports.browser.isSafari || DetectRTC.exports.browser.isEdge) && DetectRTC.exports.isWebRTCSupported) {
      isSupported = true;
    }
    return isSupported;
  }
  var Media = {
    createAudioTrack: createAudioTrack,
    createVideoTrack: createVideoTrack,
    createContentTrack: createContentTrack,
    getCameras: getCameras,
    getMicrophones: getMicrophones,
    getSpeakers: getSpeakers,
    on: on,
    off: off,
    Effects: {
      BNR: {
        enableBNR: enableBNR,
        disableBNR: disableBNR
      }
    },
    isBrowserSupported
  };

  var Media$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ActiveSpeakerInfo: ActiveSpeakerInfo,
    CodecInfo: CodecInfo,
    get ConnectionState () { return ConnectionState; },
    get ErrorType () { return ErrorType; },
    Errors: Errors,
    get Event () { return Event$1; },
    H264Codec: H264Codec,
    LocalCameraTrack: LocalCameraTrack,
    LocalDisplayTrack: LocalDisplayTrack,
    LocalMicrophoneTrack: LocalMicrophoneTrack,
    LocalTrack: LocalTrack,
    get LocalTrackEvents () { return LocalTrackEvents; },
    Media: Media,
    get MediaFamily () { return MediaFamily; },
    MediaRequest: MediaRequest,
    get MediaStreamTrackKind () { return MediaStreamTrackKind; },
    get MediaType () { return MediaType; },
    MultistreamRoapMediaConnection: MultistreamRoapMediaConnection,
    PeerConnection: PeerConnection,
    get Policy () { return Policy; },
    ReceiveSlot: ReceiveSlot,
    get ReceiveSlotEvents () { return ReceiveSlotEvents; },
    ReceiverSelectedInfo: ReceiverSelectedInfo,
    get RemoteTrackType () { return RemoteTrackType; },
    RoapMediaConnection: RoapMediaConnection,
    WcmeError: WcmeError,
    createCameraTrack: createCameraTrack,
    createDisplayTrack: createDisplayTrack,
    createMicrophoneTrack: createMicrophoneTrack,
    getAudioInputDevices: getAudioInputDevices,
    getAudioOutputDevices: getAudioOutputDevices,
    getDevices: getDevices,
    getErrorDescription: getErrorDescription,
    getLogger: getLogger,
    getMediaFamily: getMediaFamily,
    getVideoInputDevices: getVideoInputDevices,
    isBrowserSupported: isBrowserSupported,
    setLogger: setLogger$1,
    setOnDeviceChangeHandler: setOnDeviceChangeHandler
  });

  /******************************************************************************
  Copyright (c) Microsoft Corporation.

  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */

  function __awaiter(thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  }

  const validateWebex = (webexInstance) => {
      if (webexInstance.canAuthorize) {
          if (webexInstance.ready) {
              if (webexInstance.internal.mercury) {
                  return { error: undefined, success: true };
              }
              return { error: new Error('webex.internal.mercury is not available'), success: false };
          }
          return { error: new Error('webex.ready is not true'), success: false };
      }
      return { error: new Error('webex.canAuthorize is not true'), success: false };
  };

  let instance;
  let webex;
  class SDKConnector {
      setWebex(webexInstance) {
          if (instance) {
              throw new Error('You cannot set the SDKConnector instance more than once');
          }
          const { error, success } = validateWebex(webexInstance);
          if (error) {
              throw error;
          }
          else if (success) {
              webex = webexInstance;
          }
          else {
              throw new Error('An unknown error occurred setting up the webex instance.');
          }
          instance = this;
      }
      get() {
          return instance;
      }
      getWebex() {
          return webex;
      }
      request(request) {
          return instance.getWebex().request(request);
      }
      registerListener(event, cb) {
          instance.getWebex().internal.mercury.on(event, (data) => {
              cb(data);
          });
      }
      unregisterListener(event) {
          instance.getWebex().internal.mercury.off(event);
      }
  }
  var SDKConnector$1 = Object.freeze(new SDKConnector());

  const VERSION = '1.66.0';
  const REPO_NAME = 'web-calling-sdk';
  const CALLING_FEATURE = 'web-calling';
  const CALLING_USER_AGENT = `${REPO_NAME}/${VERSION} (${CALLING_FEATURE})`;
  const CALL_ENDPOINT_RESOURCE = 'call';
  const CALL_STATUS_RESOURCE = 'status';
  const CALLS_ENDPOINT_RESOURCE = 'calls';
  const CISCO_DEVICE_URL = 'cisco-device-url';
  const DEFAULT_KEEPALIVE_INTERVAL = 30;
  const DEFAULT_LOCAL_CALL_ID = 'DefaultLocalId';
  const DEFAULT_REHOMING_INTERVAL_MAX = 120;
  const DEFAULT_REHOMING_INTERVAL_MIN = 60;
  const DEFAULT_SESSION_TIMER = 1000 * 60 * 10;
  const DEVICES_ENDPOINT_RESOURCE = 'devices';
  const DISCOVERY_URL = 'https://ds.ciscospark.com/v1/region';
  const DUMMY_METRICS = {
      'rtp-rxstat': {
          Dur: 0,
          Pkt: 0,
          Oct: 0,
          LatePkt: 0,
          LostPkt: 0,
          AvgJit: 0,
          VQMetrics: {
              VoRxCodec: 'unknown',
              VoPktSizeMs: 0,
              maxJitter: 0,
              VoOneWayDelayMs: 0,
              networkType: 'unknown',
              hwType: 'unknown',
          },
      },
      'rtp-txstat': {
          Dur: 0,
          Pkt: 0,
          Oct: 0,
          VQMetrics: {
              VoTxCodec: 'unknown',
              rtpBitRate: 0,
          },
      },
  };
  const FETCH_NAME = /^[a-zA-Z ]+/;
  const IP_ENDPOINT = 'myip';
  const IDENTITY_ENDPOINT_RESOURCE = 'identity';
  const INITIAL_SEQ_NUMBER = 1;
  const MEDIA_ENDPOINT_RESOURCE = 'media';
  const NETWORK_FLAP_TIMEOUT = 2000;
  const CALL_HOLD_SERVICE = 'callhold';
  const CALL_TRANSFER_SERVICE = 'calltransfer';
  const HOLD_ENDPOINT = 'hold';
  const TRANSFER_ENDPOINT = 'commit';
  const RESUME_ENDPOINT = 'resume';
  const SCIM_ENDPOINT_RESOURCE = 'scim';
  const SCIM_USER_FILTER = 'v1/Users?filter=';
  const SPARK_USER_AGENT = 'spark-user-agent';
  const SUPPLEMENTARY_SERVICES_TIMEOUT = 10000;
  const URL_ENDPOINT = '/calling/web/';
  const VALID_PHONE = /[\d\s()*#+.-]+/;
  const WEBEX_WEB_CLIENT = 'webex-web-client';
  const CALLER_ID_FILE = 'CallerId';
  const UTILS_FILE = 'utils';
  const CALLING_CLIENT_FILE = 'CallingClient';
  const CALL_FILE = 'call';
  const CALL_MANAGER_FILE = 'callManager';
  const METRIC_FILE = 'metric';
  const CODEC_ID = 'codecId';
  const MEDIA_ID = 'id';
  const RTC_ICE_CANDIDATE_PAIR = 'RTCIceCandidatePair_';
  const LOCAL_CANDIDATE_ID = 'localCandidateId';
  const RTC_ICE_CANDIDATE = 'RTCIceCandidate_';
  const NETWORK_TYPE = 'networkType';
  const RTC_CODEC = 'RTCCodec_';
  const INBOUND_CODEC_MATCH = 'CIT01_';
  const OUTBOUND_CODEC_MATCH = 'COT01_';
  const MIME_TYPE = 'mimeType';
  const REMOTE_INBOUND_RTP = 'remote-inbound-rtp';
  const TOTAL_ROUND_TRIP_TIME = 'totalRoundTripTime';
  const ROUND_TRIP_TIME_MEASUREMENTS = 'roundTripTimeMeasurements';
  const INBOUND_RTP = 'inbound-rtp';
  const OUTBOUND_RTP = 'outbound-rtp';
  const PACKETS_RECEIVED = 'packetsReceived';
  const PACKETS_SENT = 'packetsSent';
  const PACKETS_LOST = 'packetsLost';
  const PACKETS_DISCARDED = 'packetsDiscarded';
  const JITTER_BUFFER_DELAY = 'jitterBufferDelay';
  const JITTER_BUFFER_EMITTED_COUNT = 'jitterBufferEmittedCount';
  const TIMESTAMP = 'timestamp';
  const TYPE = 'type';
  const TRANSPORT = 'transport';
  const TARGET_BIT_RATE = 'targetBitrate';
  const MEDIA_SOURCE = 'media-source';
  const BYTES_RECEIVED = 'bytesReceived';
  const BYTES_SENT = 'bytesSent';
  const SELECTED_CANDIDATE_PAIR_ID = 'selectedCandidatePairId';
  const TOTAL_SAMPLES_DURATION = 'totalSamplesDuration';
  const RTP_RX_STAT = 'rtp-rxstat';
  const RTP_TX_STAT = 'rtp-txstat';
  const BASE_REG_TIMER_MFACTOR = 2;
  const BASE_REG_RETRY_TIMER_VAL_IN_SEC = 30;
  const SEC_TO_MSEC_MFACTOR = 1000;
  const MINUTES_TO_SEC_MFACTOR = 60;
  const REG_RANDOM_T_FACTOR_UPPER_LIMIT = 10000;
  const REG_TRY_BACKUP_TIMER_VAL_IN_SEC = 1200;
  const REG_FAILBACK_429_MAX_RETRIES = 5;
  const REGISTER_UTIL = 'registerDevice';
  const GET_MOBIUS_SERVERS_UTIL = 'getMobiusServers';
  const KEEPALIVE_UTIL = 'sendKeepAlive';
  const FAILBACK_UTIL = 'executeFailback';
  const FAILBACK_429_RETRY_UTIL = 'scheduleFailback429Retry';
  const FAILOVER_UTIL = 'startFailoverTimer';
  const NETWORK_CHANGE_DETECTION_UTIL = 'detectNetworkChange';
  const CALLS_CLEARED_HANDLER_UTIL = 'callsClearedHandler';
  const RECONNECT_UTIL = 'reconnectOnFailure';

  var LOG_PREFIX;
  (function (LOG_PREFIX) {
      LOG_PREFIX["MAIN"] = "CALLING_SDK";
      LOG_PREFIX["FILE"] = "file";
      LOG_PREFIX["METHOD"] = "method";
      LOG_PREFIX["EVENT"] = "event";
      LOG_PREFIX["MESSAGE"] = "message";
      LOG_PREFIX["ERROR"] = "error";
  })(LOG_PREFIX || (LOG_PREFIX = {}));
  var LOGGING_LEVEL;
  (function (LOGGING_LEVEL) {
      LOGGING_LEVEL[LOGGING_LEVEL["error"] = 1] = "error";
      LOGGING_LEVEL[LOGGING_LEVEL["warn"] = 2] = "warn";
      LOGGING_LEVEL[LOGGING_LEVEL["log"] = 3] = "log";
      LOGGING_LEVEL[LOGGING_LEVEL["info"] = 4] = "info";
      LOGGING_LEVEL[LOGGING_LEVEL["trace"] = 5] = "trace";
  })(LOGGING_LEVEL || (LOGGING_LEVEL = {}));
  var LOGGER;
  (function (LOGGER) {
      LOGGER["ERROR"] = "error";
      LOGGER["WARN"] = "warn";
      LOGGER["INFO"] = "info";
      LOGGER["LOG"] = "log";
      LOGGER["TRACE"] = "trace";
  })(LOGGER || (LOGGER = {}));

  let currentLogLevel = LOGGING_LEVEL.error;
  const writeToConsole = (message, level) => {
      switch (level) {
          case LOGGER.INFO:
          case LOGGER.LOG: {
              console.log(message);
              break;
          }
          case LOGGER.WARN: {
              console.warn(message);
              break;
          }
          case LOGGER.ERROR: {
              console.error(message);
              break;
          }
          case LOGGER.TRACE: {
              console.trace(message);
              break;
          }
      }
  };
  const format = (context, level) => {
      const timestamp = new Date().toUTCString();
      return `${REPO_NAME}: ${timestamp}: ${level}: ${LOG_PREFIX.FILE}:${context.file} - ${LOG_PREFIX.METHOD}:${context.method}`;
  };
  const setLogger = (level) => {
      switch (level) {
          case LOGGER.WARN: {
              currentLogLevel = LOGGING_LEVEL.warn;
              break;
          }
          case LOGGER.LOG: {
              currentLogLevel = LOGGING_LEVEL.log;
              break;
          }
          case LOGGER.INFO: {
              currentLogLevel = LOGGING_LEVEL.info;
              break;
          }
          case LOGGER.TRACE: {
              currentLogLevel = LOGGING_LEVEL.trace;
              break;
          }
          default: {
              currentLogLevel = LOGGING_LEVEL.error;
          }
      }
      const message = `Logger initialized for SDK version: ${VERSION} with level: ${currentLogLevel}`;
      writeToConsole(`${format({ file: 'logger.ts', method: 'setLogger' }, '')}  - ${LOG_PREFIX.MESSAGE}:${message}`, LOGGER.INFO);
  };
  const getLogLevel = () => {
      let level;
      switch (currentLogLevel) {
          case LOGGING_LEVEL.warn: {
              level = LOGGER.WARN;
              break;
          }
          case LOGGING_LEVEL.log: {
              level = LOGGER.LOG;
              break;
          }
          case LOGGING_LEVEL.info: {
              level = LOGGER.INFO;
              break;
          }
          case LOGGING_LEVEL.trace: {
              level = LOGGER.TRACE;
              break;
          }
          default: {
              level = LOGGER.ERROR;
          }
      }
      return level;
  };
  const logMessage = (message, context) => {
      if (currentLogLevel >= LOGGING_LEVEL.log) {
          writeToConsole(`${format(context, '[LOG]')} - ${LOG_PREFIX.MESSAGE}:${message}`, LOGGER.LOG);
      }
  };
  const logInfo = (message, context) => {
      if (currentLogLevel >= LOGGING_LEVEL.info) {
          writeToConsole(`${format(context, '[INFO]')} - ${LOG_PREFIX.MESSAGE}:${message}`, LOGGER.INFO);
      }
  };
  const logWarn = (message, context) => {
      if (currentLogLevel >= LOGGING_LEVEL.warn) {
          writeToConsole(`${format(context, '[WARN]')} - ${LOG_PREFIX.MESSAGE}:${message}`, LOGGER.WARN);
      }
  };
  const logTrace = (message, context) => {
      if (currentLogLevel >= LOGGING_LEVEL.trace) {
          writeToConsole(`${format(context, '[TRACE]')} - ${LOG_PREFIX.MESSAGE}:${message}`, LOGGER.TRACE);
      }
  };
  const logError = (error, context) => {
      if (currentLogLevel >= LOGGING_LEVEL.error) {
          writeToConsole(`${format(context, '[ERROR]')} - !${LOG_PREFIX.ERROR}!${LOG_PREFIX.MESSAGE}:${error.message}`, LOGGER.ERROR);
      }
  };
  var log$1 = {
      log: logMessage,
      error: logError,
      info: logInfo,
      warn: logWarn,
      trace: logTrace,
      setLogger,
      getLogLevel,
  };

  var ALLOWED_SERVICES;
  (function (ALLOWED_SERVICES) {
      ALLOWED_SERVICES["MOBIUS"] = "mobius";
      ALLOWED_SERVICES["JANUS"] = "janus";
  })(ALLOWED_SERVICES || (ALLOWED_SERVICES = {}));
  var HTTP_METHODS;
  (function (HTTP_METHODS) {
      HTTP_METHODS["GET"] = "GET";
      HTTP_METHODS["POST"] = "POST";
      HTTP_METHODS["PATCH"] = "PATCH";
      HTTP_METHODS["PUT"] = "PUT";
      HTTP_METHODS["DELETE"] = "DELETE";
  })(HTTP_METHODS || (HTTP_METHODS = {}));
  var MobiusStatus;
  (function (MobiusStatus) {
      MobiusStatus["ACTIVE"] = "active";
      MobiusStatus["DEFAULT"] = "default";
  })(MobiusStatus || (MobiusStatus = {}));
  var CallType;
  (function (CallType) {
      CallType["URI"] = "uri";
      CallType["TEL"] = "tel";
  })(CallType || (CallType = {}));
  var CallDirection;
  (function (CallDirection) {
      CallDirection["INBOUND"] = "inbound";
      CallDirection["OUTBOUND"] = "outbound";
  })(CallDirection || (CallDirection = {}));
  var SORT;
  (function (SORT) {
      SORT["ASC"] = "ASC";
      SORT["DESC"] = "DESC";
      SORT["DEFAULT"] = "DESC";
  })(SORT || (SORT = {}));
  var SORT_BY;
  (function (SORT_BY) {
      SORT_BY["END_TIME"] = "endTime";
      SORT_BY["DEFAULT"] = "endTime";
      SORT_BY["START_TIME"] = "startTime";
  })(SORT_BY || (SORT_BY = {}));
  var ServiceIndicator;
  (function (ServiceIndicator) {
      ServiceIndicator["CALLING"] = "calling";
      ServiceIndicator["CONTACT_CENTER"] = "contactcenter";
  })(ServiceIndicator || (ServiceIndicator = {}));
  var DecodeType;
  (function (DecodeType) {
      DecodeType["PEOPLE"] = "PEOPLE";
      DecodeType["ORGANIZATION"] = "ORGANIZATION";
  })(DecodeType || (DecodeType = {}));

  const BASE64 = 'base64';
  const BEARER = 'bearer';
  const BINARY = 'binary';
  const CONTENT = 'content';
  const DEVICES = 'devices';
  const ITEMS = 'items';
  const KEY = 'key';
  const OBJECT = 'object';
  const PLACEHOLDER_KEY = '$';
  const RAW_REQUEST = 'rawRequest';
  const SETTINGS = 'settings';
  const STATUS_CODE = 'statusCode';
  const SUCCESS_MESSAGE = 'SUCCESS';
  const SUCCESS_STATUS_CODE = 200;
  const TIME = 'time';
  const TOKEN = 'token';
  const TRANSCRIPT = 'transcript';
  const USER = 'user';
  const USERS$1 = 'users';
  const USER_SESSIONS = 'userSessions';
  const VALUES = '_values';
  const XML_TYPE = 'text/xml';
  const XSI_ACTION_ENDPOINT = 'xsiActionsEndpoint';
  const XSI_ACTION_ENDPOINT_ORG_URL_PARAM = 'organizations?callingData=true';
  const SERVICES_ENDPOINT = 'services';
  const INFER_ID_CONSTANT = 'ciscospark://us';

  const CALL_SETTINGS_FILE = 'CallSettings';
  const PEOPLE_ENDPOINT = 'people';
  const USER_ENDPOINT = 'user';
  const ORG_ENDPOINT = 'orgId';
  const DND_ENDPOINT = 'features/doNotDisturb';
  const CF_ENDPOINT = 'features/callForwarding';
  const VM_ENDPOINT = 'features/voicemail';
  const CALL_WAITING_ENDPOINT = 'CallWaiting';
  const XSI_VERSION = 'v2.0';

  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  var platform = {exports: {}};

  /*!
   * Platform.js v1.3.6
   * Copyright 2014-2020 Benjamin Tan
   * Copyright 2011-2013 John-David Dalton
   * Available under MIT license
   */

  (function (module, exports) {
  (function() {

  	  /** Used to determine if values are of the language type `Object`. */
  	  var objectTypes = {
  	    'function': true,
  	    'object': true
  	  };

  	  /** Used as a reference to the global object. */
  	  var root = (objectTypes[typeof window] && window) || this;

  	  /** Detect free variable `exports`. */
  	  var freeExports = exports;

  	  /** Detect free variable `module`. */
  	  var freeModule = module && !module.nodeType && module;

  	  /** Detect free variable `global` from Node.js or Browserified code and use it as `root`. */
  	  var freeGlobal = freeExports && freeModule && typeof commonjsGlobal == 'object' && commonjsGlobal;
  	  if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal)) {
  	    root = freeGlobal;
  	  }

  	  /**
  	   * Used as the maximum length of an array-like object.
  	   * See the [ES6 spec](http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength)
  	   * for more details.
  	   */
  	  var maxSafeInteger = Math.pow(2, 53) - 1;

  	  /** Regular expression to detect Opera. */
  	  var reOpera = /\bOpera/;

  	  /** Used for native method references. */
  	  var objectProto = Object.prototype;

  	  /** Used to check for own properties of an object. */
  	  var hasOwnProperty = objectProto.hasOwnProperty;

  	  /** Used to resolve the internal `[[Class]]` of values. */
  	  var toString = objectProto.toString;

  	  /*--------------------------------------------------------------------------*/

  	  /**
  	   * Capitalizes a string value.
  	   *
  	   * @private
  	   * @param {string} string The string to capitalize.
  	   * @returns {string} The capitalized string.
  	   */
  	  function capitalize(string) {
  	    string = String(string);
  	    return string.charAt(0).toUpperCase() + string.slice(1);
  	  }

  	  /**
  	   * A utility function to clean up the OS name.
  	   *
  	   * @private
  	   * @param {string} os The OS name to clean up.
  	   * @param {string} [pattern] A `RegExp` pattern matching the OS name.
  	   * @param {string} [label] A label for the OS.
  	   */
  	  function cleanupOS(os, pattern, label) {
  	    // Platform tokens are defined at:
  	    // http://msdn.microsoft.com/en-us/library/ms537503(VS.85).aspx
  	    // http://web.archive.org/web/20081122053950/http://msdn.microsoft.com/en-us/library/ms537503(VS.85).aspx
  	    var data = {
  	      '10.0': '10',
  	      '6.4':  '10 Technical Preview',
  	      '6.3':  '8.1',
  	      '6.2':  '8',
  	      '6.1':  'Server 2008 R2 / 7',
  	      '6.0':  'Server 2008 / Vista',
  	      '5.2':  'Server 2003 / XP 64-bit',
  	      '5.1':  'XP',
  	      '5.01': '2000 SP1',
  	      '5.0':  '2000',
  	      '4.0':  'NT',
  	      '4.90': 'ME'
  	    };
  	    // Detect Windows version from platform tokens.
  	    if (pattern && label && /^Win/i.test(os) && !/^Windows Phone /i.test(os) &&
  	        (data = data[/[\d.]+$/.exec(os)])) {
  	      os = 'Windows ' + data;
  	    }
  	    // Correct character case and cleanup string.
  	    os = String(os);

  	    if (pattern && label) {
  	      os = os.replace(RegExp(pattern, 'i'), label);
  	    }

  	    os = format(
  	      os.replace(/ ce$/i, ' CE')
  	        .replace(/\bhpw/i, 'web')
  	        .replace(/\bMacintosh\b/, 'Mac OS')
  	        .replace(/_PowerPC\b/i, ' OS')
  	        .replace(/\b(OS X) [^ \d]+/i, '$1')
  	        .replace(/\bMac (OS X)\b/, '$1')
  	        .replace(/\/(\d)/, ' $1')
  	        .replace(/_/g, '.')
  	        .replace(/(?: BePC|[ .]*fc[ \d.]+)$/i, '')
  	        .replace(/\bx86\.64\b/gi, 'x86_64')
  	        .replace(/\b(Windows Phone) OS\b/, '$1')
  	        .replace(/\b(Chrome OS \w+) [\d.]+\b/, '$1')
  	        .split(' on ')[0]
  	    );

  	    return os;
  	  }

  	  /**
  	   * An iteration utility for arrays and objects.
  	   *
  	   * @private
  	   * @param {Array|Object} object The object to iterate over.
  	   * @param {Function} callback The function called per iteration.
  	   */
  	  function each(object, callback) {
  	    var index = -1,
  	        length = object ? object.length : 0;

  	    if (typeof length == 'number' && length > -1 && length <= maxSafeInteger) {
  	      while (++index < length) {
  	        callback(object[index], index, object);
  	      }
  	    } else {
  	      forOwn(object, callback);
  	    }
  	  }

  	  /**
  	   * Trim and conditionally capitalize string values.
  	   *
  	   * @private
  	   * @param {string} string The string to format.
  	   * @returns {string} The formatted string.
  	   */
  	  function format(string) {
  	    string = trim(string);
  	    return /^(?:webOS|i(?:OS|P))/.test(string)
  	      ? string
  	      : capitalize(string);
  	  }

  	  /**
  	   * Iterates over an object's own properties, executing the `callback` for each.
  	   *
  	   * @private
  	   * @param {Object} object The object to iterate over.
  	   * @param {Function} callback The function executed per own property.
  	   */
  	  function forOwn(object, callback) {
  	    for (var key in object) {
  	      if (hasOwnProperty.call(object, key)) {
  	        callback(object[key], key, object);
  	      }
  	    }
  	  }

  	  /**
  	   * Gets the internal `[[Class]]` of a value.
  	   *
  	   * @private
  	   * @param {*} value The value.
  	   * @returns {string} The `[[Class]]`.
  	   */
  	  function getClassOf(value) {
  	    return value == null
  	      ? capitalize(value)
  	      : toString.call(value).slice(8, -1);
  	  }

  	  /**
  	   * Host objects can return type values that are different from their actual
  	   * data type. The objects we are concerned with usually return non-primitive
  	   * types of "object", "function", or "unknown".
  	   *
  	   * @private
  	   * @param {*} object The owner of the property.
  	   * @param {string} property The property to check.
  	   * @returns {boolean} Returns `true` if the property value is a non-primitive, else `false`.
  	   */
  	  function isHostType(object, property) {
  	    var type = object != null ? typeof object[property] : 'number';
  	    return !/^(?:boolean|number|string|undefined)$/.test(type) &&
  	      (type == 'object' ? !!object[property] : true);
  	  }

  	  /**
  	   * Prepares a string for use in a `RegExp` by making hyphens and spaces optional.
  	   *
  	   * @private
  	   * @param {string} string The string to qualify.
  	   * @returns {string} The qualified string.
  	   */
  	  function qualify(string) {
  	    return String(string).replace(/([ -])(?!$)/g, '$1?');
  	  }

  	  /**
  	   * A bare-bones `Array#reduce` like utility function.
  	   *
  	   * @private
  	   * @param {Array} array The array to iterate over.
  	   * @param {Function} callback The function called per iteration.
  	   * @returns {*} The accumulated result.
  	   */
  	  function reduce(array, callback) {
  	    var accumulator = null;
  	    each(array, function(value, index) {
  	      accumulator = callback(accumulator, value, index, array);
  	    });
  	    return accumulator;
  	  }

  	  /**
  	   * Removes leading and trailing whitespace from a string.
  	   *
  	   * @private
  	   * @param {string} string The string to trim.
  	   * @returns {string} The trimmed string.
  	   */
  	  function trim(string) {
  	    return String(string).replace(/^ +| +$/g, '');
  	  }

  	  /*--------------------------------------------------------------------------*/

  	  /**
  	   * Creates a new platform object.
  	   *
  	   * @memberOf platform
  	   * @param {Object|string} [ua=navigator.userAgent] The user agent string or
  	   *  context object.
  	   * @returns {Object} A platform object.
  	   */
  	  function parse(ua) {

  	    /** The environment context object. */
  	    var context = root;

  	    /** Used to flag when a custom context is provided. */
  	    var isCustomContext = ua && typeof ua == 'object' && getClassOf(ua) != 'String';

  	    // Juggle arguments.
  	    if (isCustomContext) {
  	      context = ua;
  	      ua = null;
  	    }

  	    /** Browser navigator object. */
  	    var nav = context.navigator || {};

  	    /** Browser user agent string. */
  	    var userAgent = nav.userAgent || '';

  	    ua || (ua = userAgent);

  	    /** Used to detect if browser is like Chrome. */
  	    var likeChrome = isCustomContext
  	      ? !!nav.likeChrome
  	      : /\bChrome\b/.test(ua) && !/internal|\n/i.test(toString.toString());

  	    /** Internal `[[Class]]` value shortcuts. */
  	    var objectClass = 'Object',
  	        airRuntimeClass = isCustomContext ? objectClass : 'ScriptBridgingProxyObject',
  	        enviroClass = isCustomContext ? objectClass : 'Environment',
  	        javaClass = (isCustomContext && context.java) ? 'JavaPackage' : getClassOf(context.java),
  	        phantomClass = isCustomContext ? objectClass : 'RuntimeObject';

  	    /** Detect Java environments. */
  	    var java = /\bJava/.test(javaClass) && context.java;

  	    /** Detect Rhino. */
  	    var rhino = java && getClassOf(context.environment) == enviroClass;

  	    /** A character to represent alpha. */
  	    var alpha = java ? 'a' : '\u03b1';

  	    /** A character to represent beta. */
  	    var beta = java ? 'b' : '\u03b2';

  	    /** Browser document object. */
  	    var doc = context.document || {};

  	    /**
  	     * Detect Opera browser (Presto-based).
  	     * http://www.howtocreate.co.uk/operaStuff/operaObject.html
  	     * http://dev.opera.com/articles/view/opera-mini-web-content-authoring-guidelines/#operamini
  	     */
  	    var opera = context.operamini || context.opera;

  	    /** Opera `[[Class]]`. */
  	    var operaClass = reOpera.test(operaClass = (isCustomContext && opera) ? opera['[[Class]]'] : getClassOf(opera))
  	      ? operaClass
  	      : (opera = null);

  	    /*------------------------------------------------------------------------*/

  	    /** Temporary variable used over the script's lifetime. */
  	    var data;

  	    /** The CPU architecture. */
  	    var arch = ua;

  	    /** Platform description array. */
  	    var description = [];

  	    /** Platform alpha/beta indicator. */
  	    var prerelease = null;

  	    /** A flag to indicate that environment features should be used to resolve the platform. */
  	    var useFeatures = ua == userAgent;

  	    /** The browser/environment version. */
  	    var version = useFeatures && opera && typeof opera.version == 'function' && opera.version();

  	    /** A flag to indicate if the OS ends with "/ Version" */
  	    var isSpecialCasedOS;

  	    /* Detectable layout engines (order is important). */
  	    var layout = getLayout([
  	      { 'label': 'EdgeHTML', 'pattern': 'Edge' },
  	      'Trident',
  	      { 'label': 'WebKit', 'pattern': 'AppleWebKit' },
  	      'iCab',
  	      'Presto',
  	      'NetFront',
  	      'Tasman',
  	      'KHTML',
  	      'Gecko'
  	    ]);

  	    /* Detectable browser names (order is important). */
  	    var name = getName([
  	      'Adobe AIR',
  	      'Arora',
  	      'Avant Browser',
  	      'Breach',
  	      'Camino',
  	      'Electron',
  	      'Epiphany',
  	      'Fennec',
  	      'Flock',
  	      'Galeon',
  	      'GreenBrowser',
  	      'iCab',
  	      'Iceweasel',
  	      'K-Meleon',
  	      'Konqueror',
  	      'Lunascape',
  	      'Maxthon',
  	      { 'label': 'Microsoft Edge', 'pattern': '(?:Edge|Edg|EdgA|EdgiOS)' },
  	      'Midori',
  	      'Nook Browser',
  	      'PaleMoon',
  	      'PhantomJS',
  	      'Raven',
  	      'Rekonq',
  	      'RockMelt',
  	      { 'label': 'Samsung Internet', 'pattern': 'SamsungBrowser' },
  	      'SeaMonkey',
  	      { 'label': 'Silk', 'pattern': '(?:Cloud9|Silk-Accelerated)' },
  	      'Sleipnir',
  	      'SlimBrowser',
  	      { 'label': 'SRWare Iron', 'pattern': 'Iron' },
  	      'Sunrise',
  	      'Swiftfox',
  	      'Vivaldi',
  	      'Waterfox',
  	      'WebPositive',
  	      { 'label': 'Yandex Browser', 'pattern': 'YaBrowser' },
  	      { 'label': 'UC Browser', 'pattern': 'UCBrowser' },
  	      'Opera Mini',
  	      { 'label': 'Opera Mini', 'pattern': 'OPiOS' },
  	      'Opera',
  	      { 'label': 'Opera', 'pattern': 'OPR' },
  	      'Chromium',
  	      'Chrome',
  	      { 'label': 'Chrome', 'pattern': '(?:HeadlessChrome)' },
  	      { 'label': 'Chrome Mobile', 'pattern': '(?:CriOS|CrMo)' },
  	      { 'label': 'Firefox', 'pattern': '(?:Firefox|Minefield)' },
  	      { 'label': 'Firefox for iOS', 'pattern': 'FxiOS' },
  	      { 'label': 'IE', 'pattern': 'IEMobile' },
  	      { 'label': 'IE', 'pattern': 'MSIE' },
  	      'Safari'
  	    ]);

  	    /* Detectable products (order is important). */
  	    var product = getProduct([
  	      { 'label': 'BlackBerry', 'pattern': 'BB10' },
  	      'BlackBerry',
  	      { 'label': 'Galaxy S', 'pattern': 'GT-I9000' },
  	      { 'label': 'Galaxy S2', 'pattern': 'GT-I9100' },
  	      { 'label': 'Galaxy S3', 'pattern': 'GT-I9300' },
  	      { 'label': 'Galaxy S4', 'pattern': 'GT-I9500' },
  	      { 'label': 'Galaxy S5', 'pattern': 'SM-G900' },
  	      { 'label': 'Galaxy S6', 'pattern': 'SM-G920' },
  	      { 'label': 'Galaxy S6 Edge', 'pattern': 'SM-G925' },
  	      { 'label': 'Galaxy S7', 'pattern': 'SM-G930' },
  	      { 'label': 'Galaxy S7 Edge', 'pattern': 'SM-G935' },
  	      'Google TV',
  	      'Lumia',
  	      'iPad',
  	      'iPod',
  	      'iPhone',
  	      'Kindle',
  	      { 'label': 'Kindle Fire', 'pattern': '(?:Cloud9|Silk-Accelerated)' },
  	      'Nexus',
  	      'Nook',
  	      'PlayBook',
  	      'PlayStation Vita',
  	      'PlayStation',
  	      'TouchPad',
  	      'Transformer',
  	      { 'label': 'Wii U', 'pattern': 'WiiU' },
  	      'Wii',
  	      'Xbox One',
  	      { 'label': 'Xbox 360', 'pattern': 'Xbox' },
  	      'Xoom'
  	    ]);

  	    /* Detectable manufacturers. */
  	    var manufacturer = getManufacturer({
  	      'Apple': { 'iPad': 1, 'iPhone': 1, 'iPod': 1 },
  	      'Alcatel': {},
  	      'Archos': {},
  	      'Amazon': { 'Kindle': 1, 'Kindle Fire': 1 },
  	      'Asus': { 'Transformer': 1 },
  	      'Barnes & Noble': { 'Nook': 1 },
  	      'BlackBerry': { 'PlayBook': 1 },
  	      'Google': { 'Google TV': 1, 'Nexus': 1 },
  	      'HP': { 'TouchPad': 1 },
  	      'HTC': {},
  	      'Huawei': {},
  	      'Lenovo': {},
  	      'LG': {},
  	      'Microsoft': { 'Xbox': 1, 'Xbox One': 1 },
  	      'Motorola': { 'Xoom': 1 },
  	      'Nintendo': { 'Wii U': 1,  'Wii': 1 },
  	      'Nokia': { 'Lumia': 1 },
  	      'Oppo': {},
  	      'Samsung': { 'Galaxy S': 1, 'Galaxy S2': 1, 'Galaxy S3': 1, 'Galaxy S4': 1 },
  	      'Sony': { 'PlayStation': 1, 'PlayStation Vita': 1 },
  	      'Xiaomi': { 'Mi': 1, 'Redmi': 1 }
  	    });

  	    /* Detectable operating systems (order is important). */
  	    var os = getOS([
  	      'Windows Phone',
  	      'KaiOS',
  	      'Android',
  	      'CentOS',
  	      { 'label': 'Chrome OS', 'pattern': 'CrOS' },
  	      'Debian',
  	      { 'label': 'DragonFly BSD', 'pattern': 'DragonFly' },
  	      'Fedora',
  	      'FreeBSD',
  	      'Gentoo',
  	      'Haiku',
  	      'Kubuntu',
  	      'Linux Mint',
  	      'OpenBSD',
  	      'Red Hat',
  	      'SuSE',
  	      'Ubuntu',
  	      'Xubuntu',
  	      'Cygwin',
  	      'Symbian OS',
  	      'hpwOS',
  	      'webOS ',
  	      'webOS',
  	      'Tablet OS',
  	      'Tizen',
  	      'Linux',
  	      'Mac OS X',
  	      'Macintosh',
  	      'Mac',
  	      'Windows 98;',
  	      'Windows '
  	    ]);

  	    /*------------------------------------------------------------------------*/

  	    /**
  	     * Picks the layout engine from an array of guesses.
  	     *
  	     * @private
  	     * @param {Array} guesses An array of guesses.
  	     * @returns {null|string} The detected layout engine.
  	     */
  	    function getLayout(guesses) {
  	      return reduce(guesses, function(result, guess) {
  	        return result || RegExp('\\b' + (
  	          guess.pattern || qualify(guess)
  	        ) + '\\b', 'i').exec(ua) && (guess.label || guess);
  	      });
  	    }

  	    /**
  	     * Picks the manufacturer from an array of guesses.
  	     *
  	     * @private
  	     * @param {Array} guesses An object of guesses.
  	     * @returns {null|string} The detected manufacturer.
  	     */
  	    function getManufacturer(guesses) {
  	      return reduce(guesses, function(result, value, key) {
  	        // Lookup the manufacturer by product or scan the UA for the manufacturer.
  	        return result || (
  	          value[product] ||
  	          value[/^[a-z]+(?: +[a-z]+\b)*/i.exec(product)] ||
  	          RegExp('\\b' + qualify(key) + '(?:\\b|\\w*\\d)', 'i').exec(ua)
  	        ) && key;
  	      });
  	    }

  	    /**
  	     * Picks the browser name from an array of guesses.
  	     *
  	     * @private
  	     * @param {Array} guesses An array of guesses.
  	     * @returns {null|string} The detected browser name.
  	     */
  	    function getName(guesses) {
  	      return reduce(guesses, function(result, guess) {
  	        return result || RegExp('\\b' + (
  	          guess.pattern || qualify(guess)
  	        ) + '\\b', 'i').exec(ua) && (guess.label || guess);
  	      });
  	    }

  	    /**
  	     * Picks the OS name from an array of guesses.
  	     *
  	     * @private
  	     * @param {Array} guesses An array of guesses.
  	     * @returns {null|string} The detected OS name.
  	     */
  	    function getOS(guesses) {
  	      return reduce(guesses, function(result, guess) {
  	        var pattern = guess.pattern || qualify(guess);
  	        if (!result && (result =
  	              RegExp('\\b' + pattern + '(?:/[\\d.]+|[ \\w.]*)', 'i').exec(ua)
  	            )) {
  	          result = cleanupOS(result, pattern, guess.label || guess);
  	        }
  	        return result;
  	      });
  	    }

  	    /**
  	     * Picks the product name from an array of guesses.
  	     *
  	     * @private
  	     * @param {Array} guesses An array of guesses.
  	     * @returns {null|string} The detected product name.
  	     */
  	    function getProduct(guesses) {
  	      return reduce(guesses, function(result, guess) {
  	        var pattern = guess.pattern || qualify(guess);
  	        if (!result && (result =
  	              RegExp('\\b' + pattern + ' *\\d+[.\\w_]*', 'i').exec(ua) ||
  	              RegExp('\\b' + pattern + ' *\\w+-[\\w]*', 'i').exec(ua) ||
  	              RegExp('\\b' + pattern + '(?:; *(?:[a-z]+[_-])?[a-z]+\\d+|[^ ();-]*)', 'i').exec(ua)
  	            )) {
  	          // Split by forward slash and append product version if needed.
  	          if ((result = String((guess.label && !RegExp(pattern, 'i').test(guess.label)) ? guess.label : result).split('/'))[1] && !/[\d.]+/.test(result[0])) {
  	            result[0] += ' ' + result[1];
  	          }
  	          // Correct character case and cleanup string.
  	          guess = guess.label || guess;
  	          result = format(result[0]
  	            .replace(RegExp(pattern, 'i'), guess)
  	            .replace(RegExp('; *(?:' + guess + '[_-])?', 'i'), ' ')
  	            .replace(RegExp('(' + guess + ')[-_.]?(\\w)', 'i'), '$1 $2'));
  	        }
  	        return result;
  	      });
  	    }

  	    /**
  	     * Resolves the version using an array of UA patterns.
  	     *
  	     * @private
  	     * @param {Array} patterns An array of UA patterns.
  	     * @returns {null|string} The detected version.
  	     */
  	    function getVersion(patterns) {
  	      return reduce(patterns, function(result, pattern) {
  	        return result || (RegExp(pattern +
  	          '(?:-[\\d.]+/|(?: for [\\w-]+)?[ /-])([\\d.]+[^ ();/_-]*)', 'i').exec(ua) || 0)[1] || null;
  	      });
  	    }

  	    /**
  	     * Returns `platform.description` when the platform object is coerced to a string.
  	     *
  	     * @name toString
  	     * @memberOf platform
  	     * @returns {string} Returns `platform.description` if available, else an empty string.
  	     */
  	    function toStringPlatform() {
  	      return this.description || '';
  	    }

  	    /*------------------------------------------------------------------------*/

  	    // Convert layout to an array so we can add extra details.
  	    layout && (layout = [layout]);

  	    // Detect Android products.
  	    // Browsers on Android devices typically provide their product IDS after "Android;"
  	    // up to "Build" or ") AppleWebKit".
  	    // Example:
  	    // "Mozilla/5.0 (Linux; Android 8.1.0; Moto G (5) Plus) AppleWebKit/537.36
  	    // (KHTML, like Gecko) Chrome/70.0.3538.80 Mobile Safari/537.36"
  	    if (/\bAndroid\b/.test(os) && !product &&
  	        (data = /\bAndroid[^;]*;(.*?)(?:Build|\) AppleWebKit)\b/i.exec(ua))) {
  	      product = trim(data[1])
  	        // Replace any language codes (eg. "en-US").
  	        .replace(/^[a-z]{2}-[a-z]{2};\s*/i, '')
  	        || null;
  	    }
  	    // Detect product names that contain their manufacturer's name.
  	    if (manufacturer && !product) {
  	      product = getProduct([manufacturer]);
  	    } else if (manufacturer && product) {
  	      product = product
  	        .replace(RegExp('^(' + qualify(manufacturer) + ')[-_.\\s]', 'i'), manufacturer + ' ')
  	        .replace(RegExp('^(' + qualify(manufacturer) + ')[-_.]?(\\w)', 'i'), manufacturer + ' $2');
  	    }
  	    // Clean up Google TV.
  	    if ((data = /\bGoogle TV\b/.exec(product))) {
  	      product = data[0];
  	    }
  	    // Detect simulators.
  	    if (/\bSimulator\b/i.test(ua)) {
  	      product = (product ? product + ' ' : '') + 'Simulator';
  	    }
  	    // Detect Opera Mini 8+ running in Turbo/Uncompressed mode on iOS.
  	    if (name == 'Opera Mini' && /\bOPiOS\b/.test(ua)) {
  	      description.push('running in Turbo/Uncompressed mode');
  	    }
  	    // Detect IE Mobile 11.
  	    if (name == 'IE' && /\blike iPhone OS\b/.test(ua)) {
  	      data = parse(ua.replace(/like iPhone OS/, ''));
  	      manufacturer = data.manufacturer;
  	      product = data.product;
  	    }
  	    // Detect iOS.
  	    else if (/^iP/.test(product)) {
  	      name || (name = 'Safari');
  	      os = 'iOS' + ((data = / OS ([\d_]+)/i.exec(ua))
  	        ? ' ' + data[1].replace(/_/g, '.')
  	        : '');
  	    }
  	    // Detect Kubuntu.
  	    else if (name == 'Konqueror' && /^Linux\b/i.test(os)) {
  	      os = 'Kubuntu';
  	    }
  	    // Detect Android browsers.
  	    else if ((manufacturer && manufacturer != 'Google' &&
  	        ((/Chrome/.test(name) && !/\bMobile Safari\b/i.test(ua)) || /\bVita\b/.test(product))) ||
  	        (/\bAndroid\b/.test(os) && /^Chrome/.test(name) && /\bVersion\//i.test(ua))) {
  	      name = 'Android Browser';
  	      os = /\bAndroid\b/.test(os) ? os : 'Android';
  	    }
  	    // Detect Silk desktop/accelerated modes.
  	    else if (name == 'Silk') {
  	      if (!/\bMobi/i.test(ua)) {
  	        os = 'Android';
  	        description.unshift('desktop mode');
  	      }
  	      if (/Accelerated *= *true/i.test(ua)) {
  	        description.unshift('accelerated');
  	      }
  	    }
  	    // Detect UC Browser speed mode.
  	    else if (name == 'UC Browser' && /\bUCWEB\b/.test(ua)) {
  	      description.push('speed mode');
  	    }
  	    // Detect PaleMoon identifying as Firefox.
  	    else if (name == 'PaleMoon' && (data = /\bFirefox\/([\d.]+)\b/.exec(ua))) {
  	      description.push('identifying as Firefox ' + data[1]);
  	    }
  	    // Detect Firefox OS and products running Firefox.
  	    else if (name == 'Firefox' && (data = /\b(Mobile|Tablet|TV)\b/i.exec(ua))) {
  	      os || (os = 'Firefox OS');
  	      product || (product = data[1]);
  	    }
  	    // Detect false positives for Firefox/Safari.
  	    else if (!name || (data = !/\bMinefield\b/i.test(ua) && /\b(?:Firefox|Safari)\b/.exec(name))) {
  	      // Escape the `/` for Firefox 1.
  	      if (name && !product && /[\/,]|^[^(]+?\)/.test(ua.slice(ua.indexOf(data + '/') + 8))) {
  	        // Clear name of false positives.
  	        name = null;
  	      }
  	      // Reassign a generic name.
  	      if ((data = product || manufacturer || os) &&
  	          (product || manufacturer || /\b(?:Android|Symbian OS|Tablet OS|webOS)\b/.test(os))) {
  	        name = /[a-z]+(?: Hat)?/i.exec(/\bAndroid\b/.test(os) ? os : data) + ' Browser';
  	      }
  	    }
  	    // Add Chrome version to description for Electron.
  	    else if (name == 'Electron' && (data = (/\bChrome\/([\d.]+)\b/.exec(ua) || 0)[1])) {
  	      description.push('Chromium ' + data);
  	    }
  	    // Detect non-Opera (Presto-based) versions (order is important).
  	    if (!version) {
  	      version = getVersion([
  	        '(?:Cloud9|CriOS|CrMo|Edge|Edg|EdgA|EdgiOS|FxiOS|HeadlessChrome|IEMobile|Iron|Opera ?Mini|OPiOS|OPR|Raven|SamsungBrowser|Silk(?!/[\\d.]+$)|UCBrowser|YaBrowser)',
  	        'Version',
  	        qualify(name),
  	        '(?:Firefox|Minefield|NetFront)'
  	      ]);
  	    }
  	    // Detect stubborn layout engines.
  	    if ((data =
  	          layout == 'iCab' && parseFloat(version) > 3 && 'WebKit' ||
  	          /\bOpera\b/.test(name) && (/\bOPR\b/.test(ua) ? 'Blink' : 'Presto') ||
  	          /\b(?:Midori|Nook|Safari)\b/i.test(ua) && !/^(?:Trident|EdgeHTML)$/.test(layout) && 'WebKit' ||
  	          !layout && /\bMSIE\b/i.test(ua) && (os == 'Mac OS' ? 'Tasman' : 'Trident') ||
  	          layout == 'WebKit' && /\bPlayStation\b(?! Vita\b)/i.test(name) && 'NetFront'
  	        )) {
  	      layout = [data];
  	    }
  	    // Detect Windows Phone 7 desktop mode.
  	    if (name == 'IE' && (data = (/; *(?:XBLWP|ZuneWP)(\d+)/i.exec(ua) || 0)[1])) {
  	      name += ' Mobile';
  	      os = 'Windows Phone ' + (/\+$/.test(data) ? data : data + '.x');
  	      description.unshift('desktop mode');
  	    }
  	    // Detect Windows Phone 8.x desktop mode.
  	    else if (/\bWPDesktop\b/i.test(ua)) {
  	      name = 'IE Mobile';
  	      os = 'Windows Phone 8.x';
  	      description.unshift('desktop mode');
  	      version || (version = (/\brv:([\d.]+)/.exec(ua) || 0)[1]);
  	    }
  	    // Detect IE 11 identifying as other browsers.
  	    else if (name != 'IE' && layout == 'Trident' && (data = /\brv:([\d.]+)/.exec(ua))) {
  	      if (name) {
  	        description.push('identifying as ' + name + (version ? ' ' + version : ''));
  	      }
  	      name = 'IE';
  	      version = data[1];
  	    }
  	    // Leverage environment features.
  	    if (useFeatures) {
  	      // Detect server-side environments.
  	      // Rhino has a global function while others have a global object.
  	      if (isHostType(context, 'global')) {
  	        if (java) {
  	          data = java.lang.System;
  	          arch = data.getProperty('os.arch');
  	          os = os || data.getProperty('os.name') + ' ' + data.getProperty('os.version');
  	        }
  	        if (rhino) {
  	          try {
  	            version = context.require('ringo/engine').version.join('.');
  	            name = 'RingoJS';
  	          } catch(e) {
  	            if ((data = context.system) && data.global.system == context.system) {
  	              name = 'Narwhal';
  	              os || (os = data[0].os || null);
  	            }
  	          }
  	          if (!name) {
  	            name = 'Rhino';
  	          }
  	        }
  	        else if (
  	          typeof context.process == 'object' && !context.process.browser &&
  	          (data = context.process)
  	        ) {
  	          if (typeof data.versions == 'object') {
  	            if (typeof data.versions.electron == 'string') {
  	              description.push('Node ' + data.versions.node);
  	              name = 'Electron';
  	              version = data.versions.electron;
  	            } else if (typeof data.versions.nw == 'string') {
  	              description.push('Chromium ' + version, 'Node ' + data.versions.node);
  	              name = 'NW.js';
  	              version = data.versions.nw;
  	            }
  	          }
  	          if (!name) {
  	            name = 'Node.js';
  	            arch = data.arch;
  	            os = data.platform;
  	            version = /[\d.]+/.exec(data.version);
  	            version = version ? version[0] : null;
  	          }
  	        }
  	      }
  	      // Detect Adobe AIR.
  	      else if (getClassOf((data = context.runtime)) == airRuntimeClass) {
  	        name = 'Adobe AIR';
  	        os = data.flash.system.Capabilities.os;
  	      }
  	      // Detect PhantomJS.
  	      else if (getClassOf((data = context.phantom)) == phantomClass) {
  	        name = 'PhantomJS';
  	        version = (data = data.version || null) && (data.major + '.' + data.minor + '.' + data.patch);
  	      }
  	      // Detect IE compatibility modes.
  	      else if (typeof doc.documentMode == 'number' && (data = /\bTrident\/(\d+)/i.exec(ua))) {
  	        // We're in compatibility mode when the Trident version + 4 doesn't
  	        // equal the document mode.
  	        version = [version, doc.documentMode];
  	        if ((data = +data[1] + 4) != version[1]) {
  	          description.push('IE ' + version[1] + ' mode');
  	          layout && (layout[1] = '');
  	          version[1] = data;
  	        }
  	        version = name == 'IE' ? String(version[1].toFixed(1)) : version[0];
  	      }
  	      // Detect IE 11 masking as other browsers.
  	      else if (typeof doc.documentMode == 'number' && /^(?:Chrome|Firefox)\b/.test(name)) {
  	        description.push('masking as ' + name + ' ' + version);
  	        name = 'IE';
  	        version = '11.0';
  	        layout = ['Trident'];
  	        os = 'Windows';
  	      }
  	      os = os && format(os);
  	    }
  	    // Detect prerelease phases.
  	    if (version && (data =
  	          /(?:[ab]|dp|pre|[ab]\d+pre)(?:\d+\+?)?$/i.exec(version) ||
  	          /(?:alpha|beta)(?: ?\d)?/i.exec(ua + ';' + (useFeatures && nav.appMinorVersion)) ||
  	          /\bMinefield\b/i.test(ua) && 'a'
  	        )) {
  	      prerelease = /b/i.test(data) ? 'beta' : 'alpha';
  	      version = version.replace(RegExp(data + '\\+?$'), '') +
  	        (prerelease == 'beta' ? beta : alpha) + (/\d+\+?/.exec(data) || '');
  	    }
  	    // Detect Firefox Mobile.
  	    if (name == 'Fennec' || name == 'Firefox' && /\b(?:Android|Firefox OS|KaiOS)\b/.test(os)) {
  	      name = 'Firefox Mobile';
  	    }
  	    // Obscure Maxthon's unreliable version.
  	    else if (name == 'Maxthon' && version) {
  	      version = version.replace(/\.[\d.]+/, '.x');
  	    }
  	    // Detect Xbox 360 and Xbox One.
  	    else if (/\bXbox\b/i.test(product)) {
  	      if (product == 'Xbox 360') {
  	        os = null;
  	      }
  	      if (product == 'Xbox 360' && /\bIEMobile\b/.test(ua)) {
  	        description.unshift('mobile mode');
  	      }
  	    }
  	    // Add mobile postfix.
  	    else if ((/^(?:Chrome|IE|Opera)$/.test(name) || name && !product && !/Browser|Mobi/.test(name)) &&
  	        (os == 'Windows CE' || /Mobi/i.test(ua))) {
  	      name += ' Mobile';
  	    }
  	    // Detect IE platform preview.
  	    else if (name == 'IE' && useFeatures) {
  	      try {
  	        if (context.external === null) {
  	          description.unshift('platform preview');
  	        }
  	      } catch(e) {
  	        description.unshift('embedded');
  	      }
  	    }
  	    // Detect BlackBerry OS version.
  	    // http://docs.blackberry.com/en/developers/deliverables/18169/HTTP_headers_sent_by_BB_Browser_1234911_11.jsp
  	    else if ((/\bBlackBerry\b/.test(product) || /\bBB10\b/.test(ua)) && (data =
  	          (RegExp(product.replace(/ +/g, ' *') + '/([.\\d]+)', 'i').exec(ua) || 0)[1] ||
  	          version
  	        )) {
  	      data = [data, /BB10/.test(ua)];
  	      os = (data[1] ? (product = null, manufacturer = 'BlackBerry') : 'Device Software') + ' ' + data[0];
  	      version = null;
  	    }
  	    // Detect Opera identifying/masking itself as another browser.
  	    // http://www.opera.com/support/kb/view/843/
  	    else if (this != forOwn && product != 'Wii' && (
  	          (useFeatures && opera) ||
  	          (/Opera/.test(name) && /\b(?:MSIE|Firefox)\b/i.test(ua)) ||
  	          (name == 'Firefox' && /\bOS X (?:\d+\.){2,}/.test(os)) ||
  	          (name == 'IE' && (
  	            (os && !/^Win/.test(os) && version > 5.5) ||
  	            /\bWindows XP\b/.test(os) && version > 8 ||
  	            version == 8 && !/\bTrident\b/.test(ua)
  	          ))
  	        ) && !reOpera.test((data = parse.call(forOwn, ua.replace(reOpera, '') + ';'))) && data.name) {
  	      // When "identifying", the UA contains both Opera and the other browser's name.
  	      data = 'ing as ' + data.name + ((data = data.version) ? ' ' + data : '');
  	      if (reOpera.test(name)) {
  	        if (/\bIE\b/.test(data) && os == 'Mac OS') {
  	          os = null;
  	        }
  	        data = 'identify' + data;
  	      }
  	      // When "masking", the UA contains only the other browser's name.
  	      else {
  	        data = 'mask' + data;
  	        if (operaClass) {
  	          name = format(operaClass.replace(/([a-z])([A-Z])/g, '$1 $2'));
  	        } else {
  	          name = 'Opera';
  	        }
  	        if (/\bIE\b/.test(data)) {
  	          os = null;
  	        }
  	        if (!useFeatures) {
  	          version = null;
  	        }
  	      }
  	      layout = ['Presto'];
  	      description.push(data);
  	    }
  	    // Detect WebKit Nightly and approximate Chrome/Safari versions.
  	    if ((data = (/\bAppleWebKit\/([\d.]+\+?)/i.exec(ua) || 0)[1])) {
  	      // Correct build number for numeric comparison.
  	      // (e.g. "532.5" becomes "532.05")
  	      data = [parseFloat(data.replace(/\.(\d)$/, '.0$1')), data];
  	      // Nightly builds are postfixed with a "+".
  	      if (name == 'Safari' && data[1].slice(-1) == '+') {
  	        name = 'WebKit Nightly';
  	        prerelease = 'alpha';
  	        version = data[1].slice(0, -1);
  	      }
  	      // Clear incorrect browser versions.
  	      else if (version == data[1] ||
  	          version == (data[2] = (/\bSafari\/([\d.]+\+?)/i.exec(ua) || 0)[1])) {
  	        version = null;
  	      }
  	      // Use the full Chrome version when available.
  	      data[1] = (/\b(?:Headless)?Chrome\/([\d.]+)/i.exec(ua) || 0)[1];
  	      // Detect Blink layout engine.
  	      if (data[0] == 537.36 && data[2] == 537.36 && parseFloat(data[1]) >= 28 && layout == 'WebKit') {
  	        layout = ['Blink'];
  	      }
  	      // Detect JavaScriptCore.
  	      // http://stackoverflow.com/questions/6768474/how-can-i-detect-which-javascript-engine-v8-or-jsc-is-used-at-runtime-in-androi
  	      if (!useFeatures || (!likeChrome && !data[1])) {
  	        layout && (layout[1] = 'like Safari');
  	        data = (data = data[0], data < 400 ? 1 : data < 500 ? 2 : data < 526 ? 3 : data < 533 ? 4 : data < 534 ? '4+' : data < 535 ? 5 : data < 537 ? 6 : data < 538 ? 7 : data < 601 ? 8 : data < 602 ? 9 : data < 604 ? 10 : data < 606 ? 11 : data < 608 ? 12 : '12');
  	      } else {
  	        layout && (layout[1] = 'like Chrome');
  	        data = data[1] || (data = data[0], data < 530 ? 1 : data < 532 ? 2 : data < 532.05 ? 3 : data < 533 ? 4 : data < 534.03 ? 5 : data < 534.07 ? 6 : data < 534.10 ? 7 : data < 534.13 ? 8 : data < 534.16 ? 9 : data < 534.24 ? 10 : data < 534.30 ? 11 : data < 535.01 ? 12 : data < 535.02 ? '13+' : data < 535.07 ? 15 : data < 535.11 ? 16 : data < 535.19 ? 17 : data < 536.05 ? 18 : data < 536.10 ? 19 : data < 537.01 ? 20 : data < 537.11 ? '21+' : data < 537.13 ? 23 : data < 537.18 ? 24 : data < 537.24 ? 25 : data < 537.36 ? 26 : layout != 'Blink' ? '27' : '28');
  	      }
  	      // Add the postfix of ".x" or "+" for approximate versions.
  	      layout && (layout[1] += ' ' + (data += typeof data == 'number' ? '.x' : /[.+]/.test(data) ? '' : '+'));
  	      // Obscure version for some Safari 1-2 releases.
  	      if (name == 'Safari' && (!version || parseInt(version) > 45)) {
  	        version = data;
  	      } else if (name == 'Chrome' && /\bHeadlessChrome/i.test(ua)) {
  	        description.unshift('headless');
  	      }
  	    }
  	    // Detect Opera desktop modes.
  	    if (name == 'Opera' &&  (data = /\bzbov|zvav$/.exec(os))) {
  	      name += ' ';
  	      description.unshift('desktop mode');
  	      if (data == 'zvav') {
  	        name += 'Mini';
  	        version = null;
  	      } else {
  	        name += 'Mobile';
  	      }
  	      os = os.replace(RegExp(' *' + data + '$'), '');
  	    }
  	    // Detect Chrome desktop mode.
  	    else if (name == 'Safari' && /\bChrome\b/.exec(layout && layout[1])) {
  	      description.unshift('desktop mode');
  	      name = 'Chrome Mobile';
  	      version = null;

  	      if (/\bOS X\b/.test(os)) {
  	        manufacturer = 'Apple';
  	        os = 'iOS 4.3+';
  	      } else {
  	        os = null;
  	      }
  	    }
  	    // Newer versions of SRWare Iron uses the Chrome tag to indicate its version number.
  	    else if (/\bSRWare Iron\b/.test(name) && !version) {
  	      version = getVersion('Chrome');
  	    }
  	    // Strip incorrect OS versions.
  	    if (version && version.indexOf((data = /[\d.]+$/.exec(os))) == 0 &&
  	        ua.indexOf('/' + data + '-') > -1) {
  	      os = trim(os.replace(data, ''));
  	    }
  	    // Ensure OS does not include the browser name.
  	    if (os && os.indexOf(name) != -1 && !RegExp(name + ' OS').test(os)) {
  	      os = os.replace(RegExp(' *' + qualify(name) + ' *'), '');
  	    }
  	    // Add layout engine.
  	    if (layout && !/\b(?:Avant|Nook)\b/.test(name) && (
  	        /Browser|Lunascape|Maxthon/.test(name) ||
  	        name != 'Safari' && /^iOS/.test(os) && /\bSafari\b/.test(layout[1]) ||
  	        /^(?:Adobe|Arora|Breach|Midori|Opera|Phantom|Rekonq|Rock|Samsung Internet|Sleipnir|SRWare Iron|Vivaldi|Web)/.test(name) && layout[1])) {
  	      // Don't add layout details to description if they are falsey.
  	      (data = layout[layout.length - 1]) && description.push(data);
  	    }
  	    // Combine contextual information.
  	    if (description.length) {
  	      description = ['(' + description.join('; ') + ')'];
  	    }
  	    // Append manufacturer to description.
  	    if (manufacturer && product && product.indexOf(manufacturer) < 0) {
  	      description.push('on ' + manufacturer);
  	    }
  	    // Append product to description.
  	    if (product) {
  	      description.push((/^on /.test(description[description.length - 1]) ? '' : 'on ') + product);
  	    }
  	    // Parse the OS into an object.
  	    if (os) {
  	      data = / ([\d.+]+)$/.exec(os);
  	      isSpecialCasedOS = data && os.charAt(os.length - data[0].length - 1) == '/';
  	      os = {
  	        'architecture': 32,
  	        'family': (data && !isSpecialCasedOS) ? os.replace(data[0], '') : os,
  	        'version': data ? data[1] : null,
  	        'toString': function() {
  	          var version = this.version;
  	          return this.family + ((version && !isSpecialCasedOS) ? ' ' + version : '') + (this.architecture == 64 ? ' 64-bit' : '');
  	        }
  	      };
  	    }
  	    // Add browser/OS architecture.
  	    if ((data = /\b(?:AMD|IA|Win|WOW|x86_|x)64\b/i.exec(arch)) && !/\bi686\b/i.test(arch)) {
  	      if (os) {
  	        os.architecture = 64;
  	        os.family = os.family.replace(RegExp(' *' + data), '');
  	      }
  	      if (
  	          name && (/\bWOW64\b/i.test(ua) ||
  	          (useFeatures && /\w(?:86|32)$/.test(nav.cpuClass || nav.platform) && !/\bWin64; x64\b/i.test(ua)))
  	      ) {
  	        description.unshift('32-bit');
  	      }
  	    }
  	    // Chrome 39 and above on OS X is always 64-bit.
  	    else if (
  	        os && /^OS X/.test(os.family) &&
  	        name == 'Chrome' && parseFloat(version) >= 39
  	    ) {
  	      os.architecture = 64;
  	    }

  	    ua || (ua = null);

  	    /*------------------------------------------------------------------------*/

  	    /**
  	     * The platform object.
  	     *
  	     * @name platform
  	     * @type Object
  	     */
  	    var platform = {};

  	    /**
  	     * The platform description.
  	     *
  	     * @memberOf platform
  	     * @type string|null
  	     */
  	    platform.description = ua;

  	    /**
  	     * The name of the browser's layout engine.
  	     *
  	     * The list of common layout engines include:
  	     * "Blink", "EdgeHTML", "Gecko", "Trident" and "WebKit"
  	     *
  	     * @memberOf platform
  	     * @type string|null
  	     */
  	    platform.layout = layout && layout[0];

  	    /**
  	     * The name of the product's manufacturer.
  	     *
  	     * The list of manufacturers include:
  	     * "Apple", "Archos", "Amazon", "Asus", "Barnes & Noble", "BlackBerry",
  	     * "Google", "HP", "HTC", "LG", "Microsoft", "Motorola", "Nintendo",
  	     * "Nokia", "Samsung" and "Sony"
  	     *
  	     * @memberOf platform
  	     * @type string|null
  	     */
  	    platform.manufacturer = manufacturer;

  	    /**
  	     * The name of the browser/environment.
  	     *
  	     * The list of common browser names include:
  	     * "Chrome", "Electron", "Firefox", "Firefox for iOS", "IE",
  	     * "Microsoft Edge", "PhantomJS", "Safari", "SeaMonkey", "Silk",
  	     * "Opera Mini" and "Opera"
  	     *
  	     * Mobile versions of some browsers have "Mobile" appended to their name:
  	     * eg. "Chrome Mobile", "Firefox Mobile", "IE Mobile" and "Opera Mobile"
  	     *
  	     * @memberOf platform
  	     * @type string|null
  	     */
  	    platform.name = name;

  	    /**
  	     * The alpha/beta release indicator.
  	     *
  	     * @memberOf platform
  	     * @type string|null
  	     */
  	    platform.prerelease = prerelease;

  	    /**
  	     * The name of the product hosting the browser.
  	     *
  	     * The list of common products include:
  	     *
  	     * "BlackBerry", "Galaxy S4", "Lumia", "iPad", "iPod", "iPhone", "Kindle",
  	     * "Kindle Fire", "Nexus", "Nook", "PlayBook", "TouchPad" and "Transformer"
  	     *
  	     * @memberOf platform
  	     * @type string|null
  	     */
  	    platform.product = product;

  	    /**
  	     * The browser's user agent string.
  	     *
  	     * @memberOf platform
  	     * @type string|null
  	     */
  	    platform.ua = ua;

  	    /**
  	     * The browser/environment version.
  	     *
  	     * @memberOf platform
  	     * @type string|null
  	     */
  	    platform.version = name && version;

  	    /**
  	     * The name of the operating system.
  	     *
  	     * @memberOf platform
  	     * @type Object
  	     */
  	    platform.os = os || {

  	      /**
  	       * The CPU architecture the OS is built for.
  	       *
  	       * @memberOf platform.os
  	       * @type number|null
  	       */
  	      'architecture': null,

  	      /**
  	       * The family of the OS.
  	       *
  	       * Common values include:
  	       * "Windows", "Windows Server 2008 R2 / 7", "Windows Server 2008 / Vista",
  	       * "Windows XP", "OS X", "Linux", "Ubuntu", "Debian", "Fedora", "Red Hat",
  	       * "SuSE", "Android", "iOS" and "Windows Phone"
  	       *
  	       * @memberOf platform.os
  	       * @type string|null
  	       */
  	      'family': null,

  	      /**
  	       * The version of the OS.
  	       *
  	       * @memberOf platform.os
  	       * @type string|null
  	       */
  	      'version': null,

  	      /**
  	       * Returns the OS string.
  	       *
  	       * @memberOf platform.os
  	       * @returns {string} The OS string.
  	       */
  	      'toString': function() { return 'null'; }
  	    };

  	    platform.parse = parse;
  	    platform.toString = toStringPlatform;

  	    if (platform.version) {
  	      description.unshift(version);
  	    }
  	    if (platform.name) {
  	      description.unshift(name);
  	    }
  	    if (os && name && !(os == String(os).split(' ')[0] && (os == name.split(' ')[0] || product))) {
  	      description.push(product ? '(' + os + ')' : 'on ' + os);
  	    }
  	    if (description.length) {
  	      platform.description = description.join(' ');
  	    }
  	    return platform;
  	  }

  	  /*--------------------------------------------------------------------------*/

  	  // Export platform.
  	  var platform = parse();

  	  // Some AMD build optimizers, like r.js, check for condition patterns like the following:
  	  if (freeExports && freeModule) {
  	    // Export for CommonJS support.
  	    forOwn(platform, function(value, key) {
  	      freeExports[key] = value;
  	    });
  	  }
  	  else {
  	    // Export to the global object.
  	    root.platform = platform;
  	  }
  	}.call(commonjsGlobal));
  } (platform, platform.exports));

  var METRIC_TYPE;
  (function (METRIC_TYPE) {
      METRIC_TYPE["OPERATIONAL"] = "operational";
      METRIC_TYPE["BEHAVIORAL"] = "behavioral";
  })(METRIC_TYPE || (METRIC_TYPE = {}));
  var METRIC_EVENT;
  (function (METRIC_EVENT) {
      METRIC_EVENT["CALL"] = "web-calling-sdk-callcontrol";
      METRIC_EVENT["CALL_ERROR"] = "web-calling-sdk-callcontrol-error";
      METRIC_EVENT["MEDIA"] = "web-calling-sdk-media";
      METRIC_EVENT["MEDIA_ERROR"] = "web-calling-sdk-media-error";
      METRIC_EVENT["REGISTRATION"] = "web-calling-sdk-registration";
      METRIC_EVENT["REGISTRATION_ERROR"] = "web-calling-sdk-registration-error";
  })(METRIC_EVENT || (METRIC_EVENT = {}));
  var REG_ACTION;
  (function (REG_ACTION) {
      REG_ACTION["REGISTER"] = "register";
      REG_ACTION["DEREGISTER"] = "deregister";
      REG_ACTION["KEEPALIVE_FAILURE"] = "keepaliveFailure";
  })(REG_ACTION || (REG_ACTION = {}));
  var TRANSFER_METRIC;
  (function (TRANSFER_METRIC) {
      TRANSFER_METRIC["BLIND_TRANSFER"] = "Blind Transfer";
      TRANSFER_METRIC["CONSULT_TRANSFER"] = "Consult Transfer";
  })(TRANSFER_METRIC || (TRANSFER_METRIC = {}));

  var ERROR_LAYER;
  (function (ERROR_LAYER) {
      ERROR_LAYER["CALL_CONTROL"] = "call_control";
      ERROR_LAYER["MEDIA"] = "media";
  })(ERROR_LAYER || (ERROR_LAYER = {}));
  var ERROR_TYPE;
  (function (ERROR_TYPE) {
      ERROR_TYPE["CALL_ERROR"] = "call_error";
      ERROR_TYPE["DEFAULT"] = "default_error";
      ERROR_TYPE["FORBIDDEN_ERROR"] = "forbidden";
      ERROR_TYPE["NOT_FOUND"] = "not_found";
      ERROR_TYPE["REGISTRATION_ERROR"] = "registration_error";
      ERROR_TYPE["SERVICE_UNAVAILABLE"] = "service_unavailable";
      ERROR_TYPE["TIMEOUT"] = "timeout";
      ERROR_TYPE["TOKEN_ERROR"] = "token_error";
      ERROR_TYPE["SERVER_ERROR"] = "server_error";
  })(ERROR_TYPE || (ERROR_TYPE = {}));
  var ERROR_CODE;
  (function (ERROR_CODE) {
      ERROR_CODE[ERROR_CODE["UNAUTHORIZED"] = 401] = "UNAUTHORIZED";
      ERROR_CODE[ERROR_CODE["FORBIDDEN"] = 403] = "FORBIDDEN";
      ERROR_CODE[ERROR_CODE["DEVICE_NOT_FOUND"] = 404] = "DEVICE_NOT_FOUND";
      ERROR_CODE[ERROR_CODE["INTERNAL_SERVER_ERROR"] = 500] = "INTERNAL_SERVER_ERROR";
      ERROR_CODE[ERROR_CODE["SERVICE_UNAVAILABLE"] = 503] = "SERVICE_UNAVAILABLE";
      ERROR_CODE[ERROR_CODE["BAD_REQUEST"] = 400] = "BAD_REQUEST";
      ERROR_CODE[ERROR_CODE["REQUEST_TIMEOUT"] = 408] = "REQUEST_TIMEOUT";
      ERROR_CODE[ERROR_CODE["TOO_MANY_REQUESTS"] = 429] = "TOO_MANY_REQUESTS";
  })(ERROR_CODE || (ERROR_CODE = {}));
  var CALL_ERROR_CODE;
  (function (CALL_ERROR_CODE) {
      CALL_ERROR_CODE[CALL_ERROR_CODE["INVALID_STATUS_UPDATE"] = 111] = "INVALID_STATUS_UPDATE";
      CALL_ERROR_CODE[CALL_ERROR_CODE["DEVICE_NOT_REGISTERED"] = 112] = "DEVICE_NOT_REGISTERED";
      CALL_ERROR_CODE[CALL_ERROR_CODE["CALL_NOT_FOUND"] = 113] = "CALL_NOT_FOUND";
      CALL_ERROR_CODE[CALL_ERROR_CODE["ERROR_PROCESSING"] = 114] = "ERROR_PROCESSING";
      CALL_ERROR_CODE[CALL_ERROR_CODE["USER_BUSY"] = 115] = "USER_BUSY";
      CALL_ERROR_CODE[CALL_ERROR_CODE["PARSING_ERROR"] = 116] = "PARSING_ERROR";
      CALL_ERROR_CODE[CALL_ERROR_CODE["TIMEOUT_ERROR"] = 117] = "TIMEOUT_ERROR";
      CALL_ERROR_CODE[CALL_ERROR_CODE["NOT_ACCEPTABLE"] = 118] = "NOT_ACCEPTABLE";
      CALL_ERROR_CODE[CALL_ERROR_CODE["CALL_REJECTED"] = 119] = "CALL_REJECTED";
      CALL_ERROR_CODE[CALL_ERROR_CODE["NOT_AVAILABLE"] = 120] = "NOT_AVAILABLE";
  })(CALL_ERROR_CODE || (CALL_ERROR_CODE = {}));
  var DEVICE_ERROR_CODE;
  (function (DEVICE_ERROR_CODE) {
      DEVICE_ERROR_CODE[DEVICE_ERROR_CODE["DEVICE_LIMIT_EXCEEDED"] = 101] = "DEVICE_LIMIT_EXCEEDED";
      DEVICE_ERROR_CODE[DEVICE_ERROR_CODE["DEVICE_CREATION_DISABLED"] = 102] = "DEVICE_CREATION_DISABLED";
      DEVICE_ERROR_CODE[DEVICE_ERROR_CODE["DEVICE_CREATION_FAILED"] = 103] = "DEVICE_CREATION_FAILED";
  })(DEVICE_ERROR_CODE || (DEVICE_ERROR_CODE = {}));

  class ExtendedError extends Error {
      constructor(msg, context, type) {
          super(msg);
          this.type = type || ERROR_TYPE.DEFAULT;
          this.context = context;
      }
  }

  class CallError extends ExtendedError {
      constructor(msg, context, type, correlationId, errorLayer) {
          super(msg, context, type);
          this.correlationId = correlationId;
          this.errorLayer = errorLayer;
      }
      setCallError(error) {
          this.message = error.message;
          this.correlationId = error.correlationId;
          this.context = error.context;
          this.type = error.type;
      }
      getCallError() {
          return {
              message: this.message,
              context: this.context,
              type: this.type,
              correlationId: this.correlationId,
              errorLayer: this.errorLayer,
          };
      }
  }
  const createCallError = (msg, context, type, correlationId, errorLayer) => new CallError(msg, context, type, correlationId, errorLayer);

  var EVENT_KEYS;
  (function (EVENT_KEYS) {
      EVENT_KEYS["ALERTING"] = "call:alerting";
      EVENT_KEYS["CALL_ERROR"] = "call:error";
      EVENT_KEYS["CALLER_ID"] = "call:caller_id";
      EVENT_KEYS["CONNECT"] = "call:connect";
      EVENT_KEYS["CONNECTING"] = "callingClient: connecting";
      EVENT_KEYS["DISCONNECT"] = "call:disconnect";
      EVENT_KEYS["ERROR"] = "callingClient:error";
      EVENT_KEYS["ESTABLISHED"] = "call:established";
      EVENT_KEYS["HELD"] = "call:held";
      EVENT_KEYS["HOLD_ERROR"] = "call:hold_error";
      EVENT_KEYS["INCOMING_CALL"] = "callingClient:incoming_call";
      EVENT_KEYS["OUTGOING_CALL"] = "callingClient:outgoing_call";
      EVENT_KEYS["PROGRESS"] = "call:progress";
      EVENT_KEYS["RECONNECTED"] = "callingClient:reconnected";
      EVENT_KEYS["RECONNECTING"] = "callingClient:reconnecting";
      EVENT_KEYS["REGISTERED"] = "callingClient:registered";
      EVENT_KEYS["REMOTE_MEDIA"] = "call:remote_media";
      EVENT_KEYS["RESUME_ERROR"] = "call:resume_error";
      EVENT_KEYS["RESUMED"] = "call:resumed";
      EVENT_KEYS["TRANSFER_ERROR"] = "call:transfer_error";
      EVENT_KEYS["UNREGISTERED"] = "callingClient:unregistered";
      EVENT_KEYS["USER_SESSION_INFO"] = "callingClient:user_recent_sessions";
      EVENT_KEYS["CB_VOICEMESSAGE_CONTENT_GET"] = "call_back_voicemail_content_get";
      EVENT_KEYS["CALL_HISTORY_USER_SESSION_INFO"] = "callHistory:user_recent_sessions";
      EVENT_KEYS["ALL_CALLS_CLEARED"] = "callingClient:all_calls_cleared";
  })(EVENT_KEYS || (EVENT_KEYS = {}));
  var SUPPLEMENTARY_SERVICES;
  (function (SUPPLEMENTARY_SERVICES) {
      SUPPLEMENTARY_SERVICES["HOLD"] = "hold";
      SUPPLEMENTARY_SERVICES["RESUME"] = "resume";
      SUPPLEMENTARY_SERVICES["DIVERT"] = "divert";
      SUPPLEMENTARY_SERVICES["TRANSFER"] = "transfer";
      SUPPLEMENTARY_SERVICES["PARK"] = "park";
  })(SUPPLEMENTARY_SERVICES || (SUPPLEMENTARY_SERVICES = {}));
  var MOBIUS_MIDCALL_STATE;
  (function (MOBIUS_MIDCALL_STATE) {
      MOBIUS_MIDCALL_STATE["HELD"] = "HELD";
      MOBIUS_MIDCALL_STATE["CONNECTED"] = "CONNECTED";
  })(MOBIUS_MIDCALL_STATE || (MOBIUS_MIDCALL_STATE = {}));
  var Disposition;
  (function (Disposition) {
      Disposition["ANSWERED"] = "Answered";
      Disposition["CANCELED"] = "Canceled";
      Disposition["INITIATED"] = "Initiated";
      Disposition["MISSED"] = "MISSED";
  })(Disposition || (Disposition = {}));
  var SessionType;
  (function (SessionType) {
      SessionType["SPARK"] = "SPARK";
      SessionType["WEBEX_CALLING"] = "WEBEXCALLING";
  })(SessionType || (SessionType = {}));
  var MOBIUS_EVENT_KEYS;
  (function (MOBIUS_EVENT_KEYS) {
      MOBIUS_EVENT_KEYS["SERVER_EVENT_INCLUSIVE"] = "event:mobius";
      MOBIUS_EVENT_KEYS["CALL_SESSION_EVENT_INCLUSIVE"] = "event:janus.user_recent_sessions";
  })(MOBIUS_EVENT_KEYS || (MOBIUS_EVENT_KEYS = {}));
  var MEDIA_CONNECTION_EVENT_KEYS;
  (function (MEDIA_CONNECTION_EVENT_KEYS) {
      MEDIA_CONNECTION_EVENT_KEYS["ROAP_MESSAGE_TO_SEND"] = "roap:messageToSend";
      MEDIA_CONNECTION_EVENT_KEYS["MEDIA_TYPE_AUDIO"] = "audio";
  })(MEDIA_CONNECTION_EVENT_KEYS || (MEDIA_CONNECTION_EVENT_KEYS = {}));
  var CALL_STATE;
  (function (CALL_STATE) {
      CALL_STATE["HELD"] = "held";
      CALL_STATE["REMOTE_HELD"] = "remoteheld";
      CALL_STATE["CONNECTED"] = "connected";
  })(CALL_STATE || (CALL_STATE = {}));
  var WEBSOCKET_KEYS;
  (function (WEBSOCKET_KEYS) {
      WEBSOCKET_KEYS["CALL_PROGRESS"] = "callprogress";
      WEBSOCKET_KEYS["CALL_CONNECTED"] = "callconnected";
      WEBSOCKET_KEYS["CALL_DISCONNECTED"] = "callconnected";
      WEBSOCKET_KEYS["CALL_INFO"] = "callinfo";
      WEBSOCKET_KEYS["CALL"] = "call";
      WEBSOCKET_KEYS["ROAP"] = "ROAP";
  })(WEBSOCKET_KEYS || (WEBSOCKET_KEYS = {}));

  class CallingClientError extends ExtendedError {
      constructor(msg, context, type, status) {
          super(msg, context, type);
          this.status = MobiusStatus.DEFAULT;
          this.status = status;
      }
      setError(error) {
          this.message = error.message;
          this.context = error.context;
          this.type = error.type;
      }
      getError() {
          return { message: this.message, context: this.context, type: this.type };
      }
  }
  const createClientError = (msg, context, type, status) => new CallingClientError(msg, context, type, status);

  var CALLING_BACKEND;
  (function (CALLING_BACKEND) {
      CALLING_BACKEND["WXC"] = "WEBEX_CALLING";
      CALLING_BACKEND["BWRKS"] = "BROADWORKS_CALLING";
      CALLING_BACKEND["UCM"] = "UCM_CALLING";
      CALLING_BACKEND["INVALID"] = "Calling backend is currently not supported";
  })(CALLING_BACKEND || (CALLING_BACKEND = {}));

  const API_V1 = 'api/v1';
  const BROADWORKS_VOICEMAIL_FILE = 'BroadworksBackendConnector';
  const BW_XSI_ENDPOINT_VERSION = 'v2.0';
  const BW_XSI_URL = 'broadworksXsiActionsUrl';
  const BW_TOKEN_FETCH_ENDPOINT = '/idp/bwtoken/fetch';
  const ENTITLEMENT_BASIC = 'bc-sp-basic';
  const ENTITLEMENT_BROADWORKS_CONN = 'broadworks-connector';
  const ENTITLEMENT_STANDARD = 'bc-sp-standard';
  const JSON_FORMAT = '?format=json';
  const LIMIT$1 = '&limit';
  const MARK_AS_READ = 'MarkAsRead';
  const MARK_AS_UNREAD = 'MarkAsUnread';
  const MESSAGE_MEDIA_CONTENT = 'messageMediaContent';
  const NATIVE_SIP_CALL_TO_UCM = 'NATIVE_SIP_CALL_TO_UCM';
  const NATIVE_WEBEX_TEAMS_CALLING = 'NATIVE_WEBEX_TEAMS_CALLING';
  const NO_VOICEMAIL_MSG = 'No additional voicemails';
  const NO_VOICEMAIL_STATUS_CODE = 204;
  const OFFSET = '?offset';
  const PREFIX = 2;
  const RADIX_RAND = 36;
  const SORT_ORDER = '&sortOrder';
  const TRANSCRIPT_CONTENT = 'content';
  const UCM_VOICEMAIL_FILE = 'UcmBackendConnector';
  const VMGATEWAY = 'vmgateway';
  const VOICEMAILS = 'voicemails';
  const VOICE_MESSAGING_MESSAGES = 'VoiceMessagingMessages';
  const WEBEX_CALLING_VOICEMAIL_FILE = 'WxCallBackendConnector';

  function restoreExistingDevice(callingClient, restoreData) {
      if (restoreData.devices && restoreData.devices.length > 0) {
          callingClient.setDeviceInfo({
              userId: restoreData.userId,
              device: restoreData.devices[0],
              keepaliveInterval: DEFAULT_KEEPALIVE_INTERVAL,
              rehomingIntervalMax: DEFAULT_REHOMING_INTERVAL_MAX,
              rehomingIntervalMin: DEFAULT_REHOMING_INTERVAL_MIN,
          });
          const stringToReplace = `${DEVICES_ENDPOINT_RESOURCE}/${restoreData.devices[0].deviceId}`;
          const uri = restoreData.devices[0].uri.replace(stringToReplace, '');
          callingClient.setMobiusUrl(uri);
          callingClient.setIsRegistered(MobiusStatus.ACTIVE);
          return true;
      }
      return false;
  }
  function updateCallErrorContext(errContext, type, message, correlationId, callError) {
      const errObj = {};
      errObj.context = errContext;
      errObj.type = type;
      errObj.message = message;
      errObj.correlationId = correlationId;
      callError.setCallError(errObj);
  }
  function updateErrorContext(errContext, type, message, clientError) {
      const errObj = {};
      errObj.context = errContext;
      errObj.type = type;
      errObj.message = message;
      clientError.setError(errObj);
  }
  function submitErrorMetric(callingClient, caller, clientError) {
      switch (caller) {
          case GET_MOBIUS_SERVERS_UTIL:
          case REGISTER_UTIL: {
              callingClient.sendMetric(METRIC_EVENT.REGISTRATION_ERROR, REG_ACTION.REGISTER, METRIC_TYPE.BEHAVIORAL, clientError);
              break;
          }
          case KEEPALIVE_UTIL: {
              callingClient.sendMetric(METRIC_EVENT.REGISTRATION, REG_ACTION.KEEPALIVE_FAILURE, METRIC_TYPE.BEHAVIORAL, clientError);
              break;
          }
      }
  }
  function emitFinalFailure(callingClient, caller, file) {
      const clientError = createClientError('', {}, ERROR_TYPE.DEFAULT, MobiusStatus.DEFAULT);
      const loggerContext = {
          file,
          method: caller,
      };
      updateErrorContext(loggerContext, ERROR_TYPE.SERVICE_UNAVAILABLE, 'An unknown error occurred. Wait a moment and try again. Please contact the administrator if the problem persists.', clientError);
      submitErrorMetric(callingClient, caller, clientError);
      callingClient.emit(EVENT_KEYS.ERROR, clientError);
  }
  function emitClientError(callingClient, caller, clientError, finalError) {
      submitErrorMetric(callingClient, caller, clientError);
      if (finalError) {
          callingClient.emit(EVENT_KEYS.ERROR, clientError);
      }
      else if (caller === REGISTER_UTIL) {
          callingClient.emit(EVENT_KEYS.UNREGISTERED);
      }
      else if (caller !== KEEPALIVE_UTIL) {
          callingClient.emit(EVENT_KEYS.ERROR, clientError);
      }
  }
  function handleErrors(callingClient, err, caller, file) {
      return __awaiter(this, void 0, void 0, function* () {
          const clientError = createClientError('', {}, ERROR_TYPE.DEFAULT, MobiusStatus.DEFAULT);
          const loggerContext = {
              file,
              method: caller,
          };
          const errorCode = err.statusCode;
          let finalError = false;
          log$1.warn(`Status code: -> ${errorCode}`, loggerContext);
          switch (errorCode) {
              case ERROR_CODE.UNAUTHORIZED: {
                  finalError = true;
                  log$1.warn(`401 Unauthorized`, loggerContext);
                  updateErrorContext(loggerContext, ERROR_TYPE.TOKEN_ERROR, 'User is unauthorized due to an expired token. Sign out, then sign back in.', clientError);
                  emitClientError(callingClient, caller, clientError, finalError);
                  break;
              }
              case ERROR_CODE.INTERNAL_SERVER_ERROR: {
                  log$1.warn(`500 Internal Server Error`, loggerContext);
                  updateErrorContext(loggerContext, ERROR_TYPE.SERVER_ERROR, 'An unknown error occurred while placing the request. Wait a moment and try again.', clientError);
                  emitClientError(callingClient, caller, clientError, finalError);
                  break;
              }
              case ERROR_CODE.SERVICE_UNAVAILABLE: {
                  log$1.warn(`503 Service Unavailable`, loggerContext);
                  updateErrorContext(loggerContext, ERROR_TYPE.SERVICE_UNAVAILABLE, 'An error occurred on the server while processing the request. Wait a moment and try again.', clientError);
                  emitClientError(callingClient, caller, clientError, finalError);
                  break;
              }
              case ERROR_CODE.FORBIDDEN: {
                  log$1.warn(`403 Forbidden`, loggerContext);
                  const errorBody = err.body;
                  if (!errorBody) {
                      log$1.warn('Error response has no body, throwing default error', loggerContext);
                      updateErrorContext(loggerContext, ERROR_TYPE.FORBIDDEN_ERROR, 'An unauthorized action has been received. This action has been blocked. Please contact the administrator if this persists.', clientError);
                      emitClientError(callingClient, caller, clientError, finalError);
                      return finalError;
                  }
                  const code = errorBody.errorCode;
                  log$1.warn(`Error code found : ${code}`, loggerContext);
                  switch (code) {
                      case DEVICE_ERROR_CODE.DEVICE_LIMIT_EXCEEDED: {
                          let errorMessage = 'User device limit exceeded';
                          if (!callingClient.isRegRetry()) {
                              const restore = restoreExistingDevice(callingClient, errorBody);
                              if (restore) {
                                  callingClient.setRegRetry(true);
                                  yield callingClient.deregister();
                                  finalError = yield callingClient.restorePreviousRegistration(caller);
                                  callingClient.setRegRetry(false);
                                  if (callingClient.isDeviceRegistered()) {
                                      errorMessage = 'Restored Successfully';
                                  }
                              }
                              else {
                                  callingClient.emit(EVENT_KEYS.UNREGISTERED);
                              }
                          }
                          else {
                              callingClient.emit(EVENT_KEYS.UNREGISTERED);
                          }
                          updateErrorContext(loggerContext, ERROR_TYPE.FORBIDDEN_ERROR, errorMessage, clientError);
                          break;
                      }
                      case DEVICE_ERROR_CODE.DEVICE_CREATION_DISABLED: {
                          finalError = true;
                          updateErrorContext(loggerContext, ERROR_TYPE.FORBIDDEN_ERROR, 'User is not configured for WebRTC calling. Please contact the administrator to resolve this issue.', clientError);
                          emitClientError(callingClient, caller, clientError, finalError);
                          break;
                      }
                      case DEVICE_ERROR_CODE.DEVICE_CREATION_FAILED: {
                          updateErrorContext(loggerContext, ERROR_TYPE.FORBIDDEN_ERROR, 'An unknown error occurred while provisioning the device. Wait a moment and try again.', clientError);
                          emitClientError(callingClient, caller, clientError, finalError);
                          break;
                      }
                      default: {
                          updateErrorContext(loggerContext, ERROR_TYPE.FORBIDDEN_ERROR, 'An unknown error occurred. Wait a moment and try again. Please contact the administrator if the problem persists.', clientError);
                          emitClientError(callingClient, caller, clientError, finalError);
                      }
                  }
                  break;
              }
              case ERROR_CODE.DEVICE_NOT_FOUND: {
                  finalError = true;
                  log$1.warn(`404 Device Not Found`, loggerContext);
                  updateErrorContext(loggerContext, ERROR_TYPE.NOT_FOUND, 'The client has unregistered. Please wait for the client to register before attempting the call. If error persists, sign out, sign back in and attempt the call.', clientError);
                  emitClientError(callingClient, caller, clientError, finalError);
                  break;
              }
              default: {
                  log$1.warn(`Unknown Error`, loggerContext);
                  if (caller === REGISTER_UTIL) {
                      callingClient.emit(EVENT_KEYS.UNREGISTERED);
                  }
              }
          }
          return finalError;
      });
  }
  function handleCallErrors(emitterCb, errorLayer, retryCb, correlationId, err, caller, file) {
      return __awaiter(this, void 0, void 0, function* () {
          const loggerContext = {
              file,
              method: caller,
          };
          const callError = createCallError('', loggerContext, ERROR_TYPE.DEFAULT, '', errorLayer);
          const errorCode = err.statusCode;
          log$1.warn(`Status code: ->${errorCode}`, loggerContext);
          switch (errorCode) {
              case ERROR_CODE.UNAUTHORIZED: {
                  log$1.warn(`401 Unauthorized`, loggerContext);
                  updateCallErrorContext(loggerContext, ERROR_TYPE.TOKEN_ERROR, 'User is unauthorized due to an expired token. Sign out, then sign back in.', correlationId, callError);
                  emitterCb(callError);
                  break;
              }
              case ERROR_CODE.FORBIDDEN:
              case ERROR_CODE.SERVICE_UNAVAILABLE: {
                  const errorBody = err.body;
                  if (!errorBody) {
                      log$1.warn('Error response has no body, throwing default error', loggerContext);
                      updateCallErrorContext(loggerContext, err.statusCode === 403 ? ERROR_TYPE.FORBIDDEN_ERROR : ERROR_TYPE.SERVICE_UNAVAILABLE, err.statusCode === 403
                          ? 'An unauthorized action has been received. This action has been blocked. Please contact the administrator if this persists.'
                          : 'An error occurred on the server while processing the request. Wait a moment and try again.', correlationId, callError);
                      emitterCb(callError);
                      return;
                  }
                  if (err.headers && 'retry-after' in err.headers && retryCb) {
                      const retryInterval = err.headers['retry-after'];
                      log$1.warn(`Retry Interval received: ${retryInterval}`, loggerContext);
                      retryCb(retryInterval);
                      return;
                  }
                  const code = errorBody.errorCode;
                  let message;
                  switch (code) {
                      case CALL_ERROR_CODE.INVALID_STATUS_UPDATE: {
                          message =
                              'An invalid status update has been received for the call. Wait a moment and try again.';
                          break;
                      }
                      case CALL_ERROR_CODE.DEVICE_NOT_REGISTERED: {
                          message =
                              'The client has unregistered. Please wait for the client to register before attempting the call. If error persists, sign out, sign back in and attempt the call.';
                          break;
                      }
                      case CALL_ERROR_CODE.CALL_NOT_FOUND: {
                          message = 'Call is not found on the server. Wait a moment and try again.';
                          break;
                      }
                      case CALL_ERROR_CODE.ERROR_PROCESSING: {
                          message =
                              'An error occurred while processing the call on the server. Wait a moment and try again.';
                          break;
                      }
                      case CALL_ERROR_CODE.USER_BUSY: {
                          message = 'Called user is busy.';
                          break;
                      }
                      case CALL_ERROR_CODE.PARSING_ERROR: {
                          message =
                              'An error occurred while parsing the provided information. Wait a moment and try again.';
                          break;
                      }
                      case CALL_ERROR_CODE.NOT_ACCEPTABLE: {
                          message =
                              'An error occurred on the server while accepting the call. Wait a moment and try again. Please contact the administrator if this persists.';
                          break;
                      }
                      case CALL_ERROR_CODE.CALL_REJECTED: {
                          message =
                              'Call rejected by the server. Wait a moment and try again. Please contact the administrator if this persists.';
                          break;
                      }
                      case CALL_ERROR_CODE.NOT_AVAILABLE: {
                          message =
                              'Calling services not available. Wait a moment and try again. Please contact the administrator if this persists.';
                          break;
                      }
                      default: {
                          message = 'An unknown error occurred. Wait a moment and try again.';
                      }
                  }
                  updateCallErrorContext(loggerContext, err.statusCode === 403 ? ERROR_TYPE.FORBIDDEN_ERROR : ERROR_TYPE.SERVICE_UNAVAILABLE, message, correlationId, callError);
                  emitterCb(callError);
                  break;
              }
              case ERROR_CODE.DEVICE_NOT_FOUND: {
                  log$1.warn(`404 Call Not Found`, loggerContext);
                  updateCallErrorContext(loggerContext, ERROR_TYPE.NOT_FOUND, 'Call is no longer active. Wait a moment and try again.', correlationId, callError);
                  emitterCb(callError);
                  break;
              }
              case ERROR_CODE.INTERNAL_SERVER_ERROR: {
                  log$1.warn(`500 Internal Server Error`, loggerContext);
                  updateCallErrorContext(loggerContext, ERROR_TYPE.SERVER_ERROR, 'An unknown error occurred in the call. Wait a moment and try again.', correlationId, callError);
                  emitterCb(callError);
                  break;
              }
              default: {
                  log$1.warn(`Unknown Error`, loggerContext);
              }
          }
      });
  }
  function serviceErrorCodeHandler(err, loggerContext) {
      return __awaiter(this, void 0, void 0, function* () {
          const errorCode = err.statusCode;
          const failureMessage = 'FAILURE';
          switch (errorCode) {
              case ERROR_CODE.BAD_REQUEST: {
                  log$1.warn(`400 Bad request`, loggerContext);
                  const errorDetails = {
                      statusCode: 400,
                      data: {
                          error: '400 Bad request',
                      },
                      message: failureMessage,
                  };
                  return errorDetails;
              }
              case ERROR_CODE.UNAUTHORIZED: {
                  log$1.warn(`401 User is unauthorised, possible token expiry`, loggerContext);
                  const errorDetails = {
                      statusCode: 401,
                      data: {
                          error: 'User is unauthorised, possible token expiry',
                      },
                      message: failureMessage,
                  };
                  return errorDetails;
              }
              case ERROR_CODE.FORBIDDEN: {
                  log$1.warn(`403 User request is forbidden`, loggerContext);
                  const errorDetails = {
                      statusCode: 403,
                      data: {
                          error: 'User request is forbidden',
                      },
                      message: failureMessage,
                  };
                  return errorDetails;
              }
              case ERROR_CODE.DEVICE_NOT_FOUND: {
                  log$1.warn(`404 User info not found`, loggerContext);
                  const errorDetails = {
                      statusCode: 404,
                      data: {
                          error: 'User info not found',
                      },
                      message: failureMessage,
                  };
                  return errorDetails;
              }
              case ERROR_CODE.REQUEST_TIMEOUT: {
                  log$1.warn(`408 Request to the server timedout`, loggerContext);
                  const errorDetails = {
                      statusCode: 408,
                      data: {
                          error: 'Request to the server timedout',
                      },
                      message: failureMessage,
                  };
                  return errorDetails;
              }
              case ERROR_CODE.INTERNAL_SERVER_ERROR: {
                  log$1.warn(`500 Internal server error occurred`, loggerContext);
                  const errorDetails = {
                      statusCode: 500,
                      data: {
                          error: 'Internal server error occurred',
                      },
                      message: failureMessage,
                  };
                  return errorDetails;
              }
              case ERROR_CODE.SERVICE_UNAVAILABLE: {
                  log$1.warn(`503 Unable to establish a connection with the server`, loggerContext);
                  const errorDetails = {
                      statusCode: 503,
                      data: {
                          error: 'Unable to establish a connection with the server',
                      },
                      message: failureMessage,
                  };
                  return errorDetails;
              }
              default: {
                  log$1.warn(`422 Exception has occurred`, loggerContext);
                  const errorDetails = {
                      statusCode: 422,
                      data: {
                          error: '422 Exception has occurred',
                      },
                      message: failureMessage,
                  };
                  return errorDetails;
              }
          }
      });
  }
  function parseMediaQualityStatistics(stats) {
      if (!stats || navigator.userAgent.indexOf('Firefox') !== -1) {
          log$1.info('RTCStatsReport is null, adding dummy stats', {
              file: UTILS_FILE,
              method: parseMediaQualityStatistics.name,
          });
          return DUMMY_METRICS;
      }
      try {
          let type;
          let id;
          let inboundCodec;
          let outboundCodec;
          const localCandidates = {};
          const candidatePairs = {};
          const codecList = {};
          const rxStat = {};
          const txStat = {};
          const vqPayload = {};
          let jitterBufferDelay = 0;
          let jitterBufferEmittedCount = 0;
          let totalRoundTripTime = 0;
          let roundTripTimeMeasurements = 0;
          let selectedPair = '';
          let bitRate = 0;
          vqPayload.maxJitter = 0;
          vqPayload.VoPktSizeMs = 20;
          stats.forEach((report) => {
              Object.keys(report).forEach((statName) => {
                  if (statName !== TIMESTAMP) {
                      if (!type || statName === TYPE) {
                          type = report[statName];
                      }
                      else if (!id || statName === MEDIA_ID) {
                          id = report[statName];
                      }
                      else if (id && id.indexOf(RTC_ICE_CANDIDATE_PAIR) !== -1) {
                          if (statName === LOCAL_CANDIDATE_ID) {
                              candidatePairs[id] = report[statName];
                          }
                      }
                      else if (id && id.indexOf(RTC_ICE_CANDIDATE) !== -1) {
                          if (statName === NETWORK_TYPE) {
                              localCandidates[id] = report[statName];
                          }
                      }
                      else if (id &&
                          (id.indexOf(INBOUND_CODEC_MATCH) !== -1 ||
                              id.indexOf(OUTBOUND_CODEC_MATCH) !== -1 ||
                              id.indexOf(RTC_CODEC) !== -1)) {
                          if (statName === MIME_TYPE) {
                              codecList[id] = report[statName];
                          }
                      }
                      else if (type && type === REMOTE_INBOUND_RTP) {
                          switch (statName) {
                              case TOTAL_ROUND_TRIP_TIME: {
                                  totalRoundTripTime = report[statName];
                                  break;
                              }
                              case ROUND_TRIP_TIME_MEASUREMENTS: {
                                  roundTripTimeMeasurements = report[statName];
                                  break;
                              }
                              default: {
                              }
                          }
                      }
                      else if (type && type === INBOUND_RTP) {
                          switch (statName) {
                              case CODEC_ID: {
                                  inboundCodec = report[statName];
                                  break;
                              }
                              case PACKETS_RECEIVED: {
                                  rxStat.Pkt = report[statName];
                                  break;
                              }
                              case BYTES_RECEIVED: {
                                  rxStat.Oct = report[statName];
                                  break;
                              }
                              case PACKETS_DISCARDED: {
                                  rxStat.LatePkt = report[statName];
                                  break;
                              }
                              case PACKETS_LOST: {
                                  rxStat.LostPkt = report[statName];
                                  break;
                              }
                              case JITTER_BUFFER_DELAY: {
                                  jitterBufferDelay = report[statName];
                                  break;
                              }
                              case JITTER_BUFFER_EMITTED_COUNT: {
                                  jitterBufferEmittedCount = report[statName];
                                  break;
                              }
                              default: {
                              }
                          }
                      }
                      else if (type && type === TRANSPORT) {
                          switch (statName) {
                              case SELECTED_CANDIDATE_PAIR_ID: {
                                  selectedPair = report[statName];
                                  break;
                              }
                              default: {
                              }
                          }
                      }
                      else if (type && type === OUTBOUND_RTP) {
                          switch (statName) {
                              case CODEC_ID: {
                                  outboundCodec = report[statName];
                                  break;
                              }
                              case PACKETS_SENT: {
                                  txStat.Pkt = report[statName];
                                  break;
                              }
                              case BYTES_SENT: {
                                  txStat.Oct = report[statName];
                                  break;
                              }
                              case TARGET_BIT_RATE: {
                                  bitRate = report[statName];
                                  break;
                              }
                              default: {
                              }
                          }
                      }
                      else if (type && type === MEDIA_SOURCE) {
                          switch (statName) {
                              case TOTAL_SAMPLES_DURATION: {
                                  rxStat.Dur = report[statName];
                                  txStat.Dur = report[statName];
                                  break;
                              }
                              default: {
                              }
                          }
                      }
                  }
              });
          });
          if (roundTripTimeMeasurements !== 0) {
              vqPayload.VoOneWayDelayMs = totalRoundTripTime / (2 * roundTripTimeMeasurements);
          }
          else {
              vqPayload.VoOneWayDelayMs = 0;
          }
          vqPayload.hwType = `${platform.exports.os}/${platform.exports.name}-${platform.exports.version}`;
          vqPayload.networkType = localCandidates[candidatePairs[selectedPair]];
          rxStat.AvgJit = jitterBufferDelay / jitterBufferEmittedCount;
          vqPayload.VoRxCodec = codecList[inboundCodec].split('/')[1];
          const txVqPayload = {};
          txVqPayload.VoTxCodec = codecList[outboundCodec].split('/')[1];
          txVqPayload.rtpBitRate = bitRate;
          const byeStats = {};
          rxStat.VQMetrics = vqPayload;
          txStat.VQMetrics = txVqPayload;
          byeStats[RTP_RX_STAT] = rxStat;
          byeStats[RTP_TX_STAT] = txStat;
          log$1.log(JSON.stringify(byeStats), { file: UTILS_FILE, method: parseMediaQualityStatistics.name });
          return byeStats;
      }
      catch (err) {
          log$1.warn(`Caught error while parsing RTP stats, ${err}`, {
              file: UTILS_FILE,
              method: parseMediaQualityStatistics.name,
          });
          return DUMMY_METRICS;
      }
  }
  function getCallingBackEnd(webex) {
      const entModels = webex.internal.device.features.entitlement.models;
      let callingBackend;
      if (webex.internal.device.callingBehavior === NATIVE_WEBEX_TEAMS_CALLING) {
          for (let i = 0; i < entModels.length; i += 1) {
              if (entModels[i][VALUES][KEY] === ENTITLEMENT_BASIC ||
                  entModels[i][VALUES][KEY] === ENTITLEMENT_STANDARD) {
                  callingBackend = CALLING_BACKEND.WXC;
                  break;
              }
              else if (entModels[i][VALUES][KEY] === ENTITLEMENT_BROADWORKS_CONN) {
                  callingBackend = CALLING_BACKEND.BWRKS;
                  break;
              }
          }
      }
      else if (webex.internal.device.callingBehavior === NATIVE_SIP_CALL_TO_UCM) {
          callingBackend = CALLING_BACKEND.UCM;
      }
      else {
          callingBackend = CALLING_BACKEND.INVALID;
      }
      return callingBackend;
  }
  function getXsiActionEndpoint(webex, loggerContext, callingBackend) {
      return __awaiter(this, void 0, void 0, function* () {
          try {
              switch (callingBackend) {
                  case CALLING_BACKEND.WXC: {
                      const userIdResponse = yield webex.request({
                          uri: `${webex.internal.services._serviceUrls.hydra}/${XSI_ACTION_ENDPOINT_ORG_URL_PARAM}`,
                          method: HTTP_METHODS.GET,
                      });
                      const response = userIdResponse.body;
                      const xsiEndpoint = response[ITEMS][0][XSI_ACTION_ENDPOINT];
                      return xsiEndpoint;
                  }
                  case CALLING_BACKEND.BWRKS: {
                      const bwTokenResponse = yield webex.request({
                          uri: `${webex.internal.services._serviceUrls.wdm}/${DEVICES}`,
                          method: HTTP_METHODS.GET,
                      });
                      const response = bwTokenResponse.body;
                      let xsiEndpoint = response[DEVICES][0][SETTINGS][BW_XSI_URL];
                      if (response[DEVICES][0][SETTINGS][BW_XSI_URL].endsWith(BW_XSI_ENDPOINT_VERSION)) {
                          xsiEndpoint = response[DEVICES][0][SETTINGS][BW_XSI_URL].slice(0, -5);
                      }
                      return xsiEndpoint;
                  }
                  default: {
                      throw new Error('Calling backend is not identified, exiting....');
                  }
              }
          }
          catch (err) {
              const errorInfo = err;
              serviceErrorCodeHandler(errorInfo, loggerContext);
              return errorInfo;
          }
      });
  }
  function getVgActionEndpoint(webex, callingBackend) {
      try {
          if (callingBackend && callingBackend === CALLING_BACKEND.UCM) {
              return webex.internal.services._serviceUrls['ucmgmt-gateway'];
          }
          throw new Error('Calling backend is not identified, exiting....');
      }
      catch (err) {
          const errorInfo = err;
          return errorInfo;
      }
  }
  function getSortedVoicemailList(voiceMessageList, sortOrder) {
      if (sortOrder === SORT.DESC) {
          voiceMessageList.sort((voiceMail, nextVoiceMail) => nextVoiceMail[TIME][PLACEHOLDER_KEY] - voiceMail[TIME][PLACEHOLDER_KEY]);
      }
      else if (sortOrder === SORT.ASC) {
          voiceMessageList.sort((voiceMail, nextVoiceMail) => voiceMail[TIME][PLACEHOLDER_KEY] - nextVoiceMail[TIME][PLACEHOLDER_KEY]);
      }
      return voiceMessageList;
  }
  function scimQuery(filter) {
      return __awaiter(this, void 0, void 0, function* () {
          log$1.info(`Starting resolution for filter:- ${filter}`, {
              file: UTILS_FILE,
              method: 'scimQuery',
          });
          const sdkConnector = SDKConnector$1;
          const webex = sdkConnector.getWebex();
          const scimUrl = `${webex.internal.services._serviceUrls.identity}/${IDENTITY_ENDPOINT_RESOURCE}/${SCIM_ENDPOINT_RESOURCE}/${webex.internal.device.orgId}/${SCIM_USER_FILTER}`;
          const query = scimUrl + encodeURIComponent(filter);
          return webex.request({
              uri: query,
              method: HTTP_METHODS.GET,
              headers: {
                  [CISCO_DEVICE_URL]: webex.internal.device.url,
                  [SPARK_USER_AGENT]: CALLING_USER_AGENT,
              },
              service: ALLOWED_SERVICES.MOBIUS,
          });
      });
  }
  function resolveCallerIdDisplay(filter) {
      var _a;
      return __awaiter(this, void 0, void 0, function* () {
          let resolution;
          const displayResult = {};
          try {
              const response = yield scimQuery(filter);
              resolution = response.body;
              log$1.info(`Number of records found for this user :- ${resolution.totalResults}`, {
                  file: UTILS_FILE,
                  method: 'resolveCallerIdDisplay',
              });
          }
          catch (err) {
              const res = err;
              log$1.warn(`Error response: - ${res.statusCode}`, {
                  file: UTILS_FILE,
                  method: 'resolveCallerIdDisplay',
              });
          }
          if ((resolution === null || resolution === void 0 ? void 0 : resolution.totalResults) && resolution.totalResults > 0) {
              const scimResource = resolution.Resources[0];
              displayResult.name = scimResource.displayName;
              const numberObj = scimResource.phoneNumbers.find((num) => num.primary === true);
              if (numberObj) {
                  displayResult.num = numberObj.value;
              }
              else if (scimResource.phoneNumbers.length > 0) {
                  log$1.info('Failure to resolve caller information. Setting number as caller ID', {
                      file: UTILS_FILE,
                      method: 'resolveCallerIdDisplay',
                  });
                  displayResult.num = scimResource.phoneNumbers[0].value;
              }
              const photo = (_a = scimResource.photos) === null || _a === void 0 ? void 0 : _a.find((photo) => photo.type === 'thumbnail');
              displayResult.avatarSrc = photo ? photo.value : 'unknown';
              displayResult.id = scimResource.id;
              log$1.info(`Extracted details:- name: ${displayResult.name} , number: ${displayResult.num}, photo: ${displayResult.avatarSrc}, id: ${displayResult.id}`, {
                  file: UTILS_FILE,
                  method: 'resolveCallerIdDisplay',
              });
          }
          return displayResult;
      });
  }
  function resolveCallerIdByName(name) {
      return __awaiter(this, void 0, void 0, function* () {
          const displayResult = {};
          const sdkConnector = SDKConnector$1;
          const webex = sdkConnector.getWebex();
          const searchDirectory = (query) => {
              return webex.people.list({
                  displayName: query,
              });
          };
          yield searchDirectory(name).then((results) => {
              log$1.info(`DS Result: ${results}`, {
                  file: UTILS_FILE,
                  method: 'resolveCallerIdByName',
              });
              if (results && results.items && results.items.length > 0) {
                  const resolution = results.items[0];
                  displayResult.name = resolution.displayName;
                  const id = Buffer.from(resolution.id, 'base64').toString('binary');
                  displayResult.id = id.split('/').pop();
                  const numObj = resolution.phoneNumbers.find((num) => num.type === 'work');
                  if (numObj) {
                      displayResult.num = numObj.value;
                  }
                  else if (resolution.phoneNumbers.length > 0) {
                      displayResult.num = resolution.phoneNumbers[0].value;
                  }
                  displayResult.avatarSrc = resolution.avatar;
                  log$1.info(`Extracted details:- name: ${displayResult.name} , number: ${displayResult.num}, photo: ${displayResult.avatarSrc}, id: ${displayResult.id}`, {
                      file: UTILS_FILE,
                      method: 'resolveCallerIdByName',
                  });
              }
          });
          return displayResult;
      });
  }
  function resolveContact(callingPartyInfo) {
      return __awaiter(this, void 0, void 0, function* () {
          if (callingPartyInfo.userExternalId && callingPartyInfo.userExternalId.$) {
              return resolveCallerIdDisplay(`id eq "${callingPartyInfo.userExternalId.$}"`);
          }
          if (callingPartyInfo.name && callingPartyInfo.name.$) {
              return resolveCallerIdByName(callingPartyInfo.name.$);
          }
          return null;
      });
  }
  function storeVoicemailList(context, voiceMessageList) {
      const vmEncodedList = Buffer.from(JSON.stringify(voiceMessageList), 'utf8').toString('base64');
      sessionStorage.setItem(context, vmEncodedList.toString());
  }
  function fetchVoicemailList(context, offset, offsetLimit, loggerContext) {
      let moreVoicemails = false;
      let requiredVoicemailList = [];
      try {
          const voicemailList = JSON.parse(Buffer.from(sessionStorage.getItem(context), 'base64').toString('utf8'));
          log$1.info(`Length of voicemail list:  ${voicemailList.length}`, loggerContext);
          if (voicemailList.length > offset + offsetLimit) {
              moreVoicemails = true;
          }
          requiredVoicemailList = voicemailList.slice(offset, offset + offsetLimit);
      }
      catch (err) {
          log$1.warn(`Caught exception while fetching voicemail from storage. ${err}`, loggerContext);
          const errorInfo = err;
          serviceErrorCodeHandler(errorInfo, {});
      }
      return { messages: requiredVoicemailList, moreVMAvailable: moreVoicemails };
  }
  function inferIdFromUuid(id, decodeType) {
      return Buffer.from(`${INFER_ID_CONSTANT}/${decodeType}/${id}`, 'binary').toString('base64');
  }

  class CallSettings {
      constructor(webex, logger) {
          this.sdkConnector = SDKConnector$1;
          if (!this.sdkConnector.getWebex()) {
              SDKConnector$1.setWebex(webex);
          }
          this.webex = this.sdkConnector.getWebex();
          this.hydraEndpoint = this.webex.internal.services._serviceUrls.hydra;
          log$1.setLogger(logger.level);
          this.userId = this.webex.internal.device.userId;
          this.personId = inferIdFromUuid(this.webex.internal.device.userId, DecodeType.PEOPLE);
          this.orgId = inferIdFromUuid(this.webex.internal.device.orgId, DecodeType.ORGANIZATION);
      }
      getCallWaitingSetting() {
          return __awaiter(this, void 0, void 0, function* () {
              const loggerContext = {
                  file: CALL_SETTINGS_FILE,
                  method: 'getCallWaitingSetting',
              };
              try {
                  const userIdResponse = yield this.webex.request({
                      uri: `${this.hydraEndpoint}/${XSI_ACTION_ENDPOINT_ORG_URL_PARAM}`,
                      method: HTTP_METHODS.GET,
                  });
                  const responseUrl = userIdResponse.body;
                  this.xsiEndpoint = responseUrl[ITEMS][0][XSI_ACTION_ENDPOINT];
                  const callWaitingUrl = `${this.xsiEndpoint}/${XSI_VERSION}/${USER_ENDPOINT}/${this.userId}/${SERVICES_ENDPOINT}/${CALL_WAITING_ENDPOINT}`;
                  const response = yield fetch(`${callWaitingUrl}`, {
                      method: HTTP_METHODS.GET,
                      headers: {
                          Authorization: yield this.webex.credentials.getUserToken(),
                      },
                  });
                  if (!response.ok) {
                      throw new Error(`${response.status}`);
                  }
                  const xmlData = yield response.text();
                  const parser = new DOMParser();
                  const xmlDOM = parser.parseFromString(xmlData, XML_TYPE);
                  const callWaitingDetails = xmlDOM.getElementsByTagName('active');
                  const status = callWaitingDetails[0].childNodes[0].textContent;
                  const toggleSetting = {
                      enabled: status === 'true',
                  };
                  const responseDetails = {
                      statusCode: 200,
                      data: {
                          callSetting: toggleSetting,
                      },
                      message: SUCCESS_MESSAGE,
                  };
                  return responseDetails;
              }
              catch (err) {
                  const errorInfo = {
                      statusCode: err instanceof Error ? Number(err.message) : '',
                  };
                  const errorStatus = serviceErrorCodeHandler(errorInfo, loggerContext);
                  return errorStatus;
              }
          });
      }
      getDoNotDisturbSetting() {
          return __awaiter(this, void 0, void 0, function* () {
              const loggerContext = {
                  file: CALL_SETTINGS_FILE,
                  method: 'getDoNotDisturbSetting',
              };
              try {
                  const resp = yield this.webex.request({
                      uri: `${this.hydraEndpoint}/${PEOPLE_ENDPOINT}/${this.personId}/${DND_ENDPOINT}?${ORG_ENDPOINT}=${this.orgId}`,
                      method: HTTP_METHODS.GET,
                  });
                  const dndSettingResponse = resp.body;
                  const responseDetails = {
                      statusCode: resp[STATUS_CODE],
                      data: {
                          callSetting: dndSettingResponse,
                      },
                      message: SUCCESS_MESSAGE,
                  };
                  return responseDetails;
              }
              catch (err) {
                  const errorInfo = err;
                  const errorStatus = serviceErrorCodeHandler(errorInfo, loggerContext);
                  return errorStatus;
              }
          });
      }
      setDoNotDisturbSetting(enabled) {
          return __awaiter(this, void 0, void 0, function* () {
              const loggerContext = {
                  file: CALL_SETTINGS_FILE,
                  method: 'setDoNotDisturbSetting',
              };
              try {
                  const dndRequestBody = {
                      enabled,
                      ringSplashEnabled: false,
                  };
                  const resp = yield this.webex.request({
                      uri: `${this.hydraEndpoint}/${PEOPLE_ENDPOINT}/${this.personId}/${DND_ENDPOINT}?${ORG_ENDPOINT}=${this.orgId}`,
                      method: HTTP_METHODS.PUT,
                      body: dndRequestBody,
                  });
                  const responseDetails = {
                      statusCode: resp[STATUS_CODE],
                      data: {
                          callSetting: dndRequestBody,
                      },
                      message: SUCCESS_MESSAGE,
                  };
                  return responseDetails;
              }
              catch (err) {
                  const errorInfo = err;
                  const errorStatus = serviceErrorCodeHandler(errorInfo, loggerContext);
                  return errorStatus;
              }
          });
      }
      getCallForwardSetting() {
          return __awaiter(this, void 0, void 0, function* () {
              const loggerContext = {
                  file: CALL_SETTINGS_FILE,
                  method: 'getCallForwardingSetting',
              };
              try {
                  const resp = yield this.webex.request({
                      uri: `${this.hydraEndpoint}/${PEOPLE_ENDPOINT}/${this.personId}/${CF_ENDPOINT}?${ORG_ENDPOINT}=${this.orgId}`,
                      method: HTTP_METHODS.GET,
                  });
                  const cfResponse = resp.body;
                  const responseDetails = {
                      statusCode: resp[STATUS_CODE],
                      data: {
                          callSetting: cfResponse,
                      },
                      message: SUCCESS_MESSAGE,
                  };
                  return responseDetails;
              }
              catch (err) {
                  const errorInfo = err;
                  const errorStatus = serviceErrorCodeHandler(errorInfo, loggerContext);
                  return errorStatus;
              }
          });
      }
      setCallForwardSetting(callForwardingRequest) {
          return __awaiter(this, void 0, void 0, function* () {
              const loggerContext = {
                  file: CALL_SETTINGS_FILE,
                  method: 'setCallForwardingSetting',
              };
              try {
                  const resp = yield this.webex.request({
                      uri: `${this.hydraEndpoint}/${PEOPLE_ENDPOINT}/${this.personId}/${CF_ENDPOINT}?${ORG_ENDPOINT}=${this.orgId}`,
                      method: HTTP_METHODS.PUT,
                      body: callForwardingRequest,
                  });
                  const responseDetails = {
                      statusCode: resp[STATUS_CODE],
                      data: {
                          callSetting: callForwardingRequest,
                      },
                      message: SUCCESS_MESSAGE,
                  };
                  return responseDetails;
              }
              catch (err) {
                  const errorInfo = err;
                  const errorStatus = serviceErrorCodeHandler(errorInfo, loggerContext);
                  return errorStatus;
              }
          });
      }
      getVoicemailSetting() {
          return __awaiter(this, void 0, void 0, function* () {
              const loggerContext = {
                  file: CALL_SETTINGS_FILE,
                  method: 'getVoicemailSetting',
              };
              try {
                  const resp = yield this.webex.request({
                      uri: `${this.hydraEndpoint}/${PEOPLE_ENDPOINT}/${this.personId}/${VM_ENDPOINT}?${ORG_ENDPOINT}=${this.orgId}`,
                      method: HTTP_METHODS.GET,
                  });
                  const vmResponse = resp.body;
                  const responseDetails = {
                      statusCode: resp[STATUS_CODE],
                      data: {
                          callSetting: vmResponse,
                      },
                      message: SUCCESS_MESSAGE,
                  };
                  return responseDetails;
              }
              catch (err) {
                  const errorInfo = err;
                  const errorStatus = serviceErrorCodeHandler(errorInfo, loggerContext);
                  return errorStatus;
              }
          });
      }
      setVoicemailSetting(voicemailRequest) {
          return __awaiter(this, void 0, void 0, function* () {
              const loggerContext = {
                  file: CALL_SETTINGS_FILE,
                  method: 'setVoicemailSetting',
              };
              try {
                  const resp = yield this.webex.request({
                      uri: `${this.hydraEndpoint}/${PEOPLE_ENDPOINT}/${this.personId}/${VM_ENDPOINT}?${ORG_ENDPOINT}=${this.orgId}`,
                      method: HTTP_METHODS.PUT,
                      body: voicemailRequest,
                  });
                  const responseDetails = {
                      statusCode: resp[STATUS_CODE],
                      data: {
                          callSetting: voicemailRequest,
                      },
                      message: SUCCESS_MESSAGE,
                  };
                  return responseDetails;
              }
              catch (err) {
                  const errorInfo = err;
                  const errorStatus = serviceErrorCodeHandler(errorInfo, loggerContext);
                  return errorStatus;
              }
          });
      }
      getSDKConnector() {
          return this.sdkConnector;
      }
  }
  const createCallSettingsClient = (webex, logger) => new CallSettings(webex, logger);

  const CONTACTS_FILE = 'Contacts';
  const CONTACT_FILTER = 'contacts';
  const ENCRYPT_FILTER = 'encrypt';
  const USERS = 'Users';

  var ContactType;
  (function (ContactType) {
      ContactType["CUSTOM"] = "CUSTOM";
      ContactType["CLOUD"] = "CLOUD";
  })(ContactType || (ContactType = {}));

  class ContactsClient {
      constructor(webex, logger) {
          this.sdkConnector = SDKConnector$1;
          if (!this.sdkConnector.getWebex()) {
              SDKConnector$1.setWebex(webex);
          }
          this.webex = this.sdkConnector.getWebex();
          log$1.setLogger(logger.level);
      }
      getSDKConnector() {
          return this.sdkConnector;
      }
      decryptContact(contact, avatarUrlDomain, encryptionKeyUrl, ownerId) {
          return __awaiter(this, void 0, void 0, function* () {
              const { addressInfo, companyName, displayName, emails, firstName, lastName, phoneNumbers, sipAddresses, title, } = contact;
              let decryptedCompanyName;
              let decryptedFirstName;
              let decryptedLastName;
              let decryptedTitle;
              if (addressInfo) {
                  for (let [key, value] of Object.entries(addressInfo)) {
                      if (value) {
                          value = yield this.webex.internal.encryption.decryptText(encryptionKeyUrl, value);
                      }
                      addressInfo[key] = value;
                  }
              }
              if (companyName) {
                  decryptedCompanyName = yield this.webex.internal.encryption.decryptText(encryptionKeyUrl, companyName);
              }
              const decryptedDisplayName = yield this.webex.internal.encryption.decryptText(encryptionKeyUrl, displayName);
              if (firstName) {
                  decryptedFirstName = yield this.webex.internal.encryption.decryptText(encryptionKeyUrl, firstName);
              }
              if (lastName) {
                  decryptedLastName = yield this.webex.internal.encryption.decryptText(encryptionKeyUrl, lastName);
              }
              if (emails) {
                  for (let i = 0; i < emails.length; i += 1) {
                      const email = emails[i].value;
                      emails[i].value = yield this.webex.internal.encryption.decryptText(encryptionKeyUrl, email);
                  }
              }
              if (phoneNumbers) {
                  for (let i = 0; i < phoneNumbers.length; i += 1) {
                      const number = phoneNumbers[i].value;
                      phoneNumbers[i].value = yield this.webex.internal.encryption.decryptText(encryptionKeyUrl, number);
                  }
              }
              if (sipAddresses) {
                  for (let i = 0; i < sipAddresses.length; i += 1) {
                      const sipAddress = sipAddresses[i].value;
                      sipAddresses[i].value = yield this.webex.internal.encryption.decryptText(encryptionKeyUrl, sipAddress);
                  }
              }
              if (title) {
                  decryptedTitle = yield this.webex.internal.encryption.decryptText(encryptionKeyUrl, title);
              }
              const decryptedContact = {
                  addressInfo,
                  avatarUrlDomain,
                  companyName: decryptedCompanyName,
                  contactId: contact.contactId,
                  contactType: ContactType.CUSTOM,
                  displayName: decryptedDisplayName,
                  emails,
                  encryptionKeyUrl,
                  firstName: decryptedFirstName,
                  groups: contact.groups,
                  lastName: decryptedLastName,
                  ownerId,
                  phoneNumbers,
                  sipAddresses,
                  title: decryptedTitle,
              };
              return decryptedContact;
          });
      }
      fetchContactFromDSS(contactGroupData, avatarUrlDomain, encryptionKeyUrl, ownerId) {
          return __awaiter(this, void 0, void 0, function* () {
              const contactList = [];
              const dssResult = yield this.webex.internal.dss.lookup({ ids: Object.keys(contactGroupData) });
              for (let i = 0; i < dssResult.length; i += 1) {
                  const contact = dssResult[i];
                  const contactId = contact.identity;
                  const { displayName, emails, phoneNumbers, sipAddresses } = contact;
                  const { department, firstName, identityManager, jobTitle, lastName } = contact.additionalInfo;
                  const manager = identityManager && identityManager.displayName ? identityManager.displayName : undefined;
                  const cloudContact = {
                      avatarUrlDomain,
                      contactId,
                      contactType: ContactType.CLOUD,
                      department,
                      displayName,
                      emails,
                      encryptionKeyUrl,
                      firstName,
                      groups: contactGroupData[contactId],
                      lastName,
                      manager,
                      ownerId,
                      phoneNumbers,
                      sipAddresses,
                      title: jobTitle,
                  };
                  contactList.push(cloudContact);
              }
              return contactList;
          });
      }
      getContacts() {
          return __awaiter(this, void 0, void 0, function* () {
              const loggerContext = {
                  file: CONTACTS_FILE,
                  method: 'getContacts',
              };
              const contactList = [];
              const contactGroupData = {};
              let avatarUrlDomain = '';
              let encryptionKeyUrl = '';
              let ownerId = '';
              try {
                  const response = yield this.webex.request({
                      uri: `${this.webex.internal.services._serviceUrls.contactsService}/${ENCRYPT_FILTER}/${USERS}/${CONTACT_FILTER}`,
                      method: HTTP_METHODS.GET,
                  });
                  const responseBody = response.body;
                  if (!responseBody) {
                      throw new Error(`${response}`);
                  }
                  const { contacts } = responseBody;
                  for (let i = 0; i < contacts.length; i += 1) {
                      const contact = contacts[i];
                      ({ avatarUrlDomain, encryptionKeyUrl, ownerId } = contact);
                      if (contact.contactType === ContactType.CUSTOM) {
                          const decryptedContact = yield this.decryptContact(contact, avatarUrlDomain, encryptionKeyUrl, ownerId);
                          contactList.push(decryptedContact);
                      }
                      else if (contact.contactType === ContactType.CLOUD) {
                          const { contactId, groups } = contact;
                          contactGroupData[contactId] = groups;
                      }
                  }
                  if (Object.keys(contactGroupData).length) {
                      const cloudContacts = yield this.fetchContactFromDSS(contactGroupData, avatarUrlDomain, encryptionKeyUrl, ownerId);
                      contactList.push(...cloudContacts);
                  }
                  const contactResponse = {
                      statusCode: response[STATUS_CODE],
                      data: {
                          contactList,
                      },
                      message: SUCCESS_MESSAGE,
                  };
                  return contactResponse;
              }
              catch (err) {
                  const errorInfo = err;
                  const errorStatus = serviceErrorCodeHandler(errorInfo, loggerContext);
                  return errorStatus;
              }
          });
      }
  }
  const createContactsClient = (webex, logger) => new ContactsClient(webex, logger);

  const E_CANCELED = new Error('request for lock canceled');

  var __awaiter$2 = function (thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  class Semaphore {
      constructor(_value, _cancelError = E_CANCELED) {
          this._value = _value;
          this._cancelError = _cancelError;
          this._weightedQueues = [];
          this._weightedWaiters = [];
      }
      acquire(weight = 1) {
          if (weight <= 0)
              throw new Error(`invalid weight ${weight}: must be positive`);
          return new Promise((resolve, reject) => {
              if (!this._weightedQueues[weight - 1])
                  this._weightedQueues[weight - 1] = [];
              this._weightedQueues[weight - 1].push({ resolve, reject });
              this._dispatch();
          });
      }
      runExclusive(callback, weight = 1) {
          return __awaiter$2(this, void 0, void 0, function* () {
              const [value, release] = yield this.acquire(weight);
              try {
                  return yield callback(value);
              }
              finally {
                  release();
              }
          });
      }
      waitForUnlock(weight = 1) {
          if (weight <= 0)
              throw new Error(`invalid weight ${weight}: must be positive`);
          return new Promise((resolve) => {
              if (!this._weightedWaiters[weight - 1])
                  this._weightedWaiters[weight - 1] = [];
              this._weightedWaiters[weight - 1].push(resolve);
              this._dispatch();
          });
      }
      isLocked() {
          return this._value <= 0;
      }
      getValue() {
          return this._value;
      }
      setValue(value) {
          this._value = value;
          this._dispatch();
      }
      release(weight = 1) {
          if (weight <= 0)
              throw new Error(`invalid weight ${weight}: must be positive`);
          this._value += weight;
          this._dispatch();
      }
      cancel() {
          this._weightedQueues.forEach((queue) => queue.forEach((entry) => entry.reject(this._cancelError)));
          this._weightedQueues = [];
      }
      _dispatch() {
          var _a;
          for (let weight = this._value; weight > 0; weight--) {
              const queueEntry = (_a = this._weightedQueues[weight - 1]) === null || _a === void 0 ? void 0 : _a.shift();
              if (!queueEntry)
                  continue;
              const previousValue = this._value;
              const previousWeight = weight;
              this._value -= weight;
              weight = this._value + 1;
              queueEntry.resolve([previousValue, this._newReleaser(previousWeight)]);
          }
          this._drainUnlockWaiters();
      }
      _newReleaser(weight) {
          let called = false;
          return () => {
              if (called)
                  return;
              called = true;
              this.release(weight);
          };
      }
      _drainUnlockWaiters() {
          for (let weight = this._value; weight > 0; weight--) {
              if (!this._weightedWaiters[weight - 1])
                  continue;
              this._weightedWaiters[weight - 1].forEach((waiter) => waiter());
              this._weightedWaiters[weight - 1] = [];
          }
      }
  }

  var __awaiter$1 = function (thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  class Mutex {
      constructor(cancelError) {
          this._semaphore = new Semaphore(1, cancelError);
      }
      acquire() {
          return __awaiter$1(this, void 0, void 0, function* () {
              const [, releaser] = yield this._semaphore.acquire();
              return releaser;
          });
      }
      runExclusive(callback) {
          return this._semaphore.runExclusive(() => callback());
      }
      isLocked() {
          return this._semaphore.isLocked();
      }
      waitForUnlock() {
          return this._semaphore.waitForUnlock();
      }
      release() {
          if (this._semaphore.isLocked())
              this._semaphore.release();
      }
      cancel() {
          return this._semaphore.cancel();
      }
  }

  var domain;

  // This constructor is used to store event handlers. Instantiating this is
  // faster than explicitly calling `Object.create(null)` to get a "clean" empty
  // object (tested with v8 v4.9).
  function EventHandlers() {}
  EventHandlers.prototype = Object.create(null);

  function EventEmitter() {
    EventEmitter.init.call(this);
  }

  // nodejs oddity
  // require('events') === require('events').EventEmitter
  EventEmitter.EventEmitter = EventEmitter;

  EventEmitter.usingDomains = false;

  EventEmitter.prototype.domain = undefined;
  EventEmitter.prototype._events = undefined;
  EventEmitter.prototype._maxListeners = undefined;

  // By default EventEmitters will print a warning if more than 10 listeners are
  // added to it. This is a useful default which helps finding memory leaks.
  EventEmitter.defaultMaxListeners = 10;

  EventEmitter.init = function() {
    this.domain = null;
    if (EventEmitter.usingDomains) {
      // if there is an active domain, then attach to it.
      if (domain.active ) ;
    }

    if (!this._events || this._events === Object.getPrototypeOf(this)._events) {
      this._events = new EventHandlers();
      this._eventsCount = 0;
    }

    this._maxListeners = this._maxListeners || undefined;
  };

  // Obviously not all Emitters should be limited to 10. This function allows
  // that to be increased. Set to zero for unlimited.
  EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
    if (typeof n !== 'number' || n < 0 || isNaN(n))
      throw new TypeError('"n" argument must be a positive number');
    this._maxListeners = n;
    return this;
  };

  function $getMaxListeners(that) {
    if (that._maxListeners === undefined)
      return EventEmitter.defaultMaxListeners;
    return that._maxListeners;
  }

  EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
    return $getMaxListeners(this);
  };

  // These standalone emit* functions are used to optimize calling of event
  // handlers for fast cases because emit() itself often has a variable number of
  // arguments and can be deoptimized because of that. These functions always have
  // the same number of arguments and thus do not get deoptimized, so the code
  // inside them can execute faster.
  function emitNone(handler, isFn, self) {
    if (isFn)
      handler.call(self);
    else {
      var len = handler.length;
      var listeners = arrayClone(handler, len);
      for (var i = 0; i < len; ++i)
        listeners[i].call(self);
    }
  }
  function emitOne(handler, isFn, self, arg1) {
    if (isFn)
      handler.call(self, arg1);
    else {
      var len = handler.length;
      var listeners = arrayClone(handler, len);
      for (var i = 0; i < len; ++i)
        listeners[i].call(self, arg1);
    }
  }
  function emitTwo(handler, isFn, self, arg1, arg2) {
    if (isFn)
      handler.call(self, arg1, arg2);
    else {
      var len = handler.length;
      var listeners = arrayClone(handler, len);
      for (var i = 0; i < len; ++i)
        listeners[i].call(self, arg1, arg2);
    }
  }
  function emitThree(handler, isFn, self, arg1, arg2, arg3) {
    if (isFn)
      handler.call(self, arg1, arg2, arg3);
    else {
      var len = handler.length;
      var listeners = arrayClone(handler, len);
      for (var i = 0; i < len; ++i)
        listeners[i].call(self, arg1, arg2, arg3);
    }
  }

  function emitMany(handler, isFn, self, args) {
    if (isFn)
      handler.apply(self, args);
    else {
      var len = handler.length;
      var listeners = arrayClone(handler, len);
      for (var i = 0; i < len; ++i)
        listeners[i].apply(self, args);
    }
  }

  EventEmitter.prototype.emit = function emit(type) {
    var er, handler, len, args, i, events, domain;
    var doError = (type === 'error');

    events = this._events;
    if (events)
      doError = (doError && events.error == null);
    else if (!doError)
      return false;

    domain = this.domain;

    // If there is no 'error' event listener then throw.
    if (doError) {
      er = arguments[1];
      if (domain) {
        if (!er)
          er = new Error('Uncaught, unspecified "error" event');
        er.domainEmitter = this;
        er.domain = domain;
        er.domainThrown = false;
        domain.emit('error', er);
      } else if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      } else {
        // At least give some kind of context to the user
        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
        err.context = er;
        throw err;
      }
      return false;
    }

    handler = events[type];

    if (!handler)
      return false;

    var isFn = typeof handler === 'function';
    len = arguments.length;
    switch (len) {
      // fast cases
      case 1:
        emitNone(handler, isFn, this);
        break;
      case 2:
        emitOne(handler, isFn, this, arguments[1]);
        break;
      case 3:
        emitTwo(handler, isFn, this, arguments[1], arguments[2]);
        break;
      case 4:
        emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
        break;
      // slower
      default:
        args = new Array(len - 1);
        for (i = 1; i < len; i++)
          args[i - 1] = arguments[i];
        emitMany(handler, isFn, this, args);
    }

    return true;
  };

  function _addListener(target, type, listener, prepend) {
    var m;
    var events;
    var existing;

    if (typeof listener !== 'function')
      throw new TypeError('"listener" argument must be a function');

    events = target._events;
    if (!events) {
      events = target._events = new EventHandlers();
      target._eventsCount = 0;
    } else {
      // To avoid recursion in the case that type === "newListener"! Before
      // adding it to the listeners, first emit "newListener".
      if (events.newListener) {
        target.emit('newListener', type,
                    listener.listener ? listener.listener : listener);

        // Re-assign `events` because a newListener handler could have caused the
        // this._events to be assigned to a new object
        events = target._events;
      }
      existing = events[type];
    }

    if (!existing) {
      // Optimize the case of one listener. Don't need the extra array object.
      existing = events[type] = listener;
      ++target._eventsCount;
    } else {
      if (typeof existing === 'function') {
        // Adding the second element, need to change to array.
        existing = events[type] = prepend ? [listener, existing] :
                                            [existing, listener];
      } else {
        // If we've already got an array, just append.
        if (prepend) {
          existing.unshift(listener);
        } else {
          existing.push(listener);
        }
      }

      // Check for listener leak
      if (!existing.warned) {
        m = $getMaxListeners(target);
        if (m && m > 0 && existing.length > m) {
          existing.warned = true;
          var w = new Error('Possible EventEmitter memory leak detected. ' +
                              existing.length + ' ' + type + ' listeners added. ' +
                              'Use emitter.setMaxListeners() to increase limit');
          w.name = 'MaxListenersExceededWarning';
          w.emitter = target;
          w.type = type;
          w.count = existing.length;
          emitWarning(w);
        }
      }
    }

    return target;
  }
  function emitWarning(e) {
    typeof console.warn === 'function' ? console.warn(e) : console.log(e);
  }
  EventEmitter.prototype.addListener = function addListener(type, listener) {
    return _addListener(this, type, listener, false);
  };

  EventEmitter.prototype.on = EventEmitter.prototype.addListener;

  EventEmitter.prototype.prependListener =
      function prependListener(type, listener) {
        return _addListener(this, type, listener, true);
      };

  function _onceWrap(target, type, listener) {
    var fired = false;
    function g() {
      target.removeListener(type, g);
      if (!fired) {
        fired = true;
        listener.apply(target, arguments);
      }
    }
    g.listener = listener;
    return g;
  }

  EventEmitter.prototype.once = function once(type, listener) {
    if (typeof listener !== 'function')
      throw new TypeError('"listener" argument must be a function');
    this.on(type, _onceWrap(this, type, listener));
    return this;
  };

  EventEmitter.prototype.prependOnceListener =
      function prependOnceListener(type, listener) {
        if (typeof listener !== 'function')
          throw new TypeError('"listener" argument must be a function');
        this.prependListener(type, _onceWrap(this, type, listener));
        return this;
      };

  // emits a 'removeListener' event iff the listener was removed
  EventEmitter.prototype.removeListener =
      function removeListener(type, listener) {
        var list, events, position, i, originalListener;

        if (typeof listener !== 'function')
          throw new TypeError('"listener" argument must be a function');

        events = this._events;
        if (!events)
          return this;

        list = events[type];
        if (!list)
          return this;

        if (list === listener || (list.listener && list.listener === listener)) {
          if (--this._eventsCount === 0)
            this._events = new EventHandlers();
          else {
            delete events[type];
            if (events.removeListener)
              this.emit('removeListener', type, list.listener || listener);
          }
        } else if (typeof list !== 'function') {
          position = -1;

          for (i = list.length; i-- > 0;) {
            if (list[i] === listener ||
                (list[i].listener && list[i].listener === listener)) {
              originalListener = list[i].listener;
              position = i;
              break;
            }
          }

          if (position < 0)
            return this;

          if (list.length === 1) {
            list[0] = undefined;
            if (--this._eventsCount === 0) {
              this._events = new EventHandlers();
              return this;
            } else {
              delete events[type];
            }
          } else {
            spliceOne(list, position);
          }

          if (events.removeListener)
            this.emit('removeListener', type, originalListener || listener);
        }

        return this;
      };
      
  // Alias for removeListener added in NodeJS 10.0
  // https://nodejs.org/api/events.html#events_emitter_off_eventname_listener
  EventEmitter.prototype.off = function(type, listener){
      return this.removeListener(type, listener);
  };

  EventEmitter.prototype.removeAllListeners =
      function removeAllListeners(type) {
        var listeners, events;

        events = this._events;
        if (!events)
          return this;

        // not listening for removeListener, no need to emit
        if (!events.removeListener) {
          if (arguments.length === 0) {
            this._events = new EventHandlers();
            this._eventsCount = 0;
          } else if (events[type]) {
            if (--this._eventsCount === 0)
              this._events = new EventHandlers();
            else
              delete events[type];
          }
          return this;
        }

        // emit removeListener for all listeners on all events
        if (arguments.length === 0) {
          var keys = Object.keys(events);
          for (var i = 0, key; i < keys.length; ++i) {
            key = keys[i];
            if (key === 'removeListener') continue;
            this.removeAllListeners(key);
          }
          this.removeAllListeners('removeListener');
          this._events = new EventHandlers();
          this._eventsCount = 0;
          return this;
        }

        listeners = events[type];

        if (typeof listeners === 'function') {
          this.removeListener(type, listeners);
        } else if (listeners) {
          // LIFO order
          do {
            this.removeListener(type, listeners[listeners.length - 1]);
          } while (listeners[0]);
        }

        return this;
      };

  EventEmitter.prototype.listeners = function listeners(type) {
    var evlistener;
    var ret;
    var events = this._events;

    if (!events)
      ret = [];
    else {
      evlistener = events[type];
      if (!evlistener)
        ret = [];
      else if (typeof evlistener === 'function')
        ret = [evlistener.listener || evlistener];
      else
        ret = unwrapListeners(evlistener);
    }

    return ret;
  };

  EventEmitter.listenerCount = function(emitter, type) {
    if (typeof emitter.listenerCount === 'function') {
      return emitter.listenerCount(type);
    } else {
      return listenerCount.call(emitter, type);
    }
  };

  EventEmitter.prototype.listenerCount = listenerCount;
  function listenerCount(type) {
    var events = this._events;

    if (events) {
      var evlistener = events[type];

      if (typeof evlistener === 'function') {
        return 1;
      } else if (evlistener) {
        return evlistener.length;
      }
    }

    return 0;
  }

  EventEmitter.prototype.eventNames = function eventNames() {
    return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
  };

  // About 1.5x faster than the two-arg version of Array#splice().
  function spliceOne(list, index) {
    for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)
      list[i] = list[k];
    list.pop();
  }

  function arrayClone(arr, i) {
    var copy = new Array(i);
    while (i--)
      copy[i] = arr[i];
    return copy;
  }

  function unwrapListeners(arr) {
    var ret = new Array(arr.length);
    for (var i = 0; i < ret.length; ++i) {
      ret[i] = arr[i].listener || arr[i];
    }
    return ret;
  }

  class Eventing extends EventEmitter {
      emit(event, ...args) {
          const timestamp = new Date().toUTCString();
          log$1.log(`${timestamp} ${LOG_PREFIX.EVENT}: ${event.toString()} - event emitted with parameters -> ${args} = `, {
              file: 'Events/impl/index.ts',
              method: 'emit',
          });
          return super.emit(event, ...args);
      }
      on(event, listener) {
          return super.on(event, listener);
      }
      off(event, listener) {
          return super.off(event, listener);
      }
  }

  // Unique ID creation requires a high quality random # generator. In the browser we therefore
  // require the crypto API and do not support built-in fallback to lower quality random number
  // generators (like Math.random()).
  var getRandomValues;
  var rnds8 = new Uint8Array(16);
  function rng() {
    // lazy load so that environments that need to polyfill have a chance to do so
    if (!getRandomValues) {
      // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation. Also,
      // find the complete implementation of crypto (msCrypto) on IE11.
      getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);

      if (!getRandomValues) {
        throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');
      }
    }

    return getRandomValues(rnds8);
  }

  var REGEX = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;

  function validate(uuid) {
    return typeof uuid === 'string' && REGEX.test(uuid);
  }

  /**
   * Convert array of 16 byte values to UUID string format of the form:
   * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
   */

  var byteToHex = [];

  for (var i = 0; i < 256; ++i) {
    byteToHex.push((i + 0x100).toString(16).substr(1));
  }

  function stringify(arr) {
    var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    // Note: Be careful editing this code!  It's been tuned for performance
    // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
    var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one
    // of the following:
    // - One or more input array values don't map to a hex octet (leading to
    // "undefined" in the uuid)
    // - Invalid input values for the RFC `version` or `variant` fields

    if (!validate(uuid)) {
      throw TypeError('Stringified UUID is invalid');
    }

    return uuid;
  }

  function parse(uuid) {
    if (!validate(uuid)) {
      throw TypeError('Invalid UUID');
    }

    var v;
    var arr = new Uint8Array(16); // Parse ########-....-....-....-............

    arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
    arr[1] = v >>> 16 & 0xff;
    arr[2] = v >>> 8 & 0xff;
    arr[3] = v & 0xff; // Parse ........-####-....-....-............

    arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
    arr[5] = v & 0xff; // Parse ........-....-####-....-............

    arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
    arr[7] = v & 0xff; // Parse ........-....-....-####-............

    arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
    arr[9] = v & 0xff; // Parse ........-....-....-....-############
    // (Use "/" to avoid 32-bit truncation when bit-shifting high-order bytes)

    arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;
    arr[11] = v / 0x100000000 & 0xff;
    arr[12] = v >>> 24 & 0xff;
    arr[13] = v >>> 16 & 0xff;
    arr[14] = v >>> 8 & 0xff;
    arr[15] = v & 0xff;
    return arr;
  }

  function stringToBytes(str) {
    str = unescape(encodeURIComponent(str)); // UTF8 escape

    var bytes = [];

    for (var i = 0; i < str.length; ++i) {
      bytes.push(str.charCodeAt(i));
    }

    return bytes;
  }

  var DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';
  var URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';
  function v35 (name, version, hashfunc) {
    function generateUUID(value, namespace, buf, offset) {
      if (typeof value === 'string') {
        value = stringToBytes(value);
      }

      if (typeof namespace === 'string') {
        namespace = parse(namespace);
      }

      if (namespace.length !== 16) {
        throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');
      } // Compute hash of namespace and value, Per 4.3
      // Future: Use spread syntax when supported on all platforms, e.g. `bytes =
      // hashfunc([...namespace, ... value])`


      var bytes = new Uint8Array(16 + value.length);
      bytes.set(namespace);
      bytes.set(value, namespace.length);
      bytes = hashfunc(bytes);
      bytes[6] = bytes[6] & 0x0f | version;
      bytes[8] = bytes[8] & 0x3f | 0x80;

      if (buf) {
        offset = offset || 0;

        for (var i = 0; i < 16; ++i) {
          buf[offset + i] = bytes[i];
        }

        return buf;
      }

      return stringify(bytes);
    } // Function#name is not settable on some platforms (#270)


    try {
      generateUUID.name = name; // eslint-disable-next-line no-empty
    } catch (err) {} // For CommonJS default export support


    generateUUID.DNS = DNS;
    generateUUID.URL = URL;
    return generateUUID;
  }

  /*
   * Browser-compatible JavaScript MD5
   *
   * Modification of JavaScript MD5
   * https://github.com/blueimp/JavaScript-MD5
   *
   * Copyright 2011, Sebastian Tschan
   * https://blueimp.net
   *
   * Licensed under the MIT license:
   * https://opensource.org/licenses/MIT
   *
   * Based on
   * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
   * Digest Algorithm, as defined in RFC 1321.
   * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009
   * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
   * Distributed under the BSD License
   * See http://pajhome.org.uk/crypt/md5 for more info.
   */
  function md5(bytes) {
    if (typeof bytes === 'string') {
      var msg = unescape(encodeURIComponent(bytes)); // UTF8 escape

      bytes = new Uint8Array(msg.length);

      for (var i = 0; i < msg.length; ++i) {
        bytes[i] = msg.charCodeAt(i);
      }
    }

    return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));
  }
  /*
   * Convert an array of little-endian words to an array of bytes
   */


  function md5ToHexEncodedArray(input) {
    var output = [];
    var length32 = input.length * 32;
    var hexTab = '0123456789abcdef';

    for (var i = 0; i < length32; i += 8) {
      var x = input[i >> 5] >>> i % 32 & 0xff;
      var hex = parseInt(hexTab.charAt(x >>> 4 & 0x0f) + hexTab.charAt(x & 0x0f), 16);
      output.push(hex);
    }

    return output;
  }
  /**
   * Calculate output length with padding and bit length
   */


  function getOutputLength(inputLength8) {
    return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;
  }
  /*
   * Calculate the MD5 of an array of little-endian words, and a bit length.
   */


  function wordsToMd5(x, len) {
    /* append padding */
    x[len >> 5] |= 0x80 << len % 32;
    x[getOutputLength(len) - 1] = len;
    var a = 1732584193;
    var b = -271733879;
    var c = -1732584194;
    var d = 271733878;

    for (var i = 0; i < x.length; i += 16) {
      var olda = a;
      var oldb = b;
      var oldc = c;
      var oldd = d;
      a = md5ff(a, b, c, d, x[i], 7, -680876936);
      d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);
      c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);
      b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);
      a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);
      d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);
      c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);
      b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);
      a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);
      d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);
      c = md5ff(c, d, a, b, x[i + 10], 17, -42063);
      b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);
      a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);
      d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);
      c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);
      b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);
      a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);
      d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);
      c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);
      b = md5gg(b, c, d, a, x[i], 20, -373897302);
      a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);
      d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);
      c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);
      b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);
      a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);
      d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);
      c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);
      b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);
      a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);
      d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);
      c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);
      b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);
      a = md5hh(a, b, c, d, x[i + 5], 4, -378558);
      d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);
      c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);
      b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);
      a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);
      d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);
      c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);
      b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);
      a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);
      d = md5hh(d, a, b, c, x[i], 11, -358537222);
      c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);
      b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);
      a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);
      d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);
      c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);
      b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);
      a = md5ii(a, b, c, d, x[i], 6, -198630844);
      d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);
      c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);
      b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);
      a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);
      d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);
      c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);
      b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);
      a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);
      d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);
      c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);
      b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);
      a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);
      d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);
      c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);
      b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);
      a = safeAdd(a, olda);
      b = safeAdd(b, oldb);
      c = safeAdd(c, oldc);
      d = safeAdd(d, oldd);
    }

    return [a, b, c, d];
  }
  /*
   * Convert an array bytes to an array of little-endian words
   * Characters >255 have their high-byte silently ignored.
   */


  function bytesToWords(input) {
    if (input.length === 0) {
      return [];
    }

    var length8 = input.length * 8;
    var output = new Uint32Array(getOutputLength(length8));

    for (var i = 0; i < length8; i += 8) {
      output[i >> 5] |= (input[i / 8] & 0xff) << i % 32;
    }

    return output;
  }
  /*
   * Add integers, wrapping at 2^32. This uses 16-bit operations internally
   * to work around bugs in some JS interpreters.
   */


  function safeAdd(x, y) {
    var lsw = (x & 0xffff) + (y & 0xffff);
    var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
    return msw << 16 | lsw & 0xffff;
  }
  /*
   * Bitwise rotate a 32-bit number to the left.
   */


  function bitRotateLeft(num, cnt) {
    return num << cnt | num >>> 32 - cnt;
  }
  /*
   * These functions implement the four basic operations the algorithm uses.
   */


  function md5cmn(q, a, b, x, s, t) {
    return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);
  }

  function md5ff(a, b, c, d, x, s, t) {
    return md5cmn(b & c | ~b & d, a, b, x, s, t);
  }

  function md5gg(a, b, c, d, x, s, t) {
    return md5cmn(b & d | c & ~d, a, b, x, s, t);
  }

  function md5hh(a, b, c, d, x, s, t) {
    return md5cmn(b ^ c ^ d, a, b, x, s, t);
  }

  function md5ii(a, b, c, d, x, s, t) {
    return md5cmn(c ^ (b | ~d), a, b, x, s, t);
  }

  v35('v3', 0x30, md5);

  function v4(options, buf, offset) {
    options = options || {};
    var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`

    rnds[6] = rnds[6] & 0x0f | 0x40;
    rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

    if (buf) {
      offset = offset || 0;

      for (var i = 0; i < 16; ++i) {
        buf[offset + i] = rnds[i];
      }

      return buf;
    }

    return stringify(rnds);
  }

  // Adapted from Chris Veness' SHA1 code at
  // http://www.movable-type.co.uk/scripts/sha1.html
  function f(s, x, y, z) {
    switch (s) {
      case 0:
        return x & y ^ ~x & z;

      case 1:
        return x ^ y ^ z;

      case 2:
        return x & y ^ x & z ^ y & z;

      case 3:
        return x ^ y ^ z;
    }
  }

  function ROTL(x, n) {
    return x << n | x >>> 32 - n;
  }

  function sha1(bytes) {
    var K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];
    var H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];

    if (typeof bytes === 'string') {
      var msg = unescape(encodeURIComponent(bytes)); // UTF8 escape

      bytes = [];

      for (var i = 0; i < msg.length; ++i) {
        bytes.push(msg.charCodeAt(i));
      }
    } else if (!Array.isArray(bytes)) {
      // Convert Array-like to Array
      bytes = Array.prototype.slice.call(bytes);
    }

    bytes.push(0x80);
    var l = bytes.length / 4 + 2;
    var N = Math.ceil(l / 16);
    var M = new Array(N);

    for (var _i = 0; _i < N; ++_i) {
      var arr = new Uint32Array(16);

      for (var j = 0; j < 16; ++j) {
        arr[j] = bytes[_i * 64 + j * 4] << 24 | bytes[_i * 64 + j * 4 + 1] << 16 | bytes[_i * 64 + j * 4 + 2] << 8 | bytes[_i * 64 + j * 4 + 3];
      }

      M[_i] = arr;
    }

    M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);
    M[N - 1][14] = Math.floor(M[N - 1][14]);
    M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;

    for (var _i2 = 0; _i2 < N; ++_i2) {
      var W = new Uint32Array(80);

      for (var t = 0; t < 16; ++t) {
        W[t] = M[_i2][t];
      }

      for (var _t = 16; _t < 80; ++_t) {
        W[_t] = ROTL(W[_t - 3] ^ W[_t - 8] ^ W[_t - 14] ^ W[_t - 16], 1);
      }

      var a = H[0];
      var b = H[1];
      var c = H[2];
      var d = H[3];
      var e = H[4];

      for (var _t2 = 0; _t2 < 80; ++_t2) {
        var s = Math.floor(_t2 / 20);
        var T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[_t2] >>> 0;
        e = d;
        d = c;
        c = ROTL(b, 30) >>> 0;
        b = a;
        a = T;
      }

      H[0] = H[0] + a >>> 0;
      H[1] = H[1] + b >>> 0;
      H[2] = H[2] + c >>> 0;
      H[3] = H[3] + d >>> 0;
      H[4] = H[4] + e >>> 0;
    }

    return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];
  }

  v35('v5', 0x50, sha1);

  class Registration {
      constructor(webex, serviceData) {
          this.userId = '';
          this.sdkConnector = SDKConnector$1;
          this.serviceData = serviceData;
          if (!this.sdkConnector.getWebex()) {
              SDKConnector$1.setWebex(webex);
          }
          this.webex = this.sdkConnector.getWebex();
          this.userId = this.webex.internal.device.userId;
      }
      postKeepAlive(url) {
          return __awaiter(this, void 0, void 0, function* () {
              return this.webex.request({
                  uri: `${url}/status`,
                  method: HTTP_METHODS.POST,
                  headers: {
                      [CISCO_DEVICE_URL]: this.webex.internal.device.url,
                      [SPARK_USER_AGENT]: CALLING_USER_AGENT,
                  },
                  service: ALLOWED_SERVICES.MOBIUS,
              });
          });
      }
      deleteDevice(url, deviceId, deviceUrl) {
          return __awaiter(this, void 0, void 0, function* () {
              const response = yield fetch(`${url}${DEVICES_ENDPOINT_RESOURCE}/${deviceId}`, {
                  method: HTTP_METHODS.DELETE,
                  headers: {
                      [CISCO_DEVICE_URL]: deviceUrl,
                      Authorization: yield this.webex.credentials.getUserToken(),
                      trackingId: `${WEBEX_WEB_CLIENT}_${v4()}`,
                      [SPARK_USER_AGENT]: CALLING_USER_AGENT,
                  },
              });
              return response.json();
          });
      }
      createDevice(url) {
          return __awaiter(this, void 0, void 0, function* () {
              const deviceInfo = {
                  userId: this.userId,
                  clientDeviceUri: this.webex.internal.device.url,
                  serviceData: this.serviceData,
              };
              return this.webex.request({
                  uri: `${url}device`,
                  method: HTTP_METHODS.POST,
                  headers: {
                      [CISCO_DEVICE_URL]: deviceInfo.clientDeviceUri,
                      [SPARK_USER_AGENT]: CALLING_USER_AGENT,
                  },
                  body: deviceInfo,
                  service: ALLOWED_SERVICES.MOBIUS,
              });
          });
      }
  }
  const createRegistration = (webex, serviceData) => new Registration(webex, serviceData);

  var MobiusEventType;
  (function (MobiusEventType) {
      MobiusEventType["CALL_SETUP"] = "mobius.call";
      MobiusEventType["CALL_PROGRESS"] = "mobius.callprogress";
      MobiusEventType["CALL_CONNECTED"] = "mobius.callconnected";
      MobiusEventType["CALL_MEDIA"] = "mobius.media";
      MobiusEventType["CALL_DISCONNECTED"] = "mobius.calldisconnected";
  })(MobiusEventType || (MobiusEventType = {}));
  var MediaState;
  (function (MediaState) {
      MediaState["OFFER"] = "OFFER";
      MediaState["ANSWER"] = "ANSWER";
      MediaState["OFFER_REQUEST"] = "OFFER_REQUEST";
      MediaState["OK"] = "OK";
      MediaState["ERROR"] = "ERROR";
  })(MediaState || (MediaState = {}));
  var DisconnectCode;
  (function (DisconnectCode) {
      DisconnectCode[DisconnectCode["BUSY"] = 115] = "BUSY";
      DisconnectCode[DisconnectCode["NORMAL"] = 0] = "NORMAL";
      DisconnectCode[DisconnectCode["MEDIA_INACTIVITY"] = 131] = "MEDIA_INACTIVITY";
  })(DisconnectCode || (DisconnectCode = {}));
  var DisconnectCause;
  (function (DisconnectCause) {
      DisconnectCause["BUSY"] = "User Busy.";
      DisconnectCause["NORMAL"] = "Normal Disconnect.";
      DisconnectCause["MEDIA_INACTIVITY"] = "Media Inactivity.";
  })(DisconnectCause || (DisconnectCause = {}));
  var MidCallEventType;
  (function (MidCallEventType) {
      MidCallEventType["CALL_INFO"] = "callInfo";
      MidCallEventType["CALL_STATE"] = "callState";
  })(MidCallEventType || (MidCallEventType = {}));
  var RoapScenario;
  (function (RoapScenario) {
      RoapScenario["ANSWER"] = "ANSWER";
      RoapScenario["OK"] = "OK";
      RoapScenario["OFFER"] = "OFFER";
      RoapScenario["ERROR"] = "ERROR";
      RoapScenario["OFFER_RESPONSE"] = "OFFER_RESPONSE";
  })(RoapScenario || (RoapScenario = {}));
  var MobiusCallState;
  (function (MobiusCallState) {
      MobiusCallState["PROCEEDING"] = "sig_proceeding";
      MobiusCallState["PROGRESS"] = "sig_progress";
      MobiusCallState["ALERTING"] = "sig_alerting";
      MobiusCallState["CONNECTED"] = "sig_connected";
  })(MobiusCallState || (MobiusCallState = {}));
  var TransferType;
  (function (TransferType) {
      TransferType["BLIND"] = "BLIND";
      TransferType["CONSULT"] = "CONSULT";
  })(TransferType || (TransferType = {}));

  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation.

  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */

  var __assign = function() {
      __assign = Object.assign || function __assign(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
              s = arguments[i];
              for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
          return t;
      };
      return __assign.apply(this, arguments);
  };

  function __rest(s, e) {
      var t = {};
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
              if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                  t[p[i]] = s[p[i]];
          }
      return t;
  }

  function __values(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m) return m.call(o);
      if (o && typeof o.length === "number") return {
          next: function () {
              if (o && i >= o.length) o = void 0;
              return { value: o && o[i++], done: !o };
          }
      };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
  }

  function __read(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o), r, ar = [], e;
      try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      }
      catch (error) { e = { error: error }; }
      finally {
          try {
              if (r && !r.done && (m = i["return"])) m.call(i);
          }
          finally { if (e) throw e.error; }
      }
      return ar;
  }

  function __spreadArray(to, from, pack) {
      if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
          if (ar || !(i in from)) {
              if (!ar) ar = Array.prototype.slice.call(from, 0, i);
              ar[i] = from[i];
          }
      }
      return to.concat(ar || Array.prototype.slice.call(from));
  }

  var ActionTypes;

  (function (ActionTypes) {
    ActionTypes["Start"] = "xstate.start";
    ActionTypes["Stop"] = "xstate.stop";
    ActionTypes["Raise"] = "xstate.raise";
    ActionTypes["Send"] = "xstate.send";
    ActionTypes["Cancel"] = "xstate.cancel";
    ActionTypes["NullEvent"] = "";
    ActionTypes["Assign"] = "xstate.assign";
    ActionTypes["After"] = "xstate.after";
    ActionTypes["DoneState"] = "done.state";
    ActionTypes["DoneInvoke"] = "done.invoke";
    ActionTypes["Log"] = "xstate.log";
    ActionTypes["Init"] = "xstate.init";
    ActionTypes["Invoke"] = "xstate.invoke";
    ActionTypes["ErrorExecution"] = "error.execution";
    ActionTypes["ErrorCommunication"] = "error.communication";
    ActionTypes["ErrorPlatform"] = "error.platform";
    ActionTypes["ErrorCustom"] = "xstate.error";
    ActionTypes["Update"] = "xstate.update";
    ActionTypes["Pure"] = "xstate.pure";
    ActionTypes["Choose"] = "xstate.choose";
  })(ActionTypes || (ActionTypes = {}));

  var SpecialTargets;

  (function (SpecialTargets) {
    SpecialTargets["Parent"] = "#_parent";
    SpecialTargets["Internal"] = "#_internal";
  })(SpecialTargets || (SpecialTargets = {}));

  var start$1 = ActionTypes.Start;
  var stop$1 = ActionTypes.Stop;
  var raise$1 = ActionTypes.Raise;
  var send$1 = ActionTypes.Send;
  var cancel$1 = ActionTypes.Cancel;
  var nullEvent = ActionTypes.NullEvent;
  var assign = ActionTypes.Assign;
  ActionTypes.After;
  ActionTypes.DoneState;
  var log = ActionTypes.Log;
  var init = ActionTypes.Init;
  var invoke = ActionTypes.Invoke;
  ActionTypes.ErrorExecution;
  var errorPlatform = ActionTypes.ErrorPlatform;
  var error$1 = ActionTypes.ErrorCustom;
  var update = ActionTypes.Update;
  var choose = ActionTypes.Choose;
  var pure = ActionTypes.Pure;

  var STATE_DELIMITER = '.';
  var EMPTY_ACTIVITY_MAP = {};
  var DEFAULT_GUARD_TYPE = 'xstate.guard';
  var TARGETLESS_KEY = '';

  var IS_PRODUCTION = process.env.NODE_ENV === 'production';

  var _a;
  function matchesState(parentStateId, childStateId, delimiter) {
    if (delimiter === void 0) {
      delimiter = STATE_DELIMITER;
    }

    var parentStateValue = toStateValue(parentStateId, delimiter);
    var childStateValue = toStateValue(childStateId, delimiter);

    if (isString(childStateValue)) {
      if (isString(parentStateValue)) {
        return childStateValue === parentStateValue;
      } // Parent more specific than child


      return false;
    }

    if (isString(parentStateValue)) {
      return parentStateValue in childStateValue;
    }

    return Object.keys(parentStateValue).every(function (key) {
      if (!(key in childStateValue)) {
        return false;
      }

      return matchesState(parentStateValue[key], childStateValue[key]);
    });
  }
  function getEventType(event) {
    try {
      return isString(event) || typeof event === 'number' ? "".concat(event) : event.type;
    } catch (e) {
      throw new Error('Events must be strings or objects with a string event.type property.');
    }
  }
  function toStatePath(stateId, delimiter) {
    try {
      if (isArray(stateId)) {
        return stateId;
      }

      return stateId.toString().split(delimiter);
    } catch (e) {
      throw new Error("'".concat(stateId, "' is not a valid state path."));
    }
  }
  function isStateLike(state) {
    return typeof state === 'object' && 'value' in state && 'context' in state && 'event' in state && '_event' in state;
  }
  function toStateValue(stateValue, delimiter) {
    if (isStateLike(stateValue)) {
      return stateValue.value;
    }

    if (isArray(stateValue)) {
      return pathToStateValue(stateValue);
    }

    if (typeof stateValue !== 'string') {
      return stateValue;
    }

    var statePath = toStatePath(stateValue, delimiter);
    return pathToStateValue(statePath);
  }
  function pathToStateValue(statePath) {
    if (statePath.length === 1) {
      return statePath[0];
    }

    var value = {};
    var marker = value;

    for (var i = 0; i < statePath.length - 1; i++) {
      if (i === statePath.length - 2) {
        marker[statePath[i]] = statePath[i + 1];
      } else {
        marker[statePath[i]] = {};
        marker = marker[statePath[i]];
      }
    }

    return value;
  }
  function mapValues(collection, iteratee) {
    var result = {};
    var collectionKeys = Object.keys(collection);

    for (var i = 0; i < collectionKeys.length; i++) {
      var key = collectionKeys[i];
      result[key] = iteratee(collection[key], key, collection, i);
    }

    return result;
  }
  function mapFilterValues(collection, iteratee, predicate) {
    var e_1, _a;

    var result = {};

    try {
      for (var _b = __values(Object.keys(collection)), _c = _b.next(); !_c.done; _c = _b.next()) {
        var key = _c.value;
        var item = collection[key];

        if (!predicate(item)) {
          continue;
        }

        result[key] = iteratee(item, key, collection);
      }
    } catch (e_1_1) {
      e_1 = {
        error: e_1_1
      };
    } finally {
      try {
        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
      } finally {
        if (e_1) throw e_1.error;
      }
    }

    return result;
  }
  /**
   * Retrieves a value at the given path.
   * @param props The deep path to the prop of the desired value
   */

  var path = function (props) {
    return function (object) {
      var e_2, _a;

      var result = object;

      try {
        for (var props_1 = __values(props), props_1_1 = props_1.next(); !props_1_1.done; props_1_1 = props_1.next()) {
          var prop = props_1_1.value;
          result = result[prop];
        }
      } catch (e_2_1) {
        e_2 = {
          error: e_2_1
        };
      } finally {
        try {
          if (props_1_1 && !props_1_1.done && (_a = props_1.return)) _a.call(props_1);
        } finally {
          if (e_2) throw e_2.error;
        }
      }

      return result;
    };
  };
  /**
   * Retrieves a value at the given path via the nested accessor prop.
   * @param props The deep path to the prop of the desired value
   */

  function nestedPath(props, accessorProp) {
    return function (object) {
      var e_3, _a;

      var result = object;

      try {
        for (var props_2 = __values(props), props_2_1 = props_2.next(); !props_2_1.done; props_2_1 = props_2.next()) {
          var prop = props_2_1.value;
          result = result[accessorProp][prop];
        }
      } catch (e_3_1) {
        e_3 = {
          error: e_3_1
        };
      } finally {
        try {
          if (props_2_1 && !props_2_1.done && (_a = props_2.return)) _a.call(props_2);
        } finally {
          if (e_3) throw e_3.error;
        }
      }

      return result;
    };
  }
  function toStatePaths(stateValue) {
    if (!stateValue) {
      return [[]];
    }

    if (isString(stateValue)) {
      return [[stateValue]];
    }

    var result = flatten(Object.keys(stateValue).map(function (key) {
      var subStateValue = stateValue[key];

      if (typeof subStateValue !== 'string' && (!subStateValue || !Object.keys(subStateValue).length)) {
        return [[key]];
      }

      return toStatePaths(stateValue[key]).map(function (subPath) {
        return [key].concat(subPath);
      });
    }));
    return result;
  }
  function flatten(array) {
    var _a;

    return (_a = []).concat.apply(_a, __spreadArray([], __read(array), false));
  }
  function toArrayStrict(value) {
    if (isArray(value)) {
      return value;
    }

    return [value];
  }
  function toArray(value) {
    if (value === undefined) {
      return [];
    }

    return toArrayStrict(value);
  }
  function mapContext(mapper, context, _event) {
    var e_5, _a;

    if (isFunction(mapper)) {
      return mapper(context, _event.data);
    }

    var result = {};

    try {
      for (var _b = __values(Object.keys(mapper)), _c = _b.next(); !_c.done; _c = _b.next()) {
        var key = _c.value;
        var subMapper = mapper[key];

        if (isFunction(subMapper)) {
          result[key] = subMapper(context, _event.data);
        } else {
          result[key] = subMapper;
        }
      }
    } catch (e_5_1) {
      e_5 = {
        error: e_5_1
      };
    } finally {
      try {
        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
      } finally {
        if (e_5) throw e_5.error;
      }
    }

    return result;
  }
  function isBuiltInEvent(eventType) {
    return /^(done|error)\./.test(eventType);
  }
  function isPromiseLike(value) {
    if (value instanceof Promise) {
      return true;
    } // Check if shape matches the Promise/A+ specification for a "thenable".


    if (value !== null && (isFunction(value) || typeof value === 'object') && isFunction(value.then)) {
      return true;
    }

    return false;
  }
  function isBehavior(value) {
    return value !== null && typeof value === 'object' && 'transition' in value && typeof value.transition === 'function';
  }
  function partition(items, predicate) {
    var e_6, _a;

    var _b = __read([[], []], 2),
        truthy = _b[0],
        falsy = _b[1];

    try {
      for (var items_1 = __values(items), items_1_1 = items_1.next(); !items_1_1.done; items_1_1 = items_1.next()) {
        var item = items_1_1.value;

        if (predicate(item)) {
          truthy.push(item);
        } else {
          falsy.push(item);
        }
      }
    } catch (e_6_1) {
      e_6 = {
        error: e_6_1
      };
    } finally {
      try {
        if (items_1_1 && !items_1_1.done && (_a = items_1.return)) _a.call(items_1);
      } finally {
        if (e_6) throw e_6.error;
      }
    }

    return [truthy, falsy];
  }
  function updateHistoryStates(hist, stateValue) {
    return mapValues(hist.states, function (subHist, key) {
      if (!subHist) {
        return undefined;
      }

      var subStateValue = (isString(stateValue) ? undefined : stateValue[key]) || (subHist ? subHist.current : undefined);

      if (!subStateValue) {
        return undefined;
      }

      return {
        current: subStateValue,
        states: updateHistoryStates(subHist, subStateValue)
      };
    });
  }
  function updateHistoryValue(hist, stateValue) {
    return {
      current: stateValue,
      states: updateHistoryStates(hist, stateValue)
    };
  }
  function updateContext(context, _event, assignActions, state) {
    if (!IS_PRODUCTION) {
      warn(!!context, 'Attempting to update undefined context');
    }

    var updatedContext = context ? assignActions.reduce(function (acc, assignAction) {
      var e_7, _a;

      var assignment = assignAction.assignment;
      var meta = {
        state: state,
        action: assignAction,
        _event: _event
      };
      var partialUpdate = {};

      if (isFunction(assignment)) {
        partialUpdate = assignment(acc, _event.data, meta);
      } else {
        try {
          for (var _b = __values(Object.keys(assignment)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var key = _c.value;
            var propAssignment = assignment[key];
            partialUpdate[key] = isFunction(propAssignment) ? propAssignment(acc, _event.data, meta) : propAssignment;
          }
        } catch (e_7_1) {
          e_7 = {
            error: e_7_1
          };
        } finally {
          try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
          } finally {
            if (e_7) throw e_7.error;
          }
        }
      }

      return Object.assign({}, acc, partialUpdate);
    }, context) : context;
    return updatedContext;
  } // tslint:disable-next-line:no-empty

  var warn = function () {};

  if (!IS_PRODUCTION) {
    warn = function (condition, message) {
      var error = condition instanceof Error ? condition : undefined;

      if (!error && condition) {
        return;
      }

      if (console !== undefined) {
        var args = ["Warning: ".concat(message)];

        if (error) {
          args.push(error);
        } // tslint:disable-next-line:no-console


        console.warn.apply(console, args);
      }
    };
  }
  function isArray(value) {
    return Array.isArray(value);
  } // tslint:disable-next-line:ban-types

  function isFunction(value) {
    return typeof value === 'function';
  }
  function isString(value) {
    return typeof value === 'string';
  }
  function toGuard(condition, guardMap) {
    if (!condition) {
      return undefined;
    }

    if (isString(condition)) {
      return {
        type: DEFAULT_GUARD_TYPE,
        name: condition,
        predicate: guardMap ? guardMap[condition] : undefined
      };
    }

    if (isFunction(condition)) {
      return {
        type: DEFAULT_GUARD_TYPE,
        name: condition.name,
        predicate: condition
      };
    }

    return condition;
  }
  function isObservable(value) {
    try {
      return 'subscribe' in value && isFunction(value.subscribe);
    } catch (e) {
      return false;
    }
  }
  var symbolObservable = /*#__PURE__*/function () {
    return typeof Symbol === 'function' && Symbol.observable || '@@observable';
  }(); // TODO: to be removed in v5, left it out just to minimize the scope of the change and maintain compatibility with older versions of integration paackages

  (_a = {}, _a[symbolObservable] = function () {
    return this;
  }, _a[Symbol.observable] = function () {
    return this;
  }, _a);
  function isMachine(value) {
    return !!value && '__xstatenode' in value;
  }
  function isActor$1(value) {
    return !!value && typeof value.send === 'function';
  }
  function toEventObject(event, payload // id?: TEvent['type']
  ) {
    if (isString(event) || typeof event === 'number') {
      return __assign({
        type: event
      }, payload);
    }

    return event;
  }
  function toSCXMLEvent(event, scxmlEvent) {
    if (!isString(event) && '$$type' in event && event.$$type === 'scxml') {
      return event;
    }

    var eventObject = toEventObject(event);
    return __assign({
      name: eventObject.type,
      data: eventObject,
      $$type: 'scxml',
      type: 'external'
    }, scxmlEvent);
  }
  function toTransitionConfigArray(event, configLike) {
    var transitions = toArrayStrict(configLike).map(function (transitionLike) {
      if (typeof transitionLike === 'undefined' || typeof transitionLike === 'string' || isMachine(transitionLike)) {
        return {
          target: transitionLike,
          event: event
        };
      }

      return __assign(__assign({}, transitionLike), {
        event: event
      });
    });
    return transitions;
  }
  function normalizeTarget(target) {
    if (target === undefined || target === TARGETLESS_KEY) {
      return undefined;
    }

    return toArray(target);
  }
  function reportUnhandledExceptionOnInvocation(originalError, currentError, id) {
    if (!IS_PRODUCTION) {
      var originalStackTrace = originalError.stack ? " Stacktrace was '".concat(originalError.stack, "'") : '';

      if (originalError === currentError) {
        // tslint:disable-next-line:no-console
        console.error("Missing onError handler for invocation '".concat(id, "', error was '").concat(originalError, "'.").concat(originalStackTrace));
      } else {
        var stackTrace = currentError.stack ? " Stacktrace was '".concat(currentError.stack, "'") : ''; // tslint:disable-next-line:no-console

        console.error("Missing onError handler and/or unhandled exception/promise rejection for invocation '".concat(id, "'. ") + "Original error: '".concat(originalError, "'. ").concat(originalStackTrace, " Current error is '").concat(currentError, "'.").concat(stackTrace));
      }
    }
  }
  function evaluateGuard(machine, guard, context, _event, state) {
    var guards = machine.options.guards;
    var guardMeta = {
      state: state,
      cond: guard,
      _event: _event
    }; // TODO: do not hardcode!

    if (guard.type === DEFAULT_GUARD_TYPE) {
      return ((guards === null || guards === void 0 ? void 0 : guards[guard.name]) || guard.predicate)(context, _event.data, guardMeta);
    }

    var condFn = guards === null || guards === void 0 ? void 0 : guards[guard.type];

    if (!condFn) {
      throw new Error("Guard '".concat(guard.type, "' is not implemented on machine '").concat(machine.id, "'."));
    }

    return condFn(context, _event.data, guardMeta);
  }
  function toInvokeSource$1(src) {
    if (typeof src === 'string') {
      return {
        type: src
      };
    }

    return src;
  }
  function toObserver(nextHandler, errorHandler, completionHandler) {
    if (typeof nextHandler === 'object') {
      return nextHandler;
    }

    var noop = function () {
      return void 0;
    };

    return {
      next: nextHandler,
      error: errorHandler || noop,
      complete: completionHandler || noop
    };
  }
  function createInvokeId(stateNodeId, index) {
    return "".concat(stateNodeId, ":invocation[").concat(index, "]");
  }

  var initEvent = /*#__PURE__*/toSCXMLEvent({
    type: init
  });
  function getActionFunction(actionType, actionFunctionMap) {
    return actionFunctionMap ? actionFunctionMap[actionType] || undefined : undefined;
  }
  function toActionObject(action, actionFunctionMap) {
    var actionObject;

    if (isString(action) || typeof action === 'number') {
      var exec = getActionFunction(action, actionFunctionMap);

      if (isFunction(exec)) {
        actionObject = {
          type: action,
          exec: exec
        };
      } else if (exec) {
        actionObject = exec;
      } else {
        actionObject = {
          type: action,
          exec: undefined
        };
      }
    } else if (isFunction(action)) {
      actionObject = {
        // Convert action to string if unnamed
        type: action.name || action.toString(),
        exec: action
      };
    } else {
      var exec = getActionFunction(action.type, actionFunctionMap);

      if (isFunction(exec)) {
        actionObject = __assign(__assign({}, action), {
          exec: exec
        });
      } else if (exec) {
        var actionType = exec.type || action.type;
        actionObject = __assign(__assign(__assign({}, exec), action), {
          type: actionType
        });
      } else {
        actionObject = action;
      }
    }

    return actionObject;
  }
  var toActionObjects = function (action, actionFunctionMap) {
    if (!action) {
      return [];
    }

    var actions = isArray(action) ? action : [action];
    return actions.map(function (subAction) {
      return toActionObject(subAction, actionFunctionMap);
    });
  };
  function toActivityDefinition(action) {
    var actionObject = toActionObject(action);
    return __assign(__assign({
      id: isString(action) ? action : actionObject.id
    }, actionObject), {
      type: actionObject.type
    });
  }
  /**
   * Raises an event. This places the event in the internal event queue, so that
   * the event is immediately consumed by the machine in the current step.
   *
   * @param eventType The event to raise.
   */

  function raise(event) {
    if (!isString(event)) {
      return send(event, {
        to: SpecialTargets.Internal
      });
    }

    return {
      type: raise$1,
      event: event
    };
  }
  function resolveRaise(action) {
    return {
      type: raise$1,
      _event: toSCXMLEvent(action.event)
    };
  }
  /**
   * Sends an event. This returns an action that will be read by an interpreter to
   * send the event in the next step, after the current step is finished executing.
   *
   * @param event The event to send.
   * @param options Options to pass into the send event:
   *  - `id` - The unique send event identifier (used with `cancel()`).
   *  - `delay` - The number of milliseconds to delay the sending of the event.
   *  - `to` - The target of this event (by default, the machine the event was sent from).
   */

  function send(event, options) {
    return {
      to: options ? options.to : undefined,
      type: send$1,
      event: isFunction(event) ? event : toEventObject(event),
      delay: options ? options.delay : undefined,
      id: options && options.id !== undefined ? options.id : isFunction(event) ? event.name : getEventType(event)
    };
  }
  function resolveSend(action, ctx, _event, delaysMap) {
    var meta = {
      _event: _event
    }; // TODO: helper function for resolving Expr

    var resolvedEvent = toSCXMLEvent(isFunction(action.event) ? action.event(ctx, _event.data, meta) : action.event);
    var resolvedDelay;

    if (isString(action.delay)) {
      var configDelay = delaysMap && delaysMap[action.delay];
      resolvedDelay = isFunction(configDelay) ? configDelay(ctx, _event.data, meta) : configDelay;
    } else {
      resolvedDelay = isFunction(action.delay) ? action.delay(ctx, _event.data, meta) : action.delay;
    }

    var resolvedTarget = isFunction(action.to) ? action.to(ctx, _event.data, meta) : action.to;
    return __assign(__assign({}, action), {
      to: resolvedTarget,
      _event: resolvedEvent,
      event: resolvedEvent.data,
      delay: resolvedDelay
    });
  }
  var resolveLog = function (action, ctx, _event) {
    return __assign(__assign({}, action), {
      value: isString(action.expr) ? action.expr : action.expr(ctx, _event.data, {
        _event: _event
      })
    });
  };
  /**
   * Cancels an in-flight `send(...)` action. A canceled sent action will not
   * be executed, nor will its event be sent, unless it has already been sent
   * (e.g., if `cancel(...)` is called after the `send(...)` action's `delay`).
   *
   * @param sendId The `id` of the `send(...)` action to cancel.
   */

  var cancel = function (sendId) {
    return {
      type: cancel$1,
      sendId: sendId
    };
  };
  /**
   * Starts an activity.
   *
   * @param activity The activity to start.
   */

  function start(activity) {
    var activityDef = toActivityDefinition(activity);
    return {
      type: ActionTypes.Start,
      activity: activityDef,
      exec: undefined
    };
  }
  /**
   * Stops an activity.
   *
   * @param actorRef The activity to stop.
   */

  function stop(actorRef) {
    var activity = isFunction(actorRef) ? actorRef : toActivityDefinition(actorRef);
    return {
      type: ActionTypes.Stop,
      activity: activity,
      exec: undefined
    };
  }
  function resolveStop(action, context, _event) {
    var actorRefOrString = isFunction(action.activity) ? action.activity(context, _event.data) : action.activity;
    var resolvedActorRef = typeof actorRefOrString === 'string' ? {
      id: actorRefOrString
    } : actorRefOrString;
    var actionObject = {
      type: ActionTypes.Stop,
      activity: resolvedActorRef
    };
    return actionObject;
  }
  /**
   * Returns an event type that represents an implicit event that
   * is sent after the specified `delay`.
   *
   * @param delayRef The delay in milliseconds
   * @param id The state node ID where this event is handled
   */

  function after(delayRef, id) {
    var idSuffix = id ? "#".concat(id) : '';
    return "".concat(ActionTypes.After, "(").concat(delayRef, ")").concat(idSuffix);
  }
  /**
   * Returns an event that represents that a final state node
   * has been reached in the parent state node.
   *
   * @param id The final state node's parent state node `id`
   * @param data The data to pass into the event
   */

  function done(id, data) {
    var type = "".concat(ActionTypes.DoneState, ".").concat(id);
    var eventObject = {
      type: type,
      data: data
    };

    eventObject.toString = function () {
      return type;
    };

    return eventObject;
  }
  /**
   * Returns an event that represents that an invoked service has terminated.
   *
   * An invoked service is terminated when it has reached a top-level final state node,
   * but not when it is canceled.
   *
   * @param id The final state node ID
   * @param data The data to pass into the event
   */

  function doneInvoke(id, data) {
    var type = "".concat(ActionTypes.DoneInvoke, ".").concat(id);
    var eventObject = {
      type: type,
      data: data
    };

    eventObject.toString = function () {
      return type;
    };

    return eventObject;
  }
  function error(id, data) {
    var type = "".concat(ActionTypes.ErrorPlatform, ".").concat(id);
    var eventObject = {
      type: type,
      data: data
    };

    eventObject.toString = function () {
      return type;
    };

    return eventObject;
  }
  function resolveActions(machine, currentState, currentContext, _event, actions, preserveActionOrder) {
    if (preserveActionOrder === void 0) {
      preserveActionOrder = false;
    }

    var _a = __read(preserveActionOrder ? [[], actions] : partition(actions, function (action) {
      return action.type === assign;
    }), 2),
        assignActions = _a[0],
        otherActions = _a[1];

    var updatedContext = assignActions.length ? updateContext(currentContext, _event, assignActions, currentState) : currentContext;
    var preservedContexts = preserveActionOrder ? [currentContext] : undefined;
    var resolvedActions = flatten(otherActions.map(function (actionObject) {
      var _a;

      switch (actionObject.type) {
        case raise$1:
          return resolveRaise(actionObject);

        case send$1:
          var sendAction = resolveSend(actionObject, updatedContext, _event, machine.options.delays); // TODO: fix ActionTypes.Init

          if (!IS_PRODUCTION) {
            // warn after resolving as we can create better contextual message here
            warn(!isString(actionObject.delay) || typeof sendAction.delay === 'number', // tslint:disable-next-line:max-line-length
            "No delay reference for delay expression '".concat(actionObject.delay, "' was found on machine '").concat(machine.id, "'"));
          }

          return sendAction;

        case log:
          return resolveLog(actionObject, updatedContext, _event);

        case choose:
          {
            var chooseAction = actionObject;
            var matchedActions = (_a = chooseAction.conds.find(function (condition) {
              var guard = toGuard(condition.cond, machine.options.guards);
              return !guard || evaluateGuard(machine, guard, updatedContext, _event, currentState);
            })) === null || _a === void 0 ? void 0 : _a.actions;

            if (!matchedActions) {
              return [];
            }

            var _b = __read(resolveActions(machine, currentState, updatedContext, _event, toActionObjects(toArray(matchedActions), machine.options.actions), preserveActionOrder), 2),
                resolvedActionsFromChoose = _b[0],
                resolvedContextFromChoose = _b[1];

            updatedContext = resolvedContextFromChoose;
            preservedContexts === null || preservedContexts === void 0 ? void 0 : preservedContexts.push(updatedContext);
            return resolvedActionsFromChoose;
          }

        case pure:
          {
            var matchedActions = actionObject.get(updatedContext, _event.data);

            if (!matchedActions) {
              return [];
            }

            var _c = __read(resolveActions(machine, currentState, updatedContext, _event, toActionObjects(toArray(matchedActions), machine.options.actions), preserveActionOrder), 2),
                resolvedActionsFromPure = _c[0],
                resolvedContext = _c[1];

            updatedContext = resolvedContext;
            preservedContexts === null || preservedContexts === void 0 ? void 0 : preservedContexts.push(updatedContext);
            return resolvedActionsFromPure;
          }

        case stop$1:
          {
            return resolveStop(actionObject, updatedContext, _event);
          }

        case assign:
          {
            updatedContext = updateContext(updatedContext, _event, [actionObject], currentState);
            preservedContexts === null || preservedContexts === void 0 ? void 0 : preservedContexts.push(updatedContext);
            break;
          }

        default:
          var resolvedActionObject = toActionObject(actionObject, machine.options.actions);
          var exec_1 = resolvedActionObject.exec;

          if (exec_1 && preservedContexts) {
            var contextIndex_1 = preservedContexts.length - 1;
            resolvedActionObject = __assign(__assign({}, resolvedActionObject), {
              exec: function (_ctx) {
                var args = [];

                for (var _i = 1; _i < arguments.length; _i++) {
                  args[_i - 1] = arguments[_i];
                }

                exec_1.apply(void 0, __spreadArray([preservedContexts[contextIndex_1]], __read(args), false));
              }
            });
          }

          return resolvedActionObject;
      }
    }).filter(function (a) {
      return !!a;
    }));
    return [resolvedActions, updatedContext];
  }

  /**
   * Maintains a stack of the current service in scope.
   * This is used to provide the correct service to spawn().
   */
  var provide = function (service, fn) {
    var result = fn(service);
    return result;
  };

  function createNullActor(id) {
    var _a;

    return _a = {
      id: id,
      send: function () {
        return void 0;
      },
      subscribe: function () {
        return {
          unsubscribe: function () {
            return void 0;
          }
        };
      },
      getSnapshot: function () {
        return undefined;
      },
      toJSON: function () {
        return {
          id: id
        };
      }
    }, _a[symbolObservable] = function () {
      return this;
    }, _a;
  }
  /**
   * Creates a deferred actor that is able to be invoked given the provided
   * invocation information in its `.meta` value.
   *
   * @param invokeDefinition The meta information needed to invoke the actor.
   */

  function createInvocableActor(invokeDefinition, machine, context, _event) {
    var _a;

    var invokeSrc = toInvokeSource$1(invokeDefinition.src);
    var serviceCreator = (_a = machine === null || machine === void 0 ? void 0 : machine.options.services) === null || _a === void 0 ? void 0 : _a[invokeSrc.type];
    var resolvedData = invokeDefinition.data ? mapContext(invokeDefinition.data, context, _event) : undefined;
    var tempActor = serviceCreator ? createDeferredActor(serviceCreator, invokeDefinition.id, resolvedData) : createNullActor(invokeDefinition.id); // @ts-ignore

    tempActor.meta = invokeDefinition;
    return tempActor;
  }
  function createDeferredActor(entity, id, data) {
    var tempActor = createNullActor(id); // @ts-ignore

    tempActor.deferred = true;

    if (isMachine(entity)) {
      // "mute" the existing service scope so potential spawned actors within the `.initialState` stay deferred here
      var initialState_1 = tempActor.state = provide(undefined, function () {
        return (data ? entity.withContext(data) : entity).initialState;
      });

      tempActor.getSnapshot = function () {
        return initialState_1;
      };
    }

    return tempActor;
  }
  function isActor(item) {
    try {
      return typeof item.send === 'function';
    } catch (e) {
      return false;
    }
  }
  function isSpawnedActor(item) {
    return isActor(item) && 'id' in item;
  } // TODO: refactor the return type, this could be written in a better way but it's best to avoid unneccessary breaking changes now

  function toActorRef(actorRefLike) {
    var _a;

    return __assign((_a = {
      subscribe: function () {
        return {
          unsubscribe: function () {
            return void 0;
          }
        };
      },
      id: 'anonymous',
      getSnapshot: function () {
        return undefined;
      }
    }, _a[symbolObservable] = function () {
      return this;
    }, _a), actorRefLike);
  }

  var isLeafNode = function (stateNode) {
    return stateNode.type === 'atomic' || stateNode.type === 'final';
  };
  function getChildren(stateNode) {
    return Object.keys(stateNode.states).map(function (key) {
      return stateNode.states[key];
    });
  }
  function getAllStateNodes(stateNode) {
    var stateNodes = [stateNode];

    if (isLeafNode(stateNode)) {
      return stateNodes;
    }

    return stateNodes.concat(flatten(getChildren(stateNode).map(getAllStateNodes)));
  }
  function getConfiguration(prevStateNodes, stateNodes) {
    var e_1, _a, e_2, _b, e_3, _c, e_4, _d;

    var prevConfiguration = new Set(prevStateNodes);
    var prevAdjList = getAdjList(prevConfiguration);
    var configuration = new Set(stateNodes);

    try {
      // add all ancestors
      for (var configuration_1 = __values(configuration), configuration_1_1 = configuration_1.next(); !configuration_1_1.done; configuration_1_1 = configuration_1.next()) {
        var s = configuration_1_1.value;
        var m = s.parent;

        while (m && !configuration.has(m)) {
          configuration.add(m);
          m = m.parent;
        }
      }
    } catch (e_1_1) {
      e_1 = {
        error: e_1_1
      };
    } finally {
      try {
        if (configuration_1_1 && !configuration_1_1.done && (_a = configuration_1.return)) _a.call(configuration_1);
      } finally {
        if (e_1) throw e_1.error;
      }
    }

    var adjList = getAdjList(configuration);

    try {
      // add descendants
      for (var configuration_2 = __values(configuration), configuration_2_1 = configuration_2.next(); !configuration_2_1.done; configuration_2_1 = configuration_2.next()) {
        var s = configuration_2_1.value; // if previously active, add existing child nodes

        if (s.type === 'compound' && (!adjList.get(s) || !adjList.get(s).length)) {
          if (prevAdjList.get(s)) {
            prevAdjList.get(s).forEach(function (sn) {
              return configuration.add(sn);
            });
          } else {
            s.initialStateNodes.forEach(function (sn) {
              return configuration.add(sn);
            });
          }
        } else {
          if (s.type === 'parallel') {
            try {
              for (var _e = (e_3 = void 0, __values(getChildren(s))), _f = _e.next(); !_f.done; _f = _e.next()) {
                var child = _f.value;

                if (child.type === 'history') {
                  continue;
                }

                if (!configuration.has(child)) {
                  configuration.add(child);

                  if (prevAdjList.get(child)) {
                    prevAdjList.get(child).forEach(function (sn) {
                      return configuration.add(sn);
                    });
                  } else {
                    child.initialStateNodes.forEach(function (sn) {
                      return configuration.add(sn);
                    });
                  }
                }
              }
            } catch (e_3_1) {
              e_3 = {
                error: e_3_1
              };
            } finally {
              try {
                if (_f && !_f.done && (_c = _e.return)) _c.call(_e);
              } finally {
                if (e_3) throw e_3.error;
              }
            }
          }
        }
      }
    } catch (e_2_1) {
      e_2 = {
        error: e_2_1
      };
    } finally {
      try {
        if (configuration_2_1 && !configuration_2_1.done && (_b = configuration_2.return)) _b.call(configuration_2);
      } finally {
        if (e_2) throw e_2.error;
      }
    }

    try {
      // add all ancestors
      for (var configuration_3 = __values(configuration), configuration_3_1 = configuration_3.next(); !configuration_3_1.done; configuration_3_1 = configuration_3.next()) {
        var s = configuration_3_1.value;
        var m = s.parent;

        while (m && !configuration.has(m)) {
          configuration.add(m);
          m = m.parent;
        }
      }
    } catch (e_4_1) {
      e_4 = {
        error: e_4_1
      };
    } finally {
      try {
        if (configuration_3_1 && !configuration_3_1.done && (_d = configuration_3.return)) _d.call(configuration_3);
      } finally {
        if (e_4) throw e_4.error;
      }
    }

    return configuration;
  }

  function getValueFromAdj(baseNode, adjList) {
    var childStateNodes = adjList.get(baseNode);

    if (!childStateNodes) {
      return {}; // todo: fix?
    }

    if (baseNode.type === 'compound') {
      var childStateNode = childStateNodes[0];

      if (childStateNode) {
        if (isLeafNode(childStateNode)) {
          return childStateNode.key;
        }
      } else {
        return {};
      }
    }

    var stateValue = {};
    childStateNodes.forEach(function (csn) {
      stateValue[csn.key] = getValueFromAdj(csn, adjList);
    });
    return stateValue;
  }

  function getAdjList(configuration) {
    var e_5, _a;

    var adjList = new Map();

    try {
      for (var configuration_4 = __values(configuration), configuration_4_1 = configuration_4.next(); !configuration_4_1.done; configuration_4_1 = configuration_4.next()) {
        var s = configuration_4_1.value;

        if (!adjList.has(s)) {
          adjList.set(s, []);
        }

        if (s.parent) {
          if (!adjList.has(s.parent)) {
            adjList.set(s.parent, []);
          }

          adjList.get(s.parent).push(s);
        }
      }
    } catch (e_5_1) {
      e_5 = {
        error: e_5_1
      };
    } finally {
      try {
        if (configuration_4_1 && !configuration_4_1.done && (_a = configuration_4.return)) _a.call(configuration_4);
      } finally {
        if (e_5) throw e_5.error;
      }
    }

    return adjList;
  }
  function getValue(rootNode, configuration) {
    var config = getConfiguration([rootNode], configuration);
    return getValueFromAdj(rootNode, getAdjList(config));
  }
  function has(iterable, item) {
    if (Array.isArray(iterable)) {
      return iterable.some(function (member) {
        return member === item;
      });
    }

    if (iterable instanceof Set) {
      return iterable.has(item);
    }

    return false; // TODO: fix
  }
  function nextEvents(configuration) {
    return __spreadArray([], __read(new Set(flatten(__spreadArray([], __read(configuration.map(function (sn) {
      return sn.ownEvents;
    })), false)))), false);
  }
  function isInFinalState(configuration, stateNode) {
    if (stateNode.type === 'compound') {
      return getChildren(stateNode).some(function (s) {
        return s.type === 'final' && has(configuration, s);
      });
    }

    if (stateNode.type === 'parallel') {
      return getChildren(stateNode).every(function (sn) {
        return isInFinalState(configuration, sn);
      });
    }

    return false;
  }
  function getMeta(configuration) {
    if (configuration === void 0) {
      configuration = [];
    }

    return configuration.reduce(function (acc, stateNode) {
      if (stateNode.meta !== undefined) {
        acc[stateNode.id] = stateNode.meta;
      }

      return acc;
    }, {});
  }
  function getTagsFromConfiguration(configuration) {
    return new Set(flatten(configuration.map(function (sn) {
      return sn.tags;
    })));
  }

  function stateValuesEqual(a, b) {
    if (a === b) {
      return true;
    }

    if (a === undefined || b === undefined) {
      return false;
    }

    if (isString(a) || isString(b)) {
      return a === b;
    }

    var aKeys = Object.keys(a);
    var bKeys = Object.keys(b);
    return aKeys.length === bKeys.length && aKeys.every(function (key) {
      return stateValuesEqual(a[key], b[key]);
    });
  }
  function isStateConfig(state) {
    if (typeof state !== 'object' || state === null) {
      return false;
    }

    return 'value' in state && '_event' in state;
  }
  function bindActionToState(action, state) {
    var exec = action.exec;

    var boundAction = __assign(__assign({}, action), {
      exec: exec !== undefined ? function () {
        return exec(state.context, state.event, {
          action: action,
          state: state,
          _event: state._event
        });
      } : undefined
    });

    return boundAction;
  }

  var State =
  /*#__PURE__*/

  /** @class */
  function () {
    /**
     * Creates a new State instance.
     * @param value The state value
     * @param context The extended state
     * @param historyValue The tree representing historical values of the state nodes
     * @param history The previous state
     * @param actions An array of action objects to execute as side-effects
     * @param activities A mapping of activities and whether they are started (`true`) or stopped (`false`).
     * @param meta
     * @param events Internal event queue. Should be empty with run-to-completion semantics.
     * @param configuration
     */
    function State(config) {
      var _this = this;

      var _a;

      this.actions = [];
      this.activities = EMPTY_ACTIVITY_MAP;
      this.meta = {};
      this.events = [];
      this.value = config.value;
      this.context = config.context;
      this._event = config._event;
      this._sessionid = config._sessionid;
      this.event = this._event.data;
      this.historyValue = config.historyValue;
      this.history = config.history;
      this.actions = config.actions || [];
      this.activities = config.activities || EMPTY_ACTIVITY_MAP;
      this.meta = getMeta(config.configuration);
      this.events = config.events || [];
      this.matches = this.matches.bind(this);
      this.toStrings = this.toStrings.bind(this);
      this.configuration = config.configuration;
      this.transitions = config.transitions;
      this.children = config.children;
      this.done = !!config.done;
      this.tags = (_a = Array.isArray(config.tags) ? new Set(config.tags) : config.tags) !== null && _a !== void 0 ? _a : new Set();
      this.machine = config.machine;
      Object.defineProperty(this, 'nextEvents', {
        get: function () {
          return nextEvents(_this.configuration);
        }
      });
    }
    /**
     * Creates a new State instance for the given `stateValue` and `context`.
     * @param stateValue
     * @param context
     */


    State.from = function (stateValue, context) {
      if (stateValue instanceof State) {
        if (stateValue.context !== context) {
          return new State({
            value: stateValue.value,
            context: context,
            _event: stateValue._event,
            _sessionid: null,
            historyValue: stateValue.historyValue,
            history: stateValue.history,
            actions: [],
            activities: stateValue.activities,
            meta: {},
            events: [],
            configuration: [],
            transitions: [],
            children: {}
          });
        }

        return stateValue;
      }

      var _event = initEvent;
      return new State({
        value: stateValue,
        context: context,
        _event: _event,
        _sessionid: null,
        historyValue: undefined,
        history: undefined,
        actions: [],
        activities: undefined,
        meta: undefined,
        events: [],
        configuration: [],
        transitions: [],
        children: {}
      });
    };
    /**
     * Creates a new State instance for the given `config`.
     * @param config The state config
     */


    State.create = function (config) {
      return new State(config);
    };
    /**
     * Creates a new `State` instance for the given `stateValue` and `context` with no actions (side-effects).
     * @param stateValue
     * @param context
     */


    State.inert = function (stateValue, context) {
      if (stateValue instanceof State) {
        if (!stateValue.actions.length) {
          return stateValue;
        }

        var _event = initEvent;
        return new State({
          value: stateValue.value,
          context: context,
          _event: _event,
          _sessionid: null,
          historyValue: stateValue.historyValue,
          history: stateValue.history,
          activities: stateValue.activities,
          configuration: stateValue.configuration,
          transitions: [],
          children: {}
        });
      }

      return State.from(stateValue, context);
    };
    /**
     * Returns an array of all the string leaf state node paths.
     * @param stateValue
     * @param delimiter The character(s) that separate each subpath in the string state node path.
     */


    State.prototype.toStrings = function (stateValue, delimiter) {
      var _this = this;

      if (stateValue === void 0) {
        stateValue = this.value;
      }

      if (delimiter === void 0) {
        delimiter = '.';
      }

      if (isString(stateValue)) {
        return [stateValue];
      }

      var valueKeys = Object.keys(stateValue);
      return valueKeys.concat.apply(valueKeys, __spreadArray([], __read(valueKeys.map(function (key) {
        return _this.toStrings(stateValue[key], delimiter).map(function (s) {
          return key + delimiter + s;
        });
      })), false));
    };

    State.prototype.toJSON = function () {
      var _a = this;
          _a.configuration;
          _a.transitions;
          var tags = _a.tags;
          _a.machine;
          var jsonValues = __rest(_a, ["configuration", "transitions", "tags", "machine"]);

      return __assign(__assign({}, jsonValues), {
        tags: Array.from(tags)
      });
    };

    State.prototype.matches = function (parentStateValue) {
      return matchesState(parentStateValue, this.value);
    };
    /**
     * Whether the current state configuration has a state node with the specified `tag`.
     * @param tag
     */


    State.prototype.hasTag = function (tag) {
      return this.tags.has(tag);
    };
    /**
     * Determines whether sending the `event` will cause a non-forbidden transition
     * to be selected, even if the transitions have no actions nor
     * change the state value.
     *
     * @param event The event to test
     * @returns Whether the event will cause a transition
     */


    State.prototype.can = function (event) {
      var _a;

      if (IS_PRODUCTION) {
        warn(!!this.machine, "state.can(...) used outside of a machine-created State object; this will always return false.");
      }

      var transitionData = (_a = this.machine) === null || _a === void 0 ? void 0 : _a.getTransitionData(this, event);
      return !!(transitionData === null || transitionData === void 0 ? void 0 : transitionData.transitions.length) && // Check that at least one transition is not forbidden
      transitionData.transitions.some(function (t) {
        return t.target !== undefined || t.actions.length;
      });
    };

    return State;
  }();

  var defaultOptions = {
    deferEvents: false
  };

  var Scheduler =
  /*#__PURE__*/

  /** @class */
  function () {
    function Scheduler(options) {
      this.processingEvent = false;
      this.queue = [];
      this.initialized = false;
      this.options = __assign(__assign({}, defaultOptions), options);
    }

    Scheduler.prototype.initialize = function (callback) {
      this.initialized = true;

      if (callback) {
        if (!this.options.deferEvents) {
          this.schedule(callback);
          return;
        }

        this.process(callback);
      }

      this.flushEvents();
    };

    Scheduler.prototype.schedule = function (task) {
      if (!this.initialized || this.processingEvent) {
        this.queue.push(task);
        return;
      }

      if (this.queue.length !== 0) {
        throw new Error('Event queue should be empty when it is not processing events');
      }

      this.process(task);
      this.flushEvents();
    };

    Scheduler.prototype.clear = function () {
      this.queue = [];
    };

    Scheduler.prototype.flushEvents = function () {
      var nextCallback = this.queue.shift();

      while (nextCallback) {
        this.process(nextCallback);
        nextCallback = this.queue.shift();
      }
    };

    Scheduler.prototype.process = function (callback) {
      this.processingEvent = true;

      try {
        callback();
      } catch (e) {
        // there is no use to keep the future events
        // as the situation is not anymore the same
        this.clear();
        throw e;
      } finally {
        this.processingEvent = false;
      }
    };

    return Scheduler;
  }();

  var children = /*#__PURE__*/new Map();
  var sessionIdIndex = 0;
  var registry = {
    bookId: function () {
      return "x:".concat(sessionIdIndex++);
    },
    register: function (id, actor) {
      children.set(id, actor);
      return id;
    },
    get: function (id) {
      return children.get(id);
    },
    free: function (id) {
      children.delete(id);
    }
  };

  function getGlobal() {
    if (typeof globalThis !== 'undefined') {
      return globalThis;
    }

    if (typeof self !== 'undefined') {
      return self;
    }

    if (typeof window !== 'undefined') {
      return window;
    }

    if (typeof global !== 'undefined') {
      return global;
    }

    if (!IS_PRODUCTION) {
      console.warn('XState could not find a global object in this environment. Please let the maintainers know and raise an issue here: https://github.com/statelyai/xstate/issues');
    }
  }

  function getDevTools() {
    var global = getGlobal();

    if (global && '__xstate__' in global) {
      return global.__xstate__;
    }

    return undefined;
  }

  function registerService(service) {
    if (!getGlobal()) {
      return;
    }

    var devTools = getDevTools();

    if (devTools) {
      devTools.register(service);
    }
  }

  function spawnBehavior(behavior, options) {
    if (options === void 0) {
      options = {};
    }

    var state = behavior.initialState;
    var observers = new Set();
    var mailbox = [];
    var flushing = false;

    var flush = function () {
      if (flushing) {
        return;
      }

      flushing = true;

      while (mailbox.length > 0) {
        var event_1 = mailbox.shift();
        state = behavior.transition(state, event_1, actorCtx);
        observers.forEach(function (observer) {
          return observer.next(state);
        });
      }

      flushing = false;
    };

    var actor = toActorRef({
      id: options.id,
      send: function (event) {
        mailbox.push(event);
        flush();
      },
      getSnapshot: function () {
        return state;
      },
      subscribe: function (next, handleError, complete) {
        var observer = toObserver(next, handleError, complete);
        observers.add(observer);
        observer.next(state);
        return {
          unsubscribe: function () {
            observers.delete(observer);
          }
        };
      }
    });
    var actorCtx = {
      parent: options.parent,
      self: actor,
      id: options.id || 'anonymous',
      observers: observers
    };
    state = behavior.start ? behavior.start(actorCtx) : state;
    return actor;
  }

  var DEFAULT_SPAWN_OPTIONS = {
    sync: false,
    autoForward: false
  };
  var InterpreterStatus;

  (function (InterpreterStatus) {
    InterpreterStatus[InterpreterStatus["NotStarted"] = 0] = "NotStarted";
    InterpreterStatus[InterpreterStatus["Running"] = 1] = "Running";
    InterpreterStatus[InterpreterStatus["Stopped"] = 2] = "Stopped";
  })(InterpreterStatus || (InterpreterStatus = {}));

  var Interpreter =
  /*#__PURE__*/

  /** @class */
  function () {
    /**
     * Creates a new Interpreter instance (i.e., service) for the given machine with the provided options, if any.
     *
     * @param machine The machine to be interpreted
     * @param options Interpreter options
     */
    function Interpreter(machine, options) {
      var _this = this;

      if (options === void 0) {
        options = Interpreter.defaultOptions;
      }

      this.machine = machine;
      this.scheduler = new Scheduler();
      this.delayedEventsMap = {};
      this.listeners = new Set();
      this.contextListeners = new Set();
      this.stopListeners = new Set();
      this.doneListeners = new Set();
      this.eventListeners = new Set();
      this.sendListeners = new Set();
      /**
       * Whether the service is started.
       */

      this.initialized = false;
      this.status = InterpreterStatus.NotStarted;
      this.children = new Map();
      this.forwardTo = new Set();
      /**
       * Alias for Interpreter.prototype.start
       */

      this.init = this.start;
      /**
       * Sends an event to the running interpreter to trigger a transition.
       *
       * An array of events (batched) can be sent as well, which will send all
       * batched events to the running interpreter. The listeners will be
       * notified only **once** when all events are processed.
       *
       * @param event The event(s) to send
       */

      this.send = function (event, payload) {
        if (isArray(event)) {
          _this.batch(event);

          return _this.state;
        }

        var _event = toSCXMLEvent(toEventObject(event, payload));

        if (_this.status === InterpreterStatus.Stopped) {
          // do nothing
          if (!IS_PRODUCTION) {
            warn(false, "Event \"".concat(_event.name, "\" was sent to stopped service \"").concat(_this.machine.id, "\". This service has already reached its final state, and will not transition.\nEvent: ").concat(JSON.stringify(_event.data)));
          }

          return _this.state;
        }

        if (_this.status !== InterpreterStatus.Running && !_this.options.deferEvents) {
          throw new Error("Event \"".concat(_event.name, "\" was sent to uninitialized service \"").concat(_this.machine.id // tslint:disable-next-line:max-line-length
          , "\". Make sure .start() is called for this service, or set { deferEvents: true } in the service options.\nEvent: ").concat(JSON.stringify(_event.data)));
        }

        _this.scheduler.schedule(function () {
          // Forward copy of event to child actors
          _this.forward(_event);

          var nextState = _this.nextState(_event);

          _this.update(nextState, _event);
        });

        return _this._state; // TODO: deprecate (should return void)
        // tslint:disable-next-line:semicolon
      };

      this.sendTo = function (event, to) {
        var isParent = _this.parent && (to === SpecialTargets.Parent || _this.parent.id === to);
        var target = isParent ? _this.parent : isString(to) ? _this.children.get(to) || registry.get(to) : isActor$1(to) ? to : undefined;

        if (!target) {
          if (!isParent) {
            throw new Error("Unable to send event to child '".concat(to, "' from service '").concat(_this.id, "'."));
          } // tslint:disable-next-line:no-console


          if (!IS_PRODUCTION) {
            warn(false, "Service '".concat(_this.id, "' has no parent: unable to send event ").concat(event.type));
          }

          return;
        }

        if ('machine' in target) {
          // Send SCXML events to machines
          target.send(__assign(__assign({}, event), {
            name: event.name === error$1 ? "".concat(error(_this.id)) : event.name,
            origin: _this.sessionId
          }));
        } else {
          // Send normal events to other targets
          target.send(event.data);
        }
      };

      var resolvedOptions = __assign(__assign({}, Interpreter.defaultOptions), options);

      var clock = resolvedOptions.clock,
          logger = resolvedOptions.logger,
          parent = resolvedOptions.parent,
          id = resolvedOptions.id;
      var resolvedId = id !== undefined ? id : machine.id;
      this.id = resolvedId;
      this.logger = logger;
      this.clock = clock;
      this.parent = parent;
      this.options = resolvedOptions;
      this.scheduler = new Scheduler({
        deferEvents: this.options.deferEvents
      });
      this.sessionId = registry.bookId();
    }

    Object.defineProperty(Interpreter.prototype, "initialState", {
      get: function () {
        var _this = this;

        if (this._initialState) {
          return this._initialState;
        }

        return provide(this, function () {
          _this._initialState = _this.machine.initialState;
          return _this._initialState;
        });
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Interpreter.prototype, "state", {
      get: function () {
        if (!IS_PRODUCTION) {
          warn(this.status !== InterpreterStatus.NotStarted, "Attempted to read state from uninitialized service '".concat(this.id, "'. Make sure the service is started first."));
        }

        return this._state;
      },
      enumerable: false,
      configurable: true
    });
    /**
     * Executes the actions of the given state, with that state's `context` and `event`.
     *
     * @param state The state whose actions will be executed
     * @param actionsConfig The action implementations to use
     */

    Interpreter.prototype.execute = function (state, actionsConfig) {
      var e_1, _a;

      try {
        for (var _b = __values(state.actions), _c = _b.next(); !_c.done; _c = _b.next()) {
          var action = _c.value;
          this.exec(action, state, actionsConfig);
        }
      } catch (e_1_1) {
        e_1 = {
          error: e_1_1
        };
      } finally {
        try {
          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        } finally {
          if (e_1) throw e_1.error;
        }
      }
    };

    Interpreter.prototype.update = function (state, _event) {
      var e_2, _a, e_3, _b, e_4, _c, e_5, _d;

      var _this = this; // Attach session ID to state


      state._sessionid = this.sessionId; // Update state

      this._state = state; // Execute actions

      if (this.options.execute) {
        this.execute(this.state);
      } // Update children


      this.children.forEach(function (child) {
        _this.state.children[child.id] = child;
      }); // Dev tools

      if (this.devTools) {
        this.devTools.send(_event.data, state);
      } // Execute listeners


      if (state.event) {
        try {
          for (var _e = __values(this.eventListeners), _f = _e.next(); !_f.done; _f = _e.next()) {
            var listener = _f.value;
            listener(state.event);
          }
        } catch (e_2_1) {
          e_2 = {
            error: e_2_1
          };
        } finally {
          try {
            if (_f && !_f.done && (_a = _e.return)) _a.call(_e);
          } finally {
            if (e_2) throw e_2.error;
          }
        }
      }

      try {
        for (var _g = __values(this.listeners), _h = _g.next(); !_h.done; _h = _g.next()) {
          var listener = _h.value;
          listener(state, state.event);
        }
      } catch (e_3_1) {
        e_3 = {
          error: e_3_1
        };
      } finally {
        try {
          if (_h && !_h.done && (_b = _g.return)) _b.call(_g);
        } finally {
          if (e_3) throw e_3.error;
        }
      }

      try {
        for (var _j = __values(this.contextListeners), _k = _j.next(); !_k.done; _k = _j.next()) {
          var contextListener = _k.value;
          contextListener(this.state.context, this.state.history ? this.state.history.context : undefined);
        }
      } catch (e_4_1) {
        e_4 = {
          error: e_4_1
        };
      } finally {
        try {
          if (_k && !_k.done && (_c = _j.return)) _c.call(_j);
        } finally {
          if (e_4) throw e_4.error;
        }
      }

      var isDone = isInFinalState(state.configuration || [], this.machine);

      if (this.state.configuration && isDone) {
        // get final child state node
        var finalChildStateNode = state.configuration.find(function (sn) {
          return sn.type === 'final' && sn.parent === _this.machine;
        });
        var doneData = finalChildStateNode && finalChildStateNode.doneData ? mapContext(finalChildStateNode.doneData, state.context, _event) : undefined;

        try {
          for (var _l = __values(this.doneListeners), _m = _l.next(); !_m.done; _m = _l.next()) {
            var listener = _m.value;
            listener(doneInvoke(this.id, doneData));
          }
        } catch (e_5_1) {
          e_5 = {
            error: e_5_1
          };
        } finally {
          try {
            if (_m && !_m.done && (_d = _l.return)) _d.call(_l);
          } finally {
            if (e_5) throw e_5.error;
          }
        }

        this.stop();
      }
    };
    /*
     * Adds a listener that is notified whenever a state transition happens. The listener is called with
     * the next state and the event object that caused the state transition.
     *
     * @param listener The state listener
     */


    Interpreter.prototype.onTransition = function (listener) {
      this.listeners.add(listener); // Send current state to listener

      if (this.status === InterpreterStatus.Running) {
        listener(this.state, this.state.event);
      }

      return this;
    };

    Interpreter.prototype.subscribe = function (nextListenerOrObserver, _, // TODO: error listener
    completeListener) {
      var _this = this;

      if (!nextListenerOrObserver) {
        return {
          unsubscribe: function () {
            return void 0;
          }
        };
      }

      var listener;
      var resolvedCompleteListener = completeListener;

      if (typeof nextListenerOrObserver === 'function') {
        listener = nextListenerOrObserver;
      } else {
        listener = nextListenerOrObserver.next.bind(nextListenerOrObserver);
        resolvedCompleteListener = nextListenerOrObserver.complete.bind(nextListenerOrObserver);
      }

      this.listeners.add(listener); // Send current state to listener

      if (this.status === InterpreterStatus.Running) {
        listener(this.state);
      }

      if (resolvedCompleteListener) {
        this.onDone(resolvedCompleteListener);
      }

      return {
        unsubscribe: function () {
          listener && _this.listeners.delete(listener);
          resolvedCompleteListener && _this.doneListeners.delete(resolvedCompleteListener);
        }
      };
    };
    /**
     * Adds an event listener that is notified whenever an event is sent to the running interpreter.
     * @param listener The event listener
     */


    Interpreter.prototype.onEvent = function (listener) {
      this.eventListeners.add(listener);
      return this;
    };
    /**
     * Adds an event listener that is notified whenever a `send` event occurs.
     * @param listener The event listener
     */


    Interpreter.prototype.onSend = function (listener) {
      this.sendListeners.add(listener);
      return this;
    };
    /**
     * Adds a context listener that is notified whenever the state context changes.
     * @param listener The context listener
     */


    Interpreter.prototype.onChange = function (listener) {
      this.contextListeners.add(listener);
      return this;
    };
    /**
     * Adds a listener that is notified when the machine is stopped.
     * @param listener The listener
     */


    Interpreter.prototype.onStop = function (listener) {
      this.stopListeners.add(listener);
      return this;
    };
    /**
     * Adds a state listener that is notified when the statechart has reached its final state.
     * @param listener The state listener
     */


    Interpreter.prototype.onDone = function (listener) {
      this.doneListeners.add(listener);
      return this;
    };
    /**
     * Removes a listener.
     * @param listener The listener to remove
     */


    Interpreter.prototype.off = function (listener) {
      this.listeners.delete(listener);
      this.eventListeners.delete(listener);
      this.sendListeners.delete(listener);
      this.stopListeners.delete(listener);
      this.doneListeners.delete(listener);
      this.contextListeners.delete(listener);
      return this;
    };
    /**
     * Starts the interpreter from the given state, or the initial state.
     * @param initialState The state to start the statechart from
     */


    Interpreter.prototype.start = function (initialState) {
      var _this = this;

      if (this.status === InterpreterStatus.Running) {
        // Do not restart the service if it is already started
        return this;
      } // yes, it's a hack but we need the related cache to be populated for some things to work (like delayed transitions)
      // this is usually called by `machine.getInitialState` but if we rehydrate from a state we might bypass this call
      // we also don't want to call this method here as it resolves the full initial state which might involve calling assign actions
      // and that could potentially lead to some unwanted side-effects (even such as creating some rogue actors)


      this.machine._init();

      registry.register(this.sessionId, this);
      this.initialized = true;
      this.status = InterpreterStatus.Running;
      var resolvedState = initialState === undefined ? this.initialState : provide(this, function () {
        return isStateConfig(initialState) ? _this.machine.resolveState(initialState) : _this.machine.resolveState(State.from(initialState, _this.machine.context));
      });

      if (this.options.devTools) {
        this.attachDev();
      }

      this.scheduler.initialize(function () {
        _this.update(resolvedState, initEvent);
      });
      return this;
    };
    /**
     * Stops the interpreter and unsubscribe all listeners.
     *
     * This will also notify the `onStop` listeners.
     */


    Interpreter.prototype.stop = function () {
      var e_6, _a, e_7, _b, e_8, _c, e_9, _d, e_10, _e;

      var _this = this;

      try {
        for (var _f = __values(this.listeners), _g = _f.next(); !_g.done; _g = _f.next()) {
          var listener = _g.value;
          this.listeners.delete(listener);
        }
      } catch (e_6_1) {
        e_6 = {
          error: e_6_1
        };
      } finally {
        try {
          if (_g && !_g.done && (_a = _f.return)) _a.call(_f);
        } finally {
          if (e_6) throw e_6.error;
        }
      }

      try {
        for (var _h = __values(this.stopListeners), _j = _h.next(); !_j.done; _j = _h.next()) {
          var listener = _j.value; // call listener, then remove

          listener();
          this.stopListeners.delete(listener);
        }
      } catch (e_7_1) {
        e_7 = {
          error: e_7_1
        };
      } finally {
        try {
          if (_j && !_j.done && (_b = _h.return)) _b.call(_h);
        } finally {
          if (e_7) throw e_7.error;
        }
      }

      try {
        for (var _k = __values(this.contextListeners), _l = _k.next(); !_l.done; _l = _k.next()) {
          var listener = _l.value;
          this.contextListeners.delete(listener);
        }
      } catch (e_8_1) {
        e_8 = {
          error: e_8_1
        };
      } finally {
        try {
          if (_l && !_l.done && (_c = _k.return)) _c.call(_k);
        } finally {
          if (e_8) throw e_8.error;
        }
      }

      try {
        for (var _m = __values(this.doneListeners), _o = _m.next(); !_o.done; _o = _m.next()) {
          var listener = _o.value;
          this.doneListeners.delete(listener);
        }
      } catch (e_9_1) {
        e_9 = {
          error: e_9_1
        };
      } finally {
        try {
          if (_o && !_o.done && (_d = _m.return)) _d.call(_m);
        } finally {
          if (e_9) throw e_9.error;
        }
      }

      if (!this.initialized) {
        // Interpreter already stopped; do nothing
        return this;
      }

      __spreadArray([], __read(this.state.configuration), false).sort(function (a, b) {
        return b.order - a.order;
      }).forEach(function (stateNode) {
        var e_11, _a;

        try {
          for (var _b = __values(stateNode.definition.exit), _c = _b.next(); !_c.done; _c = _b.next()) {
            var action = _c.value;

            _this.exec(action, _this.state);
          }
        } catch (e_11_1) {
          e_11 = {
            error: e_11_1
          };
        } finally {
          try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
          } finally {
            if (e_11) throw e_11.error;
          }
        }
      }); // Stop all children


      this.children.forEach(function (child) {
        if (isFunction(child.stop)) {
          child.stop();
        }
      });

      try {
        // Cancel all delayed events
        for (var _p = __values(Object.keys(this.delayedEventsMap)), _q = _p.next(); !_q.done; _q = _p.next()) {
          var key = _q.value;
          this.clock.clearTimeout(this.delayedEventsMap[key]);
        }
      } catch (e_10_1) {
        e_10 = {
          error: e_10_1
        };
      } finally {
        try {
          if (_q && !_q.done && (_e = _p.return)) _e.call(_p);
        } finally {
          if (e_10) throw e_10.error;
        }
      }

      this.scheduler.clear();
      this.initialized = false;
      this.status = InterpreterStatus.Stopped;
      registry.free(this.sessionId);
      return this;
    };

    Interpreter.prototype.batch = function (events) {
      var _this = this;

      if (this.status === InterpreterStatus.NotStarted && this.options.deferEvents) {
        // tslint:disable-next-line:no-console
        if (!IS_PRODUCTION) {
          warn(false, "".concat(events.length, " event(s) were sent to uninitialized service \"").concat(this.machine.id, "\" and are deferred. Make sure .start() is called for this service.\nEvent: ").concat(JSON.stringify(event)));
        }
      } else if (this.status !== InterpreterStatus.Running) {
        throw new Error( // tslint:disable-next-line:max-line-length
        "".concat(events.length, " event(s) were sent to uninitialized service \"").concat(this.machine.id, "\". Make sure .start() is called for this service, or set { deferEvents: true } in the service options."));
      }

      this.scheduler.schedule(function () {
        var e_12, _a;

        var nextState = _this.state;
        var batchChanged = false;
        var batchedActions = [];

        var _loop_1 = function (event_1) {
          var _event = toSCXMLEvent(event_1);

          _this.forward(_event);

          nextState = provide(_this, function () {
            return _this.machine.transition(nextState, _event);
          });
          batchedActions.push.apply(batchedActions, __spreadArray([], __read(nextState.actions.map(function (a) {
            return bindActionToState(a, nextState);
          })), false));
          batchChanged = batchChanged || !!nextState.changed;
        };

        try {
          for (var events_1 = __values(events), events_1_1 = events_1.next(); !events_1_1.done; events_1_1 = events_1.next()) {
            var event_1 = events_1_1.value;

            _loop_1(event_1);
          }
        } catch (e_12_1) {
          e_12 = {
            error: e_12_1
          };
        } finally {
          try {
            if (events_1_1 && !events_1_1.done && (_a = events_1.return)) _a.call(events_1);
          } finally {
            if (e_12) throw e_12.error;
          }
        }

        nextState.changed = batchChanged;
        nextState.actions = batchedActions;

        _this.update(nextState, toSCXMLEvent(events[events.length - 1]));
      });
    };
    /**
     * Returns a send function bound to this interpreter instance.
     *
     * @param event The event to be sent by the sender.
     */


    Interpreter.prototype.sender = function (event) {
      return this.send.bind(this, event);
    };
    /**
     * Returns the next state given the interpreter's current state and the event.
     *
     * This is a pure method that does _not_ update the interpreter's state.
     *
     * @param event The event to determine the next state
     */


    Interpreter.prototype.nextState = function (event) {
      var _this = this;

      var _event = toSCXMLEvent(event);

      if (_event.name.indexOf(errorPlatform) === 0 && !this.state.nextEvents.some(function (nextEvent) {
        return nextEvent.indexOf(errorPlatform) === 0;
      })) {
        throw _event.data.data;
      }

      var nextState = provide(this, function () {
        return _this.machine.transition(_this.state, _event);
      });
      return nextState;
    };

    Interpreter.prototype.forward = function (event) {
      var e_13, _a;

      try {
        for (var _b = __values(this.forwardTo), _c = _b.next(); !_c.done; _c = _b.next()) {
          var id = _c.value;
          var child = this.children.get(id);

          if (!child) {
            throw new Error("Unable to forward event '".concat(event, "' from interpreter '").concat(this.id, "' to nonexistant child '").concat(id, "'."));
          }

          child.send(event);
        }
      } catch (e_13_1) {
        e_13 = {
          error: e_13_1
        };
      } finally {
        try {
          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        } finally {
          if (e_13) throw e_13.error;
        }
      }
    };

    Interpreter.prototype.defer = function (sendAction) {
      var _this = this;

      this.delayedEventsMap[sendAction.id] = this.clock.setTimeout(function () {
        if (sendAction.to) {
          _this.sendTo(sendAction._event, sendAction.to);
        } else {
          _this.send(sendAction._event);
        }
      }, sendAction.delay);
    };

    Interpreter.prototype.cancel = function (sendId) {
      this.clock.clearTimeout(this.delayedEventsMap[sendId]);
      delete this.delayedEventsMap[sendId];
    };

    Interpreter.prototype.exec = function (action, state, actionFunctionMap) {
      if (actionFunctionMap === void 0) {
        actionFunctionMap = this.machine.options.actions;
      }

      var context = state.context,
          _event = state._event;
      var actionOrExec = action.exec || getActionFunction(action.type, actionFunctionMap);
      var exec = isFunction(actionOrExec) ? actionOrExec : actionOrExec ? actionOrExec.exec : action.exec;

      if (exec) {
        try {
          return exec(context, _event.data, {
            action: action,
            state: this.state,
            _event: _event
          });
        } catch (err) {
          if (this.parent) {
            this.parent.send({
              type: 'xstate.error',
              data: err
            });
          }

          throw err;
        }
      }

      switch (action.type) {
        case send$1:
          var sendAction = action;

          if (typeof sendAction.delay === 'number') {
            this.defer(sendAction);
            return;
          } else {
            if (sendAction.to) {
              this.sendTo(sendAction._event, sendAction.to);
            } else {
              this.send(sendAction._event);
            }
          }

          break;

        case cancel$1:
          this.cancel(action.sendId);
          break;

        case start$1:
          {
            if (this.status !== InterpreterStatus.Running) {
              return;
            }

            var activity = action.activity; // If the activity will be stopped right after it's started
            // (such as in transient states)
            // don't bother starting the activity.

            if (!this.state.activities[activity.id || activity.type]) {
              break;
            } // Invoked services


            if (activity.type === ActionTypes.Invoke) {
              var invokeSource = toInvokeSource$1(activity.src);
              var serviceCreator = this.machine.options.services ? this.machine.options.services[invokeSource.type] : undefined;
              var id = activity.id,
                  data = activity.data;

              if (!IS_PRODUCTION) {
                warn(!('forward' in activity), // tslint:disable-next-line:max-line-length
                "`forward` property is deprecated (found in invocation of '".concat(activity.src, "' in in machine '").concat(this.machine.id, "'). ") + "Please use `autoForward` instead.");
              }

              var autoForward = 'autoForward' in activity ? activity.autoForward : !!activity.forward;

              if (!serviceCreator) {
                // tslint:disable-next-line:no-console
                if (!IS_PRODUCTION) {
                  warn(false, "No service found for invocation '".concat(activity.src, "' in machine '").concat(this.machine.id, "'."));
                }

                return;
              }

              var resolvedData = data ? mapContext(data, context, _event) : undefined;

              if (typeof serviceCreator === 'string') {
                // TODO: warn
                return;
              }

              var source = isFunction(serviceCreator) ? serviceCreator(context, _event.data, {
                data: resolvedData,
                src: invokeSource,
                meta: activity.meta
              }) : serviceCreator;

              if (!source) {
                // TODO: warn?
                return;
              }

              var options = void 0;

              if (isMachine(source)) {
                source = resolvedData ? source.withContext(resolvedData) : source;
                options = {
                  autoForward: autoForward
                };
              }

              this.spawn(source, id, options);
            } else {
              this.spawnActivity(activity);
            }

            break;
          }

        case stop$1:
          {
            this.stopChild(action.activity.id);
            break;
          }

        case log:
          var label = action.label,
              value = action.value;

          if (label) {
            this.logger(label, value);
          } else {
            this.logger(value);
          }

          break;

        default:
          if (!IS_PRODUCTION) {
            warn(false, "No implementation found for action type '".concat(action.type, "'"));
          }

          break;
      }

      return undefined;
    };

    Interpreter.prototype.removeChild = function (childId) {
      var _a;

      this.children.delete(childId);
      this.forwardTo.delete(childId); // this.state might not exist at the time this is called,
      // such as when a child is added then removed while initializing the state

      (_a = this.state) === null || _a === void 0 ? true : delete _a.children[childId];
    };

    Interpreter.prototype.stopChild = function (childId) {
      var child = this.children.get(childId);

      if (!child) {
        return;
      }

      this.removeChild(childId);

      if (isFunction(child.stop)) {
        child.stop();
      }
    };

    Interpreter.prototype.spawn = function (entity, name, options) {
      if (isPromiseLike(entity)) {
        return this.spawnPromise(Promise.resolve(entity), name);
      } else if (isFunction(entity)) {
        return this.spawnCallback(entity, name);
      } else if (isSpawnedActor(entity)) {
        return this.spawnActor(entity, name);
      } else if (isObservable(entity)) {
        return this.spawnObservable(entity, name);
      } else if (isMachine(entity)) {
        return this.spawnMachine(entity, __assign(__assign({}, options), {
          id: name
        }));
      } else if (isBehavior(entity)) {
        return this.spawnBehavior(entity, name);
      } else {
        throw new Error("Unable to spawn entity \"".concat(name, "\" of type \"").concat(typeof entity, "\"."));
      }
    };

    Interpreter.prototype.spawnMachine = function (machine, options) {
      var _this = this;

      if (options === void 0) {
        options = {};
      }

      var childService = new Interpreter(machine, __assign(__assign({}, this.options), {
        parent: this,
        id: options.id || machine.id
      }));

      var resolvedOptions = __assign(__assign({}, DEFAULT_SPAWN_OPTIONS), options);

      if (resolvedOptions.sync) {
        childService.onTransition(function (state) {
          _this.send(update, {
            state: state,
            id: childService.id
          });
        });
      }

      var actor = childService;
      this.children.set(childService.id, actor);

      if (resolvedOptions.autoForward) {
        this.forwardTo.add(childService.id);
      }

      childService.onDone(function (doneEvent) {
        _this.removeChild(childService.id);

        _this.send(toSCXMLEvent(doneEvent, {
          origin: childService.id
        }));
      }).start();
      return actor;
    };

    Interpreter.prototype.spawnBehavior = function (behavior, id) {
      var actorRef = spawnBehavior(behavior, {
        id: id,
        parent: this
      });
      this.children.set(id, actorRef);
      return actorRef;
    };

    Interpreter.prototype.spawnPromise = function (promise, id) {
      var _a;

      var _this = this;

      var canceled = false;
      var resolvedData;
      promise.then(function (response) {
        if (!canceled) {
          resolvedData = response;

          _this.removeChild(id);

          _this.send(toSCXMLEvent(doneInvoke(id, response), {
            origin: id
          }));
        }
      }, function (errorData) {
        if (!canceled) {
          _this.removeChild(id);

          var errorEvent = error(id, errorData);

          try {
            // Send "error.platform.id" to this (parent).
            _this.send(toSCXMLEvent(errorEvent, {
              origin: id
            }));
          } catch (error) {
            reportUnhandledExceptionOnInvocation(errorData, error, id);

            if (_this.devTools) {
              _this.devTools.send(errorEvent, _this.state);
            }

            if (_this.machine.strict) {
              // it would be better to always stop the state machine if unhandled
              // exception/promise rejection happens but because we don't want to
              // break existing code so enforce it on strict mode only especially so
              // because documentation says that onError is optional
              _this.stop();
            }
          }
        }
      });
      var actor = (_a = {
        id: id,
        send: function () {
          return void 0;
        },
        subscribe: function (next, handleError, complete) {
          var observer = toObserver(next, handleError, complete);
          var unsubscribed = false;
          promise.then(function (response) {
            if (unsubscribed) {
              return;
            }

            observer.next(response);

            if (unsubscribed) {
              return;
            }

            observer.complete();
          }, function (err) {
            if (unsubscribed) {
              return;
            }

            observer.error(err);
          });
          return {
            unsubscribe: function () {
              return unsubscribed = true;
            }
          };
        },
        stop: function () {
          canceled = true;
        },
        toJSON: function () {
          return {
            id: id
          };
        },
        getSnapshot: function () {
          return resolvedData;
        }
      }, _a[symbolObservable] = function () {
        return this;
      }, _a);
      this.children.set(id, actor);
      return actor;
    };

    Interpreter.prototype.spawnCallback = function (callback, id) {
      var _a;

      var _this = this;

      var canceled = false;
      var receivers = new Set();
      var listeners = new Set();
      var emitted;

      var receive = function (e) {
        emitted = e;
        listeners.forEach(function (listener) {
          return listener(e);
        });

        if (canceled) {
          return;
        }

        _this.send(toSCXMLEvent(e, {
          origin: id
        }));
      };

      var callbackStop;

      try {
        callbackStop = callback(receive, function (newListener) {
          receivers.add(newListener);
        });
      } catch (err) {
        this.send(error(id, err));
      }

      if (isPromiseLike(callbackStop)) {
        // it turned out to be an async function, can't reliably check this before calling `callback`
        // because transpiled async functions are not recognizable
        return this.spawnPromise(callbackStop, id);
      }

      var actor = (_a = {
        id: id,
        send: function (event) {
          return receivers.forEach(function (receiver) {
            return receiver(event);
          });
        },
        subscribe: function (next) {
          var observer = toObserver(next);
          listeners.add(observer.next);
          return {
            unsubscribe: function () {
              listeners.delete(observer.next);
            }
          };
        },
        stop: function () {
          canceled = true;

          if (isFunction(callbackStop)) {
            callbackStop();
          }
        },
        toJSON: function () {
          return {
            id: id
          };
        },
        getSnapshot: function () {
          return emitted;
        }
      }, _a[symbolObservable] = function () {
        return this;
      }, _a);
      this.children.set(id, actor);
      return actor;
    };

    Interpreter.prototype.spawnObservable = function (source, id) {
      var _a;

      var _this = this;

      var emitted;
      var subscription = source.subscribe(function (value) {
        emitted = value;

        _this.send(toSCXMLEvent(value, {
          origin: id
        }));
      }, function (err) {
        _this.removeChild(id);

        _this.send(toSCXMLEvent(error(id, err), {
          origin: id
        }));
      }, function () {
        _this.removeChild(id);

        _this.send(toSCXMLEvent(doneInvoke(id), {
          origin: id
        }));
      });
      var actor = (_a = {
        id: id,
        send: function () {
          return void 0;
        },
        subscribe: function (next, handleError, complete) {
          return source.subscribe(next, handleError, complete);
        },
        stop: function () {
          return subscription.unsubscribe();
        },
        getSnapshot: function () {
          return emitted;
        },
        toJSON: function () {
          return {
            id: id
          };
        }
      }, _a[symbolObservable] = function () {
        return this;
      }, _a);
      this.children.set(id, actor);
      return actor;
    };

    Interpreter.prototype.spawnActor = function (actor, name) {
      this.children.set(name, actor);
      return actor;
    };

    Interpreter.prototype.spawnActivity = function (activity) {
      var implementation = this.machine.options && this.machine.options.activities ? this.machine.options.activities[activity.type] : undefined;

      if (!implementation) {
        if (!IS_PRODUCTION) {
          warn(false, "No implementation found for activity '".concat(activity.type, "'"));
        } // tslint:disable-next-line:no-console


        return;
      } // Start implementation


      var dispose = implementation(this.state.context, activity);
      this.spawnEffect(activity.id, dispose);
    };

    Interpreter.prototype.spawnEffect = function (id, dispose) {
      var _a;

      this.children.set(id, (_a = {
        id: id,
        send: function () {
          return void 0;
        },
        subscribe: function () {
          return {
            unsubscribe: function () {
              return void 0;
            }
          };
        },
        stop: dispose || undefined,
        getSnapshot: function () {
          return undefined;
        },
        toJSON: function () {
          return {
            id: id
          };
        }
      }, _a[symbolObservable] = function () {
        return this;
      }, _a));
    };

    Interpreter.prototype.attachDev = function () {
      var global = getGlobal();

      if (this.options.devTools && global) {
        if (global.__REDUX_DEVTOOLS_EXTENSION__) {
          var devToolsOptions = typeof this.options.devTools === 'object' ? this.options.devTools : undefined;
          this.devTools = global.__REDUX_DEVTOOLS_EXTENSION__.connect(__assign(__assign({
            name: this.id,
            autoPause: true,
            stateSanitizer: function (state) {
              return {
                value: state.value,
                context: state.context,
                actions: state.actions
              };
            }
          }, devToolsOptions), {
            features: __assign({
              jump: false,
              skip: false
            }, devToolsOptions ? devToolsOptions.features : undefined)
          }), this.machine);
          this.devTools.init(this.state);
        } // add XState-specific dev tooling hook


        registerService(this);
      }
    };

    Interpreter.prototype.toJSON = function () {
      return {
        id: this.id
      };
    };

    Interpreter.prototype[symbolObservable] = function () {
      return this;
    };

    Interpreter.prototype.getSnapshot = function () {
      if (this.status === InterpreterStatus.NotStarted) {
        return this.initialState;
      }

      return this._state;
    };
    /**
     * The default interpreter options:
     *
     * - `clock` uses the global `setTimeout` and `clearTimeout` functions
     * - `logger` uses the global `console.log()` method
     */


    Interpreter.defaultOptions = {
      execute: true,
      deferEvents: true,
      clock: {
        setTimeout: function (fn, ms) {
          return setTimeout(fn, ms);
        },
        clearTimeout: function (id) {
          return clearTimeout(id);
        }
      },
      logger: /*#__PURE__*/console.log.bind(console),
      devTools: false
    };
    Interpreter.interpret = interpret;
    return Interpreter;
  }();
  /**
   * Creates a new Interpreter instance for the given machine with the provided options, if any.
   *
   * @param machine The machine to interpret
   * @param options Interpreter options
   */

  function interpret(machine, options) {
    var interpreter = new Interpreter(machine, options);
    return interpreter;
  }

  function toInvokeSource(src) {
    if (typeof src === 'string') {
      var simpleSrc = {
        type: src
      };

      simpleSrc.toString = function () {
        return src;
      }; // v4 compat - TODO: remove in v5


      return simpleSrc;
    }

    return src;
  }
  function toInvokeDefinition(invokeConfig) {
    return __assign(__assign({
      type: invoke
    }, invokeConfig), {
      toJSON: function () {
        invokeConfig.onDone;
            invokeConfig.onError;
            var invokeDef = __rest(invokeConfig, ["onDone", "onError"]);

        return __assign(__assign({}, invokeDef), {
          type: invoke,
          src: toInvokeSource(invokeConfig.src)
        });
      }
    });
  }

  var NULL_EVENT = '';
  var STATE_IDENTIFIER = '#';
  var WILDCARD = '*';
  var EMPTY_OBJECT = {};

  var isStateId = function (str) {
    return str[0] === STATE_IDENTIFIER;
  };

  var createDefaultOptions = function () {
    return {
      actions: {},
      guards: {},
      services: {},
      activities: {},
      delays: {}
    };
  };

  var validateArrayifiedTransitions = function (stateNode, event, transitions) {
    var hasNonLastUnguardedTarget = transitions.slice(0, -1).some(function (transition) {
      return !('cond' in transition) && !('in' in transition) && (isString(transition.target) || isMachine(transition.target));
    });
    var eventText = event === NULL_EVENT ? 'the transient event' : "event '".concat(event, "'");
    warn(!hasNonLastUnguardedTarget, "One or more transitions for ".concat(eventText, " on state '").concat(stateNode.id, "' are unreachable. ") + "Make sure that the default transition is the last one defined.");
  };

  var StateNode =
  /*#__PURE__*/

  /** @class */
  function () {
    function StateNode(
    /**
     * The raw config used to create the machine.
     */
    config, options,
    /**
     * The initial extended state
     */
    _context, // TODO: this is unsafe, but we're removing it in v5 anyway
    _stateInfo) {
      var _this = this;

      if (_context === void 0) {
        _context = 'context' in config ? config.context : undefined;
      }

      var _a;

      this.config = config;
      this._context = _context;
      /**
       * The order this state node appears. Corresponds to the implicit SCXML document order.
       */

      this.order = -1;
      this.__xstatenode = true;
      this.__cache = {
        events: undefined,
        relativeValue: new Map(),
        initialStateValue: undefined,
        initialState: undefined,
        on: undefined,
        transitions: undefined,
        candidates: {},
        delayedTransitions: undefined
      };
      this.idMap = {};
      this.tags = [];
      this.options = Object.assign(createDefaultOptions(), options);
      this.parent = _stateInfo === null || _stateInfo === void 0 ? void 0 : _stateInfo.parent;
      this.key = this.config.key || (_stateInfo === null || _stateInfo === void 0 ? void 0 : _stateInfo.key) || this.config.id || '(machine)';
      this.machine = this.parent ? this.parent.machine : this;
      this.path = this.parent ? this.parent.path.concat(this.key) : [];
      this.delimiter = this.config.delimiter || (this.parent ? this.parent.delimiter : STATE_DELIMITER);
      this.id = this.config.id || __spreadArray([this.machine.key], __read(this.path), false).join(this.delimiter);
      this.version = this.parent ? this.parent.version : this.config.version;
      this.type = this.config.type || (this.config.parallel ? 'parallel' : this.config.states && Object.keys(this.config.states).length ? 'compound' : this.config.history ? 'history' : 'atomic');
      this.schema = this.parent ? this.machine.schema : (_a = this.config.schema) !== null && _a !== void 0 ? _a : {};
      this.description = this.config.description;

      if (!IS_PRODUCTION) {
        warn(!('parallel' in this.config), "The \"parallel\" property is deprecated and will be removed in version 4.1. ".concat(this.config.parallel ? "Replace with `type: 'parallel'`" : "Use `type: '".concat(this.type, "'`"), " in the config for state node '").concat(this.id, "' instead."));
      }

      this.initial = this.config.initial;
      this.states = this.config.states ? mapValues(this.config.states, function (stateConfig, key) {
        var _a;

        var stateNode = new StateNode(stateConfig, {}, undefined, {
          parent: _this,
          key: key
        });
        Object.assign(_this.idMap, __assign((_a = {}, _a[stateNode.id] = stateNode, _a), stateNode.idMap));
        return stateNode;
      }) : EMPTY_OBJECT; // Document order

      var order = 0;

      function dfs(stateNode) {
        var e_1, _a;

        stateNode.order = order++;

        try {
          for (var _b = __values(getChildren(stateNode)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var child = _c.value;
            dfs(child);
          }
        } catch (e_1_1) {
          e_1 = {
            error: e_1_1
          };
        } finally {
          try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
          } finally {
            if (e_1) throw e_1.error;
          }
        }
      }

      dfs(this); // History config

      this.history = this.config.history === true ? 'shallow' : this.config.history || false;
      this._transient = !!this.config.always || (!this.config.on ? false : Array.isArray(this.config.on) ? this.config.on.some(function (_a) {
        var event = _a.event;
        return event === NULL_EVENT;
      }) : NULL_EVENT in this.config.on);
      this.strict = !!this.config.strict; // TODO: deprecate (entry)

      this.onEntry = toArray(this.config.entry || this.config.onEntry).map(function (action) {
        return toActionObject(action);
      }); // TODO: deprecate (exit)

      this.onExit = toArray(this.config.exit || this.config.onExit).map(function (action) {
        return toActionObject(action);
      });
      this.meta = this.config.meta;
      this.doneData = this.type === 'final' ? this.config.data : undefined;
      this.invoke = toArray(this.config.invoke).map(function (invokeConfig, i) {
        var _a, _b;

        if (isMachine(invokeConfig)) {
          var invokeId = createInvokeId(_this.id, i);
          _this.machine.options.services = __assign((_a = {}, _a[invokeId] = invokeConfig, _a), _this.machine.options.services);
          return toInvokeDefinition({
            src: invokeId,
            id: invokeId
          });
        } else if (isString(invokeConfig.src)) {
          var invokeId = invokeConfig.id || createInvokeId(_this.id, i);
          return toInvokeDefinition(__assign(__assign({}, invokeConfig), {
            id: invokeId,
            src: invokeConfig.src
          }));
        } else if (isMachine(invokeConfig.src) || isFunction(invokeConfig.src)) {
          var invokeId = invokeConfig.id || createInvokeId(_this.id, i);
          _this.machine.options.services = __assign((_b = {}, _b[invokeId] = invokeConfig.src, _b), _this.machine.options.services);
          return toInvokeDefinition(__assign(__assign({
            id: invokeId
          }, invokeConfig), {
            src: invokeId
          }));
        } else {
          var invokeSource = invokeConfig.src;
          return toInvokeDefinition(__assign(__assign({
            id: createInvokeId(_this.id, i)
          }, invokeConfig), {
            src: invokeSource
          }));
        }
      });
      this.activities = toArray(this.config.activities).concat(this.invoke).map(function (activity) {
        return toActivityDefinition(activity);
      });
      this.transition = this.transition.bind(this);
      this.tags = toArray(this.config.tags); // TODO: this is the real fix for initialization once
      // state node getters are deprecated
      // if (!this.parent) {
      //   this._init();
      // }
    }

    StateNode.prototype._init = function () {
      if (this.__cache.transitions) {
        return;
      }

      getAllStateNodes(this).forEach(function (stateNode) {
        return stateNode.on;
      });
    };
    /**
     * Clones this state machine with custom options and context.
     *
     * @param options Options (actions, guards, activities, services) to recursively merge with the existing options.
     * @param context Custom context (will override predefined context)
     */


    StateNode.prototype.withConfig = function (options, context) {
      var _a = this.options,
          actions = _a.actions,
          activities = _a.activities,
          guards = _a.guards,
          services = _a.services,
          delays = _a.delays;
      return new StateNode(this.config, {
        actions: __assign(__assign({}, actions), options.actions),
        activities: __assign(__assign({}, activities), options.activities),
        guards: __assign(__assign({}, guards), options.guards),
        services: __assign(__assign({}, services), options.services),
        delays: __assign(__assign({}, delays), options.delays)
      }, context !== null && context !== void 0 ? context : this.context);
    };
    /**
     * Clones this state machine with custom context.
     *
     * @param context Custom context (will override predefined context, not recursive)
     */


    StateNode.prototype.withContext = function (context) {
      return new StateNode(this.config, this.options, context);
    };

    Object.defineProperty(StateNode.prototype, "context", {
      get: function () {
        return isFunction(this._context) ? this._context() : this._context;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StateNode.prototype, "definition", {
      /**
       * The well-structured state node definition.
       */
      get: function () {
        return {
          id: this.id,
          key: this.key,
          version: this.version,
          context: this.context,
          type: this.type,
          initial: this.initial,
          history: this.history,
          states: mapValues(this.states, function (state) {
            return state.definition;
          }),
          on: this.on,
          transitions: this.transitions,
          entry: this.onEntry,
          exit: this.onExit,
          activities: this.activities || [],
          meta: this.meta,
          order: this.order || -1,
          data: this.doneData,
          invoke: this.invoke,
          description: this.description,
          tags: this.tags
        };
      },
      enumerable: false,
      configurable: true
    });

    StateNode.prototype.toJSON = function () {
      return this.definition;
    };

    Object.defineProperty(StateNode.prototype, "on", {
      /**
       * The mapping of events to transitions.
       */
      get: function () {
        if (this.__cache.on) {
          return this.__cache.on;
        }

        var transitions = this.transitions;
        return this.__cache.on = transitions.reduce(function (map, transition) {
          map[transition.eventType] = map[transition.eventType] || [];
          map[transition.eventType].push(transition);
          return map;
        }, {});
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StateNode.prototype, "after", {
      get: function () {
        return this.__cache.delayedTransitions || (this.__cache.delayedTransitions = this.getDelayedTransitions(), this.__cache.delayedTransitions);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StateNode.prototype, "transitions", {
      /**
       * All the transitions that can be taken from this state node.
       */
      get: function () {
        return this.__cache.transitions || (this.__cache.transitions = this.formatTransitions(), this.__cache.transitions);
      },
      enumerable: false,
      configurable: true
    });

    StateNode.prototype.getCandidates = function (eventName) {
      if (this.__cache.candidates[eventName]) {
        return this.__cache.candidates[eventName];
      }

      var transient = eventName === NULL_EVENT;
      var candidates = this.transitions.filter(function (transition) {
        var sameEventType = transition.eventType === eventName; // null events should only match against eventless transitions

        return transient ? sameEventType : sameEventType || transition.eventType === WILDCARD;
      });
      this.__cache.candidates[eventName] = candidates;
      return candidates;
    };
    /**
     * All delayed transitions from the config.
     */


    StateNode.prototype.getDelayedTransitions = function () {
      var _this = this;

      var afterConfig = this.config.after;

      if (!afterConfig) {
        return [];
      }

      var mutateEntryExit = function (delay, i) {
        var delayRef = isFunction(delay) ? "".concat(_this.id, ":delay[").concat(i, "]") : delay;
        var eventType = after(delayRef, _this.id);

        _this.onEntry.push(send(eventType, {
          delay: delay
        }));

        _this.onExit.push(cancel(eventType));

        return eventType;
      };

      var delayedTransitions = isArray(afterConfig) ? afterConfig.map(function (transition, i) {
        var eventType = mutateEntryExit(transition.delay, i);
        return __assign(__assign({}, transition), {
          event: eventType
        });
      }) : flatten(Object.keys(afterConfig).map(function (delay, i) {
        var configTransition = afterConfig[delay];
        var resolvedTransition = isString(configTransition) ? {
          target: configTransition
        } : configTransition;
        var resolvedDelay = !isNaN(+delay) ? +delay : delay;
        var eventType = mutateEntryExit(resolvedDelay, i);
        return toArray(resolvedTransition).map(function (transition) {
          return __assign(__assign({}, transition), {
            event: eventType,
            delay: resolvedDelay
          });
        });
      }));
      return delayedTransitions.map(function (delayedTransition) {
        var delay = delayedTransition.delay;
        return __assign(__assign({}, _this.formatTransition(delayedTransition)), {
          delay: delay
        });
      });
    };
    /**
     * Returns the state nodes represented by the current state value.
     *
     * @param state The state value or State instance
     */


    StateNode.prototype.getStateNodes = function (state) {
      var _a;

      var _this = this;

      if (!state) {
        return [];
      }

      var stateValue = state instanceof State ? state.value : toStateValue(state, this.delimiter);

      if (isString(stateValue)) {
        var initialStateValue = this.getStateNode(stateValue).initial;
        return initialStateValue !== undefined ? this.getStateNodes((_a = {}, _a[stateValue] = initialStateValue, _a)) : [this, this.states[stateValue]];
      }

      var subStateKeys = Object.keys(stateValue);
      var subStateNodes = [this];
      subStateNodes.push.apply(subStateNodes, __spreadArray([], __read(flatten(subStateKeys.map(function (subStateKey) {
        return _this.getStateNode(subStateKey).getStateNodes(stateValue[subStateKey]);
      }))), false));
      return subStateNodes;
    };
    /**
     * Returns `true` if this state node explicitly handles the given event.
     *
     * @param event The event in question
     */


    StateNode.prototype.handles = function (event) {
      var eventType = getEventType(event);
      return this.events.includes(eventType);
    };
    /**
     * Resolves the given `state` to a new `State` instance relative to this machine.
     *
     * This ensures that `.events` and `.nextEvents` represent the correct values.
     *
     * @param state The state to resolve
     */


    StateNode.prototype.resolveState = function (state) {
      var stateFromConfig = state instanceof State ? state : State.create(state);
      var configuration = Array.from(getConfiguration([], this.getStateNodes(stateFromConfig.value)));
      return new State(__assign(__assign({}, stateFromConfig), {
        value: this.resolve(stateFromConfig.value),
        configuration: configuration,
        done: isInFinalState(configuration, this),
        tags: getTagsFromConfiguration(configuration),
        machine: this.machine
      }));
    };

    StateNode.prototype.transitionLeafNode = function (stateValue, state, _event) {
      var stateNode = this.getStateNode(stateValue);
      var next = stateNode.next(state, _event);

      if (!next || !next.transitions.length) {
        return this.next(state, _event);
      }

      return next;
    };

    StateNode.prototype.transitionCompoundNode = function (stateValue, state, _event) {
      var subStateKeys = Object.keys(stateValue);
      var stateNode = this.getStateNode(subStateKeys[0]);

      var next = stateNode._transition(stateValue[subStateKeys[0]], state, _event);

      if (!next || !next.transitions.length) {
        return this.next(state, _event);
      }

      return next;
    };

    StateNode.prototype.transitionParallelNode = function (stateValue, state, _event) {
      var e_2, _a;

      var transitionMap = {};

      try {
        for (var _b = __values(Object.keys(stateValue)), _c = _b.next(); !_c.done; _c = _b.next()) {
          var subStateKey = _c.value;
          var subStateValue = stateValue[subStateKey];

          if (!subStateValue) {
            continue;
          }

          var subStateNode = this.getStateNode(subStateKey);

          var next = subStateNode._transition(subStateValue, state, _event);

          if (next) {
            transitionMap[subStateKey] = next;
          }
        }
      } catch (e_2_1) {
        e_2 = {
          error: e_2_1
        };
      } finally {
        try {
          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        } finally {
          if (e_2) throw e_2.error;
        }
      }

      var stateTransitions = Object.keys(transitionMap).map(function (key) {
        return transitionMap[key];
      });
      var enabledTransitions = flatten(stateTransitions.map(function (st) {
        return st.transitions;
      }));
      var willTransition = stateTransitions.some(function (st) {
        return st.transitions.length > 0;
      });

      if (!willTransition) {
        return this.next(state, _event);
      }

      var entryNodes = flatten(stateTransitions.map(function (t) {
        return t.entrySet;
      }));
      var configuration = flatten(Object.keys(transitionMap).map(function (key) {
        return transitionMap[key].configuration;
      }));
      return {
        transitions: enabledTransitions,
        entrySet: entryNodes,
        exitSet: flatten(stateTransitions.map(function (t) {
          return t.exitSet;
        })),
        configuration: configuration,
        source: state,
        actions: flatten(Object.keys(transitionMap).map(function (key) {
          return transitionMap[key].actions;
        }))
      };
    };

    StateNode.prototype._transition = function (stateValue, state, _event) {
      // leaf node
      if (isString(stateValue)) {
        return this.transitionLeafNode(stateValue, state, _event);
      } // hierarchical node


      if (Object.keys(stateValue).length === 1) {
        return this.transitionCompoundNode(stateValue, state, _event);
      } // orthogonal node


      return this.transitionParallelNode(stateValue, state, _event);
    };

    StateNode.prototype.getTransitionData = function (state, event) {
      return this._transition(state.value, state, toSCXMLEvent(event));
    };

    StateNode.prototype.next = function (state, _event) {
      var e_3, _a;

      var _this = this;

      var eventName = _event.name;
      var actions = [];
      var nextStateNodes = [];
      var selectedTransition;

      try {
        for (var _b = __values(this.getCandidates(eventName)), _c = _b.next(); !_c.done; _c = _b.next()) {
          var candidate = _c.value;
          var cond = candidate.cond,
              stateIn = candidate.in;
          var resolvedContext = state.context;
          var isInState = stateIn ? isString(stateIn) && isStateId(stateIn) ? // Check if in state by ID
          state.matches(toStateValue(this.getStateNodeById(stateIn).path, this.delimiter)) : // Check if in state by relative grandparent
          matchesState(toStateValue(stateIn, this.delimiter), path(this.path.slice(0, -2))(state.value)) : true;
          var guardPassed = false;

          try {
            guardPassed = !cond || evaluateGuard(this.machine, cond, resolvedContext, _event, state);
          } catch (err) {
            throw new Error("Unable to evaluate guard '".concat(cond.name || cond.type, "' in transition for event '").concat(eventName, "' in state node '").concat(this.id, "':\n").concat(err.message));
          }

          if (guardPassed && isInState) {
            if (candidate.target !== undefined) {
              nextStateNodes = candidate.target;
            }

            actions.push.apply(actions, __spreadArray([], __read(candidate.actions), false));
            selectedTransition = candidate;
            break;
          }
        }
      } catch (e_3_1) {
        e_3 = {
          error: e_3_1
        };
      } finally {
        try {
          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        } finally {
          if (e_3) throw e_3.error;
        }
      }

      if (!selectedTransition) {
        return undefined;
      }

      if (!nextStateNodes.length) {
        return {
          transitions: [selectedTransition],
          entrySet: [],
          exitSet: [],
          configuration: state.value ? [this] : [],
          source: state,
          actions: actions
        };
      }

      var allNextStateNodes = flatten(nextStateNodes.map(function (stateNode) {
        return _this.getRelativeStateNodes(stateNode, state.historyValue);
      }));
      var isInternal = !!selectedTransition.internal;
      var reentryNodes = isInternal ? [] : flatten(allNextStateNodes.map(function (n) {
        return _this.nodesFromChild(n);
      }));
      return {
        transitions: [selectedTransition],
        entrySet: reentryNodes,
        exitSet: isInternal ? [] : [this],
        configuration: allNextStateNodes,
        source: state,
        actions: actions
      };
    };

    StateNode.prototype.nodesFromChild = function (childStateNode) {
      if (childStateNode.escapes(this)) {
        return [];
      }

      var nodes = [];
      var marker = childStateNode;

      while (marker && marker !== this) {
        nodes.push(marker);
        marker = marker.parent;
      }

      nodes.push(this); // inclusive

      return nodes;
    };
    /**
     * Whether the given state node "escapes" this state node. If the `stateNode` is equal to or the parent of
     * this state node, it does not escape.
     */


    StateNode.prototype.escapes = function (stateNode) {
      if (this === stateNode) {
        return false;
      }

      var parent = this.parent;

      while (parent) {
        if (parent === stateNode) {
          return false;
        }

        parent = parent.parent;
      }

      return true;
    };

    StateNode.prototype.getActions = function (transition, currentContext, _event, prevState) {
      var e_4, _a, e_5, _b;

      var prevConfig = getConfiguration([], prevState ? this.getStateNodes(prevState.value) : [this]);
      var resolvedConfig = transition.configuration.length ? getConfiguration(prevConfig, transition.configuration) : prevConfig;

      try {
        for (var resolvedConfig_1 = __values(resolvedConfig), resolvedConfig_1_1 = resolvedConfig_1.next(); !resolvedConfig_1_1.done; resolvedConfig_1_1 = resolvedConfig_1.next()) {
          var sn = resolvedConfig_1_1.value;

          if (!has(prevConfig, sn)) {
            transition.entrySet.push(sn);
          }
        }
      } catch (e_4_1) {
        e_4 = {
          error: e_4_1
        };
      } finally {
        try {
          if (resolvedConfig_1_1 && !resolvedConfig_1_1.done && (_a = resolvedConfig_1.return)) _a.call(resolvedConfig_1);
        } finally {
          if (e_4) throw e_4.error;
        }
      }

      try {
        for (var prevConfig_1 = __values(prevConfig), prevConfig_1_1 = prevConfig_1.next(); !prevConfig_1_1.done; prevConfig_1_1 = prevConfig_1.next()) {
          var sn = prevConfig_1_1.value;

          if (!has(resolvedConfig, sn) || has(transition.exitSet, sn.parent)) {
            transition.exitSet.push(sn);
          }
        }
      } catch (e_5_1) {
        e_5 = {
          error: e_5_1
        };
      } finally {
        try {
          if (prevConfig_1_1 && !prevConfig_1_1.done && (_b = prevConfig_1.return)) _b.call(prevConfig_1);
        } finally {
          if (e_5) throw e_5.error;
        }
      }

      var doneEvents = flatten(transition.entrySet.map(function (sn) {
        var events = [];

        if (sn.type !== 'final') {
          return events;
        }

        var parent = sn.parent;

        if (!parent.parent) {
          return events;
        }

        events.push(done(sn.id, sn.doneData), // TODO: deprecate - final states should not emit done events for their own state.
        done(parent.id, sn.doneData ? mapContext(sn.doneData, currentContext, _event) : undefined));
        var grandparent = parent.parent;

        if (grandparent.type === 'parallel') {
          if (getChildren(grandparent).every(function (parentNode) {
            return isInFinalState(transition.configuration, parentNode);
          })) {
            events.push(done(grandparent.id));
          }
        }

        return events;
      }));
      transition.exitSet.sort(function (a, b) {
        return b.order - a.order;
      });
      transition.entrySet.sort(function (a, b) {
        return a.order - b.order;
      });
      var entryStates = new Set(transition.entrySet);
      var exitStates = new Set(transition.exitSet);

      var _c = __read([flatten(Array.from(entryStates).map(function (stateNode) {
        return __spreadArray(__spreadArray([], __read(stateNode.activities.map(function (activity) {
          return start(activity);
        })), false), __read(stateNode.onEntry), false);
      })).concat(doneEvents.map(raise)), flatten(Array.from(exitStates).map(function (stateNode) {
        return __spreadArray(__spreadArray([], __read(stateNode.onExit), false), __read(stateNode.activities.map(function (activity) {
          return stop(activity);
        })), false);
      }))], 2),
          entryActions = _c[0],
          exitActions = _c[1];

      var actions = toActionObjects(exitActions.concat(transition.actions).concat(entryActions), this.machine.options.actions);
      return actions;
    };
    /**
     * Determines the next state given the current `state` and sent `event`.
     *
     * @param state The current State instance or state value
     * @param event The event that was sent at the current state
     * @param context The current context (extended state) of the current state
     */


    StateNode.prototype.transition = function (state, event, context) {
      if (state === void 0) {
        state = this.initialState;
      }

      var _event = toSCXMLEvent(event);

      var currentState;

      if (state instanceof State) {
        currentState = context === undefined ? state : this.resolveState(State.from(state, context));
      } else {
        var resolvedStateValue = isString(state) ? this.resolve(pathToStateValue(this.getResolvedPath(state))) : this.resolve(state);
        var resolvedContext = context !== null && context !== void 0 ? context : this.machine.context;
        currentState = this.resolveState(State.from(resolvedStateValue, resolvedContext));
      }

      if (!IS_PRODUCTION && _event.name === WILDCARD) {
        throw new Error("An event cannot have the wildcard type ('".concat(WILDCARD, "')"));
      }

      if (this.strict) {
        if (!this.events.includes(_event.name) && !isBuiltInEvent(_event.name)) {
          throw new Error("Machine '".concat(this.id, "' does not accept event '").concat(_event.name, "'"));
        }
      }

      var stateTransition = this._transition(currentState.value, currentState, _event) || {
        transitions: [],
        configuration: [],
        entrySet: [],
        exitSet: [],
        source: currentState,
        actions: []
      };
      var prevConfig = getConfiguration([], this.getStateNodes(currentState.value));
      var resolvedConfig = stateTransition.configuration.length ? getConfiguration(prevConfig, stateTransition.configuration) : prevConfig;
      stateTransition.configuration = __spreadArray([], __read(resolvedConfig), false);
      return this.resolveTransition(stateTransition, currentState, currentState.context, _event);
    };

    StateNode.prototype.resolveRaisedTransition = function (state, _event, originalEvent) {
      var _a;

      var currentActions = state.actions;
      state = this.transition(state, _event); // Save original event to state
      // TODO: this should be the raised event! Delete in V5 (breaking)

      state._event = originalEvent;
      state.event = originalEvent.data;

      (_a = state.actions).unshift.apply(_a, __spreadArray([], __read(currentActions), false));

      return state;
    };

    StateNode.prototype.resolveTransition = function (stateTransition, currentState, context, _event) {
      var e_6, _a;

      var _this = this;

      if (_event === void 0) {
        _event = initEvent;
      }

      var configuration = stateTransition.configuration; // Transition will "apply" if:
      // - this is the initial state (there is no current state)
      // - OR there are transitions

      var willTransition = !currentState || stateTransition.transitions.length > 0;
      var resolvedStateValue = willTransition ? getValue(this.machine, configuration) : undefined;
      var historyValue = currentState ? currentState.historyValue ? currentState.historyValue : stateTransition.source ? this.machine.historyValue(currentState.value) : undefined : undefined;
      var actions = this.getActions(stateTransition, context, _event, currentState);
      var activities = currentState ? __assign({}, currentState.activities) : {};

      try {
        for (var actions_1 = __values(actions), actions_1_1 = actions_1.next(); !actions_1_1.done; actions_1_1 = actions_1.next()) {
          var action = actions_1_1.value;

          if (action.type === start$1) {
            activities[action.activity.id || action.activity.type] = action;
          } else if (action.type === stop$1) {
            activities[action.activity.id || action.activity.type] = false;
          }
        }
      } catch (e_6_1) {
        e_6 = {
          error: e_6_1
        };
      } finally {
        try {
          if (actions_1_1 && !actions_1_1.done && (_a = actions_1.return)) _a.call(actions_1);
        } finally {
          if (e_6) throw e_6.error;
        }
      }

      var _b = __read(resolveActions(this, currentState, context, _event, actions, this.machine.config.preserveActionOrder), 2),
          resolvedActions = _b[0],
          updatedContext = _b[1];

      var _c = __read(partition(resolvedActions, function (action) {
        return action.type === raise$1 || action.type === send$1 && action.to === SpecialTargets.Internal;
      }), 2),
          raisedEvents = _c[0],
          nonRaisedActions = _c[1];

      var invokeActions = resolvedActions.filter(function (action) {
        var _a;

        return action.type === start$1 && ((_a = action.activity) === null || _a === void 0 ? void 0 : _a.type) === invoke;
      });
      var children = invokeActions.reduce(function (acc, action) {
        acc[action.activity.id] = createInvocableActor(action.activity, _this.machine, updatedContext, _event);
        return acc;
      }, currentState ? __assign({}, currentState.children) : {});
      var resolvedConfiguration = willTransition ? stateTransition.configuration : currentState ? currentState.configuration : [];
      var isDone = isInFinalState(resolvedConfiguration, this);
      var nextState = new State({
        value: resolvedStateValue || currentState.value,
        context: updatedContext,
        _event: _event,
        // Persist _sessionid between states
        _sessionid: currentState ? currentState._sessionid : null,
        historyValue: resolvedStateValue ? historyValue ? updateHistoryValue(historyValue, resolvedStateValue) : undefined : currentState ? currentState.historyValue : undefined,
        history: !resolvedStateValue || stateTransition.source ? currentState : undefined,
        actions: resolvedStateValue ? nonRaisedActions : [],
        activities: resolvedStateValue ? activities : currentState ? currentState.activities : {},
        events: [],
        configuration: resolvedConfiguration,
        transitions: stateTransition.transitions,
        children: children,
        done: isDone,
        tags: currentState === null || currentState === void 0 ? void 0 : currentState.tags,
        machine: this
      });
      var didUpdateContext = context !== updatedContext;
      nextState.changed = _event.name === update || didUpdateContext; // Dispose of penultimate histories to prevent memory leaks

      var history = nextState.history;

      if (history) {
        delete history.history;
      } // There are transient transitions if the machine is not in a final state
      // and if some of the state nodes have transient ("always") transitions.


      var isTransient = !isDone && (this._transient || configuration.some(function (stateNode) {
        return stateNode._transient;
      })); // If there are no enabled transitions, check if there are transient transitions.
      // If there are transient transitions, continue checking for more transitions
      // because an transient transition should be triggered even if there are no
      // enabled transitions.
      //
      // If we're already working on an transient transition (by checking
      // if the event is a NULL_EVENT), then stop to prevent an infinite loop.
      //
      // Otherwise, if there are no enabled nor transient transitions, we are done.

      if (!willTransition && (!isTransient || _event.name === NULL_EVENT)) {
        return nextState;
      }

      var maybeNextState = nextState;

      if (!isDone) {
        if (isTransient) {
          maybeNextState = this.resolveRaisedTransition(maybeNextState, {
            type: nullEvent
          }, _event);
        }

        while (raisedEvents.length) {
          var raisedEvent = raisedEvents.shift();
          maybeNextState = this.resolveRaisedTransition(maybeNextState, raisedEvent._event, _event);
        }
      } // Detect if state changed


      var changed = maybeNextState.changed || (history ? !!maybeNextState.actions.length || didUpdateContext || typeof history.value !== typeof maybeNextState.value || !stateValuesEqual(maybeNextState.value, history.value) : undefined);
      maybeNextState.changed = changed; // Preserve original history after raised events

      maybeNextState.history = history;
      maybeNextState.tags = getTagsFromConfiguration(maybeNextState.configuration);
      return maybeNextState;
    };
    /**
     * Returns the child state node from its relative `stateKey`, or throws.
     */


    StateNode.prototype.getStateNode = function (stateKey) {
      if (isStateId(stateKey)) {
        return this.machine.getStateNodeById(stateKey);
      }

      if (!this.states) {
        throw new Error("Unable to retrieve child state '".concat(stateKey, "' from '").concat(this.id, "'; no child states exist."));
      }

      var result = this.states[stateKey];

      if (!result) {
        throw new Error("Child state '".concat(stateKey, "' does not exist on '").concat(this.id, "'"));
      }

      return result;
    };
    /**
     * Returns the state node with the given `stateId`, or throws.
     *
     * @param stateId The state ID. The prefix "#" is removed.
     */


    StateNode.prototype.getStateNodeById = function (stateId) {
      var resolvedStateId = isStateId(stateId) ? stateId.slice(STATE_IDENTIFIER.length) : stateId;

      if (resolvedStateId === this.id) {
        return this;
      }

      var stateNode = this.machine.idMap[resolvedStateId];

      if (!stateNode) {
        throw new Error("Child state node '#".concat(resolvedStateId, "' does not exist on machine '").concat(this.id, "'"));
      }

      return stateNode;
    };
    /**
     * Returns the relative state node from the given `statePath`, or throws.
     *
     * @param statePath The string or string array relative path to the state node.
     */


    StateNode.prototype.getStateNodeByPath = function (statePath) {
      if (typeof statePath === 'string' && isStateId(statePath)) {
        try {
          return this.getStateNodeById(statePath.slice(1));
        } catch (e) {// try individual paths
          // throw e;
        }
      }

      var arrayStatePath = toStatePath(statePath, this.delimiter).slice();
      var currentStateNode = this;

      while (arrayStatePath.length) {
        var key = arrayStatePath.shift();

        if (!key.length) {
          break;
        }

        currentStateNode = currentStateNode.getStateNode(key);
      }

      return currentStateNode;
    };
    /**
     * Resolves a partial state value with its full representation in this machine.
     *
     * @param stateValue The partial state value to resolve.
     */


    StateNode.prototype.resolve = function (stateValue) {
      var _a;

      var _this = this;

      if (!stateValue) {
        return this.initialStateValue || EMPTY_OBJECT; // TODO: type-specific properties
      }

      switch (this.type) {
        case 'parallel':
          return mapValues(this.initialStateValue, function (subStateValue, subStateKey) {
            return subStateValue ? _this.getStateNode(subStateKey).resolve(stateValue[subStateKey] || subStateValue) : EMPTY_OBJECT;
          });

        case 'compound':
          if (isString(stateValue)) {
            var subStateNode = this.getStateNode(stateValue);

            if (subStateNode.type === 'parallel' || subStateNode.type === 'compound') {
              return _a = {}, _a[stateValue] = subStateNode.initialStateValue, _a;
            }

            return stateValue;
          }

          if (!Object.keys(stateValue).length) {
            return this.initialStateValue || {};
          }

          return mapValues(stateValue, function (subStateValue, subStateKey) {
            return subStateValue ? _this.getStateNode(subStateKey).resolve(subStateValue) : EMPTY_OBJECT;
          });

        default:
          return stateValue || EMPTY_OBJECT;
      }
    };

    StateNode.prototype.getResolvedPath = function (stateIdentifier) {
      if (isStateId(stateIdentifier)) {
        var stateNode = this.machine.idMap[stateIdentifier.slice(STATE_IDENTIFIER.length)];

        if (!stateNode) {
          throw new Error("Unable to find state node '".concat(stateIdentifier, "'"));
        }

        return stateNode.path;
      }

      return toStatePath(stateIdentifier, this.delimiter);
    };

    Object.defineProperty(StateNode.prototype, "initialStateValue", {
      get: function () {
        var _a;

        if (this.__cache.initialStateValue) {
          return this.__cache.initialStateValue;
        }

        var initialStateValue;

        if (this.type === 'parallel') {
          initialStateValue = mapFilterValues(this.states, function (state) {
            return state.initialStateValue || EMPTY_OBJECT;
          }, function (stateNode) {
            return !(stateNode.type === 'history');
          });
        } else if (this.initial !== undefined) {
          if (!this.states[this.initial]) {
            throw new Error("Initial state '".concat(this.initial, "' not found on '").concat(this.key, "'"));
          }

          initialStateValue = isLeafNode(this.states[this.initial]) ? this.initial : (_a = {}, _a[this.initial] = this.states[this.initial].initialStateValue, _a);
        } else {
          // The finite state value of a machine without child states is just an empty object
          initialStateValue = {};
        }

        this.__cache.initialStateValue = initialStateValue;
        return this.__cache.initialStateValue;
      },
      enumerable: false,
      configurable: true
    });

    StateNode.prototype.getInitialState = function (stateValue, context) {
      this._init(); // TODO: this should be in the constructor (see note in constructor)


      var configuration = this.getStateNodes(stateValue);
      return this.resolveTransition({
        configuration: configuration,
        entrySet: configuration,
        exitSet: [],
        transitions: [],
        source: undefined,
        actions: []
      }, undefined, context !== null && context !== void 0 ? context : this.machine.context, undefined);
    };

    Object.defineProperty(StateNode.prototype, "initialState", {
      /**
       * The initial State instance, which includes all actions to be executed from
       * entering the initial state.
       */
      get: function () {
        var initialStateValue = this.initialStateValue;

        if (!initialStateValue) {
          throw new Error("Cannot retrieve initial state from simple state '".concat(this.id, "'."));
        }

        return this.getInitialState(initialStateValue);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StateNode.prototype, "target", {
      /**
       * The target state value of the history state node, if it exists. This represents the
       * default state value to transition to if no history value exists yet.
       */
      get: function () {
        var target;

        if (this.type === 'history') {
          var historyConfig = this.config;

          if (isString(historyConfig.target)) {
            target = isStateId(historyConfig.target) ? pathToStateValue(this.machine.getStateNodeById(historyConfig.target).path.slice(this.path.length - 1)) : historyConfig.target;
          } else {
            target = historyConfig.target;
          }
        }

        return target;
      },
      enumerable: false,
      configurable: true
    });
    /**
     * Returns the leaf nodes from a state path relative to this state node.
     *
     * @param relativeStateId The relative state path to retrieve the state nodes
     * @param history The previous state to retrieve history
     * @param resolve Whether state nodes should resolve to initial child state nodes
     */

    StateNode.prototype.getRelativeStateNodes = function (relativeStateId, historyValue, resolve) {
      if (resolve === void 0) {
        resolve = true;
      }

      return resolve ? relativeStateId.type === 'history' ? relativeStateId.resolveHistory(historyValue) : relativeStateId.initialStateNodes : [relativeStateId];
    };

    Object.defineProperty(StateNode.prototype, "initialStateNodes", {
      get: function () {
        var _this = this;

        if (isLeafNode(this)) {
          return [this];
        } // Case when state node is compound but no initial state is defined


        if (this.type === 'compound' && !this.initial) {
          if (!IS_PRODUCTION) {
            warn(false, "Compound state node '".concat(this.id, "' has no initial state."));
          }

          return [this];
        }

        var initialStateNodePaths = toStatePaths(this.initialStateValue);
        return flatten(initialStateNodePaths.map(function (initialPath) {
          return _this.getFromRelativePath(initialPath);
        }));
      },
      enumerable: false,
      configurable: true
    });
    /**
     * Retrieves state nodes from a relative path to this state node.
     *
     * @param relativePath The relative path from this state node
     * @param historyValue
     */

    StateNode.prototype.getFromRelativePath = function (relativePath) {
      if (!relativePath.length) {
        return [this];
      }

      var _a = __read(relativePath),
          stateKey = _a[0],
          childStatePath = _a.slice(1);

      if (!this.states) {
        throw new Error("Cannot retrieve subPath '".concat(stateKey, "' from node with no states"));
      }

      var childStateNode = this.getStateNode(stateKey);

      if (childStateNode.type === 'history') {
        return childStateNode.resolveHistory();
      }

      if (!this.states[stateKey]) {
        throw new Error("Child state '".concat(stateKey, "' does not exist on '").concat(this.id, "'"));
      }

      return this.states[stateKey].getFromRelativePath(childStatePath);
    };

    StateNode.prototype.historyValue = function (relativeStateValue) {
      if (!Object.keys(this.states).length) {
        return undefined;
      }

      return {
        current: relativeStateValue || this.initialStateValue,
        states: mapFilterValues(this.states, function (stateNode, key) {
          if (!relativeStateValue) {
            return stateNode.historyValue();
          }

          var subStateValue = isString(relativeStateValue) ? undefined : relativeStateValue[key];
          return stateNode.historyValue(subStateValue || stateNode.initialStateValue);
        }, function (stateNode) {
          return !stateNode.history;
        })
      };
    };
    /**
     * Resolves to the historical value(s) of the parent state node,
     * represented by state nodes.
     *
     * @param historyValue
     */


    StateNode.prototype.resolveHistory = function (historyValue) {
      var _this = this;

      if (this.type !== 'history') {
        return [this];
      }

      var parent = this.parent;

      if (!historyValue) {
        var historyTarget = this.target;
        return historyTarget ? flatten(toStatePaths(historyTarget).map(function (relativeChildPath) {
          return parent.getFromRelativePath(relativeChildPath);
        })) : parent.initialStateNodes;
      }

      var subHistoryValue = nestedPath(parent.path, 'states')(historyValue).current;

      if (isString(subHistoryValue)) {
        return [parent.getStateNode(subHistoryValue)];
      }

      return flatten(toStatePaths(subHistoryValue).map(function (subStatePath) {
        return _this.history === 'deep' ? parent.getFromRelativePath(subStatePath) : [parent.states[subStatePath[0]]];
      }));
    };

    Object.defineProperty(StateNode.prototype, "stateIds", {
      /**
       * All the state node IDs of this state node and its descendant state nodes.
       */
      get: function () {
        var _this = this;

        var childStateIds = flatten(Object.keys(this.states).map(function (stateKey) {
          return _this.states[stateKey].stateIds;
        }));
        return [this.id].concat(childStateIds);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StateNode.prototype, "events", {
      /**
       * All the event types accepted by this state node and its descendants.
       */
      get: function () {
        var e_7, _a, e_8, _b;

        if (this.__cache.events) {
          return this.__cache.events;
        }

        var states = this.states;
        var events = new Set(this.ownEvents);

        if (states) {
          try {
            for (var _c = __values(Object.keys(states)), _d = _c.next(); !_d.done; _d = _c.next()) {
              var stateId = _d.value;
              var state = states[stateId];

              if (state.states) {
                try {
                  for (var _e = (e_8 = void 0, __values(state.events)), _f = _e.next(); !_f.done; _f = _e.next()) {
                    var event_1 = _f.value;
                    events.add("".concat(event_1));
                  }
                } catch (e_8_1) {
                  e_8 = {
                    error: e_8_1
                  };
                } finally {
                  try {
                    if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                  } finally {
                    if (e_8) throw e_8.error;
                  }
                }
              }
            }
          } catch (e_7_1) {
            e_7 = {
              error: e_7_1
            };
          } finally {
            try {
              if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            } finally {
              if (e_7) throw e_7.error;
            }
          }
        }

        return this.__cache.events = Array.from(events);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StateNode.prototype, "ownEvents", {
      /**
       * All the events that have transitions directly from this state node.
       *
       * Excludes any inert events.
       */
      get: function () {
        var events = new Set(this.transitions.filter(function (transition) {
          return !(!transition.target && !transition.actions.length && transition.internal);
        }).map(function (transition) {
          return transition.eventType;
        }));
        return Array.from(events);
      },
      enumerable: false,
      configurable: true
    });

    StateNode.prototype.resolveTarget = function (_target) {
      var _this = this;

      if (_target === undefined) {
        // an undefined target signals that the state node should not transition from that state when receiving that event
        return undefined;
      }

      return _target.map(function (target) {
        if (!isString(target)) {
          return target;
        }

        var isInternalTarget = target[0] === _this.delimiter; // If internal target is defined on machine,
        // do not include machine key on target

        if (isInternalTarget && !_this.parent) {
          return _this.getStateNodeByPath(target.slice(1));
        }

        var resolvedTarget = isInternalTarget ? _this.key + target : target;

        if (_this.parent) {
          try {
            var targetStateNode = _this.parent.getStateNodeByPath(resolvedTarget);

            return targetStateNode;
          } catch (err) {
            throw new Error("Invalid transition definition for state node '".concat(_this.id, "':\n").concat(err.message));
          }
        } else {
          return _this.getStateNodeByPath(resolvedTarget);
        }
      });
    };

    StateNode.prototype.formatTransition = function (transitionConfig) {
      var _this = this;

      var normalizedTarget = normalizeTarget(transitionConfig.target);
      var internal = 'internal' in transitionConfig ? transitionConfig.internal : normalizedTarget ? normalizedTarget.some(function (_target) {
        return isString(_target) && _target[0] === _this.delimiter;
      }) : true;
      var guards = this.machine.options.guards;
      var target = this.resolveTarget(normalizedTarget);

      var transition = __assign(__assign({}, transitionConfig), {
        actions: toActionObjects(toArray(transitionConfig.actions)),
        cond: toGuard(transitionConfig.cond, guards),
        target: target,
        source: this,
        internal: internal,
        eventType: transitionConfig.event,
        toJSON: function () {
          return __assign(__assign({}, transition), {
            target: transition.target ? transition.target.map(function (t) {
              return "#".concat(t.id);
            }) : undefined,
            source: "#".concat(_this.id)
          });
        }
      });

      return transition;
    };

    StateNode.prototype.formatTransitions = function () {
      var e_9, _a;

      var _this = this;

      var onConfig;

      if (!this.config.on) {
        onConfig = [];
      } else if (Array.isArray(this.config.on)) {
        onConfig = this.config.on;
      } else {
        var _b = this.config.on,
            _c = WILDCARD,
            _d = _b[_c],
            wildcardConfigs = _d === void 0 ? [] : _d,
            strictTransitionConfigs_1 = __rest(_b, [typeof _c === "symbol" ? _c : _c + ""]);

        onConfig = flatten(Object.keys(strictTransitionConfigs_1).map(function (key) {
          if (!IS_PRODUCTION && key === NULL_EVENT) {
            warn(false, "Empty string transition configs (e.g., `{ on: { '': ... }}`) for transient transitions are deprecated. Specify the transition in the `{ always: ... }` property instead. " + "Please check the `on` configuration for \"#".concat(_this.id, "\"."));
          }

          var transitionConfigArray = toTransitionConfigArray(key, strictTransitionConfigs_1[key]);

          if (!IS_PRODUCTION) {
            validateArrayifiedTransitions(_this, key, transitionConfigArray);
          }

          return transitionConfigArray;
        }).concat(toTransitionConfigArray(WILDCARD, wildcardConfigs)));
      }

      var eventlessConfig = this.config.always ? toTransitionConfigArray('', this.config.always) : [];
      var doneConfig = this.config.onDone ? toTransitionConfigArray(String(done(this.id)), this.config.onDone) : [];

      if (!IS_PRODUCTION) {
        warn(!(this.config.onDone && !this.parent), "Root nodes cannot have an \".onDone\" transition. Please check the config of \"".concat(this.id, "\"."));
      }

      var invokeConfig = flatten(this.invoke.map(function (invokeDef) {
        var settleTransitions = [];

        if (invokeDef.onDone) {
          settleTransitions.push.apply(settleTransitions, __spreadArray([], __read(toTransitionConfigArray(String(doneInvoke(invokeDef.id)), invokeDef.onDone)), false));
        }

        if (invokeDef.onError) {
          settleTransitions.push.apply(settleTransitions, __spreadArray([], __read(toTransitionConfigArray(String(error(invokeDef.id)), invokeDef.onError)), false));
        }

        return settleTransitions;
      }));
      var delayedTransitions = this.after;
      var formattedTransitions = flatten(__spreadArray(__spreadArray(__spreadArray(__spreadArray([], __read(doneConfig), false), __read(invokeConfig), false), __read(onConfig), false), __read(eventlessConfig), false).map(function (transitionConfig) {
        return toArray(transitionConfig).map(function (transition) {
          return _this.formatTransition(transition);
        });
      }));

      try {
        for (var delayedTransitions_1 = __values(delayedTransitions), delayedTransitions_1_1 = delayedTransitions_1.next(); !delayedTransitions_1_1.done; delayedTransitions_1_1 = delayedTransitions_1.next()) {
          var delayedTransition = delayedTransitions_1_1.value;
          formattedTransitions.push(delayedTransition);
        }
      } catch (e_9_1) {
        e_9 = {
          error: e_9_1
        };
      } finally {
        try {
          if (delayedTransitions_1_1 && !delayedTransitions_1_1.done && (_a = delayedTransitions_1.return)) _a.call(delayedTransitions_1);
        } finally {
          if (e_9) throw e_9.error;
        }
      }

      return formattedTransitions;
    };

    return StateNode;
  }();

  function createMachine(config, options) {
    return new StateNode(config, options);
  }

  class CallerId {
      constructor(webex, emitter) {
          this.sdkConnector = SDKConnector$1;
          this.callerInfo = {};
          if (!this.sdkConnector.getWebex()) {
              SDKConnector$1.setWebex(webex);
          }
          this.webex = this.sdkConnector.getWebex();
          this.emitter = emitter;
      }
      resolveCallerId(filter) {
          return __awaiter(this, void 0, void 0, function* () {
              const displayResult = (yield resolveCallerIdDisplay(filter));
              let isChanged = false;
              if (displayResult.name && this.callerInfo.name !== displayResult.name) {
                  log$1.info('Updating Name after resolution', {
                      file: CALLER_ID_FILE,
                      method: 'resolveCallerId',
                  });
                  this.callerInfo.name = displayResult.name;
                  isChanged = true;
              }
              if (displayResult.num && this.callerInfo.num !== displayResult.num) {
                  log$1.info('Updating Number after resolution', {
                      file: CALLER_ID_FILE,
                      method: 'resolveCallerId',
                  });
                  this.callerInfo.num = displayResult.num;
                  isChanged = true;
              }
              if (!this.callerInfo.avatarSrc || this.callerInfo.avatarSrc !== displayResult.avatarSrc) {
                  log$1.info('Updating Avatar Id after resolution', {
                      file: CALLER_ID_FILE,
                      method: 'resolveCallerId',
                  });
                  this.callerInfo.avatarSrc = displayResult.avatarSrc;
                  isChanged = true;
              }
              if (!this.callerInfo.id || this.callerInfo.id !== displayResult.id) {
                  log$1.info('Updating User Id after resolution', {
                      file: CALLER_ID_FILE,
                      method: 'resolveCallerId',
                  });
                  this.callerInfo.id = displayResult.id;
                  isChanged = true;
              }
              if (isChanged) {
                  this.emitter(this.callerInfo);
              }
          });
      }
      parseRemotePartyInfo(data) {
          return __awaiter(this, void 0, void 0, function* () {
              const lastToken = data.split(';').slice(-1)[0];
              if (lastToken.includes('externalId')) {
                  const externalId = lastToken.split('=')[1];
                  log$1.info(`externalId retrieved: ${externalId}`, {
                      file: CALLER_ID_FILE,
                      method: 'parseRemotePartyInfo',
                  });
                  this.resolveCallerId(`id eq "${externalId}"`);
              }
              else {
                  log$1.warn(`externalId not found!`, {
                      file: CALLER_ID_FILE,
                      method: 'parseRemotePartyInfo',
                  });
              }
          });
      }
      parseSipUri(paid) {
          const result = {};
          const data = paid.split('@')[0].replace(/"/g, '');
          const nameMatch = FETCH_NAME.exec(data);
          const num = data.substring(data.indexOf(':') + 1, data.length);
          if (nameMatch) {
              result.name = nameMatch[0].trimEnd();
              log$1.info(`Parsed Name: ${result.name}`, {
                  file: CALLER_ID_FILE,
                  method: 'parseSipUri',
              });
          }
          else {
              log$1.warn(`Name field not found!`, {
                  file: CALLER_ID_FILE,
                  method: 'parseSipUri',
              });
          }
          const phoneMatch = num.match(VALID_PHONE);
          if (phoneMatch && phoneMatch[0].length === num.length) {
              result.num = num;
              log$1.info(`Parsed Number: ${result.num}`, {
                  file: CALLER_ID_FILE,
                  method: 'parseSipUri',
              });
          }
          else {
              log$1.warn(`Number field not found!`, {
                  file: CALLER_ID_FILE,
                  method: 'parseSipUri',
              });
          }
          return result;
      }
      fetchCallerDetails(callerId) {
          this.callerInfo.id = undefined;
          this.callerInfo.avatarSrc = undefined;
          this.callerInfo.name = undefined;
          this.callerInfo.num = undefined;
          if ('p-asserted-identity' in callerId) {
              log$1.info(`Parsing p-asserted-identity:- ${callerId['p-asserted-identity']}`, {
                  file: CALLER_ID_FILE,
                  method: 'fetchCallerDetails',
              });
              const result = this.parseSipUri(callerId['p-asserted-identity']);
              this.callerInfo.name = result.name;
              this.callerInfo.num = result.num;
              log$1.info(`CallerId retrieved from p-asserted-identity: name: ${this.callerInfo.name} , num: ${this.callerInfo.num}`, {
                  file: CALLER_ID_FILE,
                  method: 'fetchCallerDetails',
              });
          }
          if (callerId.from) {
              log$1.info(`Parsing from header:- ${callerId.from}`, {
                  file: CALLER_ID_FILE,
                  method: 'fetchCallerDetails',
              });
              const result = this.parseSipUri(callerId.from);
              log$1.info(`CallerId retrieved from FROM: name: ${result.name} , num: ${result.num}`, {
                  file: CALLER_ID_FILE,
                  method: 'fetchCallerDetails',
              });
              if (!this.callerInfo.name && result.name) {
                  log$1.info('Updating name field from From header', {
                      file: CALLER_ID_FILE,
                      method: 'fetchCallerDetails',
                  });
                  this.callerInfo.name = result.name;
              }
              if (!this.callerInfo.num && result.num) {
                  log$1.info('Updating number field from From header', {
                      file: CALLER_ID_FILE,
                      method: 'fetchCallerDetails',
                  });
                  this.callerInfo.num = result.num;
              }
          }
          if (this.callerInfo.name || this.callerInfo.num) {
              this.emitter(this.callerInfo);
          }
          if ('x-broadworks-remote-party-info' in callerId) {
              log$1.info(`Parsing x-broadworks-remote-party-info:- ${callerId['x-broadworks-remote-party-info']}`, {
                  file: CALLER_ID_FILE,
                  method: 'fetchCallerDetails',
              });
              this.parseRemotePartyInfo(callerId['x-broadworks-remote-party-info']);
          }
          log$1.log(`Intermediate callerId :- name: ${this.callerInfo.name} , num: ${this.callerInfo.num}`, {
              file: CALLER_ID_FILE,
              method: 'fetchCallerDetails',
          });
          return this.callerInfo;
      }
  }
  const createCallerId = (webex, emitterCb) => new CallerId(webex, emitterCb);

  let metricManager;
  class MetricManager {
      constructor(webex, indicator) {
          log$1.info('Initializing metric manager...', { file: METRIC_FILE });
          this.webex = webex;
          this.serviceIndicator = indicator;
      }
      setDeviceInfo(deviceInfo) {
          this.deviceInfo = deviceInfo;
      }
      submitRegistrationMetric(name, metricAction, type, clientError) {
          var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
          let data;
          switch (name) {
              case METRIC_EVENT.REGISTRATION: {
                  data = {
                      tags: {
                          action: metricAction,
                          device_id: (_b = (_a = this.deviceInfo) === null || _a === void 0 ? void 0 : _a.device) === null || _b === void 0 ? void 0 : _b.deviceId,
                          service_indicator: this.serviceIndicator,
                      },
                      fields: {
                          device_url: (_d = (_c = this.deviceInfo) === null || _c === void 0 ? void 0 : _c.device) === null || _d === void 0 ? void 0 : _d.clientDeviceUri,
                          mobius_url: (_f = (_e = this.deviceInfo) === null || _e === void 0 ? void 0 : _e.device) === null || _f === void 0 ? void 0 : _f.uri,
                          calling_sdk_version: VERSION,
                      },
                      type,
                  };
                  break;
              }
              case METRIC_EVENT.REGISTRATION_ERROR: {
                  if (clientError) {
                      data = {
                          tags: {
                              action: metricAction,
                              device_id: (_h = (_g = this.deviceInfo) === null || _g === void 0 ? void 0 : _g.device) === null || _h === void 0 ? void 0 : _h.deviceId,
                              service_indicator: this.serviceIndicator,
                          },
                          fields: {
                              device_url: (_k = (_j = this.deviceInfo) === null || _j === void 0 ? void 0 : _j.device) === null || _k === void 0 ? void 0 : _k.clientDeviceUri,
                              mobius_url: (_m = (_l = this.deviceInfo) === null || _l === void 0 ? void 0 : _l.device) === null || _m === void 0 ? void 0 : _m.uri,
                              calling_sdk_version: VERSION,
                              error: clientError.getError().message,
                              error_type: clientError.getError().type,
                          },
                          type,
                      };
                  }
                  break;
              }
              default:
                  log$1.warn('Invalid metric name received. Rejecting request to submit metric.', {
                      file: METRIC_FILE,
                      method: this.submitRegistrationMetric.name,
                  });
                  break;
          }
          if (data) {
              this.webex.internal.metrics.submitClientMetrics(name, data);
          }
      }
      submitCallMetric(name, metricAction, type, callId, correlationId, callError) {
          var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
          let data;
          switch (name) {
              case METRIC_EVENT.CALL: {
                  data = {
                      tags: {
                          action: metricAction,
                          device_id: (_b = (_a = this.deviceInfo) === null || _a === void 0 ? void 0 : _a.device) === null || _b === void 0 ? void 0 : _b.deviceId,
                          service_indicator: this.serviceIndicator,
                      },
                      fields: {
                          device_url: (_d = (_c = this.deviceInfo) === null || _c === void 0 ? void 0 : _c.device) === null || _d === void 0 ? void 0 : _d.clientDeviceUri,
                          mobius_url: (_f = (_e = this.deviceInfo) === null || _e === void 0 ? void 0 : _e.device) === null || _f === void 0 ? void 0 : _f.uri,
                          calling_sdk_version: VERSION,
                          call_id: callId,
                          correlation_id: correlationId,
                      },
                      type,
                  };
                  break;
              }
              case METRIC_EVENT.CALL_ERROR: {
                  if (callError) {
                      data = {
                          tags: {
                              action: metricAction,
                              device_id: (_h = (_g = this.deviceInfo) === null || _g === void 0 ? void 0 : _g.device) === null || _h === void 0 ? void 0 : _h.deviceId,
                              service_indicator: this.serviceIndicator,
                          },
                          fields: {
                              device_url: (_k = (_j = this.deviceInfo) === null || _j === void 0 ? void 0 : _j.device) === null || _k === void 0 ? void 0 : _k.clientDeviceUri,
                              mobius_url: (_m = (_l = this.deviceInfo) === null || _l === void 0 ? void 0 : _l.device) === null || _m === void 0 ? void 0 : _m.uri,
                              calling_sdk_version: VERSION,
                              call_id: callId,
                              correlation_id: correlationId,
                              error: callError.getCallError().message,
                              error_type: callError.getCallError().type,
                          },
                          type,
                      };
                  }
                  break;
              }
              default:
                  log$1.warn('Invalid metric name received. Rejecting request to submit metric.', {
                      file: METRIC_FILE,
                      method: this.submitCallMetric.name,
                  });
                  break;
          }
          if (data) {
              this.webex.internal.metrics.submitClientMetrics(name, data);
          }
      }
      submitMediaMetric(name, metricAction, type, callId, correlationId, localSdp, remoteSdp, callError) {
          var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
          let data;
          switch (name) {
              case METRIC_EVENT.MEDIA: {
                  data = {
                      tags: {
                          action: metricAction,
                          device_id: (_b = (_a = this.deviceInfo) === null || _a === void 0 ? void 0 : _a.device) === null || _b === void 0 ? void 0 : _b.deviceId,
                          service_indicator: this.serviceIndicator,
                      },
                      fields: {
                          device_url: (_d = (_c = this.deviceInfo) === null || _c === void 0 ? void 0 : _c.device) === null || _d === void 0 ? void 0 : _d.clientDeviceUri,
                          mobius_url: (_f = (_e = this.deviceInfo) === null || _e === void 0 ? void 0 : _e.device) === null || _f === void 0 ? void 0 : _f.uri,
                          calling_sdk_version: VERSION,
                          call_id: callId,
                          correlation_id: correlationId,
                          local_media_details: localSdp,
                          remote_media_details: remoteSdp,
                      },
                      type,
                  };
                  break;
              }
              case METRIC_EVENT.MEDIA_ERROR: {
                  if (callError) {
                      data = {
                          tags: {
                              action: metricAction,
                              device_id: (_h = (_g = this.deviceInfo) === null || _g === void 0 ? void 0 : _g.device) === null || _h === void 0 ? void 0 : _h.deviceId,
                              service_indicator: this.serviceIndicator,
                          },
                          fields: {
                              device_url: (_k = (_j = this.deviceInfo) === null || _j === void 0 ? void 0 : _j.device) === null || _k === void 0 ? void 0 : _k.clientDeviceUri,
                              mobius_url: (_m = (_l = this.deviceInfo) === null || _l === void 0 ? void 0 : _l.device) === null || _m === void 0 ? void 0 : _m.uri,
                              calling_sdk_version: VERSION,
                              call_id: callId,
                              correlation_id: correlationId,
                              local_media_details: localSdp,
                              remote_media_details: remoteSdp,
                              error: callError.getCallError().message,
                              error_type: callError.getCallError().type,
                          },
                          type,
                      };
                  }
                  break;
              }
              default:
                  log$1.warn('Invalid metric name received. Rejecting request to submit metric.', {
                      file: METRIC_FILE,
                      method: this.submitMediaMetric.name,
                  });
                  break;
          }
          if (data) {
              this.webex.internal.metrics.submitClientMetrics(name, data);
          }
      }
  }
  const getMetricManager = (webex, indicator) => {
      if (!metricManager) {
          metricManager = new MetricManager(webex, indicator);
      }
      return metricManager;
  };

  class Call extends Eventing {
      constructor(activeUrl, webex, destination, direction, deviceId, deleteCb, indicator) {
          super();
          this.getDirection = () => this.direction;
          this.getCallId = () => this.callId;
          this.getCorrelationId = () => this.correlationId;
          this.setCallId = (callId) => {
              this.callId = callId;
              log$1.info(`Setting callId : ${this.callId} for correlationId: ${this.correlationId}`, {
                  file: CALL_FILE,
                  method: this.setCallId.name,
              });
          };
          this.getDisconnectReason = () => {
              return this.disconnectReason;
          };
          this.post = (roapMessage) => __awaiter(this, void 0, void 0, function* () {
              return this.webex.request({
                  uri: `${this.mobiusUrl}${DEVICES_ENDPOINT_RESOURCE}/${this.deviceId}/${CALL_ENDPOINT_RESOURCE}`,
                  method: HTTP_METHODS.POST,
                  service: ALLOWED_SERVICES.MOBIUS,
                  headers: {
                      [CISCO_DEVICE_URL]: this.webex.internal.device.url,
                      [SPARK_USER_AGENT]: CALLING_USER_AGENT,
                  },
                  body: {
                      device: {
                          deviceId: this.deviceId,
                          correlationId: this.correlationId,
                      },
                      callee: {
                          type: this.destination.type,
                          address: this.destination.address,
                      },
                      localMedia: {
                          roap: roapMessage,
                          mediaId: v4(),
                      },
                  },
              });
          });
          this.getCallerInfo = () => this.callerInfo;
          this.end = () => {
              this.sendCallStateMachineEvt({ type: 'E_SEND_CALL_DISCONNECT' });
          };
          this.doHoldResume = () => {
              if (this.held) {
                  this.sendCallStateMachineEvt({ type: 'E_CALL_RESUME' });
              }
              else {
                  this.sendCallStateMachineEvt({ type: 'E_CALL_HOLD' });
              }
          };
          this.mute = (localAudioTrack) => {
              if (this.muted) {
                  localAudioTrack.enabled = true;
                  this.muted = false;
              }
              else {
                  localAudioTrack.enabled = false;
                  this.muted = true;
              }
          };
          this.destination = destination;
          this.direction = direction;
          this.sdkConnector = SDKConnector$1;
          this.deviceId = deviceId;
          this.serviceIndicator = indicator;
          if (!this.sdkConnector.getWebex()) {
              SDKConnector$1.setWebex(webex);
          }
          this.webex = this.sdkConnector.getWebex();
          this.metricManager = getMetricManager(this.webex, this.serviceIndicator);
          this.callId = `${DEFAULT_LOCAL_CALL_ID}_${v4()}`;
          this.correlationId = v4();
          this.deleteCb = deleteCb;
          this.connected = false;
          this.held = false;
          this.earlyMedia = false;
          this.callerInfo = {};
          this.localRoapMessage = {};
          this.mobiusUrl = activeUrl;
          this.waitingForOK = false;
          log$1.info(`Mobius Url:- ${this.mobiusUrl}`, {
              file: CALL_FILE,
              method: 'constructor',
          });
          this.seq = INITIAL_SEQ_NUMBER;
          this.callerId = createCallerId(webex, (callerInfo) => {
              this.callerInfo = callerInfo;
              const emitObj = {
                  correlationId: this.correlationId,
                  callerId: this.callerInfo,
              };
              this.emit(EVENT_KEYS.CALLER_ID, emitObj);
          });
          this.remoteRoapMessage = null;
          this.disconnectReason = { code: DisconnectCode.NORMAL, cause: DisconnectCause.NORMAL };
          const callMachine = createMachine({
              schema: {
                  context: {},
                  events: {},
              },
              id: 'call-state',
              initial: 'S_IDLE',
              context: {},
              states: {
                  S_IDLE: {
                      on: {
                          E_RECV_CALL_SETUP: {
                              target: 'S_RECV_CALL_SETUP',
                              actions: ['incomingCallSetup'],
                          },
                          E_SEND_CALL_SETUP: {
                              target: 'S_SEND_CALL_SETUP',
                              actions: ['outgoingCallSetup'],
                          },
                          E_RECV_CALL_DISCONNECT: {
                              target: 'S_RECV_CALL_DISCONNECT',
                              actions: ['incomingCallDisconnect'],
                          },
                          E_SEND_CALL_DISCONNECT: {
                              target: 'S_SEND_CALL_DISCONNECT',
                              actions: ['outgoingCallDisconnect'],
                          },
                          E_UNKNOWN: {
                              target: 'S_UNKNOWN',
                              actions: ['unknownState'],
                          },
                      },
                  },
                  S_RECV_CALL_SETUP: {
                      on: {
                          E_SEND_CALL_ALERTING: {
                              target: 'S_SEND_CALL_PROGRESS',
                              actions: ['outgoingCallAlerting'],
                          },
                          E_RECV_CALL_DISCONNECT: {
                              target: 'S_RECV_CALL_DISCONNECT',
                              actions: ['incomingCallDisconnect'],
                          },
                          E_SEND_CALL_DISCONNECT: {
                              target: 'S_SEND_CALL_DISCONNECT',
                              actions: ['outgoingCallDisconnect'],
                          },
                          E_UNKNOWN: {
                              target: 'S_UNKNOWN',
                              actions: ['unknownState'],
                          },
                      },
                  },
                  S_SEND_CALL_SETUP: {
                      on: {
                          E_RECV_CALL_PROGRESS: {
                              target: 'S_RECV_CALL_PROGRESS',
                              actions: ['incomingCallProgress'],
                          },
                          E_RECV_CALL_DISCONNECT: {
                              target: 'S_RECV_CALL_DISCONNECT',
                              actions: ['incomingCallDisconnect'],
                          },
                          E_SEND_CALL_DISCONNECT: {
                              target: 'S_SEND_CALL_DISCONNECT',
                              actions: ['outgoingCallDisconnect'],
                          },
                          E_UNKNOWN: {
                              target: 'S_UNKNOWN',
                              actions: ['unknownState'],
                          },
                      },
                  },
                  S_RECV_CALL_PROGRESS: {
                      on: {
                          E_RECV_CALL_CONNECT: {
                              target: 'S_RECV_CALL_CONNECT',
                              actions: ['incomingCallConnect'],
                          },
                          E_RECV_CALL_DISCONNECT: {
                              target: 'S_RECV_CALL_DISCONNECT',
                              actions: ['incomingCallDisconnect'],
                          },
                          E_SEND_CALL_DISCONNECT: {
                              target: 'S_SEND_CALL_DISCONNECT',
                              actions: ['outgoingCallDisconnect'],
                          },
                          E_RECV_CALL_PROGRESS: {
                              target: 'S_RECV_CALL_PROGRESS',
                              actions: ['incomingCallProgress'],
                          },
                          E_UNKNOWN: {
                              target: 'S_UNKNOWN',
                              actions: ['unknownState'],
                          },
                      },
                  },
                  S_SEND_CALL_PROGRESS: {
                      on: {
                          E_SEND_CALL_CONNECT: {
                              target: 'S_SEND_CALL_CONNECT',
                              actions: ['outgoingCallConnect'],
                          },
                          E_RECV_CALL_DISCONNECT: {
                              target: 'S_RECV_CALL_DISCONNECT',
                              actions: ['incomingCallDisconnect'],
                          },
                          E_SEND_CALL_DISCONNECT: {
                              target: 'S_SEND_CALL_DISCONNECT',
                              actions: ['outgoingCallDisconnect'],
                          },
                          E_UNKNOWN: {
                              target: 'S_UNKNOWN',
                              actions: ['unknownState'],
                          },
                      },
                  },
                  S_RECV_CALL_CONNECT: {
                      on: {
                          E_CALL_ESTABLISHED: {
                              target: 'S_CALL_ESTABLISHED',
                              actions: ['callEstablished'],
                          },
                          E_RECV_CALL_DISCONNECT: {
                              target: 'S_RECV_CALL_DISCONNECT',
                              actions: ['incomingCallDisconnect'],
                          },
                          E_SEND_CALL_DISCONNECT: {
                              target: 'S_SEND_CALL_DISCONNECT',
                              actions: ['outgoingCallDisconnect'],
                          },
                          E_UNKNOWN: {
                              target: 'S_UNKNOWN',
                              actions: ['unknownState'],
                          },
                      },
                  },
                  S_SEND_CALL_CONNECT: {
                      on: {
                          E_CALL_ESTABLISHED: {
                              target: 'S_CALL_ESTABLISHED',
                              actions: ['callEstablished'],
                          },
                          E_RECV_CALL_DISCONNECT: {
                              target: 'S_RECV_CALL_DISCONNECT',
                              actions: ['incomingCallDisconnect'],
                          },
                          E_SEND_CALL_DISCONNECT: {
                              target: 'S_SEND_CALL_DISCONNECT',
                              actions: ['outgoingCallDisconnect'],
                          },
                          E_UNKNOWN: {
                              target: 'S_UNKNOWN',
                              actions: ['unknownState'],
                          },
                      },
                  },
                  S_CALL_HOLD: {
                      on: {
                          E_RECV_CALL_DISCONNECT: {
                              target: 'S_RECV_CALL_DISCONNECT',
                              actions: ['incomingCallDisconnect'],
                          },
                          E_SEND_CALL_DISCONNECT: {
                              target: 'S_SEND_CALL_DISCONNECT',
                              actions: ['outgoingCallDisconnect'],
                          },
                          E_CALL_ESTABLISHED: {
                              target: 'S_CALL_ESTABLISHED',
                              actions: ['callEstablished'],
                          },
                          E_UNKNOWN: {
                              target: 'S_UNKNOWN',
                              actions: ['unknownState'],
                          },
                      },
                  },
                  S_CALL_RESUME: {
                      on: {
                          E_RECV_CALL_DISCONNECT: {
                              target: 'S_RECV_CALL_DISCONNECT',
                              actions: ['incomingCallDisconnect'],
                          },
                          E_SEND_CALL_DISCONNECT: {
                              target: 'S_SEND_CALL_DISCONNECT',
                              actions: ['outgoingCallDisconnect'],
                          },
                          E_CALL_ESTABLISHED: {
                              target: 'S_CALL_ESTABLISHED',
                              actions: ['callEstablished'],
                          },
                          E_UNKNOWN: {
                              target: 'S_UNKNOWN',
                              actions: ['unknownState'],
                          },
                      },
                  },
                  S_CALL_ESTABLISHED: {
                      on: {
                          E_CALL_HOLD: {
                              target: 'S_CALL_HOLD',
                              actions: ['initiateCallHold'],
                          },
                          E_CALL_RESUME: {
                              target: 'S_CALL_RESUME',
                              actions: ['initiateCallResume'],
                          },
                          E_RECV_CALL_DISCONNECT: {
                              target: 'S_RECV_CALL_DISCONNECT',
                              actions: ['incomingCallDisconnect'],
                          },
                          E_SEND_CALL_DISCONNECT: {
                              target: 'S_SEND_CALL_DISCONNECT',
                              actions: ['outgoingCallDisconnect'],
                          },
                          E_CALL_ESTABLISHED: {
                              target: 'S_CALL_ESTABLISHED',
                              actions: ['callEstablished'],
                          },
                          E_UNKNOWN: {
                              target: 'S_UNKNOWN',
                              actions: ['unknownState'],
                          },
                      },
                  },
                  S_RECV_CALL_DISCONNECT: {
                      on: {
                          E_CALL_CLEARED: 'S_CALL_CLEARED',
                      },
                  },
                  S_SEND_CALL_DISCONNECT: {
                      on: {
                          E_CALL_CLEARED: 'S_CALL_CLEARED',
                      },
                  },
                  S_UNKNOWN: {
                      on: {
                          E_CALL_CLEARED: 'S_CALL_CLEARED',
                      },
                  },
                  S_ERROR: {
                      on: {
                          E_CALL_CLEARED: 'S_CALL_CLEARED',
                      },
                  },
                  S_CALL_CLEARED: {
                      type: 'final',
                  },
              },
          }, {
              actions: {
                  incomingCallSetup: (context, event) => this.handleIncomingCallSetup(event),
                  outgoingCallSetup: (context, event) => this.handleOutgoingCallSetup(event),
                  incomingCallProgress: (context, event) => this.handleIncomingCallProgress(event),
                  outgoingCallAlerting: (context, event) => this.handleOutgoingCallAlerting(event),
                  incomingCallConnect: (context, event) => this.handleIncomingCallConnect(event),
                  outgoingCallConnect: (context, event) => this.handleOutgoingCallConnect(event),
                  callEstablished: (context, event) => this.handleCallEstablished(event),
                  initiateCallHold: (context, event) => this.handleCallHold(event),
                  initiateCallResume: (context, event) => this.handleCallResume(event),
                  incomingCallDisconnect: (context, event) => this.handleIncomingCallDisconnect(event),
                  outgoingCallDisconnect: (context, event) => this.handleOutgoingCallDisconnect(event),
                  unknownState: (context, event) => this.handleUnknownState(event),
              },
          });
          const mediaMachine = createMachine({
              schema: {
                  context: {},
                  events: {},
              },
              id: 'roap-state',
              initial: 'S_ROAP_IDLE',
              context: {},
              states: {
                  S_ROAP_IDLE: {
                      on: {
                          E_RECV_ROAP_OFFER_REQUEST: {
                              target: 'S_RECV_ROAP_OFFER_REQUEST',
                              actions: ['incomingRoapOfferRequest'],
                          },
                          E_RECV_ROAP_OFFER: {
                              target: 'S_RECV_ROAP_OFFER',
                              actions: ['incomingRoapOffer'],
                          },
                          E_SEND_ROAP_OFFER: {
                              target: 'S_SEND_ROAP_OFFER',
                              actions: ['outgoingRoapOffer'],
                          },
                      },
                  },
                  S_RECV_ROAP_OFFER_REQUEST: {
                      on: {
                          E_SEND_ROAP_OFFER: {
                              target: 'S_SEND_ROAP_OFFER',
                              actions: ['outgoingRoapOffer'],
                          },
                          E_ROAP_OK: {
                              target: 'S_ROAP_OK',
                              actions: ['roapEstablished'],
                          },
                          E_ROAP_ERROR: {
                              target: 'S_ROAP_ERROR',
                              actions: ['roapError'],
                          },
                      },
                  },
                  S_RECV_ROAP_OFFER: {
                      on: {
                          E_SEND_ROAP_ANSWER: {
                              target: 'S_SEND_ROAP_ANSWER',
                              actions: ['outgoingRoapAnswer'],
                          },
                          E_ROAP_OK: {
                              target: 'S_ROAP_OK',
                              actions: ['roapEstablished'],
                          },
                          E_ROAP_ERROR: {
                              target: 'S_ROAP_ERROR',
                              actions: ['roapError'],
                          },
                      },
                  },
                  S_SEND_ROAP_OFFER: {
                      on: {
                          E_RECV_ROAP_ANSWER: {
                              target: 'S_RECV_ROAP_ANSWER',
                              actions: ['incomingRoapAnswer'],
                          },
                          E_SEND_ROAP_ANSWER: {
                              target: 'S_SEND_ROAP_ANSWER',
                              actions: ['outgoingRoapAnswer'],
                          },
                          E_SEND_ROAP_OFFER: {
                              target: 'S_SEND_ROAP_OFFER',
                              actions: ['outgoingRoapOffer'],
                          },
                          E_ROAP_ERROR: {
                              target: 'S_ROAP_ERROR',
                              actions: ['roapError'],
                          },
                      },
                  },
                  S_RECV_ROAP_ANSWER: {
                      on: {
                          E_ROAP_OK: {
                              target: 'S_ROAP_OK',
                              actions: ['roapEstablished'],
                          },
                          E_ROAP_ERROR: {
                              target: 'S_ROAP_ERROR',
                              actions: ['roapError'],
                          },
                      },
                  },
                  S_SEND_ROAP_ANSWER: {
                      on: {
                          E_RECV_ROAP_OFFER_REQUEST: {
                              target: 'S_RECV_ROAP_OFFER_REQUEST',
                              actions: ['incomingRoapOfferRequest'],
                          },
                          E_RECV_ROAP_OFFER: {
                              target: 'S_RECV_ROAP_OFFER',
                              actions: ['incomingRoapOffer'],
                          },
                          E_ROAP_OK: {
                              target: 'S_ROAP_OK',
                              actions: ['roapEstablished'],
                          },
                          E_SEND_ROAP_ANSWER: {
                              target: 'S_SEND_ROAP_ANSWER',
                              actions: ['outgoingRoapAnswer'],
                          },
                          E_ROAP_ERROR: {
                              target: 'S_ROAP_ERROR',
                              actions: ['roapError'],
                          },
                      },
                  },
                  S_ROAP_OK: {
                      on: {
                          E_RECV_ROAP_OFFER_REQUEST: {
                              target: 'S_RECV_ROAP_OFFER_REQUEST',
                              actions: ['incomingRoapOfferRequest'],
                          },
                          E_RECV_ROAP_OFFER: {
                              target: 'S_RECV_ROAP_OFFER',
                              actions: ['incomingRoapOffer'],
                          },
                          E_ROAP_OK: {
                              target: 'S_ROAP_OK',
                              actions: ['roapEstablished'],
                          },
                          E_SEND_ROAP_OFFER: {
                              target: 'S_SEND_ROAP_OFFER',
                              actions: ['outgoingRoapOffer'],
                          },
                          E_ROAP_ERROR: {
                              target: 'S_ROAP_ERROR',
                              actions: ['roapError'],
                          },
                          E_ROAP_TEARDOWN: {
                              target: 'S_ROAP_TEARDOWN',
                          },
                      },
                  },
                  S_ROAP_ERROR: {
                      on: {
                          E_ROAP_TEARDOWN: {
                              target: 'S_ROAP_TEARDOWN',
                          },
                          E_RECV_ROAP_OFFER_REQUEST: {
                              target: 'S_RECV_ROAP_OFFER_REQUEST',
                              actions: ['incomingRoapOfferRequest'],
                          },
                          E_RECV_ROAP_OFFER: {
                              target: 'S_RECV_ROAP_OFFER',
                              actions: ['incomingRoapOffer'],
                          },
                          E_RECV_ROAP_ANSWER: {
                              target: 'S_RECV_ROAP_ANSWER',
                              actions: ['incomingRoapAnswer'],
                          },
                          E_ROAP_OK: {
                              target: 'S_ROAP_OK',
                              actions: ['roapEstablished'],
                          },
                      },
                  },
                  S_ROAP_TEARDOWN: {
                      type: 'final',
                  },
              },
          }, {
              actions: {
                  incomingRoapOffer: (context, event) => this.handleIncomingRoapOffer(context, event),
                  incomingRoapAnswer: (context, event) => this.handleIncomingRoapAnswer(context, event),
                  incomingRoapOfferRequest: (context, event) => this.handleIncomingRoapOfferRequest(context, event),
                  outgoingRoapOffer: (context, event) => this.handleOutgoingRoapOffer(context, event),
                  outgoingRoapAnswer: (context, event) => this.handleOutgoingRoapAnswer(context, event),
                  roapEstablished: (context, event) => this.handleRoapEstablished(context, event),
                  roapError: (context, event) => this.handleRoapError(context, event),
              },
          });
          this.callStateMachine = interpret(callMachine)
              .onTransition((state, event) => {
              log$1.log(`Call StateMachine:- state=${state.value}, event=${JSON.stringify(event.type)}`, {});
              if (state.value !== 'S_UNKNOWN') {
                  this.metricManager.submitCallMetric(METRIC_EVENT.CALL, state.value.toString(), METRIC_TYPE.BEHAVIORAL, this.callId, this.correlationId, undefined);
              }
          })
              .start();
          this.mediaStateMachine = interpret(mediaMachine)
              .onTransition((state, event) => {
              var _a;
              log$1.log(`Media StateMachine:- state=${state.value}, event=${JSON.stringify(event.type)}`, {});
              if (state.value !== 'S_ROAP_ERROR') {
                  this.metricManager.submitMediaMetric(METRIC_EVENT.MEDIA, state.value.toString(), METRIC_TYPE.BEHAVIORAL, this.callId, this.correlationId, this.localRoapMessage.sdp, (_a = this.remoteRoapMessage) === null || _a === void 0 ? void 0 : _a.sdp, undefined);
              }
          })
              .start();
          this.muted = false;
      }
      isMuted() {
          return this.muted;
      }
      isConnected() {
          return this.connected;
      }
      isHeld() {
          return this.held;
      }
      handleIncomingCallSetup(event) {
          log$1.info(`handleIncomingCallSetup: ${this.getCorrelationId()}  `, {
              file: CALL_FILE,
              method: this.handleIncomingCallSetup.name,
          });
          this.sendCallStateMachineEvt({ type: 'E_SEND_CALL_ALERTING' });
      }
      handleOutgoingCallSetup(event) {
          return __awaiter(this, void 0, void 0, function* () {
              log$1.info(`handleOutgoingCallSetup: ${this.getCorrelationId()}  `, {
                  file: CALL_FILE,
                  method: this.handleOutgoingCallSetup.name,
              });
              const message = event.data;
              try {
                  const response = yield this.post(message);
                  log$1.log(`handleOutgoingCallSetup: Response code: ${response.statusCode}`, {
                      file: CALL_FILE,
                      method: this.handleOutgoingCallSetup.name,
                  });
                  this.setCallId(response.body.callId);
              }
              catch (e) {
                  log$1.warn('Call setup failed with Mobius', {
                      file: CALL_FILE,
                      method: this.handleOutgoingCallSetup.name,
                  });
                  const errData = e;
                  handleCallErrors((error) => {
                      this.emit(EVENT_KEYS.CALL_ERROR, error);
                      this.submitCallErrorMetric(error);
                      this.sendCallStateMachineEvt({ type: 'E_UNKNOWN', data: errData });
                  }, ERROR_LAYER.CALL_CONTROL, (interval) => undefined, this.getCorrelationId(), errData, this.handleOutgoingCallSetup.name, CALL_FILE);
              }
          });
      }
      handleCallHold(event) {
          return __awaiter(this, void 0, void 0, function* () {
              log$1.info(`handleCallHold: ${this.getCorrelationId()}  `, {
                  file: CALL_FILE,
                  method: this.handleCallHold.name,
              });
              try {
                  const response = yield this.postSSRequest(undefined, SUPPLEMENTARY_SERVICES.HOLD);
                  log$1.log(`Response code: ${response.statusCode}`, {
                      file: CALL_FILE,
                      method: this.handleCallHold.name,
                  });
                  if (this.isHeld() === false) {
                      this.supplementaryServicesTimer = setTimeout(() => __awaiter(this, void 0, void 0, function* () {
                          const errorContext = { file: CALL_FILE, method: this.handleCallHold.name };
                          log$1.warn('Hold response timed out', {
                              file: CALL_FILE,
                              method: this.handleCallHold.name,
                          });
                          const callError = createCallError('An error occurred while placing the call on hold. Wait a moment and try again.', errorContext, ERROR_TYPE.TIMEOUT, this.getCorrelationId(), ERROR_LAYER.CALL_CONTROL);
                          this.emit(EVENT_KEYS.HOLD_ERROR, callError);
                          this.submitCallErrorMetric(callError);
                      }), SUPPLEMENTARY_SERVICES_TIMEOUT);
                  }
              }
              catch (e) {
                  log$1.warn('Call Hold failed with Mobius', {
                      file: CALL_FILE,
                      method: this.handleCallHold.name,
                  });
                  const errData = e;
                  handleCallErrors((error) => {
                      this.emit(EVENT_KEYS.HOLD_ERROR, error);
                      this.submitCallErrorMetric(error);
                      this.sendCallStateMachineEvt({ type: 'E_CALL_ESTABLISHED', data: errData });
                  }, ERROR_LAYER.CALL_CONTROL, (interval) => undefined, this.getCorrelationId(), errData, this.handleOutgoingCallSetup.name, CALL_FILE);
              }
          });
      }
      handleCallResume(event) {
          return __awaiter(this, void 0, void 0, function* () {
              log$1.info(`handleCallResume: ${this.getCorrelationId()}  `, {
                  file: CALL_FILE,
                  method: this.handleCallResume.name,
              });
              try {
                  const response = yield this.postSSRequest(undefined, SUPPLEMENTARY_SERVICES.RESUME);
                  log$1.log(`Response code: ${response.statusCode}`, {
                      file: CALL_FILE,
                      method: this.handleCallResume.name,
                  });
                  if (this.isHeld() === true) {
                      this.supplementaryServicesTimer = setTimeout(() => __awaiter(this, void 0, void 0, function* () {
                          const errorContext = { file: CALL_FILE, method: this.handleCallResume.name };
                          log$1.warn('Resume response timed out', {
                              file: CALL_FILE,
                              method: this.handleCallResume.name,
                          });
                          const callError = createCallError('An error occurred while resuming the call. Wait a moment and try again.', errorContext, ERROR_TYPE.TIMEOUT, this.getCorrelationId(), ERROR_LAYER.CALL_CONTROL);
                          this.emit(EVENT_KEYS.RESUME_ERROR, callError);
                          this.submitCallErrorMetric(callError);
                      }), SUPPLEMENTARY_SERVICES_TIMEOUT);
                  }
              }
              catch (e) {
                  log$1.warn('Call Resume failed with Mobius', {
                      file: CALL_FILE,
                      method: this.handleCallResume.name,
                  });
                  const errData = e;
                  handleCallErrors((error) => {
                      this.emit(EVENT_KEYS.RESUME_ERROR, error);
                      this.submitCallErrorMetric(error);
                      this.sendCallStateMachineEvt({ type: 'E_CALL_ESTABLISHED', data: errData });
                  }, ERROR_LAYER.CALL_CONTROL, (interval) => undefined, this.getCorrelationId(), errData, this.handleOutgoingCallSetup.name, CALL_FILE);
              }
          });
      }
      handleIncomingCallProgress(event) {
          var _a;
          log$1.info(`handleIncomingCallProgress: ${this.getCorrelationId()}  `, {
              file: CALL_FILE,
              method: this.handleIncomingCallProgress.name,
          });
          const data = event.data;
          if ((_a = data === null || data === void 0 ? void 0 : data.callProgressData) === null || _a === void 0 ? void 0 : _a.inbandMedia) {
              log$1.log('Inband media present. Setting Early Media flag', {
                  file: CALL_FILE,
                  method: this.handleIncomingCallProgress.name,
              });
              this.earlyMedia = true;
          }
          else {
              log$1.log('Inband media not present.', {
                  file: CALL_FILE,
                  method: this.handleIncomingCallProgress.name,
              });
          }
          if (data === null || data === void 0 ? void 0 : data.callerId) {
              log$1.info('Processing Caller-Id data', {
                  file: CALL_FILE,
                  method: this.handleIncomingCallProgress.name,
              });
              this.startCallerIdResolution(data.callerId);
          }
          this.emit(EVENT_KEYS.PROGRESS, this.correlationId);
      }
      handleIncomingRoapOfferRequest(context, event) {
          log$1.info(`handleIncomingRoapOfferRequest: ${this.getCorrelationId()}  `, {
              file: CALL_FILE,
              method: this.handleIncomingRoapOfferRequest.name,
          });
          const message = event.data;
          if (!this.mediaConnection) {
              log$1.info('Media connection is not up, buffer the remote Offer Request for later handling', {
                  file: CALL_FILE,
                  method: this.handleIncomingRoapOfferRequest.name,
              });
              this.seq = message.seq;
              log$1.info(`Setting Sequence No: ${this.seq}`, {
                  file: CALL_FILE,
                  method: this.handleIncomingRoapOfferRequest.name,
              });
              this.remoteRoapMessage = message;
          }
          else if (this.waitingForOK) {
              log$1.info('Waiting for Roap OK, buffer the remote Offer Request for later handling', {
                  file: CALL_FILE,
                  method: this.handleIncomingRoapOfferRequest.name,
              });
              this.remoteRoapMessage = message;
          }
          else {
              message.seq = this.seq + 1;
              this.seq = message.seq;
              this.mediaConnection.roapMessageReceived(message);
          }
      }
      handleOutgoingCallAlerting(event) {
          return __awaiter(this, void 0, void 0, function* () {
              log$1.info(`handleOutgoingCallAlerting: ${this.getCorrelationId()}  `, {
                  file: CALL_FILE,
                  method: this.handleOutgoingCallAlerting.name,
              });
              try {
                  const res = yield this.patch(MobiusCallState.ALERTING);
                  log$1.log(`PATCH response: ${res.statusCode}`, {
                      file: CALL_FILE,
                      method: this.handleOutgoingCallAlerting.name,
                  });
              }
              catch (err) {
                  log$1.warn('Call Progress failed with Mobius', {
                      file: CALL_FILE,
                      method: this.handleOutgoingCallAlerting.name,
                  });
                  const errData = err;
                  handleCallErrors((error) => {
                      this.emit(EVENT_KEYS.CALL_ERROR, error);
                      this.submitCallErrorMetric(error);
                      this.sendCallStateMachineEvt({ type: 'E_UNKNOWN', data: errData });
                  }, ERROR_LAYER.CALL_CONTROL, (interval) => undefined, this.getCorrelationId(), errData, this.handleOutgoingCallAlerting.name, CALL_FILE);
              }
          });
      }
      handleIncomingCallConnect(event) {
          log$1.info(`handleIncomingCallConnect: ${this.getCorrelationId()}  `, {
              file: CALL_FILE,
              method: this.handleIncomingCallConnect.name,
          });
          this.emit(EVENT_KEYS.CONNECT, this.correlationId);
          if (this.earlyMedia) {
              this.sendCallStateMachineEvt({ type: 'E_CALL_ESTABLISHED' });
          }
      }
      handleOutgoingCallConnect(event) {
          return __awaiter(this, void 0, void 0, function* () {
              log$1.info(`handleOutgoingCallConnect: ${this.getCorrelationId()}  `, {
                  file: CALL_FILE,
                  method: this.handleOutgoingCallConnect.name,
              });
              if (!this.remoteRoapMessage) {
                  log$1.warn('Offer not yet received from remote end... Exiting', {
                      file: CALL_FILE,
                      method: this.handleOutgoingCallConnect.name,
                  });
                  return;
              }
              try {
                  const res = yield this.patch(MobiusCallState.CONNECTED);
                  log$1.log(`PATCH response: ${res.statusCode}`, {
                      file: CALL_FILE,
                      method: this.handleOutgoingCallConnect.name,
                  });
                  this.mediaConnection.roapMessageReceived(this.remoteRoapMessage);
              }
              catch (err) {
                  log$1.warn('Call Connect failed with Mobius', {
                      file: CALL_FILE,
                      method: this.handleOutgoingCallConnect.name,
                  });
                  const errData = err;
                  handleCallErrors((error) => {
                      this.emit(EVENT_KEYS.CALL_ERROR, error);
                      this.submitCallErrorMetric(error);
                      this.sendCallStateMachineEvt({ type: 'E_UNKNOWN', data: errData });
                  }, ERROR_LAYER.CALL_CONTROL, (interval) => undefined, this.getCorrelationId(), errData, this.handleOutgoingCallConnect.name, CALL_FILE);
              }
          });
      }
      handleIncomingCallDisconnect(event) {
          return __awaiter(this, void 0, void 0, function* () {
              log$1.info(`handleIncomingCallDisconnect: ${this.getCorrelationId()}  `, {
                  file: CALL_FILE,
                  method: this.handleIncomingCallDisconnect.name,
              });
              this.setDisconnectReason();
              try {
                  const response = yield this.delete();
                  log$1.log(`handleOutgoingCallDisconnect: Response code: ${response.statusCode}`, {
                      file: CALL_FILE,
                      method: this.handleIncomingCallDisconnect.name,
                  });
              }
              catch (e) {
                  log$1.warn('Delete Call failed with Mobius', {
                      file: CALL_FILE,
                      method: this.handleIncomingCallDisconnect.name,
                  });
              }
              this.deleteCb(this.correlationId);
              if (this.sessionTimer) {
                  clearInterval(this.sessionTimer);
              }
              if (this.mediaConnection) {
                  this.mediaConnection.close();
                  log$1.info('Closing media channel', { file: CALL_FILE, method: 'handleIncomingCallDisconnect' });
              }
              this.sendMediaStateMachineEvt({ type: 'E_ROAP_TEARDOWN' });
              this.sendCallStateMachineEvt({ type: 'E_CALL_CLEARED' });
              this.emit(EVENT_KEYS.DISCONNECT, this.correlationId);
          });
      }
      handleOutgoingCallDisconnect(event) {
          return __awaiter(this, void 0, void 0, function* () {
              this.setDisconnectReason();
              try {
                  const response = yield this.delete();
                  log$1.log(`handleOutgoingCallDisconnect: Response code: ${response.statusCode}`, {
                      file: CALL_FILE,
                      method: this.handleOutgoingCallDisconnect.name,
                  });
              }
              catch (e) {
                  log$1.warn('Delete Call failed with Mobius', {
                      file: CALL_FILE,
                      method: this.handleOutgoingCallDisconnect.name,
                  });
              }
              this.deleteCb(this.correlationId);
              if (this.sessionTimer) {
                  clearInterval(this.sessionTimer);
              }
              if (this.mediaConnection) {
                  this.mediaConnection.close();
                  log$1.info('Closing media channel', { file: CALL_FILE, method: 'handleOutgoingCallDisconnect' });
              }
              this.sendMediaStateMachineEvt({ type: 'E_ROAP_TEARDOWN' });
              this.sendCallStateMachineEvt({ type: 'E_CALL_CLEARED' });
          });
      }
      handleCallEstablished(event) {
          log$1.info(`handleCallEstablished: ${this.getCorrelationId()}  `, {
              file: CALL_FILE,
              method: this.handleCallEstablished.name,
          });
          this.emit(EVENT_KEYS.ESTABLISHED, this.correlationId);
          this.earlyMedia = false;
          this.connected = true;
          if (this.sessionTimer) {
              log$1.log('Resetting session timer', {
                  file: CALL_FILE,
                  method: 'handleCallEstablished',
              });
              clearInterval(this.sessionTimer);
          }
          this.sessionTimer = setInterval(() => __awaiter(this, void 0, void 0, function* () {
              try {
                  const res = yield this.postStatus();
                  log$1.info(`Session refresh successful`, {
                      file: CALL_FILE,
                      method: 'handleCallEstablished',
                  });
              }
              catch (err) {
                  const error = err;
                  if (this.sessionTimer) {
                      clearInterval(this.sessionTimer);
                  }
                  handleCallErrors((error) => {
                      this.emit(EVENT_KEYS.CALL_ERROR, error);
                      this.submitCallErrorMetric(error);
                  }, ERROR_LAYER.CALL_CONTROL, (interval) => {
                      setTimeout(() => {
                          this.postStatus();
                          this.sendCallStateMachineEvt({ type: 'E_CALL_ESTABLISHED' });
                      }, interval * 1000);
                  }, this.getCorrelationId(), error, this.handleCallEstablished.name, CALL_FILE);
              }
          }), DEFAULT_SESSION_TIMER);
      }
      handleUnknownState(event) {
          return __awaiter(this, void 0, void 0, function* () {
              log$1.info(`handleUnknownState: ${this.getCorrelationId()}  `, {
                  file: CALL_FILE,
                  method: this.handleUnknownState.name,
              });
              const eventData = event.data;
              if (!(eventData === null || eventData === void 0 ? void 0 : eventData.media)) {
                  log$1.warn('Call failed due to signalling issue', {
                      file: CALL_FILE,
                      method: this.handleUnknownState.name,
                  });
              }
              try {
                  this.setDisconnectReason();
                  const response = yield this.delete();
                  log$1.log(`handleOutgoingCallDisconnect: Response code: ${response.statusCode}`, {
                      file: CALL_FILE,
                      method: this.handleUnknownState.name,
                  });
              }
              catch (e) {
                  log$1.warn('Delete Call failed with Mobius', {
                      file: CALL_FILE,
                      method: this.handleUnknownState.name,
                  });
              }
              this.deleteCb(this.correlationId);
              if (this.sessionTimer) {
                  clearInterval(this.sessionTimer);
              }
              if (this.mediaConnection) {
                  this.mediaConnection.close();
                  log$1.info('Closing media channel', {
                      file: CALL_FILE,
                      method: this.handleUnknownState.name,
                  });
              }
              this.sendMediaStateMachineEvt({ type: 'E_ROAP_TEARDOWN' });
              this.sendCallStateMachineEvt({ type: 'E_CALL_CLEARED' });
          });
      }
      getEmitterCallback(errData) {
          return (error) => {
              switch (this.callStateMachine.state.value) {
                  case 'S_CALL_HOLD':
                      this.emit(EVENT_KEYS.HOLD_ERROR, error);
                      if (this.supplementaryServicesTimer) {
                          clearTimeout(this.supplementaryServicesTimer);
                          this.supplementaryServicesTimer = undefined;
                      }
                      this.submitCallErrorMetric(error);
                      this.sendCallStateMachineEvt({ type: 'E_CALL_ESTABLISHED', data: errData });
                      return;
                  case 'S_CALL_RESUME':
                      this.emit(EVENT_KEYS.RESUME_ERROR, error);
                      this.submitCallErrorMetric(error);
                      this.sendCallStateMachineEvt({ type: 'E_CALL_ESTABLISHED', data: errData });
                      return;
                  default:
                      this.emit(EVENT_KEYS.CALL_ERROR, error);
                      this.submitCallErrorMetric(error);
                      if (!this.connected) {
                          this.sendMediaStateMachineEvt({ type: 'E_ROAP_ERROR', data: errData });
                      }
              }
          };
      }
      handleRoapEstablished(context, event) {
          var _a, _b;
          return __awaiter(this, void 0, void 0, function* () {
              log$1.info(`handleRoapEstablished: ${this.getCorrelationId()}  `, {
                  file: CALL_FILE,
                  method: 'handleRoapEstablished',
              });
              this.waitingForOK = false;
              const { received, message } = event.data;
              if (!received) {
                  log$1.info('Sending Media Ok to the remote End', {
                      file: CALL_FILE,
                      method: 'handleRoapEstablished',
                  });
                  try {
                      message.seq = this.seq;
                      const res = yield this.postMedia(message);
                      log$1.log(`handleRoapEstablished: Response code: ${res.statusCode}`, {
                          file: CALL_FILE,
                          method: 'handleRoapEstablished',
                      });
                      if (!this.earlyMedia) {
                          this.sendCallStateMachineEvt({ type: 'E_CALL_ESTABLISHED' });
                      }
                  }
                  catch (err) {
                      log$1.warn('MediaOk failed with Mobius', {
                          file: CALL_FILE,
                          method: 'handleRoapEstablished',
                      });
                      const errData = err;
                      handleCallErrors(this.getEmitterCallback(errData), ERROR_LAYER.MEDIA, (interval) => {
                          if (this.connected) {
                              setTimeout(() => {
                                  this.sendMediaStateMachineEvt({ type: 'E_ROAP_OK', data: event.data });
                              }, interval * 1000);
                          }
                      }, this.getCorrelationId(), errData, this.handleRoapEstablished.name, CALL_FILE);
                  }
              }
              else {
                  log$1.info('Notifying internal-media-core about ROAP OK message', {
                      file: CALL_FILE,
                      method: 'handleRoapEstablished',
                  });
                  message.seq = this.seq;
                  if (this.mediaConnection) {
                      this.mediaConnection.roapMessageReceived(message);
                  }
                  if (!this.earlyMedia) {
                      this.sendCallStateMachineEvt({ type: 'E_CALL_ESTABLISHED' });
                  }
                  if (((_a = this.remoteRoapMessage) === null || _a === void 0 ? void 0 : _a.messageType) === 'OFFER_REQUEST' ||
                      (((_b = this.remoteRoapMessage) === null || _b === void 0 ? void 0 : _b.messageType) === 'OFFER' && this.remoteRoapMessage.seq > this.seq)) {
                      this.seq = this.remoteRoapMessage.seq;
                      this.mediaConnection.roapMessageReceived(this.remoteRoapMessage);
                  }
              }
          });
      }
      handleRoapError(context, event) {
          return __awaiter(this, void 0, void 0, function* () {
              log$1.info(`handleRoapError: ${this.getCorrelationId()}`, {
                  file: CALL_FILE,
                  method: this.handleRoapError.name,
              });
              const message = event.data;
              if (message) {
                  try {
                      const res = yield this.postMedia(message);
                      log$1.info(`Response code: ${res.statusCode}`, {
                          file: CALL_FILE,
                          method: this.handleRoapError.name,
                      });
                  }
                  catch (err) {
                      log$1.warn('Failed to communicate ROAP error with Mobius', {
                          file: CALL_FILE,
                          method: this.handleRoapError.name,
                      });
                      const errData = err;
                      handleCallErrors((error) => {
                          this.emit(EVENT_KEYS.CALL_ERROR, error);
                          this.submitCallErrorMetric(error);
                      }, ERROR_LAYER.MEDIA, (interval) => undefined, this.getCorrelationId(), errData, this.handleRoapError.name, CALL_FILE);
                  }
              }
              if (!this.connected) {
                  log$1.warn('Call failed due to media issue', {
                      file: CALL_FILE,
                      method: 'handleRoapError',
                  });
                  this.sendCallStateMachineEvt({ type: 'E_UNKNOWN', data: { media: true } });
              }
          });
      }
      handleOutgoingRoapOffer(context, event) {
          return __awaiter(this, void 0, void 0, function* () {
              log$1.info(`handleOutgoingRoapOffer: ${this.getCorrelationId()}`, {
                  file: CALL_FILE,
                  method: this.handleOutgoingRoapOffer.name,
              });
              const message = event.data;
              if (!(message === null || message === void 0 ? void 0 : message.sdp)) {
                  log$1.info('Initializing Offer...', {
                      file: CALL_FILE,
                      method: this.handleOutgoingRoapOffer.name,
                  });
                  this.mediaConnection.initiateOffer();
                  return;
              }
              try {
                  const res = yield this.postMedia(message);
                  log$1.log(`handleOutgoingRoapOffer: Response code: ${res.statusCode}`, {
                      file: CALL_FILE,
                      method: this.handleOutgoingRoapOffer.name,
                  });
              }
              catch (err) {
                  log$1.warn('MediaOk failed with Mobius', {
                      file: CALL_FILE,
                      method: this.handleOutgoingRoapOffer.name,
                  });
                  const errData = err;
                  handleCallErrors(this.getEmitterCallback(errData), ERROR_LAYER.MEDIA, (interval) => {
                      if (this.connected) {
                          setTimeout(() => {
                              this.sendMediaStateMachineEvt({ type: 'E_SEND_ROAP_OFFER', data: event.data });
                          }, interval * 1000);
                      }
                  }, this.getCorrelationId(), errData, this.handleOutgoingRoapOffer.name, CALL_FILE);
              }
          });
      }
      handleOutgoingRoapAnswer(context, event) {
          return __awaiter(this, void 0, void 0, function* () {
              log$1.info(`handleOutgoingRoapAnswer: ${this.getCorrelationId()}`, {
                  file: CALL_FILE,
                  method: this.handleOutgoingRoapAnswer.name,
              });
              const message = event.data;
              try {
                  message.seq = this.seq;
                  const res = yield this.postMedia(message);
                  log$1.log(`handleOutgoingRoapAnswer: Response code: ${res.statusCode}`, {
                      file: CALL_FILE,
                      method: this.handleOutgoingRoapAnswer.name,
                  });
                  this.waitingForOK = true;
              }
              catch (err) {
                  log$1.warn('MediaAnswer failed with Mobius', {
                      file: CALL_FILE,
                      method: this.handleOutgoingRoapAnswer.name,
                  });
                  const errData = err;
                  handleCallErrors(this.getEmitterCallback(errData), ERROR_LAYER.MEDIA, (interval) => {
                      if (this.connected) {
                          setTimeout(() => {
                              this.sendMediaStateMachineEvt({ type: 'E_SEND_ROAP_ANSWER', data: event.data });
                          }, interval * 1000);
                      }
                  }, this.getCorrelationId(), errData, this.handleOutgoingRoapAnswer.name, CALL_FILE);
              }
          });
      }
      handleIncomingRoapOffer(context, event) {
          log$1.info(`handleIncomingRoapOffer: ${this.getCorrelationId()}`, {
              file: CALL_FILE,
              method: this.handleIncomingRoapOffer.name,
          });
          const message = event.data;
          this.remoteRoapMessage = message;
          if (!this.mediaConnection) {
              log$1.info('Media connection is not up, buffer the remote offer for later handling', {
                  file: CALL_FILE,
                  method: this.handleIncomingRoapOffer.name,
              });
              this.seq = message.seq;
              log$1.info(`Setting Sequence No: ${this.seq}`, {
                  file: CALL_FILE,
                  method: this.handleIncomingRoapOffer.name,
              });
          }
          else if (this.waitingForOK) {
              log$1.info('Waiting for Roap OK, buffer the remote offer for later handling', {
                  file: CALL_FILE,
                  method: this.handleIncomingRoapOffer.name,
              });
              this.remoteRoapMessage = message;
          }
          else {
              log$1.info('Handling new offer...', {
                  file: CALL_FILE,
                  method: this.handleIncomingRoapOffer.name,
              });
              this.seq = message.seq;
              if (this.mediaConnection) {
                  this.mediaConnection.roapMessageReceived(message);
              }
          }
      }
      handleIncomingRoapAnswer(context, event) {
          log$1.info(`handleIncomingRoapAnswer: ${this.getCorrelationId()}`, {
              file: CALL_FILE,
              method: this.handleIncomingRoapAnswer.name,
          });
          const message = event.data;
          this.remoteRoapMessage = message;
          message.seq = this.seq;
          if (this.mediaConnection) {
              this.mediaConnection.roapMessageReceived(message);
          }
      }
      initMediaConnection(settings) {
          const mediaConnection = new RoapMediaConnection({
              skipInactiveTransceivers: true,
              iceServers: [],
              sdpMunging: {
                  convertPort9to0: true,
                  addContentSlides: false,
              },
          }, {
              send: {
                  audio: settings.localAudioTrack,
              },
              receive: {
                  audio: true,
                  video: false,
                  screenShareVideo: false,
              },
          }, settings.debugId || `WebexCallSDK-${this.correlationId}`);
          this.mediaConnection = mediaConnection;
      }
      sendCallStateMachineEvt(event) {
          this.callStateMachine.send(event);
      }
      sendMediaStateMachineEvt(event) {
          this.mediaStateMachine.send(event);
      }
      setDisconnectReason() {
          if (this.connected || this.direction === CallDirection.OUTBOUND) {
              this.disconnectReason.code = DisconnectCode.NORMAL;
              this.disconnectReason.cause = DisconnectCause.NORMAL;
          }
          else {
              this.disconnectReason.code = DisconnectCode.BUSY;
              this.disconnectReason.cause = DisconnectCause.BUSY;
          }
      }
      answer(settings) {
          return __awaiter(this, void 0, void 0, function* () {
              settings.localAudioTrack.enabled = true;
              if (!this.mediaConnection) {
                  this.initMediaConnection(settings);
                  this.mediaRoapEventsListener();
                  this.mediaTrackListener();
              }
              if (this.callStateMachine.state.value === 'S_SEND_CALL_PROGRESS') {
                  this.sendCallStateMachineEvt({ type: 'E_SEND_CALL_CONNECT' });
              }
              else {
                  log$1.warn(`Call cannot be answered because the state is : ${this.callStateMachine.state.value}`, { file: CALL_FILE, method: 'answer' });
              }
          });
      }
      dial(settings) {
          return __awaiter(this, void 0, void 0, function* () {
              settings.localAudioTrack.enabled = true;
              if (!this.mediaConnection) {
                  this.initMediaConnection(settings);
                  this.mediaRoapEventsListener();
                  this.mediaTrackListener();
              }
              if (this.mediaStateMachine.state.value === 'S_ROAP_IDLE') {
                  this.sendMediaStateMachineEvt({ type: 'E_SEND_ROAP_OFFER' });
              }
              else {
                  log$1.warn(`Call cannot be dialed because the state is already : ${this.mediaStateMachine.state.value}`, { file: CALL_FILE, method: 'dial' });
              }
          });
      }
      patch(state) {
          return __awaiter(this, void 0, void 0, function* () {
              log$1.info(`Send a PATCH for ${state} to mobius`, {
                  file: CALL_FILE,
                  method: this.patch.name,
              });
              return this.webex.request({
                  uri: `${this.mobiusUrl}${DEVICES_ENDPOINT_RESOURCE}/${this.deviceId}/${CALLS_ENDPOINT_RESOURCE}/${this.callId}`,
                  method: HTTP_METHODS.PATCH,
                  service: ALLOWED_SERVICES.MOBIUS,
                  headers: {
                      [CISCO_DEVICE_URL]: this.webex.internal.device.url,
                      [SPARK_USER_AGENT]: CALLING_USER_AGENT,
                  },
                  body: {
                      device: {
                          deviceId: this.deviceId,
                          correlationId: this.correlationId,
                      },
                      callId: this.callId,
                      callState: state,
                      inbandMedia: false,
                  },
              });
          });
      }
      postSSRequest(context, type) {
          return __awaiter(this, void 0, void 0, function* () {
              const request = {
                  uri: `${this.mobiusUrl}${SERVICES_ENDPOINT}`,
                  method: HTTP_METHODS.POST,
                  service: ALLOWED_SERVICES.MOBIUS,
                  headers: {
                      [CISCO_DEVICE_URL]: this.webex.internal.device.url,
                      [SPARK_USER_AGENT]: CALLING_USER_AGENT,
                  },
                  body: {
                      device: {
                          deviceId: this.deviceId,
                          correlationId: this.correlationId,
                      },
                      callId: this.callId,
                  },
              };
              switch (type) {
                  case SUPPLEMENTARY_SERVICES.HOLD: {
                      request.uri = `${request.uri}/${CALL_HOLD_SERVICE}/${HOLD_ENDPOINT}`;
                      break;
                  }
                  case SUPPLEMENTARY_SERVICES.RESUME: {
                      request.uri = `${request.uri}/${CALL_HOLD_SERVICE}/${RESUME_ENDPOINT}`;
                      break;
                  }
                  case SUPPLEMENTARY_SERVICES.TRANSFER: {
                      request.uri = `${request.uri}/${CALL_TRANSFER_SERVICE}/${TRANSFER_ENDPOINT}`;
                      const transferContext = context;
                      if (transferContext.destination) {
                          Object.assign(request.body, { blindTransferContext: transferContext });
                          Object.assign(request.body, { transferType: TransferType.BLIND });
                      }
                      else if (transferContext.transferToCallId) {
                          Object.assign(request.body, { consultTransferContext: transferContext });
                          Object.assign(request.body, { transferType: TransferType.CONSULT });
                      }
                      break;
                  }
                  default: {
                      log$1.warn(`Unknown type for PUT request: ${type}`, {
                          file: CALL_FILE,
                          method: this.postSSRequest.name,
                      });
                  }
              }
              return this.webex.request(request);
          });
      }
      postStatus() {
          return __awaiter(this, void 0, void 0, function* () {
              return this.webex.request({
                  uri: `${this.mobiusUrl}${DEVICES_ENDPOINT_RESOURCE}/${this.deviceId}/${CALLS_ENDPOINT_RESOURCE}/${this.callId}/${CALL_STATUS_RESOURCE}`,
                  method: HTTP_METHODS.POST,
                  service: ALLOWED_SERVICES.MOBIUS,
                  headers: {
                      [CISCO_DEVICE_URL]: this.webex.internal.device.url,
                      [SPARK_USER_AGENT]: CALLING_USER_AGENT,
                  },
                  body: {
                      device: {
                          deviceId: this.deviceId,
                          correlationId: this.correlationId,
                      },
                      callId: this.callId,
                  },
              });
          });
      }
      completeTransfer(transferType, transferCallId, transferTarget) {
          return __awaiter(this, void 0, void 0, function* () {
              if (transferType === TransferType.BLIND && transferTarget) {
                  log$1.info(`Initiating Blind transfer with : ${transferTarget}`, {
                      file: CALL_FILE,
                      method: this.completeTransfer.name,
                  });
                  const context = {
                      transferorCallId: this.getCallId(),
                      destination: transferTarget,
                  };
                  try {
                      yield this.postSSRequest(context, SUPPLEMENTARY_SERVICES.TRANSFER);
                      this.metricManager.submitCallMetric(METRIC_EVENT.CALL, TRANSFER_METRIC.BLIND_TRANSFER, METRIC_TYPE.BEHAVIORAL, this.getCallId(), this.getCorrelationId(), undefined);
                  }
                  catch (e) {
                      log$1.warn(`Blind Transfer failed for correlationId ${this.getCorrelationId()}`, {
                          file: CALL_FILE,
                          method: this.completeTransfer.name,
                      });
                      const errData = e;
                      handleCallErrors((error) => {
                          this.emit(EVENT_KEYS.TRANSFER_ERROR, error);
                          this.submitCallErrorMetric(error);
                      }, ERROR_LAYER.CALL_CONTROL, (interval) => undefined, this.getCorrelationId(), errData, this.completeTransfer.name, CALL_FILE);
                  }
              }
              else if (transferType === TransferType.CONSULT && transferCallId) {
                  log$1.info(`Initiating Consult transfer between : ${this.callId} and ${transferCallId}`, {
                      file: CALL_FILE,
                      method: this.completeTransfer.name,
                  });
                  const context = {
                      transferorCallId: this.getCallId(),
                      transferToCallId: transferCallId,
                  };
                  try {
                      yield this.postSSRequest(context, SUPPLEMENTARY_SERVICES.TRANSFER);
                      this.metricManager.submitCallMetric(METRIC_EVENT.CALL, TRANSFER_METRIC.CONSULT_TRANSFER, METRIC_TYPE.BEHAVIORAL, this.getCallId(), this.getCorrelationId(), undefined);
                  }
                  catch (e) {
                      log$1.warn(`Consult Transfer failed for correlationId ${this.getCorrelationId()}`, {
                          file: CALL_FILE,
                          method: this.completeTransfer.name,
                      });
                      const errData = e;
                      handleCallErrors((error) => {
                          this.emit(EVENT_KEYS.TRANSFER_ERROR, error);
                          this.submitCallErrorMetric(error);
                      }, ERROR_LAYER.CALL_CONTROL, (interval) => undefined, this.getCorrelationId(), errData, this.completeTransfer.name, CALL_FILE);
                  }
              }
              else {
                  log$1.warn(`Invalid information received, transfer failed for correlationId: ${this.getCorrelationId()}`, {
                      file: CALL_FILE,
                      method: this.completeTransfer.name,
                  });
              }
          });
      }
      getCallStats() {
          return __awaiter(this, void 0, void 0, function* () {
              let stats;
              try {
                  stats = yield this.mediaConnection.getStats();
              }
              catch (err) {
                  log$1.warn('Stats collection failed, using dummy stats', {
                      file: CALL_FILE,
                      method: this.getCallStats.name,
                  });
              }
              return parseMediaQualityStatistics(stats);
          });
      }
      postMedia(roapMessage) {
          return __awaiter(this, void 0, void 0, function* () {
              log$1.log('Posting message to mobius', {
                  file: CALL_FILE,
                  method: this.postMedia.name,
              });
              return this.webex.request({
                  uri: `${this.mobiusUrl}${DEVICES_ENDPOINT_RESOURCE}/${this.deviceId}/${CALLS_ENDPOINT_RESOURCE}/${this.callId}/${MEDIA_ENDPOINT_RESOURCE}`,
                  method: HTTP_METHODS.POST,
                  service: ALLOWED_SERVICES.MOBIUS,
                  headers: {
                      [CISCO_DEVICE_URL]: this.webex.internal.device.url,
                      [SPARK_USER_AGENT]: CALLING_USER_AGENT,
                  },
                  body: {
                      device: {
                          deviceId: this.deviceId,
                          correlationId: this.correlationId,
                      },
                      callId: this.callId,
                      localMedia: {
                          roap: roapMessage,
                          mediaId: v4(),
                      },
                  },
              });
          });
      }
      mediaRoapEventsListener() {
          this.mediaConnection.on(Event$1.ROAP_MESSAGE_TO_SEND, (event) => __awaiter(this, void 0, void 0, function* () {
              var _a, _b;
              log$1.info(`ROAP message to send (rcv from MEDIA-SDK) :
          \n type:  ${(_a = event.roapMessage) === null || _a === void 0 ? void 0 : _a.messageType}, seq: ${event.roapMessage.seq} , version: ${event.roapMessage.version}`, {});
              log$1.info(`SDP message to send : \n ${(_b = event.roapMessage) === null || _b === void 0 ? void 0 : _b.sdp}`, {
                  file: CALL_FILE,
                  method: this.mediaRoapEventsListener.name,
              });
              switch (event.roapMessage.messageType) {
                  case RoapScenario.OK: {
                      const mediaOk = {
                          received: false,
                          message: event.roapMessage,
                      };
                      this.sendMediaStateMachineEvt({ type: 'E_ROAP_OK', data: mediaOk });
                      break;
                  }
                  case RoapScenario.OFFER: {
                      const sdpVideoPortZero = event.roapMessage.sdp.replace(/^m=(video) (?:\d+) /gim, 'm=$1 0 ');
                      event.roapMessage.sdp = sdpVideoPortZero;
                      this.localRoapMessage = event.roapMessage;
                      this.sendCallStateMachineEvt({ type: 'E_SEND_CALL_SETUP', data: event.roapMessage });
                      break;
                  }
                  case RoapScenario.ANSWER:
                      this.localRoapMessage = event.roapMessage;
                      this.sendMediaStateMachineEvt({ type: 'E_SEND_ROAP_ANSWER', data: event.roapMessage });
                      break;
                  case RoapScenario.ERROR:
                      this.sendMediaStateMachineEvt({ type: 'E_ROAP_ERROR', data: event.roapMessage });
                      break;
                  case RoapScenario.OFFER_RESPONSE:
                      this.localRoapMessage = event.roapMessage;
                      this.sendMediaStateMachineEvt({ type: 'E_SEND_ROAP_OFFER', data: event.roapMessage });
                      break;
              }
          }));
      }
      mediaTrackListener() {
          this.mediaConnection.on(Event$1.REMOTE_TRACK_ADDED, (e) => {
              if (e.type === MEDIA_CONNECTION_EVENT_KEYS.MEDIA_TYPE_AUDIO) {
                  this.emit(EVENT_KEYS.REMOTE_MEDIA, e.track);
              }
          });
      }
      delete() {
          return __awaiter(this, void 0, void 0, function* () {
              const disconnectMetrics = yield this.getCallStats();
              return this.webex.request({
                  uri: `${this.mobiusUrl}${DEVICES_ENDPOINT_RESOURCE}/${this.deviceId}/${CALLS_ENDPOINT_RESOURCE}/${this.callId}`,
                  method: HTTP_METHODS.DELETE,
                  service: ALLOWED_SERVICES.MOBIUS,
                  headers: {
                      [CISCO_DEVICE_URL]: this.webex.internal.device.url,
                      [SPARK_USER_AGENT]: CALLING_USER_AGENT,
                  },
                  body: {
                      device: {
                          deviceId: this.deviceId,
                          correlationId: this.correlationId,
                      },
                      callId: this.callId,
                      metrics: disconnectMetrics,
                      causecode: this.disconnectReason.code,
                      cause: this.disconnectReason.cause,
                  },
              });
          });
      }
      submitCallErrorMetric(error) {
          var _a;
          if (error.getCallError().errorLayer === ERROR_LAYER.CALL_CONTROL) {
              this.metricManager.submitCallMetric(METRIC_EVENT.CALL_ERROR, this.callStateMachine.state.value.toString(), METRIC_TYPE.BEHAVIORAL, this.callId, this.correlationId, error);
          }
          else {
              this.metricManager.submitMediaMetric(METRIC_EVENT.MEDIA_ERROR, this.mediaStateMachine.state.value.toString(), METRIC_TYPE.BEHAVIORAL, this.callId, this.correlationId, this.localRoapMessage.sdp, (_a = this.remoteRoapMessage) === null || _a === void 0 ? void 0 : _a.sdp, error);
          }
      }
      handleMidCallEvent(event) {
          const { eventType, eventData } = event;
          switch (eventType) {
              case MidCallEventType.CALL_INFO: {
                  log$1.log(`Received Midcall CallInfo Event for correlationId : ${this.correlationId}`, {
                      file: CALL_FILE,
                      method: 'handleMidCallEvent',
                  });
                  const callerData = eventData;
                  this.startCallerIdResolution(callerData.callerId);
                  break;
              }
              case MidCallEventType.CALL_STATE: {
                  log$1.log(`Received Midcall call event for correlationId : ${this.correlationId}`, {
                      file: CALL_FILE,
                      method: 'handleMidCallEvent',
                  });
                  const data = eventData;
                  switch (data.callState) {
                      case MOBIUS_MIDCALL_STATE.HELD: {
                          log$1.log(`Call is successfully held : ${this.correlationId}`, {
                              file: CALL_FILE,
                              method: 'handleMidCallEvent',
                          });
                          this.emit(EVENT_KEYS.HELD, this.correlationId);
                          this.held = true;
                          if (this.supplementaryServicesTimer) {
                              clearTimeout(this.supplementaryServicesTimer);
                              this.supplementaryServicesTimer = undefined;
                          }
                          break;
                      }
                      case MOBIUS_MIDCALL_STATE.CONNECTED: {
                          log$1.log(`Call is successfully resumed : ${this.correlationId}`, {
                              file: CALL_FILE,
                              method: 'handleMidCallEvent',
                          });
                          this.emit(EVENT_KEYS.RESUMED, this.correlationId);
                          this.held = false;
                          if (this.supplementaryServicesTimer) {
                              clearTimeout(this.supplementaryServicesTimer);
                              this.supplementaryServicesTimer = undefined;
                          }
                          break;
                      }
                      default: {
                          log$1.warn(`Unknown Supplementary service state: ${data.callState} for correlationId : ${this.correlationId}`, {
                              file: CALL_FILE,
                              method: 'handleMidCallEvent',
                          });
                      }
                  }
                  break;
              }
              default: {
                  log$1.warn(`Unknown Midcall type: ${eventType} for correlationId : ${this.correlationId}`, {
                      file: CALL_FILE,
                      method: 'handleMidCallEvent',
                  });
              }
          }
      }
      startCallerIdResolution(callerInfo) {
          this.callerInfo = this.callerId.fetchCallerDetails(callerInfo);
      }
      sendDTMF(tone) {
          if (!this.connected) {
              log$1.warn(`Can't send DTMF as call is not yet connected`, {
                  file: CALL_FILE,
                  method: 'sendDTMF',
              });
              return;
          }
          log$1.info(`Sending DTMF : ${tone}`, {
              file: CALL_FILE,
              method: 'sendDTMF',
          });
          this.mediaConnection.insertDTMF(tone);
      }
      setBroadworksCorrelationInfo(broadworksCorrelationInfo) {
          this.broadworksCorrelationInfo = broadworksCorrelationInfo;
      }
      getBroadworksCorrelationInfo() {
          return this.broadworksCorrelationInfo;
      }
      getCallRtpStats() {
          return this.getCallStats();
      }
  }
  const createCall = (activeUrl, webex, dest, dir, deviceId, deleteCb, indicator) => new Call(activeUrl, webex, dest, dir, deviceId, deleteCb, indicator);

  let callManager;
  class CallManager extends Eventing {
      constructor(webex, indicator) {
          super();
          this.createCall = (destination, direction, deviceId) => {
              log$1.log('Creating call object', {});
              const newCall = createCall(this.activeMobiusUrl, this.webex, destination, direction, deviceId, (correlationId) => {
                  delete this.callCollection[correlationId];
                  const activeCalls = Object.keys(this.getActiveCalls()).length;
                  log$1.info(`DELETE:: Deleted corelationId: ${newCall.getCorrelationId()} from CallManager, Number of call records :- ${activeCalls}`, {});
                  if (activeCalls === 0) {
                      this.emit(EVENT_KEYS.ALL_CALLS_CLEARED);
                  }
              }, this.serviceIndicator);
              this.callCollection[newCall.getCorrelationId()] = newCall;
              log$1.log(`New call created with correlationId: ${newCall.getCorrelationId()}`, {});
              log$1.info(`ADD:: Added corelationId: ${newCall.getCorrelationId()} to CallManager , Number of call records now:- ${Object.keys(this.getActiveCalls()).length}`, {});
              return newCall;
          };
          this.endCall = (correlationId) => {
              const call = this.getCall(correlationId);
              if (call) {
                  call.end();
              }
          };
          this.getCall = (correlationId) => {
              return this.callCollection[correlationId];
          };
          this.getActiveCalls = () => {
              return this.callCollection;
          };
          this.sdkConnector = SDKConnector$1;
          this.serviceIndicator = indicator;
          if (!this.sdkConnector.getWebex()) {
              SDKConnector$1.setWebex(webex);
          }
          this.webex = this.sdkConnector.getWebex();
          this.callCollection = {};
          this.activeMobiusUrl = '';
          this.listenForWsEvents();
      }
      updateActiveMobius(url) {
          this.activeMobiusUrl = url;
      }
      listenForWsEvents() {
          this.sdkConnector.registerListener('event:mobius', (event) => __awaiter(this, void 0, void 0, function* () {
              this.dequeueWsEvents(event);
          }));
      }
      dequeueWsEvents(event) {
          var _a, _b, _c, _d, _e;
          const mobiusEvent = event;
          const { callId, correlationId } = mobiusEvent.data;
          switch (mobiusEvent.data.eventType) {
              case MobiusEventType.CALL_SETUP: {
                  log$1.log(`Received call Setup message for call: ${callId}`, {
                      file: CALL_MANAGER_FILE,
                      method: 'dequeueWsEvents',
                  });
                  if (mobiusEvent.data.midCallService) {
                      mobiusEvent.data.midCallService.forEach((event) => {
                          const call = this.getCall(correlationId);
                          if (call) {
                              call.handleMidCallEvent(event);
                          }
                          else {
                              log$1.log(`Dropping midcall event of type: ${event.eventType} as it doesn't match with any existing call`, {
                                  file: CALL_MANAGER_FILE,
                                  method: 'dequeueWsEvents',
                              });
                          }
                      });
                      return;
                  }
                  const newId = Object.keys(this.callCollection).find((id) => this.callCollection[id].getCallId() === callId);
                  let newCall;
                  if (!newId) {
                      newCall = this.createCall({}, CallDirection.INBOUND, mobiusEvent.data.deviceId);
                      log$1.log(`New incoming call created with correlationId from Call Setup message: ${newCall.getCorrelationId()}`, {
                          file: CALL_MANAGER_FILE,
                          method: 'dequeueWsEvents',
                      });
                      newCall.setCallId(callId);
                      if (mobiusEvent.data.broadworksCorrelationInfo) {
                          log$1.log(`Found broadworksCorrelationInfo: ${mobiusEvent.data.broadworksCorrelationInfo}`, {
                              file: CALL_MANAGER_FILE,
                              method: 'dequeueWsEvents',
                          });
                          newCall.setBroadworksCorrelationInfo(mobiusEvent.data.broadworksCorrelationInfo);
                      }
                  }
                  else {
                      log$1.info(`Found the call Object with a matching callId: ${callId} from our records with correlationId: ${newId}`, {
                          file: CALL_MANAGER_FILE,
                          method: 'dequeueWsEvents',
                      });
                      newCall = this.getCall(newId);
                  }
                  if (mobiusEvent.data.callerId) {
                      log$1.info('Processing Caller-Id data', {
                          file: CALL_MANAGER_FILE,
                          method: 'dequeueWsEvents',
                      });
                      newCall.startCallerIdResolution(mobiusEvent.data.callerId);
                  }
                  this.emit(EVENT_KEYS.INCOMING_CALL, newCall);
                  newCall.sendCallStateMachineEvt({ type: 'E_RECV_CALL_SETUP', data: mobiusEvent.data });
                  break;
              }
              case MobiusEventType.CALL_PROGRESS: {
                  log$1.log(`Received call progress mobiusEvent for call: ${correlationId}`, {
                      file: CALL_MANAGER_FILE,
                      method: 'dequeueWsEvents',
                  });
                  const call = this.getCall(correlationId);
                  call.sendCallStateMachineEvt({ type: 'E_RECV_CALL_PROGRESS', data: mobiusEvent.data });
                  break;
              }
              case MobiusEventType.CALL_MEDIA: {
                  log$1.log(`Received call media mobiusEvent for call: ${correlationId}`, {
                      file: CALL_MANAGER_FILE,
                      method: 'dequeueWsEvents',
                  });
                  let activeCall;
                  if (correlationId) {
                      activeCall = this.getCall(correlationId);
                  }
                  else {
                      const newId = Object.keys(this.callCollection).find((id) => this.callCollection[id].getCallId() === callId);
                      if (newId) {
                          log$1.info(`Found the call Object with a matching callId: ${callId} from our records with correlationId: ${newId}`, {
                              file: CALL_MANAGER_FILE,
                              method: 'dequeueWsEvents',
                          });
                          activeCall = this.getCall(newId);
                      }
                      else {
                          activeCall = this.createCall({}, CallDirection.INBOUND, mobiusEvent.data.deviceId);
                          log$1.log(`New incoming call created with correlationId from ROAP Message: ${activeCall.getCorrelationId()}`, {
                              file: CALL_MANAGER_FILE,
                              method: 'dequeueWsEvents',
                          });
                          activeCall.setCallId(callId);
                      }
                  }
                  if (activeCall) {
                      log$1.info(`SDP from mobius ${(_a = mobiusEvent.data.message) === null || _a === void 0 ? void 0 : _a.sdp}`, {
                          file: CALL_MANAGER_FILE,
                          method: 'dequeueWsEvents',
                      });
                      log$1.log(`ROAP message from mobius with type:  ${(_b = mobiusEvent.data.message) === null || _b === void 0 ? void 0 : _b.messageType}, seq: ${(_c = mobiusEvent.data.message) === null || _c === void 0 ? void 0 : _c.seq} , version: ${(_d = mobiusEvent.data.message) === null || _d === void 0 ? void 0 : _d.version}`, {
                          file: CALL_MANAGER_FILE,
                          method: 'dequeueWsEvents',
                      });
                      const mediaState = (_e = mobiusEvent.data.message) === null || _e === void 0 ? void 0 : _e.messageType;
                      switch (mediaState) {
                          case MediaState.OFFER: {
                              log$1.log('Received OFFER', {
                                  file: CALL_MANAGER_FILE,
                                  method: 'dequeueWsEvents',
                              });
                              activeCall.sendMediaStateMachineEvt({
                                  type: 'E_RECV_ROAP_OFFER',
                                  data: mobiusEvent.data.message,
                              });
                              break;
                          }
                          case MediaState.ANSWER: {
                              log$1.log('Received ANSWER', {
                                  file: CALL_MANAGER_FILE,
                                  method: 'dequeueWsEvents',
                              });
                              activeCall.sendMediaStateMachineEvt({
                                  type: 'E_RECV_ROAP_ANSWER',
                                  data: mobiusEvent.data.message,
                              });
                              break;
                          }
                          case MediaState.OFFER_REQUEST: {
                              log$1.log('Received OFFER_REQUEST', {
                                  file: CALL_MANAGER_FILE,
                                  method: 'dequeueWsEvents',
                              });
                              activeCall.sendMediaStateMachineEvt({
                                  type: 'E_RECV_ROAP_OFFER_REQUEST',
                                  data: mobiusEvent.data.message,
                              });
                              break;
                          }
                          case MediaState.OK: {
                              log$1.log('Received OK', {
                                  file: CALL_MANAGER_FILE,
                                  method: 'dequeueWsEvents',
                              });
                              const mediaOk = {
                                  received: true,
                                  message: mobiusEvent.data.message,
                              };
                              activeCall.sendMediaStateMachineEvt({
                                  type: 'E_ROAP_OK',
                                  data: mediaOk,
                              });
                              break;
                          }
                          case MediaState.ERROR: {
                              log$1.log('Received Error...', {
                                  file: CALL_MANAGER_FILE,
                                  method: 'dequeueWsEvents',
                              });
                              break;
                          }
                          default: {
                              log$1.log(`Unknown Media mobiusEvent: ${mediaState} `, {
                                  file: CALL_MANAGER_FILE,
                                  method: 'dequeueWsEvents',
                              });
                          }
                      }
                  }
                  else {
                      log$1.log(`CorrelationId: ${correlationId} doesn't exist , discarding..`, {
                          file: CALL_MANAGER_FILE,
                          method: 'dequeueWsEvents',
                      });
                  }
                  break;
              }
              case MobiusEventType.CALL_CONNECTED: {
                  log$1.log(`Received call connect for call: ${correlationId}`, {
                      file: CALL_MANAGER_FILE,
                      method: 'dequeueWsEvents',
                  });
                  const call = this.getCall(correlationId);
                  call.sendCallStateMachineEvt({ type: 'E_RECV_CALL_CONNECT', data: mobiusEvent.data });
                  break;
              }
              case MobiusEventType.CALL_DISCONNECTED: {
                  log$1.log(`Received call disconnect for call: ${correlationId}`, {
                      file: CALL_MANAGER_FILE,
                      method: 'dequeueWsEvents',
                  });
                  const call = this.getCall(correlationId);
                  if (call) {
                      call.sendCallStateMachineEvt({ type: 'E_RECV_CALL_DISCONNECT' });
                  }
                  break;
              }
              default: {
                  log$1.log(`Unknown Call Event mobiusEvent: ${mobiusEvent.data.eventType}`, {
                      file: CALL_MANAGER_FILE,
                      method: 'dequeueWsEvents',
                  });
              }
          }
      }
  }
  const getCallManager = (webex, indicator) => {
      if (!callManager) {
          callManager = new CallManager(webex, indicator);
      }
      return callManager;
  };

  class CallingClient extends Eventing {
      constructor(webex, config) {
          var _a, _b, _c, _d;
          super();
          this.deviceInfo = {};
          this.registerRetry = false;
          this.callsClearedHandler = () => __awaiter(this, void 0, void 0, function* () {
              if (!this.isDeviceRegistered()) {
                  yield this.mutex.runExclusive(() => __awaiter(this, void 0, void 0, function* () {
                      if (this.reconnectPending) {
                          log$1.log('All calls cleared, reconnecting', {
                              file: CALLING_CLIENT_FILE,
                              method: CALLS_CLEARED_HANDLER_UTIL,
                          });
                          yield this.reconnectOnFailure(CALLS_CLEARED_HANDLER_UTIL);
                      }
                  }));
              }
          });
          this.getRegistrationStatus = () => this.isRegistered;
          this.getDeviceId = () => { var _a; return (_a = this.deviceInfo.device) === null || _a === void 0 ? void 0 : _a.deviceId; };
          this.getCall = (correlationId) => {
              return this.callManager.getCall(correlationId);
          };
          this.makeCall = (dest) => {
              var _a;
              let call;
              if (dest) {
                  const match = dest.address.match(VALID_PHONE);
                  if (match && match[0].length === dest.address.length) {
                      const sanitizedNumber = dest.address.replace(/[^[*+]\d#]/gi, '').replace(/\s+/gi, '');
                      const formattedDest = {
                          type: dest.type,
                          address: `tel:${sanitizedNumber}`,
                      };
                      call = this.callManager.createCall(formattedDest, CallDirection.OUTBOUND, (_a = this.deviceInfo.device) === null || _a === void 0 ? void 0 : _a.deviceId);
                      log$1.log(`New call created, callId: ${call.getCallId()}`, {});
                  }
                  else {
                      log$1.warn('Invalid phone number detected', {});
                      const err = new CallingClientError('An invalid phone number was detected. Check the number and try again.', {}, ERROR_TYPE.CALL_ERROR, MobiusStatus.ACTIVE);
                      this.emit(EVENT_KEYS.ERROR, err);
                  }
                  return call;
              }
              return undefined;
          };
          this.sdkConnector = SDKConnector$1;
          if (!this.sdkConnector.getWebex()) {
              SDKConnector$1.setWebex(webex);
          }
          this.webex = this.sdkConnector.getWebex();
          this.sdkConfig = config;
          const serviceData = ((_b = (_a = this.sdkConfig) === null || _a === void 0 ? void 0 : _a.serviceData) === null || _b === void 0 ? void 0 : _b.indicator)
              ? this.sdkConfig.serviceData
              : { indicator: ServiceIndicator.CALLING, domain: '' };
          this.validateServiceData(serviceData);
          this.registration = createRegistration(this.webex, serviceData);
          this.callManager = getCallManager(this.webex, serviceData.indicator);
          this.metricManager = getMetricManager(this.webex, serviceData.indicator);
          this.mediaEngine = Media$1;
          this.primaryMobiusUris = [];
          this.backupMobiusUris = [];
          this.rehomingIntervalMin = DEFAULT_REHOMING_INTERVAL_MIN;
          this.rehomingIntervalMax = DEFAULT_REHOMING_INTERVAL_MAX;
          this.failback429RetryAttempts = 0;
          this.clientError = createClientError('', {}, ERROR_TYPE.DEFAULT, MobiusStatus.DEFAULT);
          this.isRegistered = MobiusStatus.DEFAULT;
          this.reconnectPending = false;
          this.registerSessionsListener();
          const logLevel = ((_d = (_c = this.sdkConfig) === null || _c === void 0 ? void 0 : _c.logger) === null || _d === void 0 ? void 0 : _d.level) ? this.sdkConfig.logger.level : LOGGER.ERROR;
          this.mutex = new Mutex();
          log$1.setLogger(logLevel);
          this.detectNetworkChange();
          this.incomingCallListener();
          this.registerCallsClearedListener();
      }
      getDeviceInfo() {
          return this.deviceInfo;
      }
      setDeviceInfo(value) {
          this.deviceInfo = value;
      }
      isRegRetry() {
          return this.registerRetry;
      }
      isDeviceRegistered() {
          return this.isRegistered === MobiusStatus.ACTIVE;
      }
      setRegRetry(value) {
          this.registerRetry = value;
      }
      setIsRegistered(value) {
          this.isRegistered = value;
      }
      getMobiusUrl() {
          return this.url;
      }
      validateServiceData(serviceData) {
          if (!this.isValidServiceIndicator(serviceData.indicator)) {
              throw new Error(`Invalid service indicator, Allowed values are: ${Object.values(ServiceIndicator)}`);
          }
          if (!this.isValidServiceDomain(serviceData)) {
              throw new Error('Invalid service domain.');
          }
      }
      isValidServiceIndicator(indicator) {
          return Object.values(ServiceIndicator).some((v) => v === indicator);
      }
      isValidServiceDomain(serviceData) {
          const regexp = /^[a-z0-9]+([-.]{1}[a-z0-9]+)*\.[a-z]{2,6}$/i;
          const { domain } = serviceData;
          if (!domain) {
              return serviceData.indicator === ServiceIndicator.CALLING;
          }
          return regexp.test(domain);
      }
      updateMobiusUris() {
          var _a, _b, _c, _d;
          const logContext = {
              file: CALLING_CLIENT_FILE,
              method: this.updateMobiusUris.name,
          };
          const urisArrayPrimary = [];
          const urisArrayBackup = [];
          if ((_b = (_a = this.mobiusServers) === null || _a === void 0 ? void 0 : _a.primary) === null || _b === void 0 ? void 0 : _b.uris) {
              log$1.info('Adding Primary uris', logContext);
              for (const uri of this.mobiusServers.primary.uris) {
                  urisArrayPrimary.push(`${uri}${URL_ENDPOINT}`);
              }
          }
          if ((_d = (_c = this.mobiusServers) === null || _c === void 0 ? void 0 : _c.backup) === null || _d === void 0 ? void 0 : _d.uris) {
              log$1.info('Adding Backup uris', logContext);
              for (const uri of this.mobiusServers.backup.uris) {
                  urisArrayBackup.push(`${uri}${URL_ENDPOINT}`);
              }
          }
          log$1.info('Adding Default uri', logContext);
          if (!urisArrayPrimary.length && !urisArrayBackup.length) {
              urisArrayPrimary.push(`${this.webex.internal.services._serviceUrls.mobius}${URL_ENDPOINT}`);
          }
          else {
              urisArrayBackup.push(`${this.webex.internal.services._serviceUrls.mobius}${URL_ENDPOINT}`);
          }
          this.primaryMobiusUris.length = 0;
          this.backupMobiusUris.length = 0;
          for (let i = 0; i < urisArrayPrimary.length; i += 1) {
              if (this.primaryMobiusUris.indexOf(urisArrayPrimary[i]) === -1) {
                  this.primaryMobiusUris.push(urisArrayPrimary[i]);
              }
          }
          for (let i = 0; i < urisArrayBackup.length; i += 1) {
              if (this.backupMobiusUris.indexOf(urisArrayBackup[i]) === -1) {
                  this.backupMobiusUris.push(urisArrayBackup[i]);
              }
          }
      }
      incomingCallListener() {
          const logContext = {
              file: CALLING_CLIENT_FILE,
              method: this.incomingCallListener.name,
          };
          log$1.log('Listening for incoming calls... ', logContext);
          this.callManager.on(EVENT_KEYS.INCOMING_CALL, (callObj) => {
              this.emit(EVENT_KEYS.INCOMING_CALL, callObj);
          });
      }
      detectNetworkChange() {
          return __awaiter(this, void 0, void 0, function* () {
              let retry = false;
              setInterval(() => __awaiter(this, void 0, void 0, function* () {
                  if (!this.webex.internal.mercury.connected &&
                      !retry &&
                      Object.keys(this.callManager.getActiveCalls()).length === 0) {
                      log$1.warn(`Network has flapped, waiting for mercury connection to be up`, {
                          file: CALLING_CLIENT_FILE,
                          method: NETWORK_CHANGE_DETECTION_UTIL,
                      });
                      this.emit(EVENT_KEYS.UNREGISTERED);
                      this.clearKeepaliveTimer();
                      retry = true;
                  }
                  if (retry && this.webex.internal.mercury.connected) {
                      yield this.mutex.runExclusive(() => __awaiter(this, void 0, void 0, function* () {
                          if (retry) {
                              log$1.log('Mercury connection is up again, Re-registering with Mobius', {
                                  file: CALLING_CLIENT_FILE,
                                  method: NETWORK_CHANGE_DETECTION_UTIL,
                              });
                              this.clearKeepaliveTimer();
                              if (this.isRegistered === MobiusStatus.ACTIVE) {
                                  yield this.deregister();
                              }
                              if (this.url) {
                                  const abort = yield this.restorePreviousRegistration(NETWORK_CHANGE_DETECTION_UTIL);
                                  if (!abort && !this.isDeviceRegistered()) {
                                      yield this.restartRegistration(NETWORK_CHANGE_DETECTION_UTIL);
                                  }
                              }
                              retry = false;
                          }
                      }));
                  }
              }), NETWORK_FLAP_TIMEOUT);
          });
      }
      getClientRegionInfo() {
          return __awaiter(this, void 0, void 0, function* () {
              const regionInfo = {};
              try {
                  const temp = yield this.webex.request({
                      uri: `${this.webex.internal.services._serviceUrls.mobius}${URL_ENDPOINT}${IP_ENDPOINT}`,
                      method: HTTP_METHODS.GET,
                      headers: {
                          [CISCO_DEVICE_URL]: this.webex.internal.device.url,
                          [SPARK_USER_AGENT]: CALLING_USER_AGENT,
                      },
                      service: ALLOWED_SERVICES.MOBIUS,
                  });
                  const myIP = temp.body.ipv4;
                  const response = yield this.webex.request({
                      uri: `${DISCOVERY_URL}/${myIP}`,
                      method: HTTP_METHODS.GET,
                      addAuthHeader: false,
                      headers: {
                          [SPARK_USER_AGENT]: null,
                      },
                  });
                  const clientRegionInfo = response.body;
                  regionInfo.clientRegion = (clientRegionInfo === null || clientRegionInfo === void 0 ? void 0 : clientRegionInfo.clientRegion) ? clientRegionInfo.clientRegion : '';
                  regionInfo.countryCode = (clientRegionInfo === null || clientRegionInfo === void 0 ? void 0 : clientRegionInfo.countryCode) ? clientRegionInfo.countryCode : '';
              }
              catch (err) {
                  handleErrors(this, err, GET_MOBIUS_SERVERS_UTIL, CALLING_CLIENT_FILE);
                  regionInfo.clientRegion = '';
                  regionInfo.countryCode = '';
              }
              return regionInfo;
          });
      }
      getMobiusServers() {
          var _a, _b, _c, _d, _e, _f, _g, _h;
          return __awaiter(this, void 0, void 0, function* () {
              let useDefault = false;
              let clientRegion;
              let countryCode;
              if (((_b = (_a = this.sdkConfig) === null || _a === void 0 ? void 0 : _a.discovery) === null || _b === void 0 ? void 0 : _b.country) && ((_d = (_c = this.sdkConfig) === null || _c === void 0 ? void 0 : _c.discovery) === null || _d === void 0 ? void 0 : _d.region)) {
                  log$1.info('Updating region and country from the SDK config', {
                      file: CALLING_CLIENT_FILE,
                      method: GET_MOBIUS_SERVERS_UTIL,
                  });
                  clientRegion = (_f = (_e = this.sdkConfig) === null || _e === void 0 ? void 0 : _e.discovery) === null || _f === void 0 ? void 0 : _f.region;
                  countryCode = (_h = (_g = this.sdkConfig) === null || _g === void 0 ? void 0 : _g.discovery) === null || _h === void 0 ? void 0 : _h.country;
              }
              else {
                  log$1.info('Updating region and country through Region discovery', {
                      file: CALLING_CLIENT_FILE,
                      method: GET_MOBIUS_SERVERS_UTIL,
                  });
                  const regionInfo = yield this.getClientRegionInfo();
                  clientRegion = regionInfo.clientRegion;
                  countryCode = regionInfo.countryCode;
              }
              if (clientRegion && countryCode) {
                  log$1.log(`Found Region: ${clientRegion} and country: ${countryCode}, going to fetch Mobius server`, '');
                  try {
                      const temp = yield this.webex.request({
                          uri: `${this.webex.internal.services._serviceUrls.mobius}${URL_ENDPOINT}?regionCode=${clientRegion}&countryCode=${countryCode}`,
                          method: HTTP_METHODS.GET,
                          headers: {
                              [CISCO_DEVICE_URL]: this.webex.internal.device.url,
                              [SPARK_USER_AGENT]: CALLING_USER_AGENT,
                          },
                          service: ALLOWED_SERVICES.MOBIUS,
                      });
                      log$1.log('Mobius Server found for the region', '');
                      this.mobiusServers = temp.body;
                      this.updateMobiusUris();
                  }
                  catch (err) {
                      handleErrors(this, err, GET_MOBIUS_SERVERS_UTIL, CALLING_CLIENT_FILE);
                      useDefault = true;
                  }
              }
              else {
                  useDefault = true;
              }
              if (useDefault) {
                  log$1.warn('Error in finding Mobius Servers. Will use the default URL.', '');
                  this.primaryMobiusUris.push(`${this.webex.internal.services._serviceUrls.mobius}${URL_ENDPOINT}`);
              }
          });
      }
      sendKeepAlive(_deviceInfo) {
          var _a, _b;
          return __awaiter(this, void 0, void 0, function* () {
              const deviceId = (_a = _deviceInfo.device) === null || _a === void 0 ? void 0 : _a.deviceId;
              const interval = _deviceInfo.keepaliveInterval;
              const url = (_b = _deviceInfo.device) === null || _b === void 0 ? void 0 : _b.uri;
              let keepAliveRetryCount = 0;
              const logContext = {
                  file: CALLING_CLIENT_FILE,
                  method: KEEPALIVE_UTIL,
              };
              this.clearKeepaliveTimer();
              log$1.info(`Fetched details :-> deviceId: ${deviceId}, interval :-> ${interval}, url: ${url}`, logContext);
              if (this.isDeviceRegistered()) {
                  this.keepaliveTimer = setInterval(() => __awaiter(this, void 0, void 0, function* () {
                      const targetUrl = this.url;
                      yield this.mutex.runExclusive(() => __awaiter(this, void 0, void 0, function* () {
                          if (this.isDeviceRegistered() && targetUrl === this.url && keepAliveRetryCount < 5) {
                              try {
                                  const res = yield this.registration.postKeepAlive(url);
                                  log$1.log(`Sent Keepalive, status: ${res.statusCode}`, logContext);
                                  if (keepAliveRetryCount > 0) {
                                      this.emit(EVENT_KEYS.RECONNECTED);
                                  }
                                  keepAliveRetryCount = 0;
                              }
                              catch (err) {
                                  keepAliveRetryCount += 1;
                                  const error = err;
                                  log$1.warn(`Keep-alive missed ${keepAliveRetryCount} times. Status -> ${error.statusCode} `, logContext);
                                  const abort = yield handleErrors(this, error, KEEPALIVE_UTIL, CALLING_CLIENT_FILE);
                                  if (abort || keepAliveRetryCount >= 5) {
                                      this.isRegistered = MobiusStatus.DEFAULT;
                                      this.clearKeepaliveTimer();
                                      this.clearFailbackTimer();
                                      this.emit(EVENT_KEYS.UNREGISTERED);
                                      if (!abort) {
                                          yield this.reconnectOnFailure(KEEPALIVE_UTIL);
                                      }
                                  }
                                  else {
                                      this.emit(EVENT_KEYS.RECONNECTING);
                                  }
                              }
                          }
                      }));
                  }), interval * 1000);
              }
              else {
                  log$1.warn('Device is not active, exiting.', logContext);
              }
          });
      }
      reconnectOnFailure(caller) {
          return __awaiter(this, void 0, void 0, function* () {
              this.reconnectPending = false;
              if (!this.isDeviceRegistered()) {
                  if (Object.keys(this.callManager.getActiveCalls()).length === 0) {
                      const abort = yield this.restorePreviousRegistration(caller);
                      if (!abort && !this.isDeviceRegistered()) {
                          yield this.restartRegistration(caller);
                      }
                  }
                  else {
                      this.reconnectPending = true;
                      log$1.log('Active call(s) present, deferred reconnect till call cleanup.', {
                          file: CALLING_CLIENT_FILE,
                          method: RECONNECT_UTIL,
                      });
                  }
              }
          });
      }
      clearKeepaliveTimer() {
          if (this.keepaliveTimer) {
              clearInterval(this.keepaliveTimer);
              this.keepaliveTimer = undefined;
          }
      }
      registerCallsClearedListener() {
          const logContext = {
              file: CALLING_CLIENT_FILE,
              method: this.registerCallsClearedListener.name,
          };
          log$1.log('Registering listener for all calls cleared event', logContext);
          this.callManager.on(EVENT_KEYS.ALL_CALLS_CLEARED, this.callsClearedHandler);
      }
      register(retry) {
          return __awaiter(this, void 0, void 0, function* () {
              yield this.mutex.runExclusive(() => __awaiter(this, void 0, void 0, function* () {
                  if (!retry) {
                      this.isRegistered = MobiusStatus.DEFAULT;
                      this.emit(EVENT_KEYS.CONNECTING);
                      yield this.getMobiusServers();
                  }
                  const abort = yield this.registerDevice(this.register.name);
                  if (!this.isDeviceRegistered() && !retry && !abort) {
                      yield this.startFailoverTimer();
                  }
              }));
          });
      }
      registerDevice(caller, servers = this.primaryMobiusUris) {
          return __awaiter(this, void 0, void 0, function* () {
              let abort = false;
              if (this.isDeviceRegistered()) {
                  log$1.log(`[${caller}] : Device already registered with : ${this.url}`, {
                      file: CALLING_CLIENT_FILE,
                      method: REGISTER_UTIL,
                  });
                  return abort;
              }
              for (const url of servers) {
                  try {
                      abort = false;
                      this.isRegistered = MobiusStatus.DEFAULT;
                      this.emit(EVENT_KEYS.CONNECTING);
                      log$1.log(`[${caller}] : Mobius url to contact: ${url}`, {
                          file: CALLING_CLIENT_FILE,
                          method: REGISTER_UTIL,
                      });
                      const resp = yield this.registration.createDevice(url);
                      this.deviceInfo = resp.body;
                      this.emit(EVENT_KEYS.REGISTERED, resp.body);
                      this.isRegistered = MobiusStatus.ACTIVE;
                      this.reconnectPending = false;
                      this.setMobiusUrl(url);
                      this.setIntervalValues(this.deviceInfo);
                      this.metricManager.setDeviceInfo(this.deviceInfo);
                      this.metricManager.submitRegistrationMetric(METRIC_EVENT.REGISTRATION, REG_ACTION.REGISTER, METRIC_TYPE.BEHAVIORAL, undefined);
                      this.sendKeepAlive(this.deviceInfo);
                      this.initiateFailback();
                      break;
                  }
                  catch (err) {
                      const body = err;
                      abort = yield handleErrors(this, body, REGISTER_UTIL, CALLING_CLIENT_FILE);
                      if (this.isRegistered === MobiusStatus.ACTIVE) {
                          log$1.info(`[${caller}] : Device is already restored, active mobius url: ${this.getMobiusUrl()}`, {
                              file: CALLING_CLIENT_FILE,
                              method: REGISTER_UTIL,
                          });
                          break;
                      }
                      if (abort) {
                          break;
                      }
                      else if (caller === FAILBACK_UTIL) {
                          const error = body.statusCode;
                          if (error === ERROR_CODE.TOO_MANY_REQUESTS &&
                              this.failback429RetryAttempts < REG_FAILBACK_429_MAX_RETRIES) {
                              yield this.scheduleFailback429Retry();
                              abort = true;
                              break;
                          }
                      }
                  }
              }
              return abort;
          });
      }
      scheduleFailback429Retry() {
          return __awaiter(this, void 0, void 0, function* () {
              this.clearFailbackTimer();
              this.failback429RetryAttempts += 1;
              log$1.log(`Received 429 while rehoming, 429 retry count : ${this.failback429RetryAttempts}`, {
                  file: CALLING_CLIENT_FILE,
                  method: FAILBACK_429_RETRY_UTIL,
              });
              const interval = this.getRegRetryInterval(this.failback429RetryAttempts);
              this.startFailbackTimer(interval);
              const abort = yield this.restorePreviousRegistration(FAILBACK_429_RETRY_UTIL);
              if (!abort && !this.isDeviceRegistered()) {
                  yield this.restartRegistration(FAILBACK_429_RETRY_UTIL);
              }
          });
      }
      getRegRetryInterval(attempt = 1) {
          return (BASE_REG_RETRY_TIMER_VAL_IN_SEC +
              Math.pow(BASE_REG_TIMER_MFACTOR, attempt) +
              Math.floor((Math.random() * (REG_RANDOM_T_FACTOR_UPPER_LIMIT - SEC_TO_MSEC_MFACTOR + 1) +
                  SEC_TO_MSEC_MFACTOR) /
                  SEC_TO_MSEC_MFACTOR));
      }
      startFailoverTimer(attempt = 1, timeElapsed = 0) {
          return __awaiter(this, void 0, void 0, function* () {
              let interval = this.getRegRetryInterval(attempt);
              if (timeElapsed + interval > REG_TRY_BACKUP_TIMER_VAL_IN_SEC) {
                  const excessVal = timeElapsed + interval - REG_TRY_BACKUP_TIMER_VAL_IN_SEC;
                  interval -= excessVal;
              }
              let abort;
              if (interval > BASE_REG_RETRY_TIMER_VAL_IN_SEC) {
                  const scheduledTime = Math.floor(Date.now() / 1000);
                  setTimeout(() => __awaiter(this, void 0, void 0, function* () {
                      yield this.mutex.runExclusive(() => __awaiter(this, void 0, void 0, function* () {
                          abort = yield this.registerDevice(FAILOVER_UTIL);
                          const currentTime = Math.floor(Date.now() / 1000);
                          if (!abort && !this.isDeviceRegistered()) {
                              yield this.startFailoverTimer(attempt + 1, timeElapsed + (currentTime - scheduledTime));
                          }
                      }));
                  }), interval * SEC_TO_MSEC_MFACTOR);
                  log$1.log(`Scheduled retry with primary in ${interval} seconds, number of attempts : ${attempt}`, {
                      file: CALLING_CLIENT_FILE,
                      method: FAILOVER_UTIL,
                  });
              }
              else if (this.backupMobiusUris.length) {
                  log$1.log('Failing over to backup servers.', {
                      file: CALLING_CLIENT_FILE,
                      method: FAILOVER_UTIL,
                  });
                  abort = yield this.registerDevice(FAILOVER_UTIL, this.backupMobiusUris);
                  if (!abort && !this.isDeviceRegistered()) {
                      interval = this.getRegRetryInterval();
                      setTimeout(() => __awaiter(this, void 0, void 0, function* () {
                          yield this.mutex.runExclusive(() => __awaiter(this, void 0, void 0, function* () {
                              abort = yield this.registerDevice(FAILOVER_UTIL, this.backupMobiusUris);
                              if (!abort && !this.isDeviceRegistered()) {
                                  emitFinalFailure(this, FAILOVER_UTIL, CALLING_CLIENT_FILE);
                              }
                          }));
                      }), interval * SEC_TO_MSEC_MFACTOR);
                      log$1.log(`Scheduled retry with backup servers in ${interval} seconds.`, {
                          file: CALLING_CLIENT_FILE,
                          method: FAILOVER_UTIL,
                      });
                  }
              }
              else {
                  emitFinalFailure(this, FAILOVER_UTIL, CALLING_CLIENT_FILE);
              }
          });
      }
      clearFailbackTimer() {
          if (this.failbackTimer) {
              clearTimeout(this.failbackTimer);
              this.failbackTimer = undefined;
          }
      }
      failbackRequired() {
          return this.isDeviceRegistered() && this.primaryMobiusUris.indexOf(this.url) === -1;
      }
      getFailbackInterval() {
          return Math.floor(Math.random() * (this.rehomingIntervalMax - this.rehomingIntervalMin + 1) +
              this.rehomingIntervalMin);
      }
      initiateFailback() {
          if (this.failbackRequired()) {
              if (!this.failbackTimer) {
                  this.failback429RetryAttempts = 0;
                  const intervalInMinutes = this.getFailbackInterval();
                  this.startFailbackTimer(intervalInMinutes * MINUTES_TO_SEC_MFACTOR);
              }
          }
          else {
              this.failback429RetryAttempts = 0;
              this.clearFailbackTimer();
          }
      }
      startFailbackTimer(intervalInSeconds) {
          this.failbackTimer = setTimeout(() => __awaiter(this, void 0, void 0, function* () { return this.executeFailback(); }), intervalInSeconds * SEC_TO_MSEC_MFACTOR);
          log$1.log(`Failback scheduled after ${intervalInSeconds} seconds.`, {
              file: CALLING_CLIENT_FILE,
              method: this.startFailbackTimer.name,
          });
      }
      executeFailback() {
          return __awaiter(this, void 0, void 0, function* () {
              yield this.mutex.runExclusive(() => __awaiter(this, void 0, void 0, function* () {
                  if (this.failbackRequired()) {
                      if (Object.keys(this.callManager.getActiveCalls()).length === 0) {
                          log$1.log(`Attempting failback to primary.`, {
                              file: CALLING_CLIENT_FILE,
                              method: FAILBACK_UTIL,
                          });
                          yield this.deregister();
                          const abort = yield this.registerDevice(FAILBACK_UTIL);
                          if (!abort && !this.isDeviceRegistered()) {
                              const abort = yield this.restorePreviousRegistration(FAILBACK_UTIL);
                              if (abort) {
                                  this.clearFailbackTimer();
                                  return;
                              }
                              if (!this.isDeviceRegistered()) {
                                  yield this.restartRegistration(FAILBACK_UTIL);
                              }
                              else {
                                  this.failbackTimer = undefined;
                                  this.initiateFailback();
                              }
                          }
                      }
                      else {
                          log$1.log('Active calls present, deferring failback to next cycle.', {
                              file: CALLING_CLIENT_FILE,
                              method: FAILBACK_UTIL,
                          });
                          this.failbackTimer = undefined;
                          this.initiateFailback();
                      }
                  }
              }));
          });
      }
      restartRegistration(caller) {
          return __awaiter(this, void 0, void 0, function* () {
              this.clearFailbackTimer();
              this.failback429RetryAttempts = 0;
              const abort = yield this.registerDevice(caller);
              if (!abort && !this.isDeviceRegistered()) {
                  yield this.startFailoverTimer();
              }
          });
      }
      restorePreviousRegistration(caller) {
          return __awaiter(this, void 0, void 0, function* () {
              let abort = false;
              if (this.url) {
                  abort = yield this.registerDevice(caller, [this.url]);
              }
              return abort;
          });
      }
      setIntervalValues(deviceInfo) {
          if (this.primaryMobiusUris.indexOf(this.url) !== -1) {
              this.rehomingIntervalMin = (deviceInfo === null || deviceInfo === void 0 ? void 0 : deviceInfo.rehomingIntervalMin)
                  ? deviceInfo.rehomingIntervalMin
                  : DEFAULT_REHOMING_INTERVAL_MIN;
              this.rehomingIntervalMax = (deviceInfo === null || deviceInfo === void 0 ? void 0 : deviceInfo.rehomingIntervalMax)
                  ? deviceInfo.rehomingIntervalMax
                  : DEFAULT_REHOMING_INTERVAL_MAX;
          }
      }
      getLoggingLevel() {
          return log$1.getLogLevel();
      }
      setMobiusUrl(uri) {
          this.url = uri;
          this.callManager.updateActiveMobius(this.url);
      }
      deregister() {
          var _a, _b;
          return __awaiter(this, void 0, void 0, function* () {
              try {
                  yield this.registration.deleteDevice(this.url, (_a = this.deviceInfo.device) === null || _a === void 0 ? void 0 : _a.deviceId, (_b = this.deviceInfo.device) === null || _b === void 0 ? void 0 : _b.clientDeviceUri);
              }
              catch (err) {
                  log$1.warn(`Delete failed with Mobius`, {});
              }
              this.clearKeepaliveTimer();
              this.isRegistered = MobiusStatus.DEFAULT;
              this.metricManager.submitRegistrationMetric(METRIC_EVENT.REGISTRATION, REG_ACTION.DEREGISTER, METRIC_TYPE.BEHAVIORAL, undefined);
          });
      }
      getSDKConnector() {
          return this.sdkConnector;
      }
      registerSessionsListener() {
          this.sdkConnector.registerListener(MOBIUS_EVENT_KEYS.CALL_SESSION_EVENT_INCLUSIVE, (event) => __awaiter(this, void 0, void 0, function* () {
              if (event && event.data.userSessions.userSessions) {
                  const sessionArr = event === null || event === void 0 ? void 0 : event.data.userSessions.userSessions;
                  if (sessionArr.length === 1) {
                      if (sessionArr[0].sessionType !== SessionType.WEBEX_CALLING) {
                          return;
                      }
                  }
                  for (let i = 0; i < sessionArr.length; i += 1) {
                      if (sessionArr[i].sessionType !== SessionType.WEBEX_CALLING) {
                          sessionArr.splice(i, 1);
                      }
                  }
                  this.emit(EVENT_KEYS.USER_SESSION_INFO, event);
              }
          }));
      }
      sendMetric(name, action, metric, error) {
          this.metricManager.submitRegistrationMetric(name, action, metric, error);
      }
  }
  const createClient = (webex, config) => new CallingClient(webex, config);

  const CALL_HISTORY_FILE = 'CallHistory';
  const FROM_DATE = '?from';
  const HISTORY = 'history';
  const LIMIT = 50;
  const NUMBER_OF_DAYS = 10;

  class CallHistory extends Eventing {
      constructor(webex, logger) {
          super();
          this.janusUrl = '';
          this.fromDate = '';
          this.loggerContext = {
              file: CALL_HISTORY_FILE,
              method: 'getCallHistoryData',
          };
          this.sdkConnector = SDKConnector$1;
          if (!this.sdkConnector.getWebex()) {
              SDKConnector$1.setWebex(webex);
          }
          this.webex = this.sdkConnector.getWebex();
          this.janusUrl = this.webex.internal.services._serviceUrls.janus;
          this.registerSessionsListener();
          log$1.setLogger(logger.level);
      }
      getCallHistoryData(days = NUMBER_OF_DAYS, limit = LIMIT, sort = SORT.DEFAULT, sortBy = SORT_BY.DEFAULT) {
          return __awaiter(this, void 0, void 0, function* () {
              const date = new Date();
              date.setDate(date.getDate() - days);
              this.fromDate = date.toISOString();
              const sortByParam = Object.values(SORT_BY).includes(sortBy) ? sortBy : SORT_BY.DEFAULT;
              const sortParam = Object.values(SORT).includes(sort) ? sort : SORT.DEFAULT;
              log$1.log(`Janus API URL ${this.janusUrl}`, this.loggerContext);
              log$1.info(`Call history from date : ${this.fromDate}`, this.loggerContext);
              log$1.info(`Call history sort type : ${sortParam}`, this.loggerContext);
              log$1.info(`Call history sortby type : ${sortByParam}`, this.loggerContext);
              const url = `${this.janusUrl}/${HISTORY}/${USER_SESSIONS}${FROM_DATE}=${this.fromDate}&limit=${limit}&includeNewSessionTypes=true&sort=${sortParam}`;
              try {
                  const janusResponse = yield this.webex.request({
                      uri: `${url}`,
                      method: HTTP_METHODS.GET,
                      service: ALLOWED_SERVICES.JANUS,
                  });
                  this.userSessions = janusResponse.body;
                  if (sortByParam === SORT_BY.START_TIME) {
                      if (sortParam === SORT.DESC) {
                          this.userSessions[USER_SESSIONS].sort((element, compareElement) => new Date(compareElement[sortByParam]).getTime() -
                              new Date(element[sortByParam]).getTime());
                      }
                      else if (sortParam === SORT.ASC) {
                          this.userSessions[USER_SESSIONS].sort((element, compareElement) => new Date(element[sortByParam]).getTime() -
                              new Date(compareElement[sortByParam]).getTime());
                      }
                  }
                  const responseDetails = {
                      statusCode: this.userSessions[STATUS_CODE],
                      data: {
                          userSessions: this.userSessions[USER_SESSIONS],
                      },
                      message: SUCCESS_MESSAGE,
                  };
                  return responseDetails;
              }
              catch (err) {
                  const errorInfo = err;
                  const errorStatus = serviceErrorCodeHandler(errorInfo, this.loggerContext);
                  return errorStatus;
              }
          });
      }
      getSDKConnector() {
          return this.sdkConnector;
      }
      registerSessionsListener() {
          this.sdkConnector.registerListener(MOBIUS_EVENT_KEYS.CALL_SESSION_EVENT_INCLUSIVE, (event) => __awaiter(this, void 0, void 0, function* () {
              if (event && event.data.userSessions.userSessions) {
                  this.emit(EVENT_KEYS.CALL_HISTORY_USER_SESSION_INFO, event);
              }
          }));
      }
  }
  const createCallHistoryClient = (webex, logger) => new CallHistory(webex, logger);

  class WxCallBackendConnector {
      constructor(webex, logger) {
          this.sdkConnector = SDKConnector$1;
          if (!this.sdkConnector.getWebex()) {
              SDKConnector$1.setWebex(webex);
          }
          this.context = Math.random().toString(RADIX_RAND).substring(PREFIX);
          this.webex = this.sdkConnector.getWebex();
          this.userId = this.webex.internal.device.userId;
          log$1.setLogger(logger.level);
      }
      init() {
          const loggerContext = {
              file: WEBEX_CALLING_VOICEMAIL_FILE,
              method: 'init',
          };
          log$1.info('Initializing Webex calling voicemail connector', loggerContext);
          const response = this.setXsiVoiceMessageURI();
          return response;
      }
      getSDKConnector() {
          return this.sdkConnector;
      }
      setXsiVoiceMessageURI() {
          return __awaiter(this, void 0, void 0, function* () {
              let responseDetails;
              const loggerContext = {
                  file: WEBEX_CALLING_VOICEMAIL_FILE,
                  method: 'setXsiVoiceMessageURI',
              };
              this.xsiEndpoint = yield getXsiActionEndpoint(this.webex, loggerContext, CALLING_BACKEND.WXC);
              log$1.info(`XsiEndpoint is ${this.xsiEndpoint}`, loggerContext);
              if (this.userId) {
                  this.xsiVoiceMessageURI = `${this.xsiEndpoint}/${BW_XSI_ENDPOINT_VERSION}/${USER}/${this.userId}/${VOICE_MESSAGING_MESSAGES}`;
                  responseDetails = {
                      statusCode: SUCCESS_STATUS_CODE,
                      data: {},
                      message: SUCCESS_MESSAGE,
                  };
              }
              return responseDetails;
          });
      }
      getVoicemailList(offset, offsetLimit, sort, refresh) {
          var _a, _b, _c, _d, _e, _f, _g;
          return __awaiter(this, void 0, void 0, function* () {
              const loggerContext = {
                  file: WEBEX_CALLING_VOICEMAIL_FILE,
                  method: 'getVoicemailList',
              };
              log$1.info(`Offset: ${offset} Offset limit: ${offsetLimit} Sort type:${sort}`, loggerContext);
              let messageinfo;
              if (refresh) {
                  const urlXsi = `${this.xsiVoiceMessageURI}${JSON_FORMAT}`;
                  const sortParam = Object.values(SORT).includes(sort) ? sort : SORT.DEFAULT;
                  try {
                      const response = yield this.webex.request({
                          uri: `${urlXsi}`,
                          method: HTTP_METHODS.GET,
                      });
                      const voicemailListResponse = response.body;
                      if (Object.keys((_a = voicemailListResponse === null || voicemailListResponse === void 0 ? void 0 : voicemailListResponse.VoiceMessagingMessages) === null || _a === void 0 ? void 0 : _a.messageInfoList).length === 0) {
                          messageinfo = [];
                      }
                      else if (!Array.isArray((_c = (_b = voicemailListResponse === null || voicemailListResponse === void 0 ? void 0 : voicemailListResponse.VoiceMessagingMessages) === null || _b === void 0 ? void 0 : _b.messageInfoList) === null || _c === void 0 ? void 0 : _c.messageInfo)) {
                          messageinfo = Array((_e = (_d = voicemailListResponse === null || voicemailListResponse === void 0 ? void 0 : voicemailListResponse.VoiceMessagingMessages) === null || _d === void 0 ? void 0 : _d.messageInfoList) === null || _e === void 0 ? void 0 : _e.messageInfo);
                      }
                      else {
                          messageinfo = (_g = (_f = voicemailListResponse === null || voicemailListResponse === void 0 ? void 0 : voicemailListResponse.VoiceMessagingMessages) === null || _f === void 0 ? void 0 : _f.messageInfoList) === null || _g === void 0 ? void 0 : _g.messageInfo;
                          messageinfo = getSortedVoicemailList(messageinfo, sortParam);
                      }
                      storeVoicemailList(this.context, messageinfo);
                  }
                  catch (err) {
                      const errorInfo = err;
                      const errorStatus = serviceErrorCodeHandler(errorInfo, loggerContext);
                      return errorStatus;
                  }
              }
              const { messages, moreVMAvailable } = fetchVoicemailList(this.context, offset, offsetLimit, loggerContext);
              const responseDetails = {
                  statusCode: moreVMAvailable ? SUCCESS_STATUS_CODE : NO_VOICEMAIL_STATUS_CODE,
                  data: {
                      voicemailList: messages,
                  },
                  message: moreVMAvailable ? SUCCESS_MESSAGE : NO_VOICEMAIL_MSG,
              };
              return responseDetails;
          });
      }
      getVoicemailContent(messageId) {
          var _a, _b;
          return __awaiter(this, void 0, void 0, function* () {
              const loggerContext = {
                  file: WEBEX_CALLING_VOICEMAIL_FILE,
                  method: 'getVoicemailContent',
              };
              try {
                  const voicemailContentUrl = `${this.xsiEndpoint}${messageId}`;
                  const response = yield this.webex.request({
                      uri: `${voicemailContentUrl}`,
                      method: HTTP_METHODS.GET,
                  });
                  const parser = new DOMParser();
                  const xmlDOM = parser.parseFromString(response[RAW_REQUEST].response, XML_TYPE);
                  const mediaDetails = xmlDOM.getElementsByTagName(MESSAGE_MEDIA_CONTENT)[0];
                  const mediaType = (_a = mediaDetails.childNodes[1]) === null || _a === void 0 ? void 0 : _a.textContent;
                  const mediaContent = (_b = mediaDetails.childNodes[2]) === null || _b === void 0 ? void 0 : _b.textContent;
                  log$1.info(`Media type is  ${mediaType}`, loggerContext);
                  const responseDetails = {
                      statusCode: response.statusCode,
                      data: {
                          voicemailContent: {
                              type: mediaType,
                              content: mediaContent,
                          },
                      },
                      message: SUCCESS_MESSAGE,
                  };
                  return responseDetails;
              }
              catch (err) {
                  const errorInfo = err;
                  const errorStatus = serviceErrorCodeHandler(errorInfo, loggerContext);
                  log$1.info(`Voice mail content error is ${errorStatus}`, loggerContext);
                  return errorStatus;
              }
          });
      }
      voicemailMarkAsRead(messageId) {
          return __awaiter(this, void 0, void 0, function* () {
              const loggerContext = {
                  file: WEBEX_CALLING_VOICEMAIL_FILE,
                  method: 'voicemailMarkAsRead',
              };
              try {
                  const voicemailContentUrl = `${this.xsiEndpoint}${messageId}/${MARK_AS_READ}`;
                  const response = yield this.webex.request({
                      uri: voicemailContentUrl,
                      method: HTTP_METHODS.PUT,
                  });
                  const responseDetails = {
                      statusCode: response.statusCode,
                      data: {},
                      message: SUCCESS_MESSAGE,
                  };
                  return responseDetails;
              }
              catch (err) {
                  const errorInfo = err;
                  const errorStatus = serviceErrorCodeHandler(errorInfo, loggerContext);
                  return errorStatus;
              }
          });
      }
      voicemailMarkAsUnread(messageId) {
          return __awaiter(this, void 0, void 0, function* () {
              const loggerContext = {
                  file: WEBEX_CALLING_VOICEMAIL_FILE,
                  method: 'voicemailMarkAsUnread',
              };
              try {
                  const voicemailContentUrl = `${this.xsiEndpoint}${messageId}/${MARK_AS_UNREAD}`;
                  const response = yield this.webex.request({
                      uri: voicemailContentUrl,
                      method: HTTP_METHODS.PUT,
                  });
                  const responseDetails = {
                      statusCode: response.statusCode,
                      data: {},
                      message: SUCCESS_MESSAGE,
                  };
                  return responseDetails;
              }
              catch (err) {
                  const errorInfo = err;
                  const errorStatus = serviceErrorCodeHandler(errorInfo, loggerContext);
                  return errorStatus;
              }
          });
      }
      deleteVoicemail(messageId) {
          return __awaiter(this, void 0, void 0, function* () {
              const loggerContext = {
                  file: WEBEX_CALLING_VOICEMAIL_FILE,
                  method: 'deleteVoicemail',
              };
              try {
                  const voicemailContentUrl = `${this.xsiEndpoint}${messageId}`;
                  const response = yield this.webex.request({
                      uri: voicemailContentUrl,
                      method: HTTP_METHODS.DELETE,
                  });
                  const responseDetails = {
                      statusCode: response.statusCode,
                      data: {},
                      message: SUCCESS_MESSAGE,
                  };
                  return responseDetails;
              }
              catch (err) {
                  const errorInfo = err;
                  const errorStatus = serviceErrorCodeHandler(errorInfo, loggerContext);
                  return errorStatus;
              }
          });
      }
      getVMTranscript(messageId) {
          return __awaiter(this, void 0, void 0, function* () {
              const loggerContext = {
                  file: WEBEX_CALLING_VOICEMAIL_FILE,
                  method: 'getVMTranscript',
              };
              try {
                  const voicemailContentUrl = `${this.xsiEndpoint}${messageId}/${TRANSCRIPT}`;
                  const response = yield this.webex.request({
                      uri: voicemailContentUrl,
                      method: HTTP_METHODS.GET,
                  });
                  const parser = new DOMParser();
                  const xmlDOM = parser.parseFromString(response[RAW_REQUEST].response, XML_TYPE);
                  const transcript = xmlDOM.getElementsByTagName(TRANSCRIPT_CONTENT)[0];
                  const responseDetails = {
                      statusCode: response.statusCode,
                      data: {
                          voicemailTranscript: transcript.textContent,
                      },
                      message: SUCCESS_MESSAGE,
                  };
                  return responseDetails;
              }
              catch (err) {
                  const errorInfo = err;
                  const errorStatus = serviceErrorCodeHandler(errorInfo, loggerContext);
                  return errorStatus;
              }
          });
      }
      resolveContact(callingPartyInfo) {
          return resolveContact(callingPartyInfo);
      }
  }

  class BroadworksBackendConnector {
      constructor(webex, logger) {
          this.sdkConnector = SDKConnector$1;
          if (!this.sdkConnector.getWebex()) {
              SDKConnector$1.setWebex(webex);
          }
          this.webex = this.sdkConnector.getWebex();
          this.context = Math.random().toString(RADIX_RAND).substring(PREFIX);
          log$1.setLogger(logger.level);
      }
      init() {
          const loggerContext = {
              file: BROADWORKS_VOICEMAIL_FILE,
              method: 'init',
          };
          log$1.info('Initializing Broadworks voicemail connector', loggerContext);
          const response = this.setXsiVoiceMessageURI();
          return response;
      }
      getSDKConnector() {
          return this.sdkConnector;
      }
      getUserId() {
          return __awaiter(this, void 0, void 0, function* () {
              const loggerContext = {
                  file: BROADWORKS_VOICEMAIL_FILE,
                  method: 'getUserId',
              };
              try {
                  yield this.getBwToken();
                  if (this.bwtoken && this.bwtoken.split('.').length > 1) {
                      const decodedString = Buffer.from(this.bwtoken.split('.')[1], BASE64).toString(BINARY);
                      this.userId = JSON.parse(decodedString).sub;
                      return this.userId;
                  }
                  const error = ERROR_CODE.UNAUTHORIZED;
                  throw new Error(`${error}`);
              }
              catch (err) {
                  const errorInfo = {
                      statusCode: err instanceof Error ? Number(err.message) : '',
                  };
                  return serviceErrorCodeHandler(errorInfo, loggerContext);
              }
          });
      }
      getBwToken() {
          return __awaiter(this, void 0, void 0, function* () {
              try {
                  const bwTokenResponse = yield this.webex.request({
                      uri: `${this.webex.internal.services._serviceUrls.broadworksIdpProxy}${BW_TOKEN_FETCH_ENDPOINT}`,
                      method: HTTP_METHODS.GET,
                  });
                  const response = bwTokenResponse.body;
                  this.bwtoken = response[TOKEN][BEARER];
              }
              catch (err) {
                  log$1.info(`Broadworks token exception ${err}`, {});
              }
          });
      }
      setXsiVoiceMessageURI() {
          return __awaiter(this, void 0, void 0, function* () {
              const loggerContext = {
                  file: BROADWORKS_VOICEMAIL_FILE,
                  method: 'setXsiVoiceMessageURI',
              };
              let userIdResponse = yield this.getUserId();
              this.xsiEndpoint = yield getXsiActionEndpoint(this.webex, loggerContext, CALLING_BACKEND.BWRKS);
              this.xsiAccessToken = `${BEARER} ${this.bwtoken}`;
              log$1.info(`XsiEndpoint is ${this.xsiEndpoint}`, loggerContext);
              if (userIdResponse && typeof userIdResponse !== OBJECT) {
                  this.xsiVoiceMessageURI = `${this.xsiEndpoint}/${BW_XSI_ENDPOINT_VERSION}/${USER}/${userIdResponse}/${VOICE_MESSAGING_MESSAGES}`;
                  userIdResponse = {
                      statusCode: SUCCESS_STATUS_CODE,
                      data: {},
                      message: SUCCESS_MESSAGE,
                  };
              }
              return userIdResponse;
          });
      }
      getVoicemailList(offset, offsetLimit, sort, refresh) {
          var _a, _b, _c, _d, _e, _f, _g;
          return __awaiter(this, void 0, void 0, function* () {
              const loggerContext = {
                  file: BROADWORKS_VOICEMAIL_FILE,
                  method: 'getVoicemailList',
              };
              log$1.info(`Offset: ${offset} Offset limit: ${offsetLimit} Sort type:${sort}`, loggerContext);
              const urlXsi = `${this.xsiVoiceMessageURI}${JSON_FORMAT}`;
              let messageinfo;
              const sortParam = Object.values(SORT).includes(sort) ? sort : SORT.DEFAULT;
              if (refresh) {
                  try {
                      const response = yield fetch(`${urlXsi}`, {
                          method: HTTP_METHODS.GET,
                          headers: {
                              Authorization: this.xsiAccessToken,
                          },
                      });
                      if (!response.ok) {
                          throw new Error(`${response.status}`);
                      }
                      const voicemailListResponse = (yield response.json());
                      if (Object.keys((_a = voicemailListResponse === null || voicemailListResponse === void 0 ? void 0 : voicemailListResponse.VoiceMessagingMessages) === null || _a === void 0 ? void 0 : _a.messageInfoList).length === 0) {
                          messageinfo = [];
                      }
                      else if (!Array.isArray((_c = (_b = voicemailListResponse === null || voicemailListResponse === void 0 ? void 0 : voicemailListResponse.VoiceMessagingMessages) === null || _b === void 0 ? void 0 : _b.messageInfoList) === null || _c === void 0 ? void 0 : _c.messageInfo)) {
                          messageinfo = Array((_e = (_d = voicemailListResponse === null || voicemailListResponse === void 0 ? void 0 : voicemailListResponse.VoiceMessagingMessages) === null || _d === void 0 ? void 0 : _d.messageInfoList) === null || _e === void 0 ? void 0 : _e.messageInfo);
                      }
                      else {
                          messageinfo = (_g = (_f = voicemailListResponse === null || voicemailListResponse === void 0 ? void 0 : voicemailListResponse.VoiceMessagingMessages) === null || _f === void 0 ? void 0 : _f.messageInfoList) === null || _g === void 0 ? void 0 : _g.messageInfo;
                          messageinfo = getSortedVoicemailList(messageinfo, sortParam);
                      }
                      storeVoicemailList(this.context, messageinfo);
                  }
                  catch (err) {
                      const errorInfo = {
                          statusCode: err instanceof Error ? Number(err.message) : '',
                      };
                      const errorStatus = serviceErrorCodeHandler(errorInfo, loggerContext);
                      return errorStatus;
                  }
              }
              const { messages, moreVMAvailable } = fetchVoicemailList(this.context, offset, offsetLimit, loggerContext);
              const responseDetails = {
                  statusCode: moreVMAvailable ? SUCCESS_STATUS_CODE : NO_VOICEMAIL_STATUS_CODE,
                  data: {
                      voicemailList: messages,
                  },
                  message: moreVMAvailable ? SUCCESS_MESSAGE : NO_VOICEMAIL_MSG,
              };
              return responseDetails;
          });
      }
      getVoicemailContent(messageId) {
          var _a, _b;
          return __awaiter(this, void 0, void 0, function* () {
              const loggerContext = {
                  file: BROADWORKS_VOICEMAIL_FILE,
                  method: 'getVoicemailContent',
              };
              try {
                  const voicemailContentUrl = `${this.xsiEndpoint}${messageId}`;
                  const response = yield fetch(`${voicemailContentUrl}`, {
                      method: 'GET',
                      headers: {
                          Authorization: this.xsiAccessToken,
                      },
                  });
                  if (!response.ok) {
                      throw new Error(`${response.status}`);
                  }
                  const xmlData = yield response.text();
                  const parser = new DOMParser();
                  const xmlDOM = parser.parseFromString(xmlData, XML_TYPE);
                  const mediaDetails = xmlDOM.getElementsByTagName(MESSAGE_MEDIA_CONTENT)[0];
                  const mediaType = (_a = mediaDetails.childNodes[1]) === null || _a === void 0 ? void 0 : _a.textContent;
                  const mediaContent = (_b = mediaDetails.childNodes[2]) === null || _b === void 0 ? void 0 : _b.textContent;
                  log$1.info(`Media type is  ${mediaType}`, loggerContext);
                  const responseDetails = {
                      statusCode: response === null || response === void 0 ? void 0 : response.status,
                      data: {
                          voicemailContent: {
                              type: mediaType,
                              content: mediaContent,
                          },
                      },
                      message: SUCCESS_MESSAGE,
                  };
                  return responseDetails;
              }
              catch (err) {
                  const errorInfo = {
                      statusCode: err instanceof Error ? Number(err.message) : '',
                  };
                  const errorStatus = serviceErrorCodeHandler(errorInfo, loggerContext);
                  return errorStatus;
              }
          });
      }
      voicemailMarkAsRead(messageId) {
          return __awaiter(this, void 0, void 0, function* () {
              const loggerContext = {
                  file: BROADWORKS_VOICEMAIL_FILE,
                  method: 'voicemailMarkAsRead',
              };
              try {
                  const voicemailContentUrl = `${this.xsiEndpoint}${messageId}/${MARK_AS_READ}`;
                  const response = yield fetch(voicemailContentUrl, {
                      method: HTTP_METHODS.PUT,
                      headers: {
                          Authorization: this.xsiAccessToken,
                      },
                  });
                  if (!response.ok) {
                      throw new Error(`${response.status}`);
                  }
                  const responseDetails = {
                      statusCode: response.status,
                      data: {},
                      message: SUCCESS_MESSAGE,
                  };
                  return responseDetails;
              }
              catch (err) {
                  const errorInfo = {
                      statusCode: err instanceof Error ? Number(err.message) : '',
                  };
                  const errorStatus = serviceErrorCodeHandler(errorInfo, loggerContext);
                  return errorStatus;
              }
          });
      }
      voicemailMarkAsUnread(messageId) {
          return __awaiter(this, void 0, void 0, function* () {
              const loggerContext = {
                  file: BROADWORKS_VOICEMAIL_FILE,
                  method: 'voicemailMarkAsUnread',
              };
              try {
                  const voicemailContentUrl = `${this.xsiEndpoint}${messageId}/${MARK_AS_UNREAD}`;
                  const response = yield fetch(voicemailContentUrl, {
                      method: HTTP_METHODS.PUT,
                      headers: {
                          Authorization: this.xsiAccessToken,
                      },
                  });
                  if (!response.ok) {
                      throw new Error(`${response.status}`);
                  }
                  const responseDetails = {
                      statusCode: response.status,
                      data: {},
                      message: SUCCESS_MESSAGE,
                  };
                  return responseDetails;
              }
              catch (err) {
                  const errorInfo = {
                      statusCode: err instanceof Error ? Number(err.message) : '',
                  };
                  const errorStatus = serviceErrorCodeHandler(errorInfo, loggerContext);
                  return errorStatus;
              }
          });
      }
      deleteVoicemail(messageId) {
          return __awaiter(this, void 0, void 0, function* () {
              const loggerContext = {
                  file: BROADWORKS_VOICEMAIL_FILE,
                  method: 'deleteVoicemail',
              };
              try {
                  const voicemailContentUrl = `${this.xsiEndpoint}${messageId}`;
                  const response = yield fetch(voicemailContentUrl, {
                      method: HTTP_METHODS.DELETE,
                      headers: {
                          Authorization: this.xsiAccessToken,
                      },
                  });
                  if (!response.ok) {
                      throw new Error(`${response.status}`);
                  }
                  const responseDetails = {
                      statusCode: response.status,
                      data: {},
                      message: SUCCESS_MESSAGE,
                  };
                  return responseDetails;
              }
              catch (err) {
                  const errorInfo = err;
                  const errorStatus = serviceErrorCodeHandler(errorInfo, loggerContext);
                  return errorStatus;
              }
          });
      }
      getVMTranscript(messageId) {
          return __awaiter(this, void 0, void 0, function* () {
              log$1.info(`Message Id: ${messageId}`, {});
              return Promise.resolve(null);
          });
      }
      resolveContact(callingPartyInfo) {
          log$1.info(`Calling Party Info: ${callingPartyInfo}`, {});
          return Promise.resolve(null);
      }
  }

  class UcmBackendConnector {
      constructor(webex, logger) {
          this.sdkConnector = SDKConnector$1;
          if (!this.sdkConnector.getWebex()) {
              SDKConnector$1.setWebex(webex);
          }
          this.webex = this.sdkConnector.getWebex();
          this.userId = this.webex.internal.device.userId;
          this.orgId = this.webex.internal.device.orgId;
          log$1.setLogger(logger.level);
      }
      init() {
          const loggerContext = {
              file: UCM_VOICEMAIL_FILE,
              method: 'init',
          };
          log$1.info('Initializing UCM calling voicemail connector', loggerContext);
          const response = this.setUcmVoiceMessageBaseURI();
          return response;
      }
      getSDKConnector() {
          return this.sdkConnector;
      }
      setUcmVoiceMessageBaseURI() {
          this.vgEndpoint = getVgActionEndpoint(this.webex, CALLING_BACKEND.UCM);
          this.vgVoiceMessageURI = `${this.vgEndpoint}/${VMGATEWAY}/${API_V1}/${USERS$1}/${this.userId}/`;
          return this.vgVoiceMessageURI;
      }
      getVoicemailList(offset, offsetLimit, sort) {
          return __awaiter(this, void 0, void 0, function* () {
              const loggerContext = {
                  file: UCM_VOICEMAIL_FILE,
                  method: 'getVoicemailList',
              };
              log$1.info(`Offset: ${offset} Offset limit: ${offsetLimit} Sort type:${sort}`, loggerContext);
              const urlVg = `${this.vgVoiceMessageURI}${VOICEMAILS}/${OFFSET}=${offset}${LIMIT$1}=${offsetLimit}${SORT_ORDER}=${sort}`;
              try {
                  const response = yield this.webex.request({
                      uri: `${urlVg}`,
                      method: HTTP_METHODS.GET,
                      headers: {
                          orgId: this.orgId,
                      },
                  });
                  const msgInfo = response.body;
                  const messageinfoArray = [];
                  const ucmVmMsgInfo = msgInfo.Message;
                  ucmVmMsgInfo.forEach((msgInfoObj) => {
                      const message = {};
                      let stringObj = {};
                      const numberObj = {};
                      stringObj.$ = msgInfoObj.Duration;
                      message.duration = stringObj;
                      numberObj.$ = Number(msgInfoObj.ArrivalTime);
                      message.time = numberObj;
                      stringObj = { $: '' };
                      stringObj.$ = msgInfoObj.MsgId;
                      message.messageId = stringObj;
                      if (msgInfoObj.Read === 'true') {
                          message.read = {};
                      }
                      const callerIdObj = msgInfoObj.CallerId;
                      const callingParty = {};
                      stringObj = { $: '' };
                      stringObj.$ = callerIdObj.CallerName;
                      callingParty.name = stringObj;
                      stringObj = { $: '' };
                      stringObj.$ = this.userId;
                      callingParty.userId = stringObj;
                      stringObj = { $: '' };
                      stringObj.$ = callerIdObj.CallerNumber;
                      callingParty.address = stringObj;
                      message.callingPartyInfo = callingParty;
                      messageinfoArray.push(message);
                  });
                  const responseDetails = {
                      statusCode: response.statusCode,
                      data: {
                          voicemailList: messageinfoArray,
                      },
                      message: SUCCESS_MESSAGE,
                  };
                  return responseDetails;
              }
              catch (err) {
                  const errorInfo = err;
                  const errorStatus = serviceErrorCodeHandler(errorInfo, loggerContext);
                  return errorStatus;
              }
          });
      }
      getVoicemailContent(messageId) {
          return __awaiter(this, void 0, void 0, function* () {
              const loggerContext = {
                  file: UCM_VOICEMAIL_FILE,
                  method: 'getVoicemailContent',
              };
              try {
                  const response = (yield this.getVoicemailContentUcm(messageId));
                  return response;
              }
              catch (err) {
                  const errorInfo = err;
                  const errorStatus = serviceErrorCodeHandler(errorInfo, loggerContext);
                  log$1.info(`Voice mail content error is ${errorStatus}`, loggerContext);
                  return errorStatus;
              }
          });
      }
      getVoicemailContentUcm(messageId) {
          return __awaiter(this, void 0, void 0, function* () {
              return new Promise((resolve, reject) => {
                  const voicemailContentUrl = `${this.vgVoiceMessageURI}${VOICEMAILS}/${messageId}/${CONTENT}`;
                  const mercuryApi = `${this.webex.internal.services._serviceUrls.mercuryApi}`;
                  this.returnUcmPromise(voicemailContentUrl, mercuryApi)
                      .then((response) => {
                      if (response.statusCode === 200) {
                          resolve(response);
                      }
                      else if (response.statusCode === 202) {
                          this.sdkConnector.registerListener('event:ucm.voicemail_download_complete', (event) => __awaiter(this, void 0, void 0, function* () {
                              var _a;
                              const responseEvent = event;
                              const voicemailContentUrl = `${this.vgVoiceMessageURI}${VOICEMAILS}/${(_a = responseEvent === null || responseEvent === void 0 ? void 0 : responseEvent.data) === null || _a === void 0 ? void 0 : _a.messageId}/${CONTENT}`;
                              const response = yield this.returnUcmPromise(voicemailContentUrl, mercuryApi);
                              if (response.statusCode === 200) {
                                  this.sdkConnector.unregisterListener('event:ucm.voicemail_download_complete');
                                  resolve(response);
                              }
                              else {
                                  this.sdkConnector.unregisterListener('event:ucm.voicemail_download_complete');
                                  reject(response);
                              }
                          }));
                      }
                      else {
                          reject(response);
                      }
                  })
                      .catch((err) => {
                      reject(err);
                  });
              });
          });
      }
      returnUcmPromise(voicemailContentUrl, mercuryApi) {
          return __awaiter(this, void 0, void 0, function* () {
              const response = yield this.webex.request({
                  uri: `${voicemailContentUrl}`,
                  method: HTTP_METHODS.GET,
                  headers: {
                      orgId: this.orgId,
                      deviceUrl: this.webex.internal.device.url,
                      mercuryHostname: mercuryApi,
                  },
              });
              const contentInfo = response === null || response === void 0 ? void 0 : response.body;
              const respHeaders = response.headers;
              const mediaType = respHeaders === null || respHeaders === void 0 ? void 0 : respHeaders.mediatype;
              const mediaContent = contentInfo;
              const responseDetails = {
                  statusCode: response.statusCode,
                  data: {
                      voicemailContent: {
                          type: mediaType,
                          content: mediaContent,
                      },
                  },
                  message: SUCCESS_MESSAGE,
              };
              return responseDetails;
          });
      }
      voicemailMarkAsRead(messageId) {
          return __awaiter(this, void 0, void 0, function* () {
              const loggerContext = {
                  file: UCM_VOICEMAIL_FILE,
                  method: 'voicemailMarkAsRead',
              };
              try {
                  const voicemailContentUrl = `${this.vgVoiceMessageURI}${VOICEMAILS}/${messageId}`;
                  const response = yield this.webex.request({
                      uri: voicemailContentUrl,
                      method: HTTP_METHODS.PUT,
                      headers: {
                          orgId: this.orgId,
                      },
                      body: {
                          read: 'true',
                      },
                  });
                  const responseDetails = {
                      statusCode: response.statusCode,
                      data: {},
                      message: SUCCESS_MESSAGE,
                  };
                  return responseDetails;
              }
              catch (err) {
                  const errorInfo = err;
                  const errorStatus = serviceErrorCodeHandler(errorInfo, loggerContext);
                  return errorStatus;
              }
          });
      }
      voicemailMarkAsUnread(messageId) {
          return __awaiter(this, void 0, void 0, function* () {
              const loggerContext = {
                  file: UCM_VOICEMAIL_FILE,
                  method: 'voicemailMarkAsUnread',
              };
              try {
                  const voicemailContentUrl = `${this.vgVoiceMessageURI}${VOICEMAILS}/${messageId}`;
                  const response = yield this.webex.request({
                      uri: voicemailContentUrl,
                      method: HTTP_METHODS.PUT,
                      headers: {
                          orgId: this.orgId,
                      },
                      body: {
                          read: 'false',
                      },
                  });
                  const responseDetails = {
                      statusCode: response.statusCode,
                      data: {},
                      message: SUCCESS_MESSAGE,
                  };
                  return responseDetails;
              }
              catch (err) {
                  const errorInfo = err;
                  const errorStatus = serviceErrorCodeHandler(errorInfo, loggerContext);
                  return errorStatus;
              }
          });
      }
      deleteVoicemail(messageId) {
          return __awaiter(this, void 0, void 0, function* () {
              const loggerContext = {
                  file: UCM_VOICEMAIL_FILE,
                  method: 'deleteVoicemail',
              };
              try {
                  const voicemailContentUrl = `${this.vgVoiceMessageURI}${VOICEMAILS}/${messageId}`;
                  const response = yield this.webex.request({
                      uri: voicemailContentUrl,
                      method: HTTP_METHODS.DELETE,
                      headers: {
                          orgId: this.orgId,
                      },
                  });
                  const responseDetails = {
                      statusCode: response.statusCode,
                      data: {},
                      message: SUCCESS_MESSAGE,
                  };
                  return responseDetails;
              }
              catch (err) {
                  const errorInfo = err;
                  const errorStatus = serviceErrorCodeHandler(errorInfo, loggerContext);
                  return errorStatus;
              }
          });
      }
      getVMTranscript(messageId) {
          return __awaiter(this, void 0, void 0, function* () {
              log$1.info(`Message Id: ${messageId}`, {});
              return Promise.resolve(null);
          });
      }
      resolveContact(callingPartyInfo) {
          log$1.info(`Calling Party Info: ${callingPartyInfo}`, {});
          return Promise.resolve(null);
      }
  }

  class Voicemail extends Eventing {
      constructor(webex, logger) {
          super();
          this.logger = logger;
          this.sdkConnector = SDKConnector$1;
          if (!this.sdkConnector.getWebex()) {
              SDKConnector$1.setWebex(webex);
          }
          this.webex = this.sdkConnector.getWebex();
          this.callingBackend = getCallingBackEnd(this.webex);
          this.initializeBackendConnector();
          log$1.setLogger(logger.level);
      }
      init() {
          const response = this.backendConnector.init();
          return response;
      }
      initializeBackendConnector() {
          switch (this.callingBackend) {
              case CALLING_BACKEND.WXC: {
                  this.backendConnector = new WxCallBackendConnector(this.webex, this.logger);
                  break;
              }
              case CALLING_BACKEND.BWRKS: {
                  this.backendConnector = new BroadworksBackendConnector(this.webex, this.logger);
                  break;
              }
              case CALLING_BACKEND.UCM: {
                  this.backendConnector = new UcmBackendConnector(this.webex, this.logger);
                  break;
              }
              default: {
                  throw new Error('Calling backend is not identified, exiting....');
              }
          }
      }
      getVoicemailList(offset, offsetLimit, sort, refresh) {
          return __awaiter(this, void 0, void 0, function* () {
              const response = yield this.backendConnector.getVoicemailList(offset, offsetLimit, sort, refresh);
              return response;
          });
      }
      getVoicemailContent(messageId) {
          return __awaiter(this, void 0, void 0, function* () {
              const response = yield this.backendConnector.getVoicemailContent(messageId);
              return response;
          });
      }
      voicemailMarkAsRead(messageId) {
          return __awaiter(this, void 0, void 0, function* () {
              const response = yield this.backendConnector.voicemailMarkAsRead(messageId);
              return response;
          });
      }
      voicemailMarkAsUnread(messageId) {
          return __awaiter(this, void 0, void 0, function* () {
              const response = yield this.backendConnector.voicemailMarkAsUnread(messageId);
              return response;
          });
      }
      deleteVoicemail(messageId) {
          return __awaiter(this, void 0, void 0, function* () {
              const response = yield this.backendConnector.deleteVoicemail(messageId);
              return response;
          });
      }
      getVMTranscript(messageId) {
          return __awaiter(this, void 0, void 0, function* () {
              const response = yield this.backendConnector.getVMTranscript(messageId);
              return response;
          });
      }
      resolveContact(callingPartyInfo) {
          return this.backendConnector.resolveContact(callingPartyInfo);
      }
      getSDKConnector() {
          return this.sdkConnector;
      }
  }
  const createVoicemailClient = (webex, logger) => new Voicemail(webex, logger);

  window.CreateClient = (webex, config) => createClient(webex, config);
  window.Media = Media$1;
  window.CreateCallHistoryClient = (webex, logger) => createCallHistoryClient(webex, logger);
  window.CreateVoicemailClient = (webex, logger) => createVoicemailClient(webex, logger);
  window.CreateContactsClient = (webex, logger) => createContactsClient(webex, logger);
  window.CreateCallSettingsClient = (webex, logger) => createCallSettingsClient(webex, logger);

  exports.createCallHistoryClient = createCallHistoryClient;
  exports.createCallSettingsClient = createCallSettingsClient;
  exports.createClient = createClient;
  exports.createContactsClient = createContactsClient;
  exports.createVoicemailClient = createVoicemailClient;

  Object.defineProperty(exports, '__esModule', { value: true });

  return exports;

})({});
