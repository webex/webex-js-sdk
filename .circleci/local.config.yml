version: 2

jobs:
  build:
    docker:
      - image: circleci/node:dubnium-browsers
    working_directory: ~/webex-js-sdk
    environment:
      - NODE_ENV: test
      - SAUCE_CONNECT_DOWNLOAD_ON_INSTALL: true
      - ATLAS_SERVICE_URL: https://atlas-intb.ciscospark.com/admin/api/v1
      - CONVERSATION_SERVICE: https://conversation-intb.ciscospark.com/conversation/api/v1
      - ENCRYPTION_SERVICE_URL: https://encryption-intb.ciscospark.com/encryption/api/v1
      - HYDRA_SERVICE_URL: https://apialpha.ciscospark.com/v1/
      - IDBROKER_BASE_URL: https://idbrokerbts.webex.com
      - IDENTITY_BASE_URL: https://identitybts.webex.com
      - U2C_SERVICE_URL: https://u2c-intb.ciscospark.com/u2c/api/v1
      - WDM_SERVICE_URL: https://wdm-intb.ciscospark.com/wdm/api/v1
      - WHISTLER_API_SERVICE_URL: https://whistler.onint.ciscospark.com/api/v1
    steps:
      - run:
          name: 'Install graphicsmagick and libgcrypt'
          command: |
            sudo apt-get update
            sudo apt-get install graphicsmagick libgcrypt-dev
      - checkout
      - run:
          name: 'Update NPM and Install dependencies'
          command: sudo npm install -g npm@6
      - run:
          name: 'Install dependencies'
          command: npm ci
      - run:
          name: 'Run linting'
          command: npm run lint
      - run:
          name: 'Build all packages'
          command: npm run build
      - run:
          # Run unit tests on modified packages
          name: 'Test modified packages'
          command: if [[ $(node tooling/modified-packages.js) ]]; then npm run test:ci:github; fi
      # This script parses all the XML files generated by mocha and karma to see if any tests failed/errored out
      # The reason this script exists is that all tests are "exec"'d and running in a single process instead of a parallel
      # So if a failure happens it will continue to the next test suite in the queue
      - run:
          name: 'Check if any unit tests failed'
          command: |
            FAILURES=$(find reports -iname 'webex*.xml' -print0 | xargs -0 sed -n 's/.*failures=\"\([^\"]*\).*/\1/p' | xargs)
            ERRORS=$(find reports -iname 'webex*.xml' -print0 | xargs -0 sed -n 's/.*errors=\"\([^\"]*\).*/\1/p' | xargs)

            echo Failures $FAILURES
            echo Errors $ERRORS

            if [[ "$FAILURES" -ne *0* ]] || [[ "$ERRORS" -ne *0* ]]; then
              echo 'Unit tests failed'
              exit 1
            fi
      - run:
          name: 'Test Samples'
          command: npm run samples:test
      # Run integration tests on modified packages with `--integration` flag
      # Tested against Chrome and Firefox on Mac and Windows
      - run:
          name: 'Test Integration - run all integration tests on Mac and Windows version of Chrome and Firefox'
          command: if [[ $(node tooling/modified-packages.js) ]]; then npm run test:ci:integration; fi
      # This script parses all the XML files generated by mocha and karma to see if any tests failed/errored out
      # The reason this script exists is that all tests are "exec"'d and running in a single process instead of a parallel
      # So if a failure happens it will continue to the next test suite in the queue
      - run:
          name: 'Check if any integration tests failed'
          command: |
            FAILURES=$(find reports -iname 'webex*.xml' -print0 | xargs -0 sed -n 's/.*failures=\"\([^\"]*\).*/\1/p' | xargs)
            ERRORS=$(find reports -iname 'webex*.xml' -print0 | xargs -0 sed -n 's/.*errors=\"\([^\"]*\).*/\1/p' | xargs)

            echo Failures $FAILURES
            echo Errors $ERRORS

            if [[ "$FAILURES" -ne *0* ]] || [[ "$ERRORS" -ne *0* ]]; then
              echo 'Unit tests failed'
              exit 1
            fi

workflows:
  version: 2
  workflow:
    jobs:
      - build
