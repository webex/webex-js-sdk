# Required Env Vars
# NPM_TOKEN

version: 2.1
# reusable environment for all jobs
executors:
  main-executor:
    working_directory: ~/webex-js-sdk
    docker:
      - image: circleci/node:carbon-browsers

# Orb to grab `jq` for us
orbs:
  jq: circleci/jq@1.9.0

# Reusable commands for jobs
commands:
  install_graphicsmagick_and_libgcrypt:
    description: 'Install graphicsmagick and libgcrypt'
    steps:
      - run: |
          sudo apt-get update
          sudo apt-get install -y graphicsmagick libgcrypt-dev
  checkout_and_fetch_tags:
    description: 'Checkout and fetch tags'
    steps:
      - checkout
      - run: git remote add upstream git@github.com:webex/webex-js-sdk.git
      - run: git fetch upstream --tags
  restore_node_modules:
    description: 'Restore the node_modules dependencies cache'
    steps:
      - restore_cache:
          keys:
            - node-module-cache-v1-{{ checksum "package-lock.json" }}
            - node-module-cache-v1-
  restore_built_packages:
    description: 'Restore built packages'
    steps:
      - attach_workspace:
          at: ~/webex-js-sdk
  skip_check:
    description: 'Check to see if testing needs to be skipped'
    steps:
      - run:
          name: Check if we need to skip
          command: if [[ -z $(node tooling/modified-packages.js) ]]; then circleci step halt; fi

jobs:
  npm_install:
    executor: main-executor
    environment:
      SAUCE_CONNECT_DOWNLOAD_ON_INSTALL: true
    steps:
      - install_graphicsmagick_and_libgcrypt
      - checkout_and_fetch_tags
      - run:
          name: 'Update NPM'
          command: sudo npm install -g npm@6
      - restore_node_modules
      - run:
          name: 'Install dependencies'
          command: npm i
      # Cache node_modules across different internal jobs in the workflow and across different circleci runs
      - save_cache:
          key: node-module-cache-v1-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
      - run:
          name: 'Save NPM install log'
          command: npm ls --json > /tmp/npm_install.log || true
      - store_artifacts:
          path: /tmp/npm_install.log
          destination: npm-install

  build:
    executor: main-executor
    environment:
      NODE_ENV: 'test'
    steps:
      - install_graphicsmagick_and_libgcrypt
      - checkout_and_fetch_tags
      - restore_node_modules
      - run:
          name: 'Build all packages'
          command: npm run build
      # Save the dist/ folder of the packages for other jobs in the workflow
      - persist_to_workspace:
          root: ~/webex-js-sdk
          paths:
            - packages/node_modules

  static_analysis:
    executor: main-executor
    steps:
      - checkout_and_fetch_tags
      - restore_node_modules
      - restore_built_packages
      - run:
          name: 'Run ESLint'
          command: npm run lint:ci
      - store_test_results:
          path: reports/style
      - store_artifacts:
          path: reports/style
          destination: style

  # Run unit tests for modified packages only with `--unit` flag
  # Tested against Chrome and Firefox on Mac and Windows
  unit_tests:
    executor: main-executor
    environment:
      COVERAGE: true
    steps:
      - checkout_and_fetch_tags
      - restore_node_modules
      - restore_built_packages
      - skip_check
      # Generate build number for a single identifier for SauceLabs
      - run:
          name: 'Generate Build Number'
          command: echo "export BUILD_NUMBER=CircleCI-${CIRCLE_PR_USERNAME}-${CIRCLE_PR_REPONAME}-${CIRCLE_PR_NUMBER}_${CIRCLE_WORKFLOW_ID}" >> $BASH_ENV
      # Run unit tests on modified packages
      - run:
          name: 'Test Modified Packages'
          command: npm run test:ci:github
      # This script parses all the XML files generated by mocha and karma to see if any tests failed/errored out
      # The reason this script exists is that all tests are "exec"'d and running in a single process instead of a parallel
      # So if a failure happens it will continue to the next test suite in the queue
      - run:
          name: 'Check if any unit tests failed'
          command: |
            FAILURES=$(find reports -iname 'webex*.xml' -print0 | xargs -0 sed -n 's/.*failures=\"\([^\"]*\).*/\1/p' | xargs)
            ERRORS=$(find reports -iname 'webex*.xml' -print0 | xargs -0 sed -n 's/.*errors=\"\([^\"]*\).*/\1/p' | xargs)

            echo Failures $FAILURES
            echo Errors $ERRORS

            if [[ $FAILURES =~ "^[0 ]*$" ]] && [[ $ERRORS =~ "^[0 ]*$" ]]; then
              echo 'Unit tests succeeded'
            else
              echo 'Unit tests failed'
              exit 1
            fi
      - store_test_results:
          path: reports/
      - store_artifacts:
          path: reports/junit
          destination: junit

  samples:
    executor: main-executor
    environment:
      NODE_ENV: 'test'
      COVERAGE: true
    steps:
      - checkout_and_fetch_tags
      - restore_node_modules
      - restore_built_packages
      # Generate build number for a single identifier for SauceLabs
      - run:
          name: 'Generate Build Number'
          command: echo "export BUILD_NUMBER=CircleCI-${CIRCLE_PR_USERNAME}-${CIRCLE_PR_REPONAME}-${CIRCLE_PR_NUMBER}_${CIRCLE_WORKFLOW_ID}" >> $BASH_ENV
      # Test Samples on SauceLabs
      - run:
          name: 'Test Samples'
          command: npm run samples:test
      - store_test_results:
          path: reports/
      - store_artifacts:
          path: reports/junit/wdio
          destination: wdio
      - store_artifacts:
          path: reports/cobertura.xml
          destination: cobertura.xml
      - store_artifacts:
          path: /home/circleci/.npm/_logs/
          destination: npm-logs

  # Run integration tests on modified packages with `--integration` flag
  # Tested against Chrome and Firefox on Mac and Windows
  integration_tests:
    executor: main-executor
    environment:
      COVERAGE: true
    steps:
      - install_graphicsmagick_and_libgcrypt
      - checkout_and_fetch_tags
      - restore_node_modules
      - restore_built_packages
      - skip_check
      # Install JQ for parsing the JSON response from GitHub api
      - jq/install
      # This script is to see if a PR is approved or not before running the integration tests
      # It curls the Pull Requests data from GitHub's api and uses JQ to check if the status of the PR is approved
      - run:
          name: 'Check if PR is approved'
          command: |
            PR_APPROVAL_STATUS=()
            PR_NUMBER=${CIRCLE_PULL_REQUEST##*/}

            # Grab all PR states and filter for only `CHANGES_REQUESTED` and `APPROVED` states
            while IFS='' read -r line; do PR_APPROVAL_STATUS+=("$line"); done < <(curl -s "https://api.github.com/repos/webex/webex-js-sdk/pulls/${PR_NUMBER}/reviews" | jq -r 'reverse | .[] | select(.state | IN("CHANGES_REQUESTED", "APPROVED")) | .state')

            # If the the latest state != `APPROVED`, the PR is not approved and bail
            if [ "${PR_APPROVAL_STATUS[0]}" != "APPROVED" ]; then
              exit 1;
            fi;
      # Generate build number for a single identifier for SauceLabs
      - run:
          name: 'Generate Build Number'
          command: echo "export BUILD_NUMBER=CircleCI-${CIRCLE_PR_USERNAME}-${CIRCLE_PR_REPONAME}-${CIRCLE_PR_NUMBER}_${CIRCLE_WORKFLOW_ID}" >> $BASH_ENV
      # Run integration tests on modified packages with `--integration` flag
      # Tested against Chrome and Firefox on Mac and Windows
      - run:
          name: 'Test Integration - Run integration tests on modified packages on Mac and Windows version of Chrome and Firefox'
          command: npm run test:ci:integration
      # This script parses all the XML files generated by mocha and karma to see if any tests failed/errored out
      # The reason this script exists is that all tests are "exec"'d and running in a single process instead of a parallel
      # So if a failure happens it will continue to the next test suite in the queue
      - run:
          name: 'Check if any integration tests failed'
          command: |
            FAILURES=$(find reports -iname 'webex*.xml' -print0 | xargs -0 sed -n 's/.*failures=\"\([^\"]*\).*/\1/p' | xargs)
            ERRORS=$(find reports -iname 'webex*.xml' -print0 | xargs -0 sed -n 's/.*errors=\"\([^\"]*\).*/\1/p' | xargs)

            echo Failures $FAILURES
            echo Errors $ERRORS

            if [[ $FAILURES =~ "^[0 ]*$" ]] && [[ $ERRORS =~ "^[0 ]*$" ]]; then
              echo 'Integration tests succeeded'
            else
              echo 'Integration tests failed'
              exit 1
            fi
      - store_test_results:
          path: reports/
      - store_artifacts:
          path: reports/junit
          destination: junit

  versioning_and_publish:
    executor: main-executor
    steps:
      - checkout_and_fetch_tags
      - restore_node_modules
      - add_ssh_keys:
          fingerprints:
            - "89:ed:56:33:f5:1b:7b:b6:a1:04:02:a0:f9:47:13:0a"
      - run:
          name: 'Grab Current Version Number'
          command: echo "export CURRENT_VERSION=$(npm run --silent get-current-version | xargs)" >> $BASH_ENV
      - run:
          name: 'Temporary change origin url to HTTPS for documentation generation'
          command: git remote set-url origin https://github.com/webex/webex-js-sdk.git
      - run:
          name: 'Build Docs'
          command: npm run build:docs
      - run:
          name: 'Change origin url back to ssh'
          command: git remote set-url origin git@github.com:webex/webex-js-sdk.git
      - run:
          name: 'Publish Docs'
          command: |
            # Check if there's anything to commit before committing
            if [ -n "$(git status --porcelain)" ]; then
              git add docs/
              git commit -m "docs(api): update docs [skip ci]"
              git push upstream HEAD:master
            fi
      - run:
          name: 'Check if we need to skip version bumping and publishing to npm [skip npm]'
          command: |
            # Grab the 2nd to last commit message from the log for [skip npm]
            # Last commit is the update docs
            MESSAGE=$(git log -n 1 --skip 1 --pretty=format:%s)

            if [[ "$MESSAGE" == *\["skip npm"\]* ]]; then
              circleci step halt
            fi
      - run: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
      - run:
          name: 'Generate Version Number'
          command: echo "export VERSION=$(npm run --silent get-next-version | xargs)" >> $BASH_ENV
      - run: echo ${VERSION}
      - run:
          name: 'Build Packages'
          command: npm run build
      - run:
          name: 'Build UMD script'
          command: npm run build:script -- --versionNumber=${VERSION}
      - run:
          name: 'Bump all package version'
          command: npm run tooling -- version set ${VERSION} --all
      - run:
          name: 'Commit bumped version'
          command: |
            git add packages/node_modules/*/package.json packages/node_modules/@ciscospark/*/README.md packages/node_modules/@webex/*/package.json packages/node_modules/webex/umd/*.js
            git commit -m "chore(release): v${VERSION} [skip ci]"
      - run:
          name: 'Push to upstream/master'
          command: git push upstream HEAD:master
      - run:
          name: 'Tag for release'
          command: git tag "v${VERSION}"
      - run:
          name: 'Push tagged release to upstream/master'
          command: git push upstream v${VERSION}:v${VERSION}
      - run:
          name: 'Generate Package Dependencies'
          command: npm run deps:generate
      - run:
          name: 'Publish to NPM'
          command: npm run tooling -- exec -- bash -c 'npm publish --access public || true'

workflows:
  github_checks:
    jobs:
      - npm_install:
          filters:
              branches:
                ignore:
                    - master
      - build:
          requires:
            - npm_install
      - static_analysis:
          requires:
            - npm_install
      - unit_tests:
          requires:
            - build
            - static_analysis
      - samples:
          requires:
            - build
            - static_analysis
      - integration_tests:
          requires:
            - unit_tests
            - samples
  build_for_release:
    jobs:
      - npm_install:
          filters:
              branches:
                only: master
      - versioning_and_publish:
          filters:
            branches:
              only: master
          requires:
              - npm_install
