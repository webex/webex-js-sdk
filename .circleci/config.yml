# Required Env Vars
# NPM_TOKEN

version: 2.1
# reusable environment for all jobs
executors:
  main-executor:
    working_directory: ~/webex-js-sdk
    docker:
      - image: cimg/node:16.16.0-browsers

# orbs
orbs:
  browser-tools: circleci/browser-tools@1.3.0

# Reusable commands for jobs
commands:
  install_graphicsmagick_and_libgcrypt:
    description: 'Install graphicsmagick and libgcrypt'
    steps:
      - run: |
          sudo apt-get update
          sudo apt-get install -y graphicsmagick libgcrypt-dev
  checkout_and_fetch_tags:
    description: 'Checkout and fetch tags'
    steps:
      - checkout
      - run: git remote add upstream git@github.com:webex/webex-js-sdk.git
      - run: git fetch upstream --tags
  restore_node_modules:
    description: 'Restore the node_modules dependencies cache'
    steps:
      - restore_cache:
          keys:
            - node-modules-cache-node-Gallium-npm-6-{{ .Environment.CACHE_VERSION }}-{{ checksum "yarn.lock" }}
            - node-modules-cache-node-Gallium-npm-6-{{ .Environment.CACHE_VERSION }}-
      # Cache workaround to cache patch changes
      # https://github.com/ds300/patch-package#docker-and-ci
      - run:
          name: 'Hash patch-package patches'
          command: cat patches/* | md5sum > patches.hash
  restore_built_packages:
    description: 'Restore built packages'
    steps:
      - attach_workspace:
          at: ~/webex-js-sdk
  skip_check:
    description: 'Check to see if testing needs to be skipped'
    steps:
      - run:
          name: Check if we need to skip
          command: if [[ -z $(node tooling/modified-packages.js) ]]; then circleci step halt; fi

jobs:
  yarn_install:
    executor: main-executor
    environment:
      SAUCE_CONNECT_DOWNLOAD_ON_INSTALL: true
    steps:
      - install_graphicsmagick_and_libgcrypt
      - checkout_and_fetch_tags
      - run:
          name: 'Install dependencies'
          command: yarn
      # Cache workaround to cache patch changes
      # https://github.com/ds300/patch-package#docker-and-ci
      - run:
          name: 'Hash patch-package patches'
          command: cat patches/* | md5sum > patches.hash
      # Cache node_modules across different internal jobs in the workflow and across different circleci runs
      - save_cache:
          key: node-modules-cache-node-Gallium-npm-6-{{ .Environment.CACHE_VERSION }}-{{ checksum "yarn.lock" }}
          paths:
            - node_modules
      - run:
          name: 'Save yarn install log'
          command: yarn info --json > /tmp/yarn_install.log || true
      - store_artifacts:
          path: /tmp/yarn_install.log
          destination: yarn-install

  build:
    executor: main-executor
    parameters:
      env:
        type: string
        default: 'test'
    environment:
      NODE_ENV: << parameters.env >>
    steps:
      - install_graphicsmagick_and_libgcrypt
      - checkout_and_fetch_tags
      - restore_node_modules
      - run:
          name: 'Build all packages'
          command: yarn run build
      # Save the dist/ folder of the packages for other jobs in the workflow
      - persist_to_workspace:
          root: ~/webex-js-sdk
          paths:
            - packages

  build_production:
    executor: main-executor
    environment:
      NODE_ENV: production
      ATLAS_SERVICE_URL: 'https://atlas-a.wbx2.com/admin/api/v1'
      CONVERSATION_SERVICE: 'https://conv-a.wbx2.com/conversation/api/v1'
      ENCRYPTION_SERVICE_URL: 'https://encryption-a.wbx2.com'
      HYDRA_SERVICE_URL: 'https://api.ciscospark.com/v1/'
      IDBROKER_BASE_URL: 'https://idbroker.webex.com'
      IDENTITY_BASE_URL: 'https://identity.webex.com'
      U2C_SERVICE_URL: 'https://u2c.wbx2.com/u2c/api/v1'
      WDM_SERVICE_URL: 'https://wdm-a.wbx2.com/wdm/api/v1'
      WHISTLER_API_SERVICE_URL: 'https://whistler-prod.allnint.ciscospark.com/api/v1'
      WEBEX_TEST_USERS_CI_GATEWAY_SERVICE_URL: 'https://cig-service-a.wbx2.com/cig-service/api/v1'
      WEBEX_CONVERSATION_DEFAULT_CLUSTER: 'urn:TEAM:us-east-2_a:identityLookup'
    steps:
      - install_graphicsmagick_and_libgcrypt
      - checkout_and_fetch_tags
      - restore_node_modules
      - run:
          name: 'Build all packages'
          command: yarn run build
      # Save the dist/ folder of the packages for other jobs in the workflow
      - persist_to_workspace:
          root: ~/webex-js-sdk
          paths:
            - packages

  static_analysis:
    executor: main-executor
    steps:
      - checkout_and_fetch_tags
      - restore_node_modules
      - restore_built_packages
      - run:
          name: 'Run ESLint'
          command: yarn run lint
      - store_test_results:
          path: reports/style
      - store_artifacts:
          path: reports/style
          destination: style

  # Sometimes the output of the modified packages script gets lost
  # in a long output of the tests. This is simply a helper for PRs.
  list_changed_packages:
    executor: main-executor
    steps:
      - checkout_and_fetch_tags
      - restore_node_modules
      - restore_built_packages
      - run:
          name: 'List Modified Packages'
          command: |
            PACKAGES=$(node tooling/modified-packages.js)

            echo "Modified Packages:"
            echo "${PACKAGES}"

  # Run unit tests for modified packages only with `--unit` flag
  # Tested against Chrome and Firefox on Mac and Windows
  unit_tests:
    executor: main-executor
    environment:
      COVERAGE: true
    steps:
      - checkout_and_fetch_tags
      - restore_node_modules
      - restore_built_packages
      - skip_check
      # Generate build number for a single identifier for SauceLabs
      - run:
          name: 'Generate Build Number'
          command: echo "export BUILD_NUMBER=CircleCI-${CIRCLE_PR_USERNAME}-${CIRCLE_PR_REPONAME}-${CIRCLE_PR_NUMBER}_${CIRCLE_WORKFLOW_ID}" >> $BASH_ENV
      # Run unit tests on modified packages
      - run:
          name: 'Test Modified Packages'
          command: |
            PACKAGES=$(node tooling/modified-packages.js)

            echo "Modified Packages:"
            echo "${PACKAGES}"

            for PACKAGE in ${PACKAGES}; do
              yarn run test:unit --silent --packages "${PACKAGE}" --unit
              echo "DONE TESTING ${PACKAGE}"
            done
      # This script parses all the XML files generated by mocha and karma to see if any tests failed/errored out
      # The reason this script exists is that all tests are "exec"'d and running in a single process instead of a parallel
      # So if a failure happens it will continue to the next test suite in the queue
      - run:
          name: 'Check if any unit tests failed'
          command: |
            mkdir -p reports/junit/mocha
            FAILURES=$(find reports/junit/mocha/ -iname '*.xml' -print0 | xargs -0 sed -n 's/.*failures=\"\([^\"]*\).*/\1/p' | xargs)

            echo Failures $FAILURES

            if [[ $FAILURES =~ ^([0 ])*$ ]]; then
              echo 'Unit tests succeeded'
            else
              echo 'Unit tests failed'
              exit 1
            fi
      - store_test_results:
          path: reports/junit
      - store_artifacts:
          path: reports/junit
          destination: junit
      - store_artifacts:
          path: sauce.log
          destination: sauce

  samples:
    working_directory: ~/webex-js-sdk
    docker:
      - image: circleci/node:gallium
    environment:
      NODE_ENV: 'test'
      COVERAGE: true
    steps:
      - checkout_and_fetch_tags
      - restore_node_modules
      - restore_built_packages
      # Generate build number for a single identifier for SauceLabs
      - run:
          name: 'Generate Build Number'
          command: echo "export BUILD_NUMBER=CircleCI-${CIRCLE_PR_USERNAME}-${CIRCLE_PR_REPONAME}-${CIRCLE_PR_NUMBER}_${CIRCLE_WORKFLOW_ID}" >> $BASH_ENV
      # Test Samples on SauceLabs
      - run:
          name: 'Test Samples'
          command: yarn run samples:test
      - store_test_results:
          path: reports/junit
      - store_artifacts:
          path: sauce.log
          destination: sauce
      - store_artifacts:
          path: reports/junit/wdio
          destination: wdio
      - store_artifacts:
          path: reports/cobertura.xml
          destination: cobertura.xml
      - store_artifacts:
          path: /home/circleci/.yarn/_logs/
          destination: yarn-logs

  # Run integration tests on modified packages with `--integration` flag
  # Tested against Chrome and Firefox on Mac and Windows
  integration_tests:
    executor: main-executor
    environment:
      COVERAGE: true
    steps:
      - checkout_and_fetch_tags
      - browser-tools/install-browser-tools
      - install_graphicsmagick_and_libgcrypt
      - restore_node_modules
      - restore_built_packages
      - skip_check
      # Generate build number for a single identifier for SauceLabs
      - run:
          name: 'Generate Build Number'
          command: echo "export BUILD_NUMBER=CircleCI-${CIRCLE_PR_USERNAME}-${CIRCLE_PR_REPONAME}-${CIRCLE_PR_NUMBER}_${CIRCLE_WORKFLOW_ID}" >> $BASH_ENV
      # Run integration tests on modified packages with `--integration` flag
      # Tested against Chrome and Firefox on Mac and Windows
      - run:
          name: 'Test Integration - Run integration tests on modified packages on Chrome and Firefox'
          command: |
            PACKAGES=$(node tooling/modified-packages.js)

            echo "Modified Packages:"
            echo "${PACKAGES}"

            for PACKAGE in ${PACKAGES}; do
              yarn run test:integration --silent --packages "${PACKAGE}" --integration
            done
      # This script parses all the XML files generated by mocha and karma to see if any tests failed/errored out
      # The reason this script exists is that all tests are "exec"'d and running in a single process instead of a parallel
      # So if a failure happens it will continue to the next test suite in the queue
      - run:
          name: 'Check if any integration tests failed'
          command: |
            mkdir -p reports/junit/karma
            FAILURES=$(find reports/junit/karma/ -iname '*.xml' -print0 | xargs -0 sed -n 's/.*failures=\"\([^\"]*\).*/\1/p' | xargs)

            echo Failures $FAILURES

            if [[ $FAILURES =~ ^([0 ])*$ ]]; then
              echo 'Integration tests succeeded'
            else
              echo 'Integration tests failed'
              exit 1
            fi
      - store_test_results:
          path: reports/junit
      - store_artifacts:
          path: reports/junit
          destination: junit
      - store_artifacts:
          path: sauce.log
          destination: sauce

  versioning_and_publish:
    executor: main-executor
    steps:
      - checkout_and_fetch_tags
      - restore_node_modules
      - add_ssh_keys:
          fingerprints:
            - '89:ed:56:33:f5:1b:7b:b6:a1:04:02:a0:f9:47:13:0a'
      - run:
          name: 'Temporary change origin url to HTTPS for documentation generation'
          command: git remote set-url origin https://github.com/webex/webex-js-sdk.git
      - run:
          name: 'Build Docs'
          command: yarn run build:docs
      - run:
          name: 'Change origin url back to ssh'
          command: git remote set-url origin git@github.com:webex/webex-js-sdk.git
      - run:
          name: 'Build Samples'
          command: yarn run samples:build
      - run:
          name: 'Publish Docs Folder'
          command: |
            # Check if there's anything to commit before committing
            if [ -n "$(git status --porcelain)" ]; then
              git add docs/
              git add -f docs/samples/webex.min.js*
              git commit -m "docs(api): update docs [skip ci]"
              git push upstream HEAD:master
            fi
      - run:
          name: 'Check if we need to skip version bumping and publishing to npm [skip npm]'
          command: |
            # Grab the 2nd to last commit message from the log for [skip npm]
            # Last commit is the update docs
            MESSAGE=$(git log -n 1 --skip 1 --pretty=format:%s)

            if [[ "$MESSAGE" == *\["skip npm"\]* ]]; then
              circleci step halt
            fi
      - run: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
      - run:
          name: 'Grab Current Version Number'
          command: echo "export CURRENT_VERSION=$(node -p "require('./package.json').version")" >> $BASH_ENV
      - run:
          name: 'Check if we need to bump'
          command: |
            if ! \
              { git log "$( git describe --tags --abbrev=0 )..HEAD" --format='%s' | cut -d: -f1 | sort -u | sed -e 's/([^)]*)//' | grep -q -i -E '^feat|fix|perf|revert$' ; } || \
              { git log "$( git describe --tags --abbrev=0 )..HEAD" --format='%s' | cut -d: -f1 | sort -u | sed -e 's/([^)]*)//' | grep -q -E '\!$' ; } || \
              { git log "$( git describe --tags --abbrev=0 )..HEAD" --format='%b' | grep -q -E '^BREAKING CHANGE:' ; }
            then
              echo "No applicable changes since the previous tag, skipping..."
              circleci step halt
            fi
      - run:
          name: 'Run standard-version'
          command: yarn run release
      - run:
          name: 'Grab Upcoming Version Number'
          command: echo "export UPCOMING_VERSION=$(node -p "require('./package.json').version")" >> $BASH_ENV
      - run:
          name: 'Check if we need to publish a new version'
          command: |
            echo "Current Version: $CURRENT_VERSION"
            echo "Upcoming Version: $UPCOMING_VERSION"

            if [[ "$CURRENT_VERSION" == "$UPCOMING_VERSION" ]]; then
              circleci step halt
            fi
      - run:
          name: 'Publish to NPM'
          command: |
            echo "replace yarn workspace environment variables "
            yarn run deps:generate

            echo "Publish to NPM"
            npm run tooling -- exec --cmd bash -- -c 'npm publish --access public || true'
      - run:
          name: 'Push to upstream/master'
          command: git push --follow-tags upstream master
  versioning_and_publish_beta:
    executor: main-executor
    steps:
      - checkout_and_fetch_tags
      - restore_node_modules
      - add_ssh_keys:
          fingerprints:
            - '89:ed:56:33:f5:1b:7b:b6:a1:04:02:a0:f9:47:13:0a'
      - run:
          name: 'Temporary change origin url to HTTPS for documentation generation'
          command: git remote set-url origin https://github.com/webex/webex-js-sdk.git
      - run:
          name: 'Build Docs'
          command: yarn run build:docs
      - run:
          name: 'Change origin url back to ssh'
          command: git remote set-url origin git@github.com:webex/webex-js-sdk.git
      - run:
          name: 'Build Samples'
          command: yarn run samples:build
      - run:
          name: 'Publish Docs Folder'
          command: |
            # Check if there's anything to commit before committing
            if [ -n "$(git status --porcelain)" ]; then
              git add docs/
              git add -f docs/samples/webex.min.js*
              git commit -m "docs(api): update docs [skip ci]"
              git push upstream HEAD:beta
            fi
      - run:
          name: 'Check if we need to skip version bumping and publishing to npm [skip npm]'
          command: |
            # Grab the 2nd to last commit message from the log for [skip npm]
            # Last commit is the update docs
            MESSAGE=$(git log -n 1 --skip 1 --pretty=format:%s)

            if [[ "$MESSAGE" == *\["skip npm"\]* ]]; then
              circleci step halt
            fi
      - run: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
      - run:
          name: 'Grab Current Version Number'
          command: echo "export CURRENT_VERSION=$(node -p "require('./package.json').version")" >> $BASH_ENV
      - run:
          name: 'Check if we need to bump'
          command: |
            if ! \
              { git log "$( git describe --tags --abbrev=0 )..HEAD" --format='%s' | cut -d: -f1 | sort -u | sed -e 's/([^)]*)//' | grep -q -i -E '^feat|fix|perf|revert$' ; } || \
              { git log "$( git describe --tags --abbrev=0 )..HEAD" --format='%s' | cut -d: -f1 | sort -u | sed -e 's/([^)]*)//' | grep -q -E '\!$' ; }
            then
              echo "No applicable changes since the previous tag, skipping..."
              circleci step halt
            fi
      - run:
          name: 'Run standard-version'
          command: yarn run release --prerelease beta
      - run:
          name: 'Grab Upcoming Version Number'
          command: echo "export UPCOMING_VERSION=$(node -p "require('./package.json').version")" >> $BASH_ENV
      - run:
          name: 'Check if we need to publish a new version'
          command: |
            echo "Current Version: $CURRENT_VERSION"
            echo "Upcoming Version: $UPCOMING_VERSION"

            if [[ "$CURRENT_VERSION" == "$UPCOMING_VERSION" ]]; then
              circleci step halt
            fi
      - run:
          name: 'Publish to NPM'
          command: |
            echo "replace yarn workspace environment variables "
            yarn run deps:generate

            echo "Publish to NPM"
            npm run tooling -- exec --cmd bash -- -c 'npm publish --access public --tag beta|| true'
      - run:
          name: 'Push to upstream/beta'
          command: git push --follow-tags upstream beta
  tap:
    executor: main-executor
    parameters:
      package:
        type: string
    environment:
      COVERAGE: true
      EU_PRIMARY_ORG_ID: 'd9b9d739-c7e4-4956-809e-5da447a3b8ca'
      IDBROKER_BASE_URL: 'https://idbroker.webex.com'
      IDENTITY_BASE_URL: 'https://identity.webex.com'
      U2C_SERVICE_URL: 'https://u2c.wbx2.com/u2c/api/v1'
      WDM_SERVICE_URL: 'https://wdm-a.wbx2.com/wdm/api/v1'
      WHISTLER_API_SERVICE_URL: 'https://whistler-prod.allnint.ciscospark.com/api/v1'
      WEBEX_TEST_USERS_CI_GATEWAY_SERVICE_URL: 'https://cig-service-a.wbx2.com/cig-service/api/v1'
      WEBEX_CONVERSATION_DEFAULT_CLUSTER: 'urn:TEAM:us-east-2_a:identityLookup'
    steps:
      - install_graphicsmagick_and_libgcrypt
      - checkout_and_fetch_tags
      - restore_node_modules
      - restore_built_packages
      - run:
          name: 'Generate Build Number'
          command: echo "export BUILD_NUMBER=CircleCI-SDK-TAP-<< parameters.package >>_${CIRCLE_WORKFLOW_ID}" >> $BASH_ENV
      - run: yarn run test:integration --silent --packages << parameters.package >> defaults
      - run:
          name: 'Check if tap test for "<< parameters.package >>" failed'
          command: |
            mkdir -p reports/junit/karma
            FAILURES=$(find reports/junit/karma/ -iname '*.xml' -print0 | xargs -0 sed -n 's/.*failures=\"\([^\"]*\).*/\1/p' | xargs)

            echo Failures $FAILURES

            if [[ $FAILURES =~ ^([0 ])*$ ]]; then
              echo 'Tap test for "<< parameters.package >>" succeeded'
            else
              echo 'Tap test for "<< parameters.package >>" failed'
              exit 1
            fi
      - store_test_results:
          path: reports/junit
      - store_artifacts:
          path: reports/junit
          destination: junit
      # - run:
      #     name: 'Create Incident on PagerDuty'
      #     when: on_fail
      #     command: |
      #       # Easier way of assigning variables in a json object without escaping double quotes in the curl command
      #       generate_incident_data() {
      #         # '\<<' must be escaped in v2.1+ due to yaml conflicts
      #         # https://discuss.circleci.com/t/2-1-config-and-build-processing/24102/31
      #         cat \<<EOF
      #       {
      #         "routing_key": "${PAGERDUTY_KEY}",
      #         "event_action": "trigger",
      #         "payload": {
      #           "summary": "FAILURE: << parameters.package >> TAP Test",
      #           "source": "CircleCI - Webex JS SDK",
      #           "severity": "critical"
      #         },
      #         "links": [
      #           {
      #             "href": "${CIRCLE_BUILD_URL}",
      #             "text": "CircleCI - << parameters.package >> TAP Test - Build #${CIRCLE_BUILD_NUM}"
      #           }
      #         ],
      #         "client": "CircleCI - Webex-JS-SDK TAP Test - Build #${CIRCLE_BUILD_NUM}",
      #         "client_url": "${CIRCLE_BUILD_URL}"
      #       }
      #       EOF
      #       }
      #       curl -X POST --header 'Content-Type: application/json' -d "$(generate_incident_data)" https://events.pagerduty.com/v2/enqueue

workflows:
  github_checks:
    jobs:
      - yarn_install:
          filters:
            branches:
              ignore:
                - master
      - build:
          requires:
            - yarn_install
      - static_analysis:
          requires:
            - yarn_install
      - list_changed_packages:
          requires:
            - yarn_install
      - unit_tests:
          requires:
            - build
            - static_analysis
      - integration_tests:
          requires:
            - build
            - static_analysis
      - samples:
          requires:
            - build
            - static_analysis
  build_for_release:
    jobs:
      - yarn_install:
          filters:
            branches:
              only:
                - master
                - beta
      - versioning_and_publish:
          filters:
            branches:
              only: master
          requires:
            - yarn_install
      - versioning_and_publish_beta:
          filters:
            branches:
              only: beta
          requires:
            - yarn_install
  tap_tests:
    triggers:
      - schedule:
          # Everyday @ 6:15PM UTC | 3:15PM EST | 2:15PM EDT | 12:15PM PST | 11:15AM PDT
          cron: '15 18 * * 1-5'
          filters:
            branches:
              only:
                - master
    jobs:
      - yarn_install:
          filters:
            branches:
              only: master
      - build_production:
          requires:
            - yarn_install
      - tap:
          name: '@webex/webex-core tap'
          package: '@webex/webex-core'
          requires:
            - build_production
      - tap:
          name: '@webex/plugin-meetings tap'
          package: '@webex/plugin-meetings'
          requires:
            - build_production
      - tap:
          name: '@webex/internal-plugin-conversation tap'
          package: '@webex/internal-plugin-conversation'
          requires:
            - build_production
      - tap:
          name: '@webex/internal-plugin-encryption tap'
          package: '@webex/internal-plugin-encryption'
          requires:
            - build_production
      - tap:
          name: '@webex/internal-plugin-locus tap'
          package: '@webex/internal-plugin-locus'
          requires:
            - build_production
      - tap:
          name: '@webex/internal-plugin-mercury tap'
          package: '@webex/internal-plugin-mercury'
          requires:
            - build_production
