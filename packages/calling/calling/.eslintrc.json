{
  "env": {
    "es2021": true,
    "browser": true,
    "jest": true,
    "node": true
  },
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "sourceType": "module"
  },
  "plugins": ["@typescript-eslint", "import", "eslint-plugin-tsdoc", "prettier", "jsdoc"],
  "extends": [
    "airbnb-base",
    "plugin:@typescript-eslint/eslint-recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:import/typescript",
    "plugin:@typescript-eslint/recommended",
    "prettier",
    "plugin:prettier/recommended",
    "plugin:jsdoc/recommended"
  ],
  "ignorePatterns": ["build/**/*.*", "dist/**/*.*", "docs/^(?!examples)/*.*"],
  "settings": {
    "import/parsers": {
      "@typescript-eslint/parser": [".js", ".ts"]
    },
    "import/resolver": {
      "node": {
        "extensions": [".js", ".ts"],
        "paths": ["src", "test"]
      },
      "typescript": {}
    }
  },
  "rules": {
    "tsdoc/syntax": "error",
    "@typescript-eslint/indent": ["error", 2],
    "@typescript-eslint/no-unused-vars": "error",
    "@typescript-eslint/no-explicit-any": "error",
    "@typescript-eslint/no-this-alias": [
      "error",
      {
        "allowedNames": ["instance"] // Allow `const vm= this`; `[]` by default
      }
    ],
    "import/prefer-default-export": 0,
    "import/extensions": [
      "error",
      "ignorePackages",
      {
        "js": "never",
        "ts": "never"
      }
    ],
    "import/no-extraneous-dependencies": [
      "error",
      {
        "devDependencies": ["*.config*.*", "**/*test.*"]
      }
    ],
    "no-console": [
      "error",
      {
        "allow": ["warn", "error"]
      }
    ],
    "func-style": [
      "warn",
      "declaration",
      {
        "allowArrowFunctions": true
      }
    ],
    "no-restricted-syntax": [
      "error",
      {
        "selector": "ForInStatement",
        "message": "for..in loops iterate over the entire prototype chain, which is virtually never what you want. Use Object.{keys,values,entries}, and iterate over the resulting array."
      },
      {
        "selector": "LabeledStatement",
        "message": "Labels are a form of GOTO; using them makes code confusing and hard to maintain and understand."
      },
      {
        "selector": "WithStatement",
        "message": "`with` is disallowed in strict mode because it makes code impossible to predict and optimize."
      }
    ],
    "object-curly-spacing": ["error", "never"],
    "max-len": [
      "error",
      {
        "code": 100,
        "tabWidth": 2,
        "ignoreComments": true,
        "ignoreUrls": true,
        "ignoreStrings": true,
        "ignoreTemplateLiterals": true,
        "ignoreRegExpLiterals": true
      }
    ],
    "accessor-pairs": [
      "error",
      {
        "setWithoutGet": true,
        "getWithoutSet": false,
        "enforceForClassMembers": true
      }
    ],
    "no-dupe-keys": "error",
    "no-dupe-class-members": "error",
    "newline-after-var": "error",
    "newline-before-return": "error",
    "lines-around-directive": "error",
    "no-useless-call": "error",
    "no-shadow": "off",
    "class-methods-use-this": "off",
    "jsdoc/require-description": 1,
    "jsdoc/require-description-complete-sentence": 1,
    "jsdoc/require-hyphen-before-param-description": 0,
    "jsdoc/require-jsdoc": [
      1, // TODO: this value needs to be set to 2 for errors once the documentation has been made
      {
        "require": {
          "ArrowFunctionExpression": true,
          "ClassDeclaration": true,
          "ClassExpression": true,
          "FunctionDeclaration": true,
          "FunctionExpression": true,
          "MethodDefinition": true
        }
      }
    ]
  },
  "overrides": [
    {
      "files": ["**/__mocks__/**", "**/**.test.ts"],
      "rules": {
        "jsdoc/require-jsdoc": "off"
      }
    }
  ]
}
