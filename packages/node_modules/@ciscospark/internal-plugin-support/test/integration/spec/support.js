/*!
 * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.
 */

import '@ciscospark/internal-plugin-search';

import {assert} from '@ciscospark/test-helper-chai';
import CiscoSpark, {SparkHttpError} from '@ciscospark/spark-core';
import fh from '@ciscospark/test-helper-file';
import testUsers from '@ciscospark/test-helper-test-users';

const TooManyRequests = {SparkHttpError};

describe('plugin-support', function () {
  this.timeout(60000);

  let spark;

  let sampleTextOne = 'sample-text-one.txt';

  before('fetch fixtures', () => Promise.all([
    fh.fetch(sampleTextOne)
  ])
    .then((res) => {
      [
        sampleTextOne
      ] = res;
    }));

  // Disabled because rackspace is broken
  describe('#submitLogs()', () => {
    describe('when the current user is authorized', () => {
      before(() => testUsers.create({count: 1})
        .then((users) => {
          spark = new CiscoSpark({
            credentials: {
              authorization: users[0].token
            }
          });

          return spark.internal.device.register();
        }));

      it('uploads logs', () => spark.internal.support.submitLogs({}, sampleTextOne)
        .then((body) => {
          assert.isDefined(body);
          assert.property(body, 'url');
          assert.property(body, 'userId');
          assert.equal(body.userId, spark.internal.device.userId);
        })
        // Atlas has a really unfortunate rate limit in place, so we're going
        // to rely on hope that enough of the node/browser runs don't get rate
        // limited to prove this code works.
        .catch((err) => {
          if (err instanceof TooManyRequests) {
            return;
          }

          throw err;
        }));
    });

    describe('when the current user is not authorized', () => {
      it('uploads logs', () => {
        spark = new CiscoSpark({});
        return spark.internal.support.submitLogs({}, sampleTextOne)
          .then((body) => {
            assert.isDefined(body);
            assert.property(body, 'url');
            assert.property(body, 'userId');
          })
          // Atlas has a really unfortunate rate limit in place, so we're going
          // to rely on hope that enough of the node/browser runs don't get rate
          // limited to prove this code works.
          .catch((err) => {
            if (err instanceof TooManyRequests) {
              return;
            }

            throw err;
          });
      });
    });
  });
});
