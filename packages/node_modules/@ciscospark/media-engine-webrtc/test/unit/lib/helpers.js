import {assert} from '@ciscospark/test-helper-chai';

export function getExpectedMediaDirection(next, previous) {
  if (previous.includes(`recv`)) {
    if (next === `inactive`) {
      return `recvonly`;
    }
    if (next === `sendonly`) {
      return `sendrecv`;
    }
  }

  return next;
}

const backoffPattern = [0, 100, 200, 400, 800];

export function retry(fn) {
  return backoffPattern.reduce((promise, delay) => {
    return promise.catch(() => {
      return new Promise((resolve, reject) => {
        setTimeout(() => {
          try {
            resolve(fn());
          }
          catch (err) {
            reject(err);
          }
        }, delay);
      });
    });
  }, Promise.reject());
}

export function assertLocalKind(kind, direction, engine) {
  const tracks = engine.localMediaStream.getTracks().filter((t) => t.kind === kind);
  if (direction.includes(`send`)) {
    assert.lengthOf(tracks, 1, `there is 1 local ${kind} track`);
    // assert.lengthOf(engine.pc.getSenders().filter((s) => s.track.kind === kind), 1, `local ` + kind + `is ` + direction);
    assert.isTrue(tracks[0].enabled, `the local ${kind} track is enabled`);
    // assert.isTrue(engine.pc.getSenders().find((s) => s.track.kind === kind).track.enabled. `local ` + kind + `is ` + direction);
  }
  else {
    try {
      assert.lengthOf(tracks, 0, `there are 0 local ${kind} tracks`);
      // assert.lengthOf(engine.pc.getSenders().filter((s) => s.track.kind === kind), 0, `local ` + kind + `is ` + direction);
    }
    catch (err) {
      assert.lengthOf(tracks, 1, `there is 1 local ${kind} track`);
      assert.isFalse(tracks[0].enabled, `the local ${kind} track is not enabled`);
      // assert.isFalse(engine.pc.getSenders().find((s) => s.track.kind === kind).track.enabled, `local ` + kind + `is ` + direction);
    }
  }
}

export function assertRemoteKind(kind, direction, engine) {
  const tracks = engine.remoteMediaStream.getTracks().filter((t) => t.kind === kind);
  if (direction.includes(`recv`)) {

    assert.lengthOf(tracks, 1, `there is 1 remote ${kind} track`);
    // assert.lengthOf(engine.pc.getRemoteStreams()[0].getTracks().filter((t) => t.kind === kind), 1, `local ` + kind + `is ` + direction);
    assert.isTrue(tracks[0].enabled, `the remote ${kind} track is enabled`);
    // assert.isTrue(engine.pc.getRemoteStreams()[0].getTracks().find((t) => t.kind === kind).enabled, `local ` + kind + `is ` + direction);
  }
  else {
    if (engine.remoteMediaStream) {
      try {
        assert.lengthOf(tracks, 0, `there are 0 remote ${kind} tracks`);
      }
      catch (err) {
        assert.lengthOf(tracks, 1, `there is 1 remote ${kind} track`);
        assert.isFalse(tracks[0].enabled, `the remote ${kind} track is not enabled`);
      }
    }

    if (engine.pc.getRemoteStreams()[0]) {
      try {
        assert.lengthOf(engine.pc.getRemoteStreams()[0].getTracks().filter((t) => t.kind === kind), 0, `remote ${kind} is ${direction}`);
      }
      catch (err) {
        assert.isFalse(engine.pc.getRemoteStreams()[0].getTracks().find((t) => t.kind === kind).enabled, `remote ${kind} is ${direction}`);
      }
    }
  }
}

export function assertLocalMedia(engine, targetAudioDirection, targetVideoDirection) {
  assertLocalKind(`audio`, targetAudioDirection, engine);
  assertLocalKind(`video`, targetVideoDirection, engine);
}

export function assertRemoteMedia(engine, targetAudioDirection, targetVideoDirection) {
  assertRemoteKind(`audio`, targetAudioDirection, engine);
  assertRemoteKind(`video`, targetVideoDirection, engine);
}
