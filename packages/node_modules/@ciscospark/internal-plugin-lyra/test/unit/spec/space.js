/*!
 * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.
 */

import {assert} from '@ciscospark/test-helper-chai';
import MockSpark from '@ciscospark/test-helper-mock-spark';
import sinon from '@ciscospark/test-helper-sinon';
import Lyra, {config as lyraConfig} from '../..';

describe(`plugin-lyra`, () => {
  const lyraSpaceId = `lyra-1337`;
  const lyraSpaceUrl = `https://lyra/api/v1/${lyraSpaceId}`;
  const lyraSpace = {
    identity: {
      id: lyraSpaceId
    },
    url: lyraSpaceUrl
  };
  const conversation = {
    url: `https://conversation`,
    kmsResourceObjectUrl: `https://kms`
  };

  let spark;

  before(() => {
    spark = new MockSpark({
      children: {
        lyra: Lyra
      }
    });

    spark.internal.device = {
      url: `deviceUrl`,
      userId: `1234`
    };
    spark.config.lyra = lyraConfig.lyra;
  });

  beforeEach(() => {
    spark.request.resetHistory();
  });

  describe(`space`, () => {
    describe(`#get()`, () => {
      it(`requires space.id`, () => assert.isRejected(spark.internal.lyra.space.get(), /space.id is required/));
    });

    describe(`#join()`, () => {
      it(`defaults to MANUAL pass type`, () => spark.internal.lyra.space.join(lyraSpace)
        .then(() => assert.calledWith(spark.request, sinon.match({
          method: `PUT`,
          uri: `${lyraSpace.url}/occupants/@me`,
          body: {
            pass: {
              type: `MANUAL`
            },
            deviceUrl: `deviceUrl`
          }
        }))));

      it(`allows other pass type`, () => spark.internal.lyra.space.join(lyraSpace, {passType: `TEST`})
        .then(() => assert.calledWith(spark.request, sinon.match({
          method: `PUT`,
          uri: `${lyraSpace.url}/occupants/@me`,
          body: {
            pass: {
              type: `TEST`
            },
            deviceUrl: `deviceUrl`
          }
        }))));
    });

    describe(`#bindConversation()`, () => {
      it(`requires space.url`, () => assert.isRejected(spark.internal.lyra.space.bindConversation(), /space.url is required/));
      it(`requires space.id`, () => assert.isRejected(spark.internal.lyra.space.bindConversation({url: lyraSpaceUrl}), /space.id is required/));
      it(`requires conversation.url`, () => assert.isRejected(spark.internal.lyra.space.bindConversation(lyraSpace, {kmsResourceObjectUrl: `url`}), /conversation.url is required/));
      it(`requires conversation.kmsResourceObjectUrl`, () => assert.isRejected(spark.internal.lyra.space.bindConversation(lyraSpace, {url: `url`}), /conversation.kmsResourceObjectUrl is required/));
    });

    describe(`#unbindConversation()`, () => {
      it(`requires space.url`, () => assert.isRejected(spark.internal.lyra.space.unbindConversation(), /space.url is required/));
      it(`requires space.id`, () => assert.isRejected(spark.internal.lyra.space.unbindConversation({url: lyraSpaceUrl}), /space.id is required/));
      it(`requires conversation.url`, () => assert.isRejected(spark.internal.lyra.space.unbindConversation(lyraSpace, {kmsResourceObjectUrl: `url`}), /conversation.url is required/));
      it(`requires conversation.kmsResourceObjectUrl`, () => assert.isRejected(spark.internal.lyra.space.unbindConversation(lyraSpace, {url: conversation.url}), /conversation.kmsResourceObjectUrl is required/));
    });

    describe(`#deleteBinding`, () => {
      it(`requires space.url`, () => assert.isRejected(spark.internal.lyra.space.deleteBinding(), /space.url is required/));
      it(`requires space.id`, () => assert.isRejected(spark.internal.lyra.space.deleteBinding({url: lyraSpaceUrl}), /space.id is required/));
      it(`requires options.kmsResourceObjectUrl`, () => assert.isRejected(spark.internal.lyra.space.deleteBinding(lyraSpace, {bindingId: `123`}), /kmsResourceObjectUrl is required/));
      it(`requires options.bindingId`, () => assert.isRejected(spark.internal.lyra.space.deleteBinding(lyraSpace, {kmsResourceObjectUrl: `url`}), /options.bindingId is required/));
    });
  });

});
