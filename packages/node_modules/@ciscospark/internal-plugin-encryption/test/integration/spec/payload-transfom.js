/*!
 * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.
 */

import {DryError} from '@ciscospark/internal-plugin-encryption';

import {assert} from '@ciscospark/test-helper-chai';
import {base64} from '@ciscospark/common';
import CiscoSpark from '@ciscospark/spark-core';
import testUsers from '@ciscospark/test-helper-test-users';

describe(`plugin-encryption`, () => {
  let other, spark;
  before(`create test user`, () => testUsers.create({count: 2})
    .then(([user, o]) => {
      other = o;
      console.log(o);
      spark = new CiscoSpark({
        credentials: {
          authorization: user.token
        }
      });
      assert.isTrue(spark.isAuthenticated || spark.canAuthorize);
    }));

  before(`register with wdm`, () => spark.internal.device.register());

  describe(`when a DRY response has an error`, () => {
    it(`decrypts the error message`, () => assert.isRejected(spark.request({
      method: `POST`,
      service: `conversation`,
      resource: `conversations`,
      body: {
        activities: {
          items: [
            {
              actor: {
                objectType: `person`,
                id: spark.internal.device.userId
              },
              objectType: `activity`,
              verb: `create`
            },
            {
              actor: {
                objectType: `person`,
                id: spark.internal.device.userId
              },
              object: {
                objectType: `person`,
                id: spark.internal.device.userId
              },
              objectType: `activity`,
              verb: `add`
            },
            {
              actor: {
                objectType: `person`,
                id: spark.internal.device.userId
              },
              object: {
                objectType: `person`,
                id: other.id
              },
              objectType: `activity`,
              verb: `add`
            }
          ]
        },
        defaultActivityEncryptionKeyUrl: `kms://fakeuri`,
        objectType: `conversation`,
        kmsMessage: {
          method: `create`,
          uri: `/resource`,
          userIds: [
            spark.internal.device.userId,
            other.id
          ],
          keyUris: [
            `kms://fakeuri`
          ]
        }
      }
    }))
      .then((err) => {
        assert.statusCode(err, 400);
        assert.throws(() => {
          base64.decode(err.body.message.split(`.`)[0]);
        });
        assert.match(err.toString(), /POST .+\s/);
        assert.match(err.toString(), /WEBEX_TRACKING_ID: .+\s/);
        assert.match(err.toString(), /KMS_RESPONSE_STATUS: .+\s/);
        assert.match(err.toString(), /KMS_REQUEST_ID: .+/);
        assert.instanceOf(err, DryError);
      }));
  });

});
