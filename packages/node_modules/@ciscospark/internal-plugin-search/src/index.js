/*!
 * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.
 */

import {registerInternalPlugin} from '@ciscospark/spark-core';
import Search from './search';
import config from './config';
import {has} from 'lodash';

import '@ciscospark/internal-plugin-encryption';

registerInternalPlugin(`search`, Search, {
  config,
  payloadTransformer: {
    predicates: [
      {
        name: `encryptSearchQuery`,
        direction: `outbound`,
        test(ctx, options) {
          if (!has(options, `body.query`)) {
            return Promise.resolve(false);
          }

          if (!has(options, `body.searchEncryptionKeyUrl`)) {
            return Promise.resolve(false);
          }

          return ctx.spark.internal.device.isSpecificService(`argonaut`, options.service || options.url);
        },
        extract(options) {
          return Promise.resolve(options.body);
        }
      },
      {
        name: `transformObjectArray`,
        direction: `inbound`,
        test(ctx, response) {
          return Promise.resolve(has(response, `body.activities.items[0].objectType`))
            .then((res) => res && ctx.spark.internal.device.isSpecificService(`argonaut`, response.options.service || response.options.uri));
        },
        extract(response) {
          return Promise.resolve(response.body.activities.items);
        }
      }
    ],
    transforms: [
      {
        name: `encryptSearchQuery`,
        direction: `outbound`,
        fn(ctx, object) {
          return ctx.spark.internal.encryption.encryptText(object.searchEncryptionKeyUrl, object.query)
            .then((q) => {
              object.query = q;
            });
        }
      }
    ]
  }
});

export {default as default} from './search';
