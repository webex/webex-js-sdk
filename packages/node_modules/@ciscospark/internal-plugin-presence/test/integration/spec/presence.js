/*!
 * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.
 */

import '@ciscospark/internal-plugin-mercury';
import '@ciscospark/internal-plugin-presence';

import {assert} from '@ciscospark/test-helper-chai';
import CiscoSpark from '@ciscospark/spark-core';
import testUsers from '@ciscospark/test-helper-test-users';
import {expectEvent} from '@ciscospark/test-helper-mocha';

describe('plugin-presence', function () {
  this.timeout(10000);
  describe('Presence', () => {
    let mccoy, spock;

    before('create users', () => testUsers.create({count: 2})
      .then((users) => {
        [spock, mccoy] = users;
        spock.spark = new CiscoSpark({
          credentials: {
            authorization: users[0].token
          }
        });
        mccoy.spark = new CiscoSpark({
          credentials: {
            authorization: users[1].token
          }
        });
      }));

    before('register with wdm', () => Promise.all([
      spock.spark.internal.device.register(),
      mccoy.spark.internal.device.register()
    ]));

    before('register spock with mercury', () => spock.spark.internal.mercury.connect());

    after('deregister spock with mercury', () => spock.spark.internal.mercury.disconnect());


    describe('#get()', () => {
      it('gets a person\'s status by id', () => spock.spark.internal.presence.get(mccoy.id)
        .then((presenceResponse) => {
          assert.property(presenceResponse, 'subject');
          assert.equal(presenceResponse.subject, mccoy.id);
        }));
    });

    describe('#list()', () => {
      it('returns an object with the status of all requested people', () => spock.spark.internal.presence.list([mccoy.id, spock.id])
        .then((presenceResponse) => {
          assert.equal(presenceResponse.statusList.length, 2);
          assert.property(presenceResponse.statusList[0], 'subject');
          assert.equal(presenceResponse.statusList[0].subject, mccoy.id);
          assert.property(presenceResponse.statusList[1], 'subject');
          assert.equal(presenceResponse.statusList[1].subject, spock.id);
        }));
    });

    describe('#subscribe', () => {
      afterEach(() => spock && spock.spark && spock.spark.internal.presence.unsubscribe([mccoy.id, spock.id]));

      it('subscribes to a person id and returns subscription status', () => spock.spark.internal.presence.subscribe(mccoy.id)
        .then((presenceResponse) => {
          assert.property(presenceResponse, 'responses');
          assert.equal(presenceResponse.responses.length, 1);
          assert.equal(presenceResponse.responses[0].subject, mccoy.id);
        }));

      it('subscribes and returns subscription status of a list of people ids', () =>
        spock.spark.internal.presence.subscribe([mccoy.id, spock.id])
          .then((presenceResponse) => {
            assert.property(presenceResponse, 'responses');
            assert.equal(presenceResponse.responses.length, 2);
            assert.equal(presenceResponse.responses[0].subject, mccoy.id);
            assert.equal(presenceResponse.responses[1].subject, spock.id);
          }));

      it('should receive a mercury event for a subscribed person\'s change', () => spock.spark.internal.presence.subscribe(mccoy.id)
        // 'active' status
        .then(() => Promise.all([
          expectEvent(10000, 'event:apheleia.subscription_update', spock.spark.internal.mercury, 'spock should get the presence active event'),
          mccoy.spark.internal.presence.setStatus('active', 1500)
        ]))
        .then(([event]) => assert.equal(event.data.status, 'active', 'mccoy presence event status should be active'))
        // 'inactive' status
        .then(() => Promise.all([
          expectEvent(10000, 'event:apheleia.subscription_update', spock.spark.internal.mercury, 'spock should get the presence inactive event'),
          mccoy.spark.internal.presence.setStatus('inactive', 1500)
        ]))
        .then(([event]) => assert.equal(event.data.status, 'inactive', 'mccoy presence event status should be inactive'))
        // 'dnd' status
        .then(() => Promise.all([
          expectEvent(10000, 'event:apheleia.subscription_update', spock.spark.internal.mercury, 'spock should get the presence dnd event'),
          mccoy.spark.internal.presence.setStatus('dnd', 1500)
        ]))
        .then(([event]) => assert.equal(event.data.status, 'dnd', 'mccoy presence event status should be dnd')));
    });

    describe('#unsubscribe', () => {
      it('unsubscribes to presence updates of a single person id', () =>
        spock.spark.internal.presence.unsubscribe(mccoy.id)
          .then((res) => assert.statusCode(res, 200)));

      it('unsubscribes to presence updates of a list of people ids', () =>
        spock.spark.internal.presence.unsubscribe([mccoy.id, spock.id])
          .then((res) => assert.statusCode(res, 200)));
    });

    describe('#setStatus', () => {
      it('sets the presence status of the current user', () =>
        spock.spark.internal.presence.setStatus('dnd', 1500)
          .then((statusResponse) => {
            assert.property(statusResponse, 'subject');
            assert.property(statusResponse, 'status');
            assert.equal(statusResponse.subject, spock.id);
            assert.equal(statusResponse.status, 'dnd');
          }));
    });
  });
});
