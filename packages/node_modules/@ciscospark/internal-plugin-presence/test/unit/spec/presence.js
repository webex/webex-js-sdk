/**!
*
* Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.
*/

import {assert} from '@ciscospark/test-helper-chai';
import Presence from '@ciscospark/internal-plugin-presence';
import MockSpark from '@ciscospark/test-helper-mock-spark';

describe(`plugin-presence`, () => {
  describe(`Presence`, () => {
    let spark;

    beforeEach(() => {
      spark = new MockSpark({
        children: {
          presence: Presence
        }
      });
    });

    describe(`#get()`, () => {
      it(`requires a person parameter`, () => {
        return assert.isRejected(spark.presence.get(), /A person id is required/);
      });
    });

    describe(`#list()`, () => {
      it(`requires an array of people parameter`, () => {
        return assert.isRejected(spark.presence.list(), /An array of people ids is required/);
      });

      it(`requires an array of people parameter`, () => {
        return assert.isRejected(spark.presence.list(`fake`), /An array of people ids is required/);
      });
    });

    describe(`#subscribe()`, () => {
      it(`requires a person parameter`, () => {
        return assert.isRejected(spark.presence.subscribe(), /A person id is required/);
      });
    });

    describe(`#subscribeList()`, () => {
      it(`requires an array of people parameter`, () => {
        return assert.isRejected(spark.presence.subscribeList(), /An array of people ids is required/);
      });

      it(`requires an array of people parameter`, () => {
        return assert.isRejected(spark.presence.subscribeList(`fake`), /An array of people ids is required/);
      });
    });

    describe(`#unsubscribe()`, () => {
      it(`requires a person parameter`, () => {
        return assert.isRejected(spark.presence.unsubscribe(), /A person id is required/);
      });
    });

    describe(`#unsubscribeList()`, () => {
      it(`requires an array of people parameter`, () => {
        return assert.isRejected(spark.presence.unsubscribeList(), /An array of people ids is required/);
      });

      it(`requires an array of people parameter`, () => {
        return assert.isRejected(spark.presence.unsubscribeList(`fake`), /An array of people ids is required/);
      });
    });

    describe(`#setStatus()`, () => {
      it(`requires a status`, () => {
        return assert.isRejected(spark.presence.setStatus(), /A status is required/);
      });
    });

  });

});
