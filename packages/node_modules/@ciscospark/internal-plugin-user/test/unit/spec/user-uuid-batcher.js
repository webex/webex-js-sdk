/*!
 * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.
 */

import {assert} from '@ciscospark/test-helper-chai';
import MockSpark from '@ciscospark/test-helper-mock-spark';
import sinon from '@ciscospark/test-helper-sinon';
import User from '@ciscospark/internal-plugin-user';

describe(`plugin-user`, () => {
  describe(`UserUUIDBatcher`, () => {
    let batcher;
    let spark;

    beforeEach(() => {
      spark = new MockSpark({
        children: {
          user: User
        }
      });
      batcher = spark.internal.user.batcher.creator;
    });

    describe(`#fingerprints`, () => {
      const email = `test@example.com`;
      it(`fingerprintRequest returns 'email'`, () => assert.becomes(batcher.fingerprintRequest(email), email));
      it(`fingerprintResponse returns 'email'`, () => assert.becomes(batcher.fingerprintRequest({email}), email));
    });

    describe(`#submitHttpRequest()`, () => {
      const email = `test@example.com`;
      const mockRequest = {
        method: `POST`,
        service: `conversation`,
        resource: `/users`,
        body: email,
        qs: {
          shouldCreateUsers: true
        }
      };

      it(`calls spark.request with expected params`, () => {
        spark.request = function(options) {
          return Promise.resolve(options);
        };
        return batcher.submitHttpRequest(mockRequest.body)
          .then((req) => assert.deepEqual(req, mockRequest));
      });
    });

    describe(`#handleHttpSuccess()`, () => {
      const email = `test@example.com`;
      let failureSpy, successSpy;

      beforeEach(() => {
        successSpy = sinon.stub(batcher, `handleItemSuccess`);
        failureSpy = sinon.stub(batcher, `handleItemFailure`);
      });

      it(`handles item success`, () => {
        const mockResponse = {
          [email]: {
            id: `11111`
          }
        };
        return batcher.handleHttpSuccess({
          body: mockResponse
        })
          .then(() => {
            assert.calledWith(successSpy, email, mockResponse[email]);
          });
      });

      it(`handles item failure`, () => {
        const mockResponse = {
          [email]: {
            errorCode: 11111
          }
        };
        return batcher.handleHttpSuccess({
          body: mockResponse
        })
          .then(() => {
            assert.calledWith(failureSpy, email, mockResponse[email]);
          });
      });
    });
  });
});
