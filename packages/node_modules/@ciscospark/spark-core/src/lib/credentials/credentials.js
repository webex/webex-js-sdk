/*!
 * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.
 */

import querystring from 'querystring';
import url from 'url';
import {
  base64,
  makeStateDataType,
  oneFlight,
  tap,
  whileInFlight
} from '@ciscospark/common';
import {persist, waitForValue} from '../storage/decorators';
import SparkPlugin from '../spark-plugin';
import {cloneDeep, isObject} from 'lodash';
import TokenCollection from './token-collection';
import {filterScope, sortScope} from './scope';
import Token from './token';
import grantErrors from './grant-errors';

/**
 * @class
 */
const Credentials = SparkPlugin.extend({
  collections: {
    userTokens: TokenCollection
  },

  dataTypes: {
    token: makeStateDataType(Token, `token`).dataType
  },

  derived: {
    canAuthorize: {
      deps: [
        `supertoken`,
        `supertoken.canAuthorize`,
        `canRefresh`
      ],
      fn() {
        return Boolean(this.supertoken && this.supertoken.canAuthorize || this.canRefresh);
      }
    },
    canRefresh: {
      deps: [
        `supertoken`,
        `supertoken.canRefresh`
      ],
      fn() {
        // If we're operating in JWT mode, we have to delegate to the consumer
        if (this.config.jwtRefreshCallback) {
          return true;
        }

        return Boolean(this.supertoken && this.supertoken.canRefresh);
      }
    }
  },

  props: {
    supertoken: makeStateDataType(Token, `token`).prop
  },

  namespace: `Credentials`,

  session: {
    isRefreshing: {
      default: false,
      type: `boolean`
    },
    /**
     * Becomes `true` once the {@link loaded} event fires.
     * @see {@link SparkPlugin#ready}
     * @instance
     * @memberof Credentials
     * @type {boolean}
     */
    ready: {
      default: false,
      type: `boolean`
    }
  },

  /**
   * Generates an OAuth Login URL. Prefers the api.ciscospark.com proxy if the
   * instance is initialize with an authorizatUrl, but fallsback to idbroker
   * as the base otherwise.
   * @instance
   * @memberof Credentials
   * @param {Object} [options={}]
   * @returns {string}
   */
  buildLoginUrl(options = {clientType: `public`}) {
    /* eslint-disable camelcase */
    if (options.state && !isObject(options.state)) {
      throw new Error(`if specified, \`options.state\` must be an object`);
    }

    options.client_id = this.config.client_id;
    options.redirect_uri = this.config.redirect_uri;
    options.scope = this.config.scope;

    options = cloneDeep(options);

    if (!options.response_type) {
      options.response_type = options.clientType === `public` ? `token` : `code`;
    }
    Reflect.deleteProperty(options, `clientType`);

    if (options.state) {
      options.state = base64.toBase64Url(JSON.stringify(options.state));
    }
    return `${this.config.authorizeUrl}?${querystring.stringify(options)}`;
    /* eslint-enable camelcase */
  },

  /**
   * Generates a Logout URL
   * @instance
   * @memberof Credentials
   * @param {Object} [options={}]
   * @returns {[type]}
   */
  buildLogoutUrl(options = {}) {
    return `${this.config.logoutUrl}?${querystring.stringify(Object.assign({
      goto: this.config.redirect_uri,
      cisService: this.config.service
    }, options))}`;
  },

  constructor(...args) {
    // HACK to deal with the fact that AmpersandState#dataTypes#set is a pure
    // function.
    this._dataTypes = cloneDeep(this._dataTypes);
    Object.keys(this._dataTypes).forEach((key) => {
      const dataType = this._dataTypes[key];
      if (dataType.set) {
        dataType.set = dataType.set.bind(this);
      }
    });
    // END HACK
    Reflect.apply(SparkPlugin, this, args);
  },

  /**
   * Requests a client credentials grant and returns the token. Given the
   * limited use for such tokens as this time, this method does not cache its
   * token.
   * @instance
   * @memberof Credentials
   * @param {Object} options
   * @returns {Promise<Token>}
   */
  getClientToken(options = {}) {
    this.logger.info(`credentials: requesting client credentials grant`);

    options = options || {};
    options.scope = options.scope || `webexsquare:admin`;

    return this.spark.request({
      /* eslint-disable camelcase */
      method: `POST`,
      uri: this.config.tokenUrl,
      form: {
        grant_type: `client_credentials`,
        scope: options.scope,
        self_contained_token: true
      },
      auth: {
        user: this.config.client_id,
        pass: this.config.client_secret,
        sendImmediately: true
      },
      shouldRefreshAccessToken: false
      /* eslint-enable camelcase */
    })
      .then((res) => new Token(res.body, {parent: this}))
      .catch((res) => {
        if (res.statusCode !== 400) {
          return Promise.reject(res);
        }

        const ErrorConstructor = grantErrors.select(res.body.error);
        return Promise.reject(new ErrorConstructor(res._res || res));
      });
  },

  @oneFlight({keyFactory: (scope) => scope})
  @waitForValue(`@`)
  /**
   * Resolves with a token with the specified scopes. If no scope is specified,
   * defaults to omit(spark.credentials.scope, 'spark:kms'). If no such token is
   * available, downscopes the supertoken to that scope.
   * @instance
   * @memberof Credentials
   * @param {string} scope
   * @returns {Promise<Token>}
   */
  getUserToken(scope) {
    return Promise.resolve(!this.isRefreshing || new Promise((resolve) => {
      this.logger.info(`credentials: token refresh inflight; delaying getUserToken until refresh completes`);
      this.once(`change:isRefreshing`, () => {
        this.logger.info(`credentials: token refresh complete; reinvoking getUserToken`);
        resolve();
      });
    }))
      .then(() => {
        if (!this.canAuthorize) {
          this.logger.info(`credentials: cannot produce an access token from current state`);
          return Promise.reject(new Error(`Current state cannot produce an access token`));
        }

        if (!scope) {
          scope = filterScope(`spark:kms`, this.config.scope);
        }

        scope = sortScope(scope);

        if (scope === sortScope(this.config.scope)) {
          return Promise.resolve(this.supertoken);
        }

        const token = this.userTokens.get(scope);

        // we should also check for the token.access_token since token object does
        // not get cleared on unsetting while logging out.
        if (!token || !token.access_token) {
          return this.supertoken.downscope(scope)
            .catch((reason) => {
              this.logger.error(`credentials: failed to downscope supertoken to ${scope}`, reason);
              this.logger.error(`credentials: falling back to supertoken for ${scope}`);
              return Promise.resolve(new Token(Object.assign({scope}, this.supertoken.serialize())), {parent: this});
            })
            .then(tap((t) => this.userTokens.add(t)));
        }

        return Promise.resolve(token);
      });
  },

  @persist(`@`)
  /**
   * Initializer
   * @instance
   * @memberof Credentials
   * @param {Object} attrs
   * @param {Object} options
   * @private
   * @returns {Credentials}
   */
  initialize(attrs, options) {
    if (attrs) {
      if (typeof attrs === `string`) {
        this.supertoken = attrs;
      }

      if (attrs.access_token) {
        this.supertoken = attrs;
      }

      if (attrs.authorization) {
        if (attrs.authorization.supertoken) {
          this.supertoken = attrs.authorization.supertoken;
        }
        else {
          this.supertoken = attrs.authorization;
        }
      }
    }

    Reflect.apply(SparkPlugin.prototype.initialize, this, [attrs, options]);

    this.listenToOnce(this.parent, `change:config`, () => {
      if (this.config.authorizationString) {
        const parsed = url.parse(this.config.authorizationString, true);
        /* eslint-disable camelcase */
        this.config.client_id = parsed.query.client_id;
        this.config.redirect_uri = parsed.query.redirect_uri;
        this.config.scope = parsed.query.scope;
        this.config.authorizeUrl = parsed.href.substr(0, parsed.href.indexOf(`?`));
        /* eslint-enable camelcase */
      }
    });

    this.spark.once(`loaded`, () => {
      this.ready = true;
    });
  },

  @oneFlight
  @waitForValue(`@`)
  /**
   * Revokes all tokens and clears them from the stores.
   * @instance
   * @memberof Credentials
   * @returns {Promise}
   */
  invalidate() {
    this.logger.info(`credentials: invalidating tokens`);
    const tokens = this.userTokens.models;
    const supertoken = this.supertoken;

    this.unset(`supertoken`);

    const promises = tokens.map((token) => {
      this.logger.info(`credentials: revoking token for ${token.scope}`);
      return token.revoke()
        .catch((reason) => this.logger.warn(`credentials: failed to revoke token for ${token.scope}`, reason))
        // Note: can't pass the whole token object to remove (amp state will
        // implicity call toString() on it which a. is inefficient and b. will
        // fail once the token is revoked)
        .then(() => this.userTokens.remove(token.scope));
    });


    if (supertoken) {
      promises.push(supertoken.revoke()
        .catch((reason) => this.logger.warn(`credentials: failed to revoke supertoken`, reason)));
    }

    return Promise.all(promises)
      .then(tap(() => this.logger.info(`credentials: invalidated tokens`)));
  },

  @oneFlight
  @whileInFlight(`isRefreshing`)
  @waitForValue(`@`)
  /**
   * Removes the supertoken and child tokens, then refreshes the supertoken;
   * subsequent calls to {@link Credentials#getUserToken()} will re-downscope
   * child tokens. Enqueus revocation of previous previousTokens. Yes, that's
   * the correct number of "previous"es.
   * @instance
   * @memberof Credentials
   * @returns {Promise}
   */
  refresh() {
    this.logger.info(`credentials: refresh requested`);

    const supertoken = this.supertoken;
    const tokens = this.userTokens.models;

    this.userTokens.reset();
    this.unset(`supertoken`);

    // This is kind of a leaky abstraction, since it relies on the authorization
    // plugin, but the only alternatives I see are
    // 1. put all JWT support in core
    // 2. have separate jwt and non-jwt auth plugins
    // while I like #2 from a code simplicity standpoint, the third-party DX
    // isn't great
    if (this.config.jwtRefreshCallback) {
      return this.config.jwtRefreshCallback(this.spark)
        .then((jwt) => this.spark.authorization.requestAccessTokenFromJwt({jwt}));
    }


    return supertoken.refresh()
      .then(tap(() => {
        tokens.forEach((token) => {
          this.logger.info(`credentials: revoking token for ${token.scope}`);
          token.revoke();
        });
      }))
      .then((st) => {
        this.supertoken = st;
      });
  }
});

export default Credentials;
