/*!
 * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.
 */

/* eslint max-nested-callbacks: [2, 3] */
/* eslint no-console: [0] */


var btoa = require('btoa');
var bodyParser = require('body-parser');
var browserify = require('browserify-middleware');
var compression = require('compression');
var cors = require('cors');
var express = require('express');
var fs = require('fs');
var glob = require('glob');
var http = require('http');
var morgan = require('morgan');
var path = require('path');
var querystring = require('querystring');
var request = require('request');
var url = require('url');
var base64 = require('urlsafe-base64');

var app = express();

// Configure Logging
// -----------------

if (process.env.DEBUG) {
  app.use(morgan('short', {
    immediate: true
  }));
}

// Configure CORS
// --------------

app.use(cors({
  credentials: true,
  origin: function origin(o, callback) {
    callback(null, true);
  }
}));

// Configure body processing
// -------------------------

app.use(bodyParser.raw({type: 'image/*'}));

// Enable gzip/deflate
// -------------------

app.use(compression());

// Close all connections
// ---------------------

// This *should* help tests run faster in IE, which has a very low number of
// allowed connections to the same origin.
app.use(function(req, res, next) {
  res.set('connection', 'close');
  next();
});

// Configure Browserify
// --------------------

var appPattern = 'packages/node_modules/{*,*/*}/test/automation/fixtures/app.js';

glob.sync(appPattern).forEach(function(appjs) {
  var packageName = appjs
    .replace('packages/node_modules/', '')
    .replace('/test/automation/fixtures/app.js', '');

  fs.statSync(appjs);
  app.use('/' + packageName + '/app.js', browserify(appjs, {
    debug: true,
    transform: [
      'babelify',
      'envify'
    ]
  }));
});

// Enable active routes
// --------------------

app.get('/', function(req, res) {
  res.sendFile(path.join(__dirname, '/redirect.html'));
});

app.use('/cookies', require('./cookies'));
app.use('/json', require('./json'));
app.use('/form', require('./form'));
app.use('/files', require('./files'));
app.use('/jwt', require('@ciscospark/test-helper-appid').router);

app.get('/requires-basic-auth', function(req, res) {
  if (req.headers.authorization === 'Basic ' + btoa('basicuser:basicpass')) {
    res.status(200).send().end();
  }
  else {
    res.status(403).send().end();
  }
});

app.get('/requires-bearer-auth', function(req, res) {
  if (req.headers.authorization === 'Bearer bearertoken') {
    res.status(200).send().end();
  }
  else {
    res.status(403).send().end();
  }
});

app.get('/return-qs-as-object', function(req, res) {
  res.status(200).json(req.query).end();
});

app.get('/embargoed', function(req, res) {
  res.status(451).end();
});

// Enable static routes
// --------------------

var fixturePattern = 'packages/node_modules/{*,*/*}/test/automation/fixtures';


glob.sync(fixturePattern).forEach(function(fixturePath) {
  var packageName = fixturePath
    .replace('packages/node_modules/', '')
    .replace('/test/automation/fixtures', '');

  app.get('/' + packageName, function(req, res, next) {
    if (!req.query.code) {
      next();
      return;
    }

    var state = JSON.parse(base64.decode(req.query.state));
    if (state.exchange === false) {
      next();
      return;
    }

    request({
      /* eslint-disable camelcase */
      method: 'POST',
      uri: (process.env.IDBROKER_BASE_URL || 'https://idbroker.webex.com') + '/idb/oauth2/v1/access_token',
      form: {
        grant_type: 'authorization_code',
        redirect_uri: process.env.CISCOSPARK_REDIRECT_URI,
        code: req.query.code,
        self_contained_token: true
      },
      auth: {
        user: process.env.CISCOSPARK_CLIENT_ID,
        pass: process.env.CISCOSPARK_CLIENT_SECRET,
        sendImmediately: true
      }
      /* eslint-enable camelcase */
    }, function(err, response) {
      if (err) {
        console.warn('Request to CI failed with non-HTTP error');
        next(err);
        return;
      }
      if (response.statusCode >= 400) {
        console.warn('Got unexpected response from CI');
        next(new Error(response.body));
        return;
      }
      var redirect = url.parse(req.url, true);
      var qs = querystring.stringify(Object.assign({state: req.query.state}, JSON.parse(response.body)));
      redirect = redirect.pathname + '#' + qs;

      console.info('redirecting to ' + redirect);
      res.redirect(redirect);
    });
  });
  app.use('/' + packageName, express.static(fixturePath));
});

app.post('/refresh', bodyParser.json(), function(req, res, next) {
  if (!req.body.refresh_token) {
    next(new Error('`refresh_token` is required'));
    return;
  }
  console.info('Refreshing access token');
  request({
    /* eslint-disable camelcase */
    method: 'POST',
    uri: (process.env.IDBROKER_BASE_URL || 'https://idbroker.webex.com') + '/idb/oauth2/v1/access_token',
    form: {
      grant_type: 'refresh_token',
      redirect_uri: process.env.CISCOSPARK_REDIRECT_URI,
      refresh_token: req.body.refresh_token
    },
    auth: {
      user: process.env.CISCOSPARK_CLIENT_ID,
      pass: process.env.CISCOSPARK_CLIENT_SECRET,
      sendImmediately: true
    }
    /* eslint-enable camelcase */
  }, function(err, response) {
    if (err) {
      console.warn('Request to CI failed with non-HTTP error');
      next(err);
      return;
    }
    if (response.statusCode >= 400) {
      console.warn('Got unexpected response from CI');
      next(new Error(response.body));
      return;
    }

    console.info('Returning new access token');
    res.status(200).json(JSON.parse(response.body)).end();
  });
});

app.use(express.static(path.join(__dirname, 'static')));

// Start the server
// ----------------

var port = parseInt(process.env.PORT, 10) || 8000;
http.createServer(app).listen(port, function onServerStart() {
  console.log('Express server listening on port ' + port);
});

var fixtureport = parseInt(process.env.FIXTURE_PORT, 10) || 3000;
http.createServer(app).listen(fixtureport, function onServerStart() {
  console.log('Express server listening on port ' + fixtureport);
});

var corsport = parseInt(process.env.CORS_PORT, 10) || 3002;
http.createServer(app).listen(corsport, function onServerStart() {
  console.log('Express server listening on port ' + corsport);
});
