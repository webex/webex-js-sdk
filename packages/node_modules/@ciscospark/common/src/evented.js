import makeTemplateContainer from './template-container';

const data = new (makeTemplateContainer(WeakMap, Map))();

/**
 * Given a class property, this decorator changes it into a setter/getter pair;
 * the setter will trigger `change:${prop}` when invoked
 * @param {Object} target
 * @param {string} prop
 * @param {Object} descriptor
 * @returns {undefined}
 */
export default function evented(target, prop, descriptor) {
  const defaultValue = target.initializer && target.initializer();

  Reflect.deleteProperty(descriptor, `value`);
  Reflect.deleteProperty(descriptor, `initializer`);
  Reflect.deleteProperty(descriptor, `writable`);

  descriptor.get = function get() {
    const value = data.get(this, prop);
    if (value) {
      return value;
    }

    return defaultValue;
  };

  descriptor.set = function set(value) {
    const previous = this[prop];
    data.set(this, prop, value);
    this.trigger(`change:${prop}`, value, previous);
    this.trigger(`change`);
  };
}
