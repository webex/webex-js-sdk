/*!
 * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.
 */

import {assert} from '@ciscospark/test-helper-chai';
import '@ciscospark/internal-plugin-wdm';
import CiscoSpark from '@ciscospark/spark-core';
import testUsers from '@ciscospark/test-helper-test-users';

describe('internal-plugin-locus', function () {
  this.timeout(30000);
  describe('Locus', () => {
    describe('#redirect', () => {
      let spark;
      before('create users', () => testUsers.create({count: 1})
        .then((users) => {
          spark = new CiscoSpark({
            credentials: {
              authorization: users[0].token
            },
            config: {
              device: {
                preDiscoveryServices: {
                  wdmServiceUrl: 'https://wdm-intb.ciscospark.com/wdm/api/v1'
                }
              }
            }
          });
        }));

      it('successfully redirects GET requests on /meetinginfo', () => {
        const uri = 'https://locus-intb.ciscospark.com/locus/api/v1/loci/meetingInfo/sip:test-sdk_ci@meet-fed.webex.com?type=SIP_URI&alternateRedirect=true';
        return spark.request({
          uri,
          method: 'GET',
          headers: {
            authorization: `Bearer ${spark.credentials.supertoken.access_token}`
          }
        })
          .then((res) => {
            assert.isDefined(res.body.locusUrl);
            assert.notEqual(res.body.locusUrl, uri);
            assert.equal(res.statusCode, 200);
            assert.isAbove(res.options.$redirectCount, 0); // proves redirection
          });
      });

      it('successfully redirects POST requests on /loci', () => {
        const uri = 'https://locus-intb.ciscospark.com/locus/api/v1/loci/call';
        return spark.internal.device.register()
          .then(() => spark.request({
            uri,
            method: 'POST',
            headers: {
              authorization: `Bearer ${spark.credentials.supertoken.access_token}`
            },
            qs: {alternateRedirect: true},
            body: {
              deviceUrl: spark.internal.device.url,
              invitee: {
                address: 'test@meet-fed.webex.com'
              }
            }
          })
            // goes into catch since meeting is not hosted on the new test url
            .catch((err) => {
              assert.isDefined(err.options.uri);
              assert.notEqual(err.options.uri, uri);
              assert.isAbove(err.options.$redirectCount, 0); // proves redirection
            }));
      });

      // The below tests is required and can be enabled later after discussion
      // with Sambit Mishra. Currently the backend team discovered a bug after
      // running this test which requires a fix in their code.
      // it('successfully redirects GET requests on /participant', () => {
      //   const uri = 'https://locus-intb.ciscospark.com/locus/api/v1/loci/meetingInfo/sip:test-sdk_ci@meet-fed.webex.com?type=SIP_URI&alternateRedirect=true';
      //   return spark.internal.device.register()
      //     .then(() => {
      //       return spark.request({
      //         uri,
      //         method: 'GET',
      //         headers: {
      //           authorization: `Bearer ${spark.credentials.supertoken.access_token}`
      //         }
      //       })
      //     })
      //     .then((res) => {
      //       assert.isDefined(res.body.locusUrl);
      //       assert.notEqual(res.body.locusUrl, uri);
      //       assert.equal(res.statusCode, 200);
      //       assert.isAbove(res.options.$redirectCount, 0); // proves redirection
      //       // change it to intb1 otherwise it won't test the actual redirect
      //       const uri = res.body.locusUrl.replace('intb2', 'intb1') + '/participant';
      //       return spark.request({
      //         uri,
      //         method: 'POST',
      //         headers: {
      //           authorization: `Bearer ${spark.credentials.supertoken.access_token}`
      //         },
      //         qs: {alternateRedirect: true},
      //         body: {
      //           deviceUrl: spark.internal.device.url,
      //           invitee: {
      //             address: 'test@meet-fed.webex.com'
      //           }
      //         }
      //       })
      //     })
      //     .then((res) => {
      //       console.log('final res=', res);
      //     })
      // })
    });
  });
});
