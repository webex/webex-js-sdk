/*!
 * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.
 */

/* eslint camelcase: [0] */

import querystring from 'querystring';
import url from 'url';
import {base64, oneFlight, whileInFlight} from '@ciscospark/common';
import {grantErrors, SparkPlugin} from '@ciscospark/spark-core';
import {cloneDeep, isEmpty, omit} from 'lodash';
import uuid from 'uuid';

const OAUTH2_CSRF_TOKEN = `oauth2-csrf-token`;

/**
 * Browser support for OAuth2. Automatically parses the URL query for an
 * authorization code
 * @class
 * @variation 3
 */
const Authorization = SparkPlugin.extend({
  derived: {
    /**
     * Alias of {@link Authorization(4)#isAuthorizing}
     * @instance
     * @memberof Authorization(4)
     * @type {boolean}
     */
    isAuthenticating: {
      deps: [`isAuthorizing`],
      fn() {
        return this.isAuthorizing;
      }
    }
  },

  session: {
    /**
     * Indicates if an Authorization Code exchange is inflight
     * @instance
     * @memberof Authorization(4)
     * @type {boolean}
     */
    isAuthorizing: {
      default: false,
      type: `boolean`
    },
    ready: {
      default: false,
      type: `boolean`
    }
  },

  namespace: `Credentials`,

  /**
   * Initializer
   * @instance
   * @memberof Authorization(4)
   * @private
   * @returns {Authorization}
   */
  // eslint-disable-next-line complexity
  initialize(...attrs) {
    const ret = Reflect.apply(SparkPlugin.prototype.initialize, this, attrs);
    const location = url.parse(this.spark.getWindow().location.href, true);
    this._checkForErrors(location);

    const code = location.query.code;
    if (!code) {
      this.ready = true;
      return ret;
    }

    if (location.query.state) {
      location.query.state = JSON.parse(base64.decode(location.query.state));
    }
    this._verifySecurityToken(location.query);
    this._cleanUrl(location);

    // Wait until nextTick in case `credentials` hasn't initialized yet
    process.nextTick(() => {
      this.requestAuthorizationCodeGrant({code})
        .then(() => {
          this.ready = true;
        });
    });


    return ret;
  },

  /**
   * Kicks off an oauth flow
   * @instance
   * @memberof Authorization(4)
   * @param {Object} options
   * @returns {Promise}
   */
  initiateLogin(options = {}) {
    options.state = options.state || {};
    options.state.csrf_token = this._generateSecurityToken();
    return this.initiateAuthorizationCodeGrant(options);
  },

  @whileInFlight(`isAuthorizing`)
  /**
   * Kicks off the Implicit Code grant flow. Typically called via
   * {@link Authorization(4)#initiateLogin}
   * @instance
   * @memberof Authorization(4)
   * @param {Object} options
   * @returns {Promise}
   */
  initiateAuthorizationCodeGrant(options) {
    this.logger.info(`authorization: initiating authorization code grant flow`);
    this.spark.getWindow().location = this.spark.credentials.buildLoginUrl(Object.assign({response_type: `code`}, options));
    return Promise.resolve();
  },

  /**
   * Called by {@link SparkCore#logout()}. Redirects to the logout page
   * @instance
   * @memberof Authorization(4)
   * @param {Object} options
   * @param {boolean} options.noRedirect if true, does not redirect
   * @returns {Promise}
   */
  logout(options = {}) {
    if (!options.noRedirect) {
      this.spark.getWindow().location = this.spark.credentials.buildLogoutUrl(options);
    }
  },


  @whileInFlight(`isAuthorizing`)
  @oneFlight
  /**
   * Exchanges an authorization code for an access token
   * @instance
   * @memberof Authorization(4)
   * @param {Object} options
   * @param {Object} options.code
   * @returns {Promise}
   */
  requestAuthorizationCodeGrant(options = {}) {
    this.logger.info(`credentials: requesting authorization code grant`);

    if (!options.code) {
      return Promise.reject(new Error(`\`options.code\` is required`));
    }

    return this.spark.request({
      method: `POST`,
      uri: this.config.tokenUrl,
      form: {
        grant_type: `authorization_code`,
        redirect_uri: this.config.redirect_uri,
        code: options.code,
        self_contained_token: true
      },
      auth: {
        user: this.config.client_id,
        pass: this.config.client_secret,
        sendImmediately: true
      },
      shouldRefreshAccessToken: false
    })
      .then((res) => {
        this.spark.credentials.set({supertoken: res.body});
      })
      .catch((res) => {
        if (res.statusCode !== 400) {
          return Promise.reject(res);
        }

        const ErrorConstructor = grantErrors.select(res.body.error);
        return Promise.reject(new ErrorConstructor(res._res || res));
      });
  },

  /**
   * Checks if the result of the login redirect contains an error string
   * @instance
   * @memberof Authorization(4)
   * @param {Object} location
   * @private
   * @returns {Promise}
   */
  _checkForErrors(location) {
    const query = location.query;
    if (query && query.error) {
      const ErrorConstructor = grantErrors.select(query.error);
      throw new ErrorConstructor(query);
    }
  },

  /**
   * Removes no-longer needed values from the url (access token, csrf token, etc)
   * @instance
   * @memberof Authorization(4)
   * @param {Object} location
   * @private
   * @returns {Promise}
   */
  _cleanUrl(location) {
    location = cloneDeep(location);
    if (this.spark.getWindow().history && this.spark.getWindow().history.replaceState) {
      Reflect.deleteProperty(location.query, `code`);
      if (isEmpty(omit(location.query.state, `csrf_token`))) {
        Reflect.deleteProperty(location.query, `state`);
      }
      else {
        location.query.state = base64.encode(JSON.stringify(omit(location.query.state, `csrf_token`)));
      }
      location.search = querystring.stringify(location.query);
      Reflect.deleteProperty(location, `query`);
      this.spark.getWindow().history.replaceState({}, null, url.format(location));
    }
  },

  /**
   * Generates a CSRF token and sticks in in sessionStorage
   * @instance
   * @memberof Authorization(4)
   * @private
   * @returns {Promise}
   */
  _generateSecurityToken() {
    this.logger.info(`authorization: generating csrf token`);

    const token = uuid.v4();
    this.spark.getWindow().sessionStorage.setItem(`oauth2-csrf-token`, token);
    return token;
  },

  /**
   * Checks if the CSRF token in sessionStorage is the same as the one returned
   * in the url.
   * @instance
   * @memberof Authorization(4)
   * @param {Object} query
   * @private
   * @returns {Promise}
   */
  _verifySecurityToken(query) {
    const sessionToken = this.spark.getWindow().sessionStorage.getItem(OAUTH2_CSRF_TOKEN);
    this.spark.getWindow().sessionStorage.removeItem(OAUTH2_CSRF_TOKEN);
    if (!sessionToken) {
      return;
    }

    if (!query.state) {
      throw new Error(`Expected CSRF token ${sessionToken}, but not found in redirect query`);
    }

    if (!query.state.csrf_token) {
      throw new Error(`Expected CSRF token ${sessionToken}, but not found in redirect query`);
    }

    const token = query.state.csrf_token;

    if (token !== sessionToken) {
      throw new Error(`CSRF token ${token} does not match stored token ${sessionToken}`);
    }
  }
});

export default Authorization;
