/*!
 * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.
 */

// require(`babel-polyfill`);
const mkdirp = require(`mkdirp`);
const {dotSauce, logFile, pidFile, readyFile} = require(`./lib/paths`);
const exists = require(`./lib/exists`);
const spawn = require(`./lib/spawn`);
const rm = require(`./lib/rm`);

const SAUCE_CONNECT_VERSION = `4.4.2`;

if (exists(pidFile)) {
  console.log(`Sauce Connect already connected`);
  process.exit(0);
}

checkRequiredEnvironment([
  `SAUCE_USERNAME`,
  `SAUCE_ACCESS_KEY`,
  `SC_TUNNEL_IDENTIFIER`
]);

Promise.resolve()
  .then(downloadSauceConnect)
  .then(() => spawn(`rm`, [`-f`, logFile]))
  .then(connectWithRetry)
  .catch((reason) => {
    console.error(reason.stack);
    process.exit(1);
  });

/**
 * Asserts that the specified array of names are defined on `process.env`
 * @param {Array<string>} vars
 * @private
 * @returns {undefined}
 * @throws Error
 */
function checkRequiredEnvironment(vars) {
  vars.forEach((key) => {
    if (!process.env[key]) {
      throw new Error(`\`${key}\` is required`);
    }
  });
}

/**
 * Connect to Sauce Labs
 * @private
 * @returns {Promise}
 */
function connect() {
  return new Promise((resolve, reject) => {
    const options = {
      stdio: `ignore`,
      detached: true
    };

    // eslint-disable-next-line prefer-const
    let interval;
    // cancel the connect process if the ready file hasn't been detected within
    // 60 seconds
    const timer = setTimeout(() => {
      clearInterval(interval);
      if (!exists(readyFile)) {
        console.log(`Failed to connect to Sauce Labs`);
        options.child.kill();
        return reject();
      }
      return resolve();
    }, 60 * 1000);

    // Check for the ready file once per second forever until it exists
    interval = setInterval(() => {
      if (exists(readyFile)) {
        console.log(`Connected to Sauce Labs`);
        clearTimeout(timer);
        clearInterval(interval);
        resolve();
      }
    }, 1000);

    spawn(`sc/bin/sc`, [
      `-B`, [
        `mercury-connection-intb.ciscospark.com`,
        `idbroker.webex.com`,
        `127.0.0.1`,
        `localhost`,
        `*.wbx2.com`,
        `*.ciscospark.com`
      ].join(`,`),
      `-t`, [
        `whistler.onint.ciscospark.com`,
        `internal-testing-services.wbx2.com`,
        `calendar-whistler.onint.ciscospark.com`,
        `127.0.0.1`,
        `localhost`
      ].join(`,`),
      `-vv`,
      `-l`, `${logFile}`,
      `--pidfile`, pidFile,
      `--readyfile`, readyFile,
      `--tunnel-identifier`, process.env.SC_TUNNEL_IDENTIFIER
    ], options)
      .catch(reject);
  });
}

/**
 * Prevents the next connection attempt until the pid file from the previous
 * attempt disappears (or the tiemout expires and we remove it forcibly)
 * @returns {Promise}
 */
function blockUntilClosed() {
  return new Promise((resolve) => {
    // eslint-disable-next-line prefer-const
    let interval;
    const timer = setTimeout(() => {
      clearInterval(interval);
      if (exists(pidFile)) {
        console.log(`pid file not removed; forcibly removing`);
        rm(pidFile);
        resolve();
      }
    }, 60 * 1000);

    interval = setInterval(() => {
      if (!exists(pidFile)) {
        clearTimeout(timer);
        clearInterval(interval);
        resolve();
      }
    }, 1000);
  });
}

/**
 * Connect to Sauce Labs with up to three attempts
 * @private
 * @returns {Promise}
 */
function connectWithRetry() {
  return connect()
    .catch(() => {
      console.warn(`Timed out connecting to Sauce Labs, retrying`);
      return blockUntilClosed().then(connect);
    })
    .catch(() => {
      console.warn(`Timed out connecting to Sauce Labs, retrying`);
      return blockUntilClosed().then(connect);
    })
    .catch(() => {
      console.error(`Failed to connect to Sauce Labs after three attempts, aborting`);
      process.exit(2);
    });
}

/**
 * Download the Sauce Connect binary
 * @private
 * @returns {Promise}
 */
function downloadSauceConnect() {
  mkdirp.sync(dotSauce);
  process.chdir(dotSauce);
  if (exists(`sc`)) {
    return Promise.resolve();
  }
  const scBasename = `sc-${SAUCE_CONNECT_VERSION}-${process.platform === `darwin` ? `osx` : `linux`}`;
  const scPackage = `${scBasename}${process.platform === `darwin` ? `.zip` : `.tar.gz`}`;
  const scUrl = `https://saucelabs.com/downloads/${scPackage}`;
  return spawn(`curl`, [`-o`, scPackage, scUrl])
    .then(() => {
      if (process.platform === `darwin`) {
        return spawn(`unzip`, [scPackage]);
      }

      return spawn(`tar`, [`-xf`, scPackage]);

    })
    .then(() => spawn(`mv`, [scBasename, `sc`]));
}
