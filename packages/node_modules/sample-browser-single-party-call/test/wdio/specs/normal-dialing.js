import testUsers from '@ciscospark/test-helper-test-users';
import setValue from '../lib/set-value';

describe(`sample-browser-single-party-call`, () => {

  describe(`normal dialing`, () => {
    let mccoy, spock;

    const browserSpock = browser.select(`browserSpock`);
    const browserMccoy = browser.select(`browserMccoy`);

    before(`create test users`, () => testUsers.create({count: 2})
      .then((users) => {
        spock = users[0];
        mccoy = users[1];
      }));

    step(`loads the app`, () => {
      browser.url(`/packages/node_modules/sample-browser-single-party-call?usefakemedia`);
    });

    step(`connects mccoy's browser`, () => {
      browserMccoy.waitUntil(() => browserMccoy.getTitle() === `Sample: Single Party Calling`);
      browserMccoy.execute(setValue, `[placeholder="Your access token"]`, mccoy.token.access_token);
      browserMccoy.click(`[title="connect"]`);
      browserMccoy.waitForExist(`.listening`);
    });

    step(`connects spock's browser`, () => {
      browserSpock.waitUntil(() => browserSpock.getTitle() === `Sample: Single Party Calling`);
      browserSpock.execute(setValue, `[placeholder="Your access token"]`, spock.token.access_token);
      browserSpock.click(`[title="connect"]`);
      browserSpock.waitForExist(`.listening`);
    });

    step(`places call from spock to mccoy`, () => {
      browserSpock.setValue(`[placeholder="Person ID or Email Address or SIP Uri or Room ID"]`, mccoy.emailAddress);
      browserSpock.click(`[title="dial"]`);

      browserMccoy.waitUntil(() => {
        try {
          browserMccoy.alertAccept();
          return true;
        }
        catch (err) {
          return false;
        }
      });
    });

    step(`ends the call`, () => {
      browser.pause(5000);
      // TODO add assertions around streams

      browserSpock.click(`[title="hangup"]`);
    });
  });
});
