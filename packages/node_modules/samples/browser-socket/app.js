/* eslint-env browser */

/* global ciscospark */

/* eslint-disable camelcase */
/* eslint-disable max-nested-callbacks */
/* eslint-disable no-alert */
/* eslint-disable no-console */
/* eslint-disable require-jsdoc */

// Declare some globals that we'll need throughout.
let webex;

// Save fields in localStorage so we don't have to retype them
// every time we reload the page.
[
  'access-token'
].forEach((id) => {
  const el = document.getElementById(id);
  el.value = localStorage.getItem(id);
  el.addEventListener('change', (event) => {
    localStorage.setItem(id, event.target.value);
  });
});

// Connect to Webex Teams and listen for message events.
function connect() {
  if (!webex) {
    webex = ciscospark.init({
      config: {

      },
      credentials: {
        access_token: document.getElementById('access-token').value
      }
    });
  }

  // Update the UI.
  const status = document.getElementById('connection-status');
  status.innerHTML = 'initialized';
  status.classList.remove('label-warning');
  status.classList.add('label-success');
  document.getElementById('connect').disabled = true;

  // Listen for events.
  webex.once('ready', () => {
    console.debug('ready from webex.once');
    webex.messages.listen().then(() => {
      webex.messages.on('messages:created', (message) => {
        console.debug('webex.messages.on', message);
      });
    });
  });

  return Promise.resolve();
}

document.getElementById('credentials').addEventListener('submit', (event) => {
  // Don't reload the page when we submit the form.
  event.preventDefault();
  connect();
});
