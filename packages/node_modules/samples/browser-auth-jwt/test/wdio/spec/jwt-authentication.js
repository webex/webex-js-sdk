import {createUser} from '@webex/test-helper-appid';
import uuid from 'uuid';
import {expect} from 'chai';

describe('samples', () => {
  describe('browser-auth-jwt', () => {
    describe('authenticate using jwt', () => {
      let spockJwt;

      before('creates spock jwt', () => createUser({displayName: `test-${uuid.v4()}`})
        .then(({jwt}) => {
          spockJwt = jwt;
        }));

      before('reload browser', () => {
        browser.refresh();
      });

      it('browses to sample app and verifies the user is not authenticated', () => {
        browser.url('/browser-auth-jwt');
        browser.waitForExist('[placeholder="JSON Web Token"]');

        expect(browser.select('browserFirefox').getText('#authentication-status')).to.equal('Not Authenticated');
        expect(browser.select('browserChrome').getText('#authentication-status')).to.equal('Not Authenticated');
      });

      describe('initiates jwt authentication', () => {
        before(() => browser.setValue('[placeholder="JSON Web Token"]', spockJwt));

        it('in Firefox', () => {
          const browserFirefox = browser.select('browserFirefox');

          browserFirefox.click('[title="authenticate"]');

          browserFirefox.pause(10000);

          browserFirefox.waitUntil(
            () => browserFirefox.getText('#authentication-status') === 'Authenticated',
            10000,
            'expected authentication status to be Authenticated in browserFirefox'
          );

          expect(browserFirefox.getText('#authentication-status')).to.equal('Authenticated');
        });

        it('in Chrome', () => {
          const browserChrome = browser.select('browserChrome');

          browserChrome.click('[title="authenticate"]');

          browserChrome.pause(10000);

          browserChrome.waitUntil(
            () => browserChrome.getText('#authentication-status') === 'Authenticated',
            10000,
            'expected authentication status to be Authenticated in browserChrome'
          );

          expect(browserChrome.getText('#authentication-status')).to.equal('Authenticated');
        });
      });
    });
  });
});
