/* eslint-disable no-warning-comments */

import '@webex/internal-plugin-device';

import WebexCore from '@webex/webex-core';
import testUsers from '@webex/test-helper-test-users';
import {expect} from 'chai';

describe('sample', () => {
  describe('browser-multi-party-call', () => {
    describe('normal dialing', () => {
      let mccoy, roomId, spock;

      const browserFirefox = browser.select('browserFirefox');
      const browserChrome = browser.select('browserChrome');

      before('reload browser', () => {
        browser.refresh();
      });

      before('create test users', () => testUsers.create({count: 2})
        .then((users) => {
          [spock, mccoy] = users;

          // Adding pause to let test users propagate through integration
          browser.pause(2500);

          spock.webex = new WebexCore({
            credentials: {
              authorization: spock.token
            }
          });

          return spock.webex.internal.device.register();
        }));

      before('create test room and add members to room', () => spock.webex.request({
        method: 'POST',
        service: 'hydra',
        resource: 'rooms',
        body: {
          title: 'Call Test'
        }
      })
        .then((res) => {
          const room = res.body;

          roomId = room.id;

          return spock.webex.request({
            method: 'POST',
            service: 'hydra',
            resource: 'memberships',
            body: {
              roomId: room.id,
              personId: mccoy.id
            }
          });
        })
        .then(() => spock.webex.internal.device.unregister()));

      it('loads the app', () => {
        browser.url('/browser-multi-party-call/');
      });

      it('connects mccoy\'s browser', () => {
        expect(browserChrome.getTitle()).to.equal('Sample: Multi Party Calling');
        browserChrome.setValue('[placeholder="Your access token"]', mccoy.token.access_token);
        browserChrome.click('[title="connect"]');
        browserChrome.waitForExist('.listening');
      });

      it('connects spock\'s browser', () => {
        expect(browserFirefox.getTitle()).to.equal('Sample: Multi Party Calling');
        browserFirefox.setValue('[placeholder="Your access token"]', spock.token.access_token);
        browserFirefox.click('[title="connect"]');
        browserFirefox.waitForExist('.listening');
      });

      it('places call from spock to shared room', () => {
        browserFirefox.setValue('[placeholder="Room ID or SIP URI"]', roomId);
        browserFirefox.click('[title="dial"]');
        browserFirefox.waitForExist(`#member-status-${spock.id}`, 5000);
        browserFirefox.waitUntil(() => (browserFirefox.getText(`#member-status-${spock.id}`) === 'IN_MEETING'), 10000, `Timed-out waiting for local user (${spock.id}) to connect to meeting`);
      });

      it('joins the call on mccoy', () => {
        browserChrome.waitUntil(() => {
          try {
            const alerttext = browserChrome.alertText();

            return alerttext === 'Answer incoming call';
          }
          catch (error) {
            // Error is thrown when alert isn't open which is fine
            return false;
          }
        }, 10000, 'Timed out waiting for incoming call alert');
        browserChrome.alertAccept();
      });

      it('ends the call', () => {
        browserFirefox.waitUntil(() => (browserFirefox.getText(`#member-status-${mccoy.id}`) === 'IN_MEETING'), 10000, 'Timed-out waiting for remote user to connect to meeting');
        browserFirefox.click('[title="hangup"]');
        browserFirefox.waitUntil(() => (browserFirefox.getText(`#member-status-${spock.id}`) === 'NOT_IN_MEETING'), 10000, 'Timed-out waiting for local user to disconnect from meeting');
      });
    });
  });
});
