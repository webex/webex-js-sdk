import testUsers from '@ciscospark/test-helper-test-users';
import {assert} from '@ciscospark/test-helper-chai';

import setValue from '../lib/set-value';

const noStreamText = '{\n  "local": null,\n  "remote": null\n}';

/**
 * Helper function. To be moved into a common tools location in the near future.
 * @param {Browser} browser
 * @param {string} selector
 * @param {string} value
 * @param {boolean} [reverse=false]
 * @returns {undefined}
 */
function waitForSpecificText(browser, selector, value, reverse = false) {
  if (reverse) {
    browser.waitUntil(() => browser.getText(selector) !== value, `$('${selector}') did not change from ${value} within the expected timeout`);
  }
  else {
    browser.waitUntil(() => browser.getText(selector) === value, `$('${selector}') did not equal ${value} within the expected timeout`);
  }
}

describe('samples/browser-single-party-call', () => {
  describe('normal dialing', () => {
    let mccoy, spock;

    const browserSpock = browser.select('browserSpock');
    const browserMccoy = browser.select('browserMccoy');

    before('create test users', () => testUsers.create({count: 2})
      .then((users) => {
        spock = users[0];
        mccoy = users[1];
      }));

    before('reload browser', () => browser.refresh());


    it('loads the app', () => {
      browser.url('/browser-single-party-call-with-mute');
    });

    it('connects mccoy\'s browser', () => {
      browserMccoy.waitUntil(() => browserMccoy.getTitle() === 'Sample: Local Mute/Unmute');
      browserMccoy.execute(setValue, '[placeholder="Your access token"]', mccoy.token.access_token);
      assert.equal(browserMccoy.getValue('[placeholder="Your access token"]'), mccoy.token.access_token);
      browserMccoy.click('[title="connect"]');
      browserMccoy.waitForExist('.listening');
    });

    it('connects spock\'s browser', () => {
      browserSpock.waitUntil(() => browserSpock.getTitle() === 'Sample: Local Mute/Unmute');
      browserSpock.execute(setValue, '[placeholder="Your access token"]', spock.token.access_token);
      assert.equal(browserSpock.getValue('[placeholder="Your access token"]'), spock.token.access_token);
      browserSpock.click('[title="connect"]');
      browserSpock.waitForExist('.listening');
    });

    it('places call from spock to mccoy', () => {
      browserSpock.setValue('[placeholder="Person ID or Email Address or SIP Uri or Room ID"]', mccoy.emailAddress);
      browserSpock.click('[title="dial"]');

      browserMccoy.waitUntil(() => {
        try {
          browserMccoy.alertAccept();
          return true;
        }
        catch (err) {
          return false;
        }
      });
    });

    it('turns the local camera off', () => {
      assert.notEqual(browserSpock.getText('#outgoing-video-stats'), noStreamText);
      browserSpock.click('[title="stop sending video"]');
      waitForSpecificText(browserSpock, '#outgoing-video-stats', noStreamText);
    });

    it('turns the local camera back on', () => {
      assert.equal(browserSpock.getText('#outgoing-video-stats'), noStreamText);
      browserSpock.click('[title="start sending video"]');
      waitForSpecificText(browserSpock, '#outgoing-video-stats', noStreamText, true);
    });

    it('ends the call', () => {
      browser.pause(5000);
      // TODO add assertions around streams

      browserSpock.click('[title="hangup"]');
    });
  });
});
