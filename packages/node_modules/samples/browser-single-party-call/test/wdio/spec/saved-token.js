import {assert} from 'chai';

describe('samples/browser-single-party-call', () => {
  // the inner-most function is executed in the window environment
  // eslint-disable-next-line no-undef
  before(() => browser.refresh());

  describe('saved values', () => {
    it('stores form values across page loads', () => {
      browser.select('browserSpock').url('/browser-single-party-call');
      browser.select('browserSpock').waitUntil(() => !browser.select('browserSpock').getTitle().match(/localhost/));
      assert.equal(browser.select('browserSpock').getTitle(), 'Sample: Single Party Calling');

      browser.select('browserSpock').setValue('#access-token', 1);
      browser.select('browserSpock').setValue('#invitee', 2);

      // need to deselect the #invitee input to fire the change event
      browser.select('browserSpock').click('body');

      browser.select('browserSpock').url('/browser-single-party-call');

      browser.select('browserSpock').waitUntil(() => !browser.select('browserSpock').getTitle().match(/localhost/));
      assert.equal(browser.select('browserSpock').getTitle(), 'Sample: Single Party Calling');

      browser.select('browserSpock').waitUntil(() => browser.select('browserSpock').getTitle() === 'Sample: Single Party Calling');

      assert.equal(browser.select('browserSpock').getValue('#access-token'), 1);
      assert.equal(browser.select('browserSpock').getValue('#invitee'), 2);
    });
  });
});
