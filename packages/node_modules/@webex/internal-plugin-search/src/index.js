/*!
 * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.
 */

import {registerInternalPlugin} from '@webex/webex-core';
import Search from './search';
import config from './config';
import {has} from 'lodash';

import '@webex/internal-plugin-encryption';

registerInternalPlugin('search', Search, {
  config,
  payloadTransformer: {
    predicates: [
      {
        name: 'encryptSearchQuery',
        direction: 'outbound',
        test(ctx, options) {
          if (!has(options, 'body.query')) {
            return Promise.resolve(false);
          }

          if (!has(options, 'body.searchEncryptionKeyUrl')) {
            return Promise.resolve(false);
          }

          return ctx.webex.internal.device.isSpecificService('argonaut', options.service || options.url);
        },
        extract(options) {
          return Promise.resolve(options.body);
        }
      },
      {
        name: 'transformObjectArray',
        direction: 'inbound',
        test(ctx, response) {
          return Promise.resolve(has(response, 'body.activities.items[0].objectType'))
            .then((res) => res && ctx.webex.internal.device.isSpecificService('argonaut', response.options.service || response.options.uri));
        },
        extract(response) {
          return Promise.resolve(response.body.activities.items);
        }
      }
    ],
    transforms: [
      {
        name: 'encryptSearchQuery',
        direction: 'outbound',
        fn(ctx, object) {
          return ctx.webex.internal.encryption.encryptText(object.searchEncryptionKeyUrl, object.query)
            .then((q) => {
              object.query = q;
            });
        }
      }
    ]
  }
});

export {default} from './search';
