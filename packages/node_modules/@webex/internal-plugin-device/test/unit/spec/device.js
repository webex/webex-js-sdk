import {assert} from '@webex/test-helper-chai';
import {cloneDeep} from 'lodash';
import Device from '@webex/internal-plugin-device';
import MockWebex from '@webex/test-helper-mock-webex';
import sinon from 'sinon';

import dto from './wdm-dto';

describe('plugin-device', () => {
  describe('Device', () => {
    let webex;
    let device;

    beforeEach('initialize webex with the device plugin', () => {
      webex = new MockWebex({
        children: {
          device: Device
        }
      });

      const clonedDTO = cloneDeep(dto);

      webex.internal.device.set(clonedDTO);

      device = webex.internal.device;
    });

    describe('events', () => {
      describe('when a feature is changed', () => {
        let spy;
        let modifiedDTOFeatures;

        beforeEach('setup sinon', () => {
          spy = sinon.spy();
          modifiedDTOFeatures = {
            ...dto.features,
            user: [
              ...dto.features.user,
              ...dto.features.developer
            ]
          };
        });

        it('should trigger a \'change\' event', () => {
          device.on('change', spy);
          device.features.set(modifiedDTOFeatures);
          assert.called(spy);
        });

        it('should trigger a \'change:features\' event', () => {
          device.on('change:features', spy);
          device.features.set(modifiedDTOFeatures);
          assert.called(spy);
        });
      });

      describe('when an network inactivity property changes', () => {
        beforeEach('setup sinon', () => {
          device.checkNetworkReachability = sinon.spy();
        });

        describe('when the \'intranetInactivityCheckUrl\' changes', () => {
          beforeEach('change \'intranetInactivityCheckUrl\'', () => {
            device.intranetInactivityCheckUrl = 'https://not-a-url.com';
          });

          it('should call \'checkNetworkReachability()\'', () => {
            assert.called(device.checkNetworkReachability);
          });
        });

        describe('when the \'intranetInactivityDuration\' changes', () => {
          beforeEach('change \'intranetInactivityDuration\'', () => {
            device.intranetInactivityDuration = 1234;
          });

          it('should call \'checkNetworkReachability()\'', () => {
            assert.called(device.checkNetworkReachability);
          });
        });

        describe('when the \'inNetworkInactivityDuration\' changes', () => {
          beforeEach('change \'inNetworkInactivityDuration\'', () => {
            device.inNetworkInactivityDuration = 1234;
          });

          it('should call \'checkNetworkReachability()\'', () => {
            assert.called(device.checkNetworkReachability);
          });
        });
      });
    });

    describe('derived properties', () => {
      describe('#registered', () => {
        describe('when the device does not have a url', () => {
          beforeEach('remove the device\'s url', () => {
            device.url = undefined;
          });

          it('should return false', () => {
            assert.isFalse(device.registered);
          });
        });

        describe('when the device does have a url', () => {
          beforeEach('set the device\'s url', () => {
            device.url = dto.url;
          });

          it('should return true', () => {
            assert.isTrue(device.registered);
          });
        });
      });
    });

    describe('#setLogoutTimer()', () => {
      describe('when the duration parameter is not set', () => {
        it('should not change the existing timer', () => {
          const {logoutTimer} = device;

          device.setLogoutTimer();
          assert.equal(device.logoutTimer, logoutTimer);
        });
      });

      describe('when the duration parameter is zero or negative', () => {
        it('should not change the existing timer', () => {
          const {logoutTimer} = device;

          device.setLogoutTimer(-1);
          assert.equal(device.logoutTimer, logoutTimer);
        });
      });

      describe('when the duration is valid', () => {
        beforeEach(() => {
          device.resetLogoutTimer = sinon.spy();
        });

        it('should create a \'change:lastUserActivityDate\' listener', () => {
          device.setLogoutTimer(60000);
          device.trigger('change:lastUserActivityDate');
          assert.called(device.resetLogoutTimer);
        });

        it('should set the logout timer', () => {
          const {logoutTimer} = device;

          device.setLogoutTimer(60000);
          assert.notEqual(device.logoutTimer, logoutTimer);
        });
      });
    });

    describe('#serialize()', () => {
      it('should serialize entitlement feature keys', () => {
        assert.hasAllKeys(
          device.serialize().features.entitlement,
          Object.keys(dto.features.entitlement)
        );
      });

      it('should serialize user feature keys', () => {
        assert.hasAllKeys(
          device.serialize().features.user,
          Object.keys(dto.features.user)
        );
      });
    });
  });
});
