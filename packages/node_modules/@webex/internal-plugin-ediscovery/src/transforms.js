import {requestWithRetries} from './retry';

class Transforms {
  static encryptReportRequest(ctx, object) {
    if (!object || !object.body) {
      return Promise.resolve(object);
    }
    const reportRequest = object.body;

    return ctx.webex.internal.encryption.kms.createUnboundKeys({count: 1})
      .then((keys) => {
        if (keys && keys.length > 0 && keys[0]) {
          reportRequest.encryptionKeyUrl = keys[0].uri;

          return ctx.webex.internal.encryption.kms.createResource({userIds: [keys[0].userId], keys})
            .then(() => {
              const promises = [];

              if (reportRequest.name) {
                promises.push(
                  ctx.webex.internal.encryption.encryptText(keys[0], reportRequest.name)
                    .then((encryptedName) => {
                      reportRequest.name = encryptedName;
                    })
                );
              }

              if (reportRequest.description) {
                promises.push(
                  ctx.webex.internal.encryption.encryptText(keys[0], reportRequest.description)
                    .then((encryptedDescription) => {
                      reportRequest.description = encryptedDescription;
                    })
                );
              }

              if (reportRequest.spaceNames) {
                promises.push(
                  Promise.all(reportRequest.spaceNames.map((spaceName) => ctx.webex.internal.encryption.encryptText(keys[0], spaceName)))
                    .then((encryptedSpaceNames) => {
                      reportRequest.spaceNames = encryptedSpaceNames;
                    })
                );
              }

              if (reportRequest.keywords) {
                promises.push(
                  Promise.all(reportRequest.keywords.map((keyword) => ctx.webex.internal.encryption.encryptText(keys[0], keyword)))
                    .then((encryptedKeywords) => {
                      reportRequest.keywords = encryptedKeywords;
                    })
                );
              }

              if (reportRequest.emails) {
                // store unencrypted emails for ediscovery service to convert to user ids
                reportRequest.unencryptedEmails = reportRequest.emails;
                promises.push(
                  Promise.all(reportRequest.emails.map((email) => ctx.webex.internal.encryption.encryptText(keys[0], email)))
                    .then((encryptedEmails) => {
                      reportRequest.emails = encryptedEmails;
                    })
                );
              }

              return Promise.all(promises);
            });
        }

        return Promise.resolve(object);
      })
      .catch((reason) => {
        ctx.webex.logger.error(`Error while encrypting report request: ${reportRequest} : ${reason}`);

        return Promise.reject(reason);
      });
  }

  static decryptReportRequest(ctx, object) {
    if (!object || !object.body || !object.body.reportRequest || !object.body.reportRequest.encryptionKeyUrl) {
      return Promise.resolve(object);
    }
    const {reportRequest} = object.body;

    let reportNamePromise;

    if (reportRequest.name) {
      reportNamePromise = ctx.webex.internal.encryption.decryptText(reportRequest.encryptionKeyUrl, reportRequest.name)
        .then((decryptedName) => {
          reportRequest.name = decryptedName;
        })
        .catch((reason) => {
          ctx.webex.logger.error(`Error decrypting report name for report ${object.body.id}: ${reason}`);
        });
    }

    let reportDescriptionPromise;

    if (reportRequest.description) {
      reportDescriptionPromise = ctx.webex.internal.encryption.decryptText(reportRequest.encryptionKeyUrl, reportRequest.description)
        .then((decryptedDescription) => {
          reportRequest.description = decryptedDescription;
        })
        .catch((reason) => {
          ctx.webex.logger.error(`Error decrypting description for report ${object.body.id}: ${reason}`);
        });
    }

    let spaceNamePromises = [];

    if (reportRequest.spaceNames) {
      spaceNamePromises = Promise.all(reportRequest.spaceNames.map((spaceName) => ctx.webex.internal.encryption.decryptText(reportRequest.encryptionKeyUrl, spaceName)))
        .then((decryptedSpaceNames) => {
          reportRequest.spaceNames = decryptedSpaceNames;
        })
        .catch((reason) => {
          ctx.webex.logger.error(`Error decrypting space name for report ${object.body.id}: ${reason}`);
        });
    }

    let keywordPromises = [];

    if (reportRequest.keywords) {
      keywordPromises = Promise.all(reportRequest.keywords.map((keyword) => ctx.webex.internal.encryption.decryptText(reportRequest.encryptionKeyUrl, keyword)))
        .then((decryptedKeywords) => {
          reportRequest.keywords = decryptedKeywords;
        })
        .catch((reason) => {
          ctx.webex.logger.error(`Error decrypting keywords for report ${object.body.id}: ${reason}`);
        });
    }

    let emailPromises = [];

    if (reportRequest.emails) {
      emailPromises = Promise.all(reportRequest.emails.map((email) => ctx.webex.internal.encryption.decryptText(reportRequest.encryptionKeyUrl, email)))
        .then((decryptedEmails) => {
          reportRequest.emails = decryptedEmails;
        })
        .catch((reason) => {
          ctx.webex.logger.error(`Error decrypting emails for report ${object.body.id}: ${reason}`);
        });
    }

    return Promise.all([reportNamePromise, reportDescriptionPromise].concat(spaceNamePromises, keywordPromises, emailPromises));
  }

  static decryptReportContent(ctx, object, reportId) {
    if (!object || !object.body || !reportId) {
      return Promise.resolve();
    }
    const activity = object.body;

    const promises = [];

    return ctx.webex.internal.ediscovery.getContentSummaryBySpaceId(reportId, activity.targetId)
      .then((space) => {
        if (!space) {
          const reason = `Space ${activity.targetId} may not contain any users from this organisation - unable to decrypt activity ${activity.activityId}`;

          activity.error = reason;
          ctx.webex.logger.error(reason);

          return Promise.resolve(object);
        }

        if (space.error) {
          // add error property to activity - this error will be recorded in the downloader
          activity.error = space.error;
        }

        // set space name and participants on activity
        if (space.spaceName) {
          activity.spaceName = space.spaceName;
        }
        else if (space.isOneOnOne && space.participantDisplayNames && space.participantDisplayNames.length === 2) {
          // One to One spaces have no space name, use participant names as 'Subject' instead
          activity.spaceName = space.participantDisplayNames.toString().replace(',', ' & ');
        }
        else {
          activity.spaceName = '';
        }

        if (space.participantDisplayNames) {
          // Remove sender from list of participants as they will appear in the 'To' field
          activity.participantDisplayNames = space.participantDisplayNames.filter((value) => value !== activity.actorDisplayName).toString();
        }

        let onBehalfOfUser;

        if (space.onBehalfOfUser) {
          onBehalfOfUser = space.onBehalfOfUser;
        }
        else {
          const reason = `No user available with which to decrypt activity ${activity.activityId} in space ${activity.targetId}`;

          ctx.webex.logger.error(reason);
          activity.error = reason;

          return Promise.resolve(object);
        }

        // Decrypt activity message if present
        // For 'add' activities the objectDisplayName is a user id which does not need to be decrypted
        if (activity.verb !== 'add' && activity.objectDisplayName && activity.encryptionKeyUrl) {
          promises.push(requestWithRetries(ctx.webex.internal.encryption, ctx.webex.internal.encryption.decryptText,
            [activity.encryptionKeyUrl, activity.objectDisplayName, {onBehalfOf: onBehalfOfUser}])
            .then((decryptedMessage) => {
              activity.objectDisplayName = decryptedMessage;
            })
            .catch((reason) => {
              ctx.webex.logger.error(`Decrypt message error for activity ${activity.activityId} in space ${activity.targetId}: ${reason}`);
              // add error property to activity - this error will be recorded in the downloader and the activity omitted from the report
              activity.error = reason;

              return Promise.resolve(object);
            }));
        }

        // Decrypt shares (files, whiteboards, shared links)
        // Array.prototype.concat.apply ignores undefined
        let shares = Array.prototype.concat.apply([], activity.files);

        shares = Array.prototype.concat.apply(shares, activity.whiteboards);
        shares = Array.prototype.concat.apply(shares, activity.links);
        for (let i = 0; i < shares.length; i += 1) {
          const share = shares[i];

          // Decrypt the share's display name
          // Ignore display names for whiteboards which are unencrypted
          if (share.displayName && (!activity.whiteboards || !activity.whiteboards.includes(share))) {
            promises.push(requestWithRetries(ctx.webex.internal.encryption, ctx.webex.internal.encryption.decryptText,
              [activity.encryptionKeyUrl, share.displayName, {onBehalfOf: onBehalfOfUser}])
              .then((decryptedDisplayName) => {
                share.displayName = decryptedDisplayName;
              })
              .catch((reason) => {
                ctx.webex.logger.warn(`Decrypt DisplayName error for activity ${activity.activityId} in space ${activity.targetId} for share type: ${share.mimeType}, size: ${share.fileSize}, and url: ${share.url} due to error: ${reason}`);
                // add warning property to activity - this will present an indication that there was data loss on the downloader
                activity.warning = reason;
              }));
          }

          // Shared Links can have additional decryption fields
          if (share.microsoftSharedLinkInfo) {
            if (share.microsoftSharedLinkInfo.driveId) {
              promises.push(requestWithRetries(ctx.webex.internal.encryption, ctx.webex.internal.encryption.decryptText,
                [activity.encryptionKeyUrl, share.microsoftSharedLinkInfo.driveId, {onBehalfOf: onBehalfOfUser}])
                .then((decryptedDriveId) => {
                  share.microsoftSharedLinkInfo.driveId = decryptedDriveId;
                })
                .catch((reason) => {
                  ctx.webex.logger.error(`Decrypt share.microsoftSharedLinkInfo.driveId error for activity ${activity.activityId} in space ${activity.targetId} for share type: ${share.mimeType}, size: ${share.fileSize}, and url: ${share.url} due to error: ${reason}`);
                  // add error property to activity - this error will be recorded in the downloader and the activity omitted from the report
                  activity.error = reason;

                  return Promise.resolve(object);
                }));
            }

            if (share.microsoftSharedLinkInfo.itemId) {
              promises.push(requestWithRetries(ctx.webex.internal.encryption, ctx.webex.internal.encryption.decryptText,
                [activity.encryptionKeyUrl, share.microsoftSharedLinkInfo.itemId, {onBehalfOf: onBehalfOfUser}])
                .then((decryptedItemId) => {
                  share.microsoftSharedLinkInfo.itemId = decryptedItemId;
                })
                .catch((reason) => {
                  ctx.webex.logger.error(`Decrypt share.microsoftSharedLinkInfo.itemId error for activity ${activity.activityId} in space ${activity.targetId} for share type: ${share.mimeType}, size: ${share.fileSize}, and url: ${share.url} due to error: ${reason}`);
                  // add error property to activity - this error will be recorded in the downloader and the activity omitted from the report
                  activity.error = reason;

                  return Promise.resolve(object);
                }));
            }
          }

          // Decrypt the scr (Secure Content Reference) or sslr (Secure Shared Link Reference)
          // Unlike a scr the sslr contains only a loc. But decryptScr(...) is flexible and
          // leaves the tag, auth, IV, etc fields on the SCR object as undefined.
          if (share.scr || share.sslr) {
            promises.push(requestWithRetries(ctx.webex.internal.encryption, ctx.webex.internal.encryption.decryptScr,
              [activity.encryptionKeyUrl, share.scr || share.sslr, {onBehalfOf: onBehalfOfUser}])
              .then((decryptedSCR) => {
                if (share.scr) {
                  share.scr = decryptedSCR;
                }
                else {
                  share.sslr = decryptedSCR.loc;
                }
              })
              .catch((reason) => {
                ctx.webex.logger.error(`Decrypt file scr or sslr error for activity ${activity.activityId} in space ${activity.targetId} for share type: ${share.mimeType}, size: ${share.fileSize}, and url: ${share.url} due to error: ${reason}`);
                // add error property to activity - this error will be recorded in the downloader and the activity omitted from the report
                activity.error = reason;

                return Promise.resolve(object);
              }));
          }
        }

        return Promise.all(promises);
      })
      .catch((reason) => {
        ctx.webex.logger.error(`Error retrieving space summary for: ${activity.activityId} in space ${activity.targetId}: ${reason}`);
        // add error property to activity - this error will be recorded in the downloader and the activity omitted from the report
        activity.error = reason;

        return Promise.resolve(object);
      });
  }

  static decryptReportContentSummary(ctx, object) {
    if (!object || !object.body) {
      return Promise.resolve();
    }
    const space = object.body;

    if (!space.spaceName) {
      return Promise.resolve(object);
    }

    let onBehalfOfUser;

    if (space.onBehalfOfUser) {
      onBehalfOfUser = space.onBehalfOfUser;
    }
    else {
      const reason = `No user available with which to decrypt space ${space.spaceId}`;

      ctx.webex.logger.error(reason);
      space.error = reason;

      return Promise.resolve(object);
    }

    return requestWithRetries(ctx.webex.internal.encryption, ctx.webex.internal.encryption.decryptText,
      [space.encryptionKeyUrl, space.spaceName, {onBehalfOf: onBehalfOfUser}])
      .then((decryptedSpaceName) => {
        space.spaceName = decryptedSpaceName;
      })
      .catch((reason) => {
        ctx.webex.logger.error(`Decrypt space name error for space ${space.spaceId}: ${reason}`);
        // add error property to space info - this error will be recorded in the downloader
        space.error = reason;

        return Promise.resolve(object);
      });
  }
}

export default Transforms;
