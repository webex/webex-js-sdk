/* eslint-disable prefer-template */
/*!
 * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.
 */
import {waitForValue, WebexPlugin} from '@webex/webex-core';
import {oneFlight} from '@webex/common';

import {InvalidEmailAddressError} from './ediscovery-error';

/**
 * Creates a unique oneflight key for a request from the reportId and options params
 * It is important that the offset params are included if present to ensure paged requests get back the correct data
 * @param {Object} reportId - A set of criteria for determining the focus of the search
 * @param {Object} options - optional parameters for this method
 * @returns {String} oneFlight key which is a composite of the request parameters
 */
function createOneFlightKey(reportId, options) {
  return String(reportId + (options && options.offset && options.size ? options.offset + options.size : ''));
}

/**
 * @class EDiscovery is used by compliance officers to run compliance reports
 *
 */
const EDiscovery = WebexPlugin.extend({
  namespace: 'EDiscovery',

  session: {
    contentSummaryBySpaceIdCache: {
      type: 'object',
      default() {
        return new Map();
      }
    }
  },

  @waitForValue('@')
  /**
   * Creates a compliance report with a specific set of search parameters
   * @param {Object} reportRequest - A set of criteria for determining the focus of the search
   * @param {Object} options - optional parameters for this method
   * @param {number} options.timeoutMs - connection timeout in milliseconds, defaults to 30s
   * @returns {Promise<ResponseEntity>} Http response containing the new report record
   */
  createReport(reportRequest, options) {
    if (!reportRequest) {
      throw Error('Undefined parameter');
    }

    // use spread operator to set default options
    options = {...this.config.defaultOptions, ...options};

    const body = reportRequest;

    return this.request({
      method: 'POST',
      service: 'ediscovery',
      resource: 'reports',
      timeout: options.timeoutMs,
      body
    })
      .catch((reason) => this._handleReportRequestError(reason));
  },

  /**
   * Checks the error from createReport and ensures the appropriate error is sent to the client
   * @param {Error} reason - Error response thrown by the request to createReport
   * @returns {Promise<Error>} Promise rejection containing the error
   */
  _handleReportRequestError(reason) {
    if (reason.body.errorCode === InvalidEmailAddressError.getErrorCode()) {
      try {
        const invalidEmails = JSON.parse(reason.body.message);

        if (Array.isArray(invalidEmails) && invalidEmails.length) {
          const invalidEmailAddressError = new InvalidEmailAddressError(invalidEmails);

          return Promise.reject(invalidEmailAddressError);
        }

        this.logger.warn('InvalidEmailAddress error received but the list could not be parsed to the correct format.');
      }
      catch (error) {
        // assume syntax error and continue
        this.logger.error('InvalidEmailAddress error received but an error occured while parsing the emails.');
      }
    }

    return Promise.reject(reason);
  },

  @waitForValue('@')
  /**
   * Retrieves information relating to a specified report
   * @param {UUID} reportId - Id of the report being requested
   * @param {Object} options - optional parameters for this method
   * @param {number} options.timeoutMs - connection timeout in milliseconds, defaults to 30s
   * @returns {Promise<ResponseEntity<ReportRecord>>} Http response containing the specified report record
   */
  getReport(reportId, options) {
    if (!reportId) {
      throw Error('Undefined parameter');
    }

    // use spread operator to set default options
    options = {...this.config.defaultOptions, ...options};

    return this.request({
      method: 'GET',
      service: 'ediscovery',
      resource: `reports/${reportId}`,
      timeout: options.timeoutMs
    });
  },

  @waitForValue('@')
  /**
   * Retrieves all the compliance officers reports
   * @param {Object} options - optional parameters for this method
   * @param {number} options.offset - start position from which to retrieve records
   * @param {number} options.size - the number of records to retrieve
   * @param {number} options.timeoutMs - connection timeout in milliseconds, defaults to 30s
   * @returns {Promise<ResponseEntity<Array<ReportRecord>>>} Http Response containing a list of report records
   */
  getReports(options) {
    // use spread operator to set default options
    options = {...this.config.defaultOptions, ...options};

    return this.request({
      method: 'GET',
      service: 'ediscovery',
      resource: 'reports',
      qs: {offset: options.offset, size: options.size},
      timeout: options.timeoutMs
    });
  },

  @waitForValue('@')
  /**
   * Deletes a specified report
   * @param {UUID} reportId - Id of the report being requested for deletion
   * @param {Object} options - optional parameters for this method
   * @param {number} options.timeoutMs - connection timeout in milliseconds, defaults to 30s
   * @returns {Promise<ResponseEntity>} HttpResponse indicating if delete was successful
   */
  deleteReport(reportId, options) {
    if (!reportId) {
      throw Error('Undefined parameter');
    }

    // use spread operator to set default options
    options = {...this.config.defaultOptions, ...options};

    return this.request({
      method: 'DELETE',
      service: 'ediscovery',
      resource: `reports/${reportId}`,
      timeout: options.timeoutMs
    });
  },

  @waitForValue('@')
  /**
   * Restarts a completed or cancelled report so that it begins again from scratch
   * @param {UUID} reportId - Id of the report being requested
   * @param {Object} options - optional parameters for this method
   * @param {number} options.timeoutMs - connection timeout in milliseconds, defaults to 30s
   * @returns {Promise<ResponseEntity<ReportRecord>>} Http response containing the report record
   */
  restartReport(reportId, options) {
    if (!reportId) {
      throw Error('Undefined parameter');
    }

    // use spread operator to set default options
    options = {...this.config.defaultOptions, ...options};

    return this.request({
      method: 'PUT',
      service: 'ediscovery',
      resource: `reports/${reportId}`,
      timeout: options.timeoutMs
    });
  },

  @waitForValue('@')
  @oneFlight({keyFactory: (reportId, options) => createOneFlightKey(reportId, options)})
  /**
   * Retrieves content associated with a report
   * @param {UUID} reportId - Id of the report which contains the content
   * @param {Object} options - optional parameters for this method
   * @param {number} options.offset - start position from which to retrieve records
   * @param {number} options.size - the number of records to retrieve
   * @param {number} options.timeoutMs - connection timeout in milliseconds, defaults to 30s
   * @returns {Promise<ResponseEntity<[Activity]>>} Http response containing the activities
   */
  getContent(reportId, options) {
    if (!reportId) {
      throw Error('Undefined parameter');
    }

    // use spread operator to set default options
    options = {...this.config.defaultOptions, ...options};

    return this.request({
      method: 'GET',
      service: 'ediscovery',
      resource: `reports/${reportId}/contents`,
      qs: {offset: options.offset, size: options.size},
      timeout: options.timeoutMs
    });
  },

  @waitForValue('@')
  @oneFlight({keyFactory: (reportUrl, options) => createOneFlightKey(reportUrl, options)})
  /**
   * Retrieves content associated with a report
   * @param {String} reportUrl - full destination address (including report id parameter) for the http request being sent
   * e.g. 'http://ediscovery-intb.wbx2.com/ediscovery/api/v1/reports/3b10e625-2bd5-4efa-b866-58d6c93c505c'
   * @param {Object} options - optional parameters for this method
   * @param {number} options.offset - start position from which to retrieve records
   * @param {number} options.size - the number of records to retrieve
   * @param {number} options.timeoutMs - connection timeout in milliseconds, defaults to 30s
   * @returns {Promise<ResponseEntity<[Activity]>>} Http response containing the activities
   */
  getRemoteContent(reportUrl, options) {
    if (!reportUrl) {
      throw Error('Undefined parameter');
    }

    const reportId = reportUrl.match(/[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}/)[0];

    if (!reportId) {
      throw Error('Report url does not contain a report id');
    }

    // use spread operator to set default options
    options = {...this.config.defaultOptions, ...options};

    return this.request({
      method: 'GET',
      url: `${reportUrl}/contents`,
      qs: {offset: options.offset, size: options.size},
      timeout: options.timeoutMs
    });
  },

  @waitForValue('@')
  @oneFlight({keyFactory: (reportId, options) => createOneFlightKey(reportId, options)})
  /**
   * Retrieves a list of the spaces relevant to a specified report
   * @param {UUID} reportId - Id of the report being requested
   * @param {Object} options - optional parameters for this method
   * @param {number} options.offset - start position from which to retrieve records
   * @param {number} options.size - the number of records to retrieve
   * @param {number} options.timeoutMs - connection timeout in milliseconds, defaults to 30s
   * @returns {Promise<ResponseEntity<ContentSummary>>} Http response containing the content summary
   */
  getContentSummary(reportId, options) {
    if (!reportId) {
      throw Error('Undefined parameter');
    }

    // use spread operator to set default options
    options = {...this.config.defaultOptions, ...options};

    return this.request({
      method: 'GET',
      service: 'ediscovery',
      resource: `reports/${reportId}/contents/summary`,
      qs: {offset: options.offset, size: options.size},
      timeout: options.timeoutMs
    })
      .then(async (res) => {
        await this._writeSpacesToContentSummaryBySpaceIdCache(reportId, res.body);

        return Promise.resolve(res);
      });
  },

  @waitForValue('@')
  @oneFlight({keyFactory: (reportUrl, options) => createOneFlightKey(reportUrl, options)})
  /**
   * Retrieves a list of the spaces relevant to a specified report
   * @param {String} reportUrl - full destination address (including report id parameter) for the http request being sent
   * e.g. 'http://ediscovery-intb.wbx2.com/ediscovery/api/v1/reports/3b10e625-2bd5-4efa-b866-58d6c93c505c'
   * @param {Object} options - optional parameters for this method
   * @param {number} options.offset - start position from which to retrieve records
   * @param {number} options.size - the number of records to retrieve
   * @param {number} options.timeoutMs - connection timeout in milliseconds, defaults to 30s
   * @returns {Promise<ResponseEntity<ContentSummary>>} Http response containing the content summary
   */
  getRemoteContentSummary(reportUrl, options) {
    if (!reportUrl) {
      throw Error('Undefined parameter');
    }

    const reportId = reportUrl.match(/[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}/)[0];

    if (!reportId) {
      throw Error('Report url does not contain a report id');
    }

    // use spread operator to set default options
    options = {...this.config.defaultOptions, ...options};

    return this.request({
      method: 'GET',
      url: `${reportUrl}/contents/summary`,
      qs: {offset: options.offset, size: options.size},
      timeout: options.timeoutMs
    })
      .then(async (res) => {
        this.logger.error('report id is ' + reportId);

        await this._writeSpacesToContentSummaryBySpaceIdCache(reportId, res.body);

        return Promise.resolve(res);
      });
  },

  @waitForValue('@')
  @oneFlight({keyFactory: (reportId, spaceId) => String(reportId + spaceId)})
  /**
   * Retrieves information for a specific conversation relevant to a specified report
   * @param {UUID} reportId - Id of the report which contains the relevant content summary
   * @param {UUID} spaceId - Id of the conversation being requested
   * @param {Object} options - optional parameters for this method
   * @param {number} options.timeoutMs - connection timeout in milliseconds, defaults to 30s
   * @returns {Promise<ResponseEntity<ContentSummary>>} Http response containing the specified content summary
   */
  getContentSummaryBySpaceId(reportId, spaceId, options) {
    if (!reportId || !spaceId) {
      throw Error('Undefined parameter(s)');
    }

    // use spread operator to set default options
    options = {...this.config.defaultOptions, ...options};

    // If the content summary for this space has already been cached then it can be retrieved from there instead of making a network call to ediscovery
    if (this.contentSummaryBySpaceIdCache.has(reportId) && this.contentSummaryBySpaceIdCache.get(reportId).has(spaceId)) {
      return {body: this.contentSummaryBySpaceIdCache.get(reportId).get(spaceId), statusCode: 200};
    }

    this.logger.warn(`Cache miss for space ${spaceId} in getContentSummaryBySpaceId`);

    return this.request({
      method: 'GET',
      service: 'ediscovery',
      resource: `reports/${reportId}/contents/summary/${spaceId}`,
      timeout: options.timeoutMs
    })
      .then(async (res) => {
        await this._writeSpacesToContentSummaryBySpaceIdCache(reportId, [res.body]);

        return Promise.resolve(res);
      });
  },

  @waitForValue('@')
  @oneFlight({keyFactory: (reportUrl, spaceId) => String(reportUrl + spaceId)})
  /**
   * Retrieves information for a specific conversation relevant to a specified report
   * @param {String} reportUrl - full destination address (including report id parameter) for the http request being sent
   * e.g. 'http://ediscovery-intb.wbx2.com/ediscovery/api/v1/reports/3b10e625-2bd5-4efa-b866-58d6c93c505c'
   * @param {UUID} spaceId - Id of the conversation being requested
   * @param {Object} options - optional parameters for this method
   * @param {number} options.timeoutMs - connection timeout in milliseconds, defaults to 30s
   * @returns {Promise<ResponseEntity<ContentSummary>>} Http response containing the specified content summary
   */
  getRemoteContentSummaryBySpaceId(reportUrl, spaceId, options) {
    if (!reportUrl || !spaceId) {
      throw Error('Undefined parameter(s)');
    }

    const reportId = reportUrl.match(/[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}/)[0];

    if (!reportId) {
      throw Error('Report url does not contain a report id');
    }

    // use spread operator to set default options
    options = {...this.config.defaultOptions, ...options};

    // If the content summary for this space has already been cached then it can be retrieved from there instead of making a network call to ediscovery
    if (this.contentSummaryBySpaceIdCache.has(reportId) && this.contentSummaryBySpaceIdCache.get(reportId).has(spaceId)) {
      return {body: this.contentSummaryBySpaceIdCache.get(reportId).get(spaceId), statusCode: 200};
    }

    this.logger.warn(`Cache miss for space ${spaceId} in getContentSummaryBySpaceId`);

    return this.request({
      method: 'GET',
      url: `${reportUrl}/contents/summary/${spaceId}`,
      timeout: options.timeoutMs
    })
      .then(async (res) => {
        await this._writeSpacesToContentSummaryBySpaceIdCache(reportId, [res.body]);

        return Promise.resolve(res);
      });
  },

  /**
   * The results of a getContentSummary or getContentSummaryBySpaceId request are written to the contentSummaryBySpaceIdCache
   * since information for a space is likely to be accessed very frequently when decrypting activities
   * @param {UUID} reportId - Id of the report which contains the relevant content summary
   * @param {Array<Object>} spaces - List of the space objects to be written to the cache
   * @returns {Promise} - Promise resolution indicating operation is complete
   */
  _writeSpacesToContentSummaryBySpaceIdCache(reportId, spaces) {
    if (!reportId || !spaces || !spaces.length) {
      return;
    }

    if (!this.contentSummaryBySpaceIdCache.has(reportId)) {
      // wipe the cache - we will only need to store one reports data at any one time
      this.contentSummaryBySpaceIdCache.clear();

      this.contentSummaryBySpaceIdCache.set(reportId, new Map());
    }

    for (let i = 0; i < spaces.length; i += 1) {
      const space = spaces[i];

      if (space && space.spaceId) {
        try {
          this.contentSummaryBySpaceIdCache.get(reportId).set(space.spaceId, space);
        }
        catch (error) {
          this.logger.error(`Error adding ${space.spaceId} to contentSummaryBySpaceIdCache: ${error}`);
        }
      }
      else {
        this.logger.error('Error adding undefined space to contentSummaryBySpaceIdCache');
      }
    }
  },

  @waitForValue('@')
  /**
   * Retrieves a config object from the service which can be used by the client for optimal performance, e.g. content page size
   * @param {Object} options - optional parameters for this method
   * @param {number} options.timeoutMs - connection timeout in milliseconds, defaults to 30s
   * @returns {Promise<Config>} Http response containing the config object
   */
  getClientConfig(options) {
    // use spread operator to set default options
    options = {...this.config.defaultOptions, ...options};

    return this.request({
      method: 'GET',
      service: 'ediscovery',
      resource: 'reports/clientconfig',
      timeout: options.timeoutMs
    });
  },

  @waitForValue('@')
  /**
   * Submits an audit event to the eDiscovery service for admin use. Only expected to be used for
   * the getContentSummary API
   * @param {UUID} reportId - Id of the report to send an audit log for
   * @param {Object} options - optional parameters for this method
   * @param {number} options.timeoutMs - connection timeout in milliseconds, defaults to 30s
   * @returns {Promise<Config>} Http response containing the config object
   */
  postAuditLog(reportId, options) {
    if (!reportId) {
      throw Error('No report ID specified');
    }

    // use spread operator to set default options
    options = {...this.config.defaultOptions, ...options};

    return this.request({
      method: 'POST',
      service: 'ediscovery',
      resource: `reports/${reportId}/audit/summary-download`,
      timeout: options.timeoutMs
    });
  }

});

export default EDiscovery;
