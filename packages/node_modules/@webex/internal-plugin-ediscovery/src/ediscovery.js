/* eslint-disable prefer-template */
/*!
 * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.
 */
import {InvalidEmailAddressError} from './ediscovery-error';
import {waitForValue, WebexPlugin} from '@webex/webex-core';
import {oneFlight} from '@webex/common';

import Map from 'babel-runtime/core-js/map';

/**
 * @class EDiscovery is used by compliance officers to run compliance reports
 *
 */
const EDiscovery = WebexPlugin.extend({
  namespace: 'EDiscovery',

  session: {
    contentSummaryCache: {
      type: 'object',
      default() {
        return new Map();
      }
    }
  },

  @waitForValue('@')
  /**
   * Creates a compliance report with a specific set of search parameters
   * @param {Object} reportRequest - A set of criteria for determining the focus of the search
   * @returns {Promise<ResponseEntity>} Http response containing the new report record
   */
  createReport(reportRequest) {
    if (!reportRequest) {
      throw Error('Undefined parameter');
    }

    const body = reportRequest;

    return this.request({
      method: 'POST',
      service: 'ediscovery',
      resource: 'reports',
      body
    })
      .catch((reason) => this._handleReportRequestError(reason));
  },

  /**
   * Checks the error from createReport and ensures the appropriate error is sent to the client
   * @param {Error} reason - Error response thrown by the request to createReport
   * @returns {Promise<Error>} Promise rejection containing the error
   */
  _handleReportRequestError(reason) {
    if (reason.body.errorCode === InvalidEmailAddressError.getErrorCode()) {
      try {
        const invalidEmails = JSON.parse(reason.body.message);

        if (Array.isArray(invalidEmails) && invalidEmails.length) {
          const invalidEmailAddressError = new InvalidEmailAddressError(invalidEmails);

          return Promise.reject(invalidEmailAddressError);
        }

        this.logger.warn('InvalidEmailAddress error received but the list could not be parsed to the correct format.');
      }
      catch (error) {
        // assume syntax error and continue
        this.logger.error('InvalidEmailAddress error received but an error occured while parsing the emails.');
      }
    }

    return Promise.reject(reason);
  },

  @waitForValue('@')
  /**
   * Retrieves information relating to a specified report
   * @param {UUID} reportId - Id of the report being requested
   * @returns {Promise<ResponseEntity<ReportRecord>>} Http response containing the specified report record
   */
  getReport(reportId) {
    if (!reportId) {
      throw Error('Undefined parameter');
    }

    return this.request({
      method: 'GET',
      service: 'ediscovery',
      resource: `reports/${reportId}`
    });
  },

  @waitForValue('@')
  /**
   * Retrieves all the compliance officers reports
   * @param {int} offset - Start position from which to retrieve records
   * @param {int} size - Number of records to retrieve
   * @returns {Promise<ResponseEntity<Array<ReportRecord>>>} Http Response containing a list of report records
   */
  getReports({offset, size} = {}) {
    return this.request({
      method: 'GET',
      service: 'ediscovery',
      resource: 'reports',
      qs: {offset, size}
    });
  },

  @waitForValue('@')
  /**
   * Deletes a specified report
   * @param {UUID} reportId - Id of the report being requested for deletion
   * @returns {Promise<ResponseEntity>} HttpResponse indicating if delete was successful
   */
  deleteReport(reportId) {
    if (!reportId) {
      throw Error('Undefined parameter');
    }

    return this.request({
      method: 'DELETE',
      service: 'ediscovery',
      resource: `reports/${reportId}`
    });
  },

  @waitForValue('@')
  /**
   * Restarts a completed or cancelled report so that it begins again from scratch
   * @param {UUID} reportId - Id of the report being requested
   * @returns {Promise<ResponseEntity<ReportRecord>>} Http response containing the report record
   */
  restartReport(reportId) {
    if (!reportId) {
      throw Error('Undefined parameter');
    }

    return this.request({
      method: 'PUT',
      service: 'ediscovery',
      resource: `reports/${reportId}`
    });
  },

  @waitForValue('@')
  /**
   * Retrieves content associated with a report
   * @param {UUID} reportId - Id of the report which contains the content
   * @param {int} offset - Start position from which to retrieve content
   * @param {int} size - Number of activities to retrieve
   * @returns {Promise<ResponseEntity<[Activity]>>} Http response containing the activities
   */
  getContent(reportId, {offset, size} = {}) {
    if (!reportId) {
      throw Error('Undefined parameter');
    }
    const promises = [];

    // The content summary for a report is needed in order to decrypt the content for that report
    // Since retrieving it from the service every time it is needed is extremely inefficient,
    // we ensure that is is cached here before proceeding to get the report contents
    if (!this.contentSummaryCache.has(reportId)) {
      promises.push(this.getContentSummary(reportId));
    }

    return Promise.all(promises)
      .then(() => this.request({
        method: 'GET',
        service: 'ediscovery',
        resource: `reports/${reportId}/contents`,
        qs: {offset, size}
      }));
  },

  @waitForValue('@')
  @oneFlight({keyFactory: ({reportId}) => `${reportId}`})
  /**
   * Retrieves a list of the conversations relevant to a specified report
   * @param {UUID} reportId - Id of the report being requested
   * @param {boolean} writeToCache - Can be set to true if the content summary is expected to be accessed very frequently for space information
   * @returns {Promise<ResponseEntity<ContentSummary>>} Http response containing the content summary
   */
  getContentSummary(reportId) {
    if (!reportId) {
      throw Error('Undefined parameter');
    }

    let offset = 0;
    const size = 100;
    let contentSummary = [];

    // If the content summary for this report has already been cached then it can be retrieved from there instead of making a network call to ediscovery
    if (this.contentSummaryCache.has(reportId) && this.contentSummaryCache.get(reportId).size > 0) {
      return Array.from(this.contentSummaryCache.get(reportId).values());
    }

    function getNextContentSummaryPage(plugin) {
      return plugin.request({
        method: 'GET',
        service: 'ediscovery',
        resource: `reports/${reportId}/contents/summary`,
        qs: {offset, size}
      })
        .then((res) => {
          // The results are written to the contentSummaryCache as information for a space is likely to be accessed very frequently for decryption
          if (!plugin.contentSummaryCache.has(reportId)) {
            plugin.contentSummaryCache.set(reportId, new Map());
          }
          for (let i = 0; i < res.body.length; i += 1) {
            plugin.contentSummaryCache.get(reportId).set(res.body[i].spaceId, res.body[i]);
          }

          contentSummary = contentSummary.concat(res.body);
          if (res.body.length < size) {
            return contentSummary;
          }
          offset += size;

          return getNextContentSummaryPage(plugin);
        });
    }

    return getNextContentSummaryPage(this);
  },

  @waitForValue('@')
  /**
   * Retrieves information for a specific conversation relevant to a specified report
   * @param {UUID} reportId - Id of the report which contains the relevant content summary
   * @param {UUID} spaceId = Id of the conversation being requested
   * @returns {Promise<ResponseEntity<ContentSummary>>} Http response containing the specified content summary
   */
  getContentSummaryBySpaceId(reportId, spaceId) {
    if (!reportId || !spaceId) {
      throw Error('Undefined parameter(s)');
    }

    // If the content summary for this report has already been cached then it can be retrieved from there instead of making a network call to ediscovery
    if (this.contentSummaryCache.has(reportId) && this.contentSummaryCache.get(reportId).has(spaceId)) {
      return this.contentSummaryCache.get(reportId).get(spaceId);
    }

    return this.request({
      method: 'GET',
      service: 'ediscovery',
      resource: `reports/${reportId}/contents/summary/${spaceId}`
    })
      .then((res) => res.body);
  }

});

export default EDiscovery;
