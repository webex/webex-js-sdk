import EDiscovery from '@webex/internal-plugin-ediscovery';
import ReportRequest from '@webex/internal-plugin-ediscovery/src/report-request';
import Encryption from '@webex/internal-plugin-encryption';
import Mercury from '@webex/internal-plugin-mercury';
import MockWebex from '@webex/test-helper-mock-webex';
import sinon from '@webex/test-helper-sinon/src/index';
import {expect} from '@webex/test-helper-chai';

describe('EDiscovery Report API Tests', () => {
  let webex;
  const url = 'https://ediscovery-test.wbx2.com/ediscovery';
  const uuid = 'cc06f622-46ab-45b9-b3a6-5d70bad1d70a';

  beforeEach(() => {
    webex = new MockWebex({
      children: {
        ediscovery: EDiscovery,
        encryption: Encryption,
        mercury: Mercury
      }
    });
    webex.internal.device.getServiceUrl = sinon.stub().returns(Promise.resolve(url));
  });

  describe('Create Report Tests', () => {
    it('createReportSuccess', async () => {
      const reportRequest = new ReportRequest();
      const result = webex.internal.ediscovery.createReport(reportRequest).then((res) => {
        expect(res.statusCode).to.equal(200);
      });

      return result;
    });

    it('createReportWithNoParamFailure', async () => {
      const result = expect(webex.internal.ediscovery.createReport()).to.be.rejectedWith(Error, 'Undefined parameter');

      return result;
    });
  });

  describe('Get Reports Tests', () => {
    it('getReportsSuccess', async () => {
      const result = webex.internal.ediscovery.getReports().then((res) => {
        expect(res.statusCode).to.equal(200);
      });

      return result;
    });
  });

  describe('Get Report Tests', () => {
    it('getReportSuccess', async () => {
      const result = webex.internal.ediscovery.getReport(uuid).then((res) => {
        expect(res.statusCode).to.equal(200);
      });

      return result;
    });

    it('getReportWithNoParamFailure', async () => {
      const result = expect(webex.internal.ediscovery.getReport()).to.be.rejectedWith(Error, 'Undefined parameter');

      return result;
    });
  });

  describe('Delete Report Tests', () => {
    it('deleteReportSuccess', async () => {
      const result = webex.internal.ediscovery.deleteReport(uuid).then((res) => {
        expect(res.statusCode).to.equal(200);
      });

      return result;
    });

    it('deleteReportWithNoParamFailure', async () => {
      const result = expect(webex.internal.ediscovery.deleteReport()).to.be.rejectedWith(Error, 'Undefined parameter');

      return result;
    });
  });

  describe('Restart Report Tests', () => {
    it('restartReportSuccess', async () => {
      const result = webex.internal.ediscovery.restartReport(uuid).then((res) => {
        expect(res.statusCode).to.equal(200);
      });

      return result;
    });

    it('restartReportWithNoParamFailure', async () => {
      const result = expect(webex.internal.ediscovery.restartReport()).to.be.rejectedWith(Error, 'Undefined parameter');

      return result;
    });
  });
});
