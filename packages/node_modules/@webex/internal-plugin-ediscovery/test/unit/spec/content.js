import EDiscovery from '@webex/internal-plugin-ediscovery';
import MockWebex from '@webex/test-helper-mock-webex';
import sinon from '@webex/test-helper-sinon/src/index';
import {expect} from '@webex/test-helper-chai';

/* eslint-disable max-len */
describe('EDiscovery Content API Tests', () => {
  let webex;
  const url = 'https://ediscovery-test.wbx2.com/ediscovery';
  const uuid = 'cc06f622-46ab-45b9-b3a6-5d70bad1d70a';

  beforeEach(() => {
    webex = new MockWebex({
      children: {
        ediscovery: EDiscovery
      }
    });
    webex.internal.device.getServiceUrl = sinon.stub().returns(Promise.resolve(url));
  });

  describe('Get Content Tests', () => {
    it('GetContent succeeds', async () => {
      // getContent calls getContentSummary internally, so we need to stub it here
      webex.internal.ediscovery.getContentSummary = sinon.stub().returns(Promise.resolve());
      const result = webex.internal.ediscovery.getContent(uuid, {offset: 0, size: 1})
        .then((res) => {
          expect(res.statusCode).equal(200);
        });

      return result;
    });

    it('GetContent fails with no params', async () => {
      const result = expect(webex.internal.ediscovery.getContent()).to.be.rejectedWith(Error, 'Undefined parameter');

      return result;
    });
  });

  describe('Get Content Summary Tests', () => {
    // The fact that the getContentSummary APIs return the response body object (which is a ContentSummary object)
    // rather than the entire response means we must take a different approach to verifying to verifying these tests.
    // If possible, this should be altered as part of SPARK-76030 to align with the other APIs

    // There is a gap in test coverage of getContentSummary here due to it's recursive nature,
    // which we plan to remove in order to align it with the getContent API, see SPARK-76030

    it('getContentSummary fails with no params', async () => {
      const result = webex.internal.ediscovery.getContentSummary()
        .catch((reason) => {
          // the @oneFlight annotation make it difficult to verify this test, as it is keyed off the reportId
          expect(reason.message).to.not.equal(undefined);
        });

      return result;
    });

    it('GetContentSummaryBySpaceId succeeds', async () => {
      const result = webex.internal.ediscovery.getContentSummaryBySpaceId(uuid, uuid)
        .then((res) => {
          expect(res).to.not.equal(undefined);
        });

      return result;
    });

    it('GetContentSummaryBySpaceId fails with no params', async () => {
      const result = expect(webex.internal.ediscovery.getContentSummaryBySpaceId()).to.be.rejectedWith(Error, 'Undefined parameter');

      return result;
    });
  });
});
