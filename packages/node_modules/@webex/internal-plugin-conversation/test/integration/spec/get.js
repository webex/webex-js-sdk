/*!
 * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.
 */

import '@webex/internal-plugin-conversation';

import WebexCore from '@webex/webex-core';
import {assert} from '@webex/test-helper-chai';
import sinon from 'sinon';
import testUsers from '@webex/test-helper-test-users';
import fh from '@webex/test-helper-file';
import makeLocalUrl from '@webex/test-helper-make-local-url';
import {map} from 'lodash';
import retry from '@webex/test-helper-retry';

describe('plugin-conversation', function () {
  this.timeout(120000);

  describe('when fetching conversations', () => {
    let kirk, mccoy, participants, scott, webex, spock, suluEU, checkov;

    before('create tests users and connect three to mercury', () => Promise.all([
      testUsers.create({count: 5}),
      testUsers.create({count: 1, config: {orgId: process.env.EU_PRIMARY_ORG_ID}})
    ])
      .then(([users, usersEU]) => {
        [spock, mccoy, kirk, scott, checkov] = users;
        [suluEU] = usersEU;
        participants = [spock, mccoy, kirk];

        spock.webex = new WebexCore({
          credentials: {
            supertoken: spock.token
          }
        });

        webex = spock.webex;

        suluEU.webex = new WebexCore({
          credentials: {
            supertoken: suluEU.token
          }
        });

        checkov.webex = new WebexCore({
          credentials: {
            supertoken: checkov.token
          }
        });

        return Promise.all([suluEU, checkov, spock].map((user) => user.webex.internal.services.waitForCatalog('postauth')
          .then(() => user.webex.internal.mercury.connect())));
      }));

    after(() => Promise.all([suluEU, checkov, spock].map((user) => user.webex.internal.mercury.disconnect())));

    describe('#download()', () => {
      let sampleImageSmallOnePng = 'sample-image-small-one.png';

      let conversation, conversationRequestSpy;

      before('create conversation', () => webex.internal.conversation.create({participants})
        .then((c) => { conversation = c; }));

      before('fetch image fixture', () => fh.fetch(sampleImageSmallOnePng)
        .then((res) => { sampleImageSmallOnePng = res; }));

      beforeEach(() => {
        conversationRequestSpy = sinon.spy(webex.internal.conversation, 'request');
      });

      afterEach(() => conversationRequestSpy.restore());

      it('rejects for invalid options argument', () => webex.internal.conversation.share(conversation, [sampleImageSmallOnePng])
        .then((activity) => {
          const item = activity.object.files.items[0];

          item.options = {
            params: {
              allow: 'invalidOption'
            }
          };

          assert.isRejected(webex.internal.conversation.download(item));
        }));

      it('downloads and decrypts an encrypted file', () => webex.internal.conversation.share(conversation, [sampleImageSmallOnePng])
        .then((activity) => webex.internal.conversation.download(activity.object.files.items[0]))
        .then((f) => fh.isMatchingFile(f, sampleImageSmallOnePng)
          .then((result) => assert.isTrue(result))));

      it('emits download progress events for encrypted files', () => webex.internal.conversation.share(conversation, [sampleImageSmallOnePng])
        .then((activity) => {
          const spy = sinon.spy();

          return webex.internal.conversation.download(activity.object.files.items[0])
            .on('progress', spy)
            .then(() => assert.called(spy));
        }));

      it('downloads and decrypts a file without a scr key', () => webex.internal.conversation.download({
        scr: {
          loc: makeLocalUrl('/sample-image-small-one.png')
        }
      })
        .then((f) => fh.isMatchingFile(f, sampleImageSmallOnePng)
          .then((result) => assert.isTrue(result)))
        .then(() => conversationRequestSpy.returnValues[0]
          .then((res) => {
            assert.property(res.options.headers, 'cisco-no-http-redirect');
            assert.property(res.options.headers, 'spark-user-agent');
            assert.property(res.options.headers, 'trackingid');
          })));

      it('downloads and decrypts a non-encrypted file', () => webex.internal.conversation.download({url: makeLocalUrl('/sample-image-small-one.png')})
        .then((f) => fh.isMatchingFile(f, sampleImageSmallOnePng)
          .then((result) => assert.isTrue(result)))
        .then(() => conversationRequestSpy.returnValues[0]
          .then((res) => {
            assert.property(res.options.headers, 'cisco-no-http-redirect');
            assert.property(res.options.headers, 'spark-user-agent');
            assert.property(res.options.headers, 'trackingid');
          })));

      it('downloads non-encrypted file with specific options headers', () => webex.internal.conversation.download({url: makeLocalUrl('/sample-image-small-one.png')}, {
        headers: {
          'cisco-no-http-redirect': null,
          'spark-user-agent': null,
          trackingid: null
        }
      })
        .then((f) => fh.isMatchingFile(f, sampleImageSmallOnePng)
          .then((result) => assert.isTrue(result)))
        .then(() => conversationRequestSpy.returnValues[0]
          .then((res) => {
            assert.isUndefined(res.options.headers['cisco-no-http-redirect']);
            assert.isUndefined(res.options.headers['spark-user-agent']);
            assert.isUndefined(res.options.headers.trackingid);
          })));

      it('emits download progress events for non-encrypted files', () => {
        const spy = sinon.spy();

        return webex.internal.conversation.download({url: makeLocalUrl('/sample-image-small-one.png')})
          .on('progress', spy)
          .then((f) => fh.isMatchingFile(f, sampleImageSmallOnePng)
            .then((result) => assert.isTrue(result)))
          .then(() => assert.called(spy));
      });

      describe('reads exif data and', () => {
        let fileItem;
        let sampleImagePortraitJpeg = 'Portrait_7.jpg';

        before('fetch image fixture', () => fh.fetch(sampleImagePortraitJpeg)
          .then((res) => {
            sampleImagePortraitJpeg = res;
            sampleImagePortraitJpeg.displayName = 'Portrait_7.jpg';
            sampleImagePortraitJpeg.mimeType = 'image/jpeg';
          }));
        it('does not add exif data', () => webex.internal.conversation.share(conversation, [sampleImagePortraitJpeg])
          .then((activity) => {
            fileItem = activity.object.files.items[0];

            return webex.internal.conversation.download(fileItem, {shouldNotAddExifData: true});
          })
          .then((f) => {
            assert.equal(fileItem.orientation, undefined);

            return fh.isMatchingFile(f, sampleImagePortraitJpeg);
          })
          .then((result) => assert.isTrue(result)));

        it('adds exif data', () => webex.internal.conversation.share(conversation, [sampleImagePortraitJpeg])
          .then((activity) => {
            fileItem = activity.object.files.items[0];

            return webex.internal.conversation.download(fileItem);
          })
          .then((f) => {
            assert.equal(fileItem.orientation, 7);

            return fh.isMatchingFile(f, sampleImagePortraitJpeg);
          })
          .then((result) => assert.isTrue(result)));
      });
    });

    describe('#get()', () => {
      let conversation, conversation2;

      before('create conversations', () => Promise.all([
        webex.internal.conversation.create({participants: [mccoy.id]})
          .then((c) => { conversation = c; }),
        webex.internal.conversation.create({participants: [scott.id]})
          .then((c) => { conversation2 = c; })
      ]));

      it('retrieves a single conversation by url', () => webex.internal.conversation.get({url: conversation.url})
        .then((c) => {
          assert.equal(c.id, conversation.id);
          assert.equal(c.url, conversation.url);
        }));

      it('retrieves a single conversation by id', () => webex.internal.conversation.get({id: conversation.id})
        .then((c) => {
          assert.equal(c.id, conversation.id);
          assert.equal(c.url, conversation.url);
        }));

      it('retrieves a 1:1 conversation by userId', () => webex.internal.conversation.get({user: mccoy})
        .then((c) => {
          assert.equal(c.id, conversation.id);
          assert.equal(c.url, conversation.url);
        }));

      it('retrieves a 1:1 conversation with a deleted user', () => webex.internal.conversation.get({user: scott})
        .then((c) => {
          assert.equal(c.id, conversation2.id);
          assert.equal(c.url, conversation2.url);
        })
        .then(() => testUsers.remove([scott]))
        // add retries to address CI propagation delay
        .then(() => retry(() => assert.isRejected(webex.internal.conversation.get({user: scott}))))
        .then(() => retry(() => webex.internal.conversation.get({user: scott}, {includeConvWithDeletedUserUUID: true})))
        .then((c) => {
          assert.equal(c.id, conversation2.id);
          assert.equal(c.url, conversation2.url);
        }));

      it('decrypts the contents of activities in the retrieved conversation', () => webex.internal.conversation.post(conversation, {
        displayName: 'Test Message'
      })
        .then(() => webex.internal.conversation.get({url: conversation.url}, {activitiesLimit: 50}))
        .then((c) => {
          const posts = c.activities.items.filter((activity) => activity.verb === 'post');

          assert.lengthOf(posts, 1);
          assert.equal(posts[0].object.displayName, 'Test Message');
        }));
    });

    describe('#list()', () => {
      let conversation1, conversation2;

      before('create conversations', () =>
        webex.internal.conversation.create({
          displayName: 'test 1',
          participants
        })
          .then((c) => { conversation1 = c; })
          .then(() => webex.internal.conversation.create({
            displayName: 'test 2',
            participants
          }))

          .then((c) => { conversation2 = c; }));

      it('retrieves a set of conversations', () => webex.internal.conversation.list({
        conversationsLimit: 2
      })
        .then((conversations) => {
          assert.include(map(conversations, 'url'), conversation1.url);
          assert.include(map(conversations, 'url'), conversation2.url);
        }));

      it('retrieves a paginated set of conversations', () => webex.internal.conversation.paginate({
        conversationsLimit: 1,
        personRefresh: false,
        paginate: true
      })
        .then((response) => {
          const conversations = response.page.items;

          assert.equal(conversations.length, 1);
          assert.equal(conversations[0].displayName, conversation2.displayName);

          return webex.internal.conversation.paginate({page: response.page});
        })
        .then((response) => {
          const conversations = response.page.items;

          assert.equal(conversations.length, 1);
          assert.equal(conversations[0].displayName, conversation1.displayName);
        }));


      describe('with deferDecrypt = true', () => {
        it('retrieves a non-decrypted set of conversations each with a bound decrypt method', () => webex.internal.conversation.list({
          conversationsLimit: 2,
          deferDecrypt: true
        })
          .then(([c1, c2]) => {
            assert.lengthOf(c1.displayName.split('.'), 5, '5 periods implies this is a jwt and not a decrypted string');
            assert.notInclude(['test 1, test 2'], c1.displayName);

            assert.lengthOf(c2.displayName.split('.'), 5, '5 periods implies this is a jwt and not a decrypted string');
            assert.notInclude(['test 1, test 2'], c2.displayName);

            return Promise.all([
              c1.decrypt()
                .then(() => assert.notInclude(['test 1, test 2'], c1.displayName)),
              c2.decrypt()
                .then(() => assert.notInclude(['test 1, test 2'], c2.displayName))
            ]);
          }));
      });

      describe('with conversation from remote clusters', () => {
        let conversation3, conversation4;

        before('create conversations in EU cluster', () => Promise.all([
          suluEU.webex.internal.conversation.create({
            displayName: 'eu test 1',
            participants
          })
            .then((c) => { conversation3 = c; }),
          suluEU.webex.internal.conversation.create({
            displayName: 'eu test 2',
            participants: [checkov.id, spock.id]
          })
            .then((c) => { conversation4 = c; })
        ]));

        it('retrieves local + remote cluster conversations', () => webex.internal.conversation.list()
          .then((conversations) => {
            assert.include(map(conversations, 'url'), conversation1.url);
            assert.include(map(conversations, 'url'), conversation2.url);
            assert.include(map(conversations, 'url'), conversation3.url);
            assert.include(map(conversations, 'url'), conversation4.url);
          }));

        it('retrieves only remote cluter conversations if user does not have any local conversations',
          () => checkov.webex.internal.conversation.list()
            .then((conversations) => {
              assert.include(map(conversations, 'url'), conversation4.url);
              assert.lengthOf(conversations, 1);
            }));
      });
    });

    describe('#listLeft()', () => {
      let conversation;

      before('create conversation', () => webex.internal.conversation.create({participants})
        .then((c) => { conversation = c; }));

      it('retrieves the conversations the current user has left', () => webex.internal.conversation.listLeft()
        .then((c) => {
          assert.lengthOf(c, 0);

          return webex.internal.conversation.leave(conversation);
        })
        .then(() => webex.internal.conversation.listLeft())
        .then((c) => {
          assert.lengthOf(c, 1);
          assert.equal(c[0].id, conversation.id);
        }));
    });

    describe('#listActivities()', () => {
      let conversation;

      before('create conversation with activity', () => webex.internal.conversation.create({participants})
        .then((c) => {
          conversation = c;
          assert.lengthOf(conversation.participants.items, 3);

          return webex.internal.conversation.post(conversation, {displayName: 'first message'});
        }));

      it('retrieves activities for the specified conversation', () => webex.internal.conversation.listActivities({conversationUrl: conversation.url})
        .then((activities) => {
          assert.isArray(activities);
          assert.lengthOf(activities, 2);
        }));
    });

    describe('#listMentions()', () => {
      let webex2;

      before('connect mccoy to mercury', () => {
        webex2 = new WebexCore({
          credentials: {
            authorization: mccoy.token
          }
        });

        return webex2.internal.mercury.connect();
      });

      after(() => webex2 && webex2.internal.mercury.disconnect());

      let conversation;

      before('create conversation', () => webex.internal.conversation.create({participants})
        .then((c) => {
          conversation = c;
          assert.lengthOf(conversation.participants.items, 3);
        }));

      it('retrieves activities in which the current user was mentioned', () => webex2.internal.conversation.post(conversation, {
        displayName: 'Green blooded hobgloblin',
        content: `<webex-mention data-object-type="person" data-object-id="${spock.id}">Green blooded hobgloblin</webex-mention>`,
        mentions: {
          items: [{
            id: `${spock.id}`,
            objectType: 'person'
          }]
        }
      })
        .then((activity) => webex.internal.conversation.listMentions({sinceDate: Date.parse(activity.published) - 1})
          .then((mentions) => {
            assert.lengthOf(mentions, 1);
            assert.equal(mentions[0].url, activity.url);
          })));
    });

    // TODO: add testing for bulk_activities_fetch() with clusters later
    describe('#bulkActivitiesFetch()', () => {
      let jenny, maria, dan, convo1, convo2;
      let webex3;

      before('create tests users and connect one to mercury', () => testUsers.create({count: 4})
        .then((users) => {
          [jenny, maria, dan] = users;

          webex3 = new WebexCore({
            credentials: {
              authorization: jenny.token
            }
          });

          return webex3.internal.mercury.connect();
        }));

      after(() => webex3 && webex3.internal.mercury.disconnect());

      before('create conversation 1', () => webex3.internal.conversation.create({participants: [jenny, maria]})
        .then((c1) => { convo1 = c1; }));

      before('create conversation 2', () => webex3.internal.conversation.create({participants: [jenny, dan]})
        .then((c2) => { convo2 = c2; }));

      it('add comments to convo1, and check post requests successfully went through', () =>
        webex3.internal.conversation.post(convo1, {displayName: 'BAGELS (O)'})
          .then((c1) => {
            assert.equal(c1.object.displayName, 'BAGELS (O)');

            return webex3.internal.conversation.post(convo1, {displayName: 'Cream Cheese'});
          })
          .then((c2) => { assert.equal(c2.object.displayName, 'Cream Cheese'); }));

      it('add comments to convo2, and check post requests successfully went through', () =>
        webex3.internal.conversation.post(convo2, {displayName: 'Want to head to lunch soon?'})
          .then((c1) => {
            assert.equal(c1.object.displayName, 'Want to head to lunch soon?');

            return webex3.internal.conversation.post(convo2, {displayName: 'Sure :)'});
          })
          .then((c2) => {
            assert.equal(c2.object.displayName, 'Sure :)');

            return webex3.internal.conversation.post(convo2, {displayName: 'where?'});
          })
          .then((c3) => {
            assert.equal(c3.object.displayName, 'where?');

            return webex3.internal.conversation.post(convo2, {displayName: 'Meekong Bar!'});
          })
          .then((c4) => { assert.equal(c4.object.displayName, 'Meekong Bar!'); }));

      it('retrieves activities from a single conversation', () =>
        webex3.internal.conversation.listActivities({conversationUrl: convo1.url})
          .then((convoActivities) => {
            const activityURLs = [];

            convoActivities.map((a) => {
              if (a.verb === 'post') {
                activityURLs.push(a.url);
              }

              return activityURLs;
            });
            webex3.internal.conversation.bulkActivitiesFetch(activityURLs)
              .then((bulkFetchedActivities) => {
                assert.equal(bulkFetchedActivities, convoActivities);
              });
          }));

      it('retrieves activities from multiple conversations', () =>
        webex3.internal.conversation.listActivities({conversationUrl: convo1.url})
          .then((convo1Activities) => {
            const activityURLs = [];

            // gets all post activty urls from convo1
            convo1Activities.map((a1) => {
              if (a1.verb === 'post') {
                activityURLs.push(a1.url);
              }

              return activityURLs;
            });
            // gets activity urls of only comment 3 and 4 from convo2
            webex3.internal.conversation.listActivities({conversationUrl: convo2.url})
              .then((convo2Activities) => {
                [3, 4].map((i) => activityURLs.push(convo2Activities[i.url]));
              });
            webex3.internal.conversation.bulkActivitiesFetch(activityURLs)
              .then((bulkFetchedActivities) => {
                const expectedActivities = convo1Activities;

                expectedActivities.push(convo1Activities[3]);
                expectedActivities.push(convo1Activities[4]);
                assert.equal(bulkFetchedActivities, expectedActivities);
              });
          }));

      it('given a activity url that does not exist, should return []', () => {
        const mockURL = 'https://conversation-intb.ciscospark.com/conversation/api/v1/activities/6d8c7c90-a770-11e9-bcfb-6616ead99ac3';

        webex3.internal.conversation.bulkActivitiesFetch([mockURL])
          .then((bulkFetchedActivities) => {
            assert.equal(bulkFetchedActivities, []);
          });
      });
    });
  });
});
