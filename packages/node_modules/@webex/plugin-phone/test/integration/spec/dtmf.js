/*!
 * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.
 */

import '@webex/plugin-phone';

import WebexCore from '@webex/webex-core';
import CMR from '../lib/cmr';
import {browserOnly, flaky, handleErrorEvent} from '@webex/test-helper-mocha';
import {expectMembershipConnectedEvent} from '../lib/event-expectations';
import testUsers from '@webex/test-helper-test-users';

if (process.env.NODE_ENV !== 'test') {
  throw new Error('Cannot run the plugin-phone test suite without NODE_ENV === "test"');
}

browserOnly(describe)('plugin-phone', function () {
  this.timeout(60000);
  flaky(describe, process.env.SKIP_FLAKY_TESTS)('Call', () => {
    const users = {
      spock: null
    };
    let spock;

    before('create users and register', () => testUsers.create({count: Object.keys(users).length})
      .then((created) => Promise.all(Object.keys(users).map((name, index) => {
        users[name] = created[index];
        const user = users[name];

        user.webex = new WebexCore({
          credentials: {
            authorization: user.token
          }
        });

        return user.webex.phone.register();
      })))
      .then(() => {
        ({spock} = users);
      }));


    after('unregister users', () => Promise.all(Object.keys(users).map((name) => {
      const user = users[name];

      return user && user.webex.phone.deregister()
        // eslint-disable-next-line no-console
        .catch((reason) => console.warn(`could not unregister ${user}`, reason));
    })));

    describe('#sendDtmf()', () => {
      let cmr;

      beforeEach('reserve cmr', () => CMR.reserve(spock.webex)
        .then((c) => {
          cmr = c;
        }));

      afterEach('release cmr', () => cmr && cmr.release()
        // eslint-disable-next-line no-console
        .catch((err) => console.warn('failed to release CMR', err)));

      it('sends the tones required to join a CMR bridge', () => handleErrorEvent(spock.webex.phone.dial(cmr.sipAddress), (call) => expectMembershipConnectedEvent(call)
        .then(() => Promise.all([
          // Unfortunately, this delay seems to be required to deal with the
          // webex start up delay. I don't believe there's any specific event
          // to wait for
          (new Promise((resolve) => setTimeout(resolve, 3000)))
            .then(() => call.sendDtmf(`${cmr.responseMetaData.hostPin}#`)),
          cmr.waitForHostToJoin()
        ]))
        .then(() => call.hangup())));
    });
  });
});
