/*!
 * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.
 */

import Phone from '@webex/plugin-phone';
import {assert} from '@webex/test-helper-chai';
import sinon from '@webex/test-helper-sinon';
import WebexCore from '@webex/webex-core';
import Locus from '@webex/internal-plugin-locus';
import MockWebex from '@webex/test-helper-mock-webex';
import AmpState from 'ampersand-state';
import {browserOnly} from '@webex/test-helper-mocha';
import Mercury from '@webex/internal-plugin-mercury';
import Device from '@webex/internal-plugin-wdm';

import {makeLocusEvent} from '../../lib/locus';

browserOnly(describe)('plugin-phone', () => {
  describe('Phone', () => {
    describe('#isCallingSupported()', () => {
      let webex;

      beforeEach(() => {
        webex = new WebexCore();
      });
      // This is sort of a silly test since we only actually run this test in
      // browsers that support calling...
      it('returns true', () => webex.phone.isCallingSupported()
        .then((result) => assert.deepEqual(result, true)));
    });

    describe('#defaultFacingMode', () => {
      let webex;

      beforeEach(() => {
        webex = new MockWebex({
          children: {
            device: AmpState.extend({}),
            locus: Locus,
            mercury: AmpState.extend({
              connect() {
                return Promise.resolve();
              },
              when() {
                return Promise.resolve([{
                  data: {
                    bufferState: {
                      locus: 'BUFFERED'
                    }
                  }
                }]);
              }
            }),
            phone: Phone
          }
        });

        sinon.stub(webex.internal.locus, 'join');
        sinon.stub(webex.internal.locus, 'create');
        sinon.stub(webex.internal.locus, 'list').returns(Promise.resolve([]));

        webex.internal.device = {
          refresh: () => Promise.resolve()
        };
        webex.config.phone = {
          audioBandwidthLimit: 64000,
          videoBandwidthLimit: 1000000
        };
      });

      it('defaults to user', () => {
        assert.equal(webex.phone.defaultFacingMode, 'user');
      });

      describe('when video constraints are not specified', () => {
        it('gets passed as the video constraint', (done) => {
          const call = webex.phone.dial('blarg');

          call.once('error', done);
          sinon.stub(call.media, 'createOffer').callsFake(() => {
            try {
              assert.isTrue(call.media.constraints.audio);
              assert.deepEqual(call.media.constraints.video, {
                facingMode: {
                  ideal: 'user'
                }
              });
              done();
            }
            catch (err) {
              done(err);
            }
          });
        });
      });

      describe('when video constraints are specified', () => {
        it('does not get passed as the video constraint', (done) => {
          const call = webex.phone.dial('blarg', {
            constraints: {
              audio: true
            }
          });

          call.once('error', done);
          sinon.stub(call.media, 'createOffer').callsFake(() => {
            try {
              assert.isTrue(call.media.constraints.audio);
              assert.notOk(call.media.constraints.video);
              done();
            }
            catch (err) {
              done(err);
            }
          });
        });
      });
    });

    describe('when two events arrive for the same locus', () => {
      let webex;

      beforeEach(() => {
        webex = new MockWebex({
          children: {
            device: Device,
            mercury: Mercury,
            locus: Locus,
            phone: Phone
          }
        });
        webex.people = {
          inferPersonIdFromUuid(id) {
            return id;
          }
        };
        webex.config.phone = {audioBandwidthLimit: 64000, videoBandwidthLimit: 1000000};
      });

      it('only emits a single call:incoming event', () => {
        const spy = sinon.spy();

        webex.phone.on('call:incoming', spy);
        const id = Date.now();

        webex.internal.mercury._onmessage(makeLocusEvent({
          id,
          lastActive: 1
        }));

        return Promise.resolve()
          .then(() => {
            assert.calledOnce(spy);
            webex.internal.mercury._onmessage(makeLocusEvent({
              id,
              lastActive: 1
            }));
          })
          .then(() => {
            assert.calledOnce(spy);
          });
      });
    });

    describe('call:created event', () => {
      let webex;

      beforeEach(() => {
        webex = new MockWebex({
          children: {
            device: Device,
            mercury: Mercury,
            locus: Locus,
            phone: Phone
          }
        });
        webex.people = {
          inferPersonIdFromUuid(id) {
            return id;
          }
        };
        webex.config.phone = {audioBandwidthLimit: 64000, videoBandwidthLimit: 1000000};
      });

      it('should emit a call:created event when a new locus arrives', () => {
        const spy = sinon.spy();

        webex.phone.on('call:created', spy);
        const id = Date.now();

        webex.internal.mercury._onmessage(makeLocusEvent({
          id,
          lastActive: 1
        }));

        return Promise.resolve()
          .then(() => {
            assert.calledOnce(spy);
            webex.internal.mercury._onmessage(makeLocusEvent({
              id,
              lastActive: 1
            }));
          });
      });

      it('should not emit a call:created event when a locus arrives that is already known', () => {
        const spy = sinon.spy();

        webex.phone.on('call:created', spy);

        const id = Date.now();

        webex.internal.mercury._onmessage(makeLocusEvent({
          id,
          lastActive: 1
        }));

        return Promise.resolve()
          .then(() => {
            assert.calledOnce(spy);
            webex.internal.mercury._onmessage(makeLocusEvent({
              id,
              lastActive: 1
            }));
          })
          .then(() => {
            // calls:created event should not trigger again
            assert.calledOnce(spy);
          });
      });

      it('should not emit a call:created event when a locus arrives that is inactive', () => {
        const spy = sinon.spy();

        webex.phone.on('call:created', spy);

        const id = Date.now();

        webex.internal.mercury._onmessage(makeLocusEvent({
          id,
          lastActive: 1,
          state: 'inactive'
        }));

        return Promise.resolve()
          .then(() => {
            assert.notCalled(spy);
          });
      });
    });
  });
});
