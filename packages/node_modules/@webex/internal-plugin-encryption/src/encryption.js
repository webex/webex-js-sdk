/*!
 * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.
 */

import {WebexPlugin} from '@webex/webex-core';
import {proxyEvents, tap, transferEvents} from '@webex/common';
import {EventEmitter} from 'events';
import jose from 'node-jose';
import SCR from 'node-scr';
import ensureBuffer from './ensure-buffer';

import KMS from './kms';

const Encryption = WebexPlugin.extend({
  children: {
    kms: KMS
  },

  namespace: 'Encryption',

  processKmsMessageEvent(event) {
    return this.kms.processKmsMessageEvent(event);
  },

  decryptBinary(scr, buffer) {
    return ensureBuffer(buffer)
      .then((b) => {
        /* istanbul ignore if */
        if (buffer.length === 0 || buffer.byteLength === 0) {
          return Promise.reject(new Error('Attempted to decrypt zero-length buffer'));
        }

        return scr.decrypt(b);
      });
  },

  /**
   * Decrypt a SCR (Secure Content Resource) using the supplied key uri.
   *
   * @param {string} key - The uri of a key stored in KMS
   * @param {Object} cipherScr - An encrypted SCR
   * @param {Object} options
   * @param {string} options.onBehalfOf - Fetch the KMS key on behalf of another user (using the user's UUID), active user requires the 'spark.kms_orgagent' role
   * @returns {Object} Decrypted SCR
   */
  decryptScr(key, cipherScr, options) {
    return this.getKey(key, options)
      .then((k) => SCR.fromJWE(k.jwk, cipherScr));
  },

  /**
   * Decrypt text using the supplied key uri.
   *
   * @param {string} key - The uri of a key stored in KMS
   * @param {string} ciphertext - Encrypted text
   * @param {Object} options
   * @param {string} options.onBehalfOf - Fetch the KMS key on behalf of another user (using the user's UUID), active user requires the 'spark.kms_orgagent' role
   * @returns {string} Decrypted plaintext
   */
  decryptText(key, ciphertext, options) {
    return this.getKey(key, options)
      .then((k) => jose.JWE
        .createDecrypt(k.jwk)
        .decrypt(ciphertext)
        .then((result) => result.plaintext.toString()));
  },

  download(scr) {
    /* istanbul ignore if */
    if (!scr.loc) {
      return _promise2.default.reject(new Error('`scr.loc` is required'));
    }

    var shunt = new _events.EventEmitter();
    var promise = this._fetchDownloadUrl(scr);

    (0, _common.proxyEvents)(shunt, promise);

    return promise
  },

  _fetchDownloadUrl(scr) {
    this.logger.info('encryption: retrieving download url for encrypted file');

    if (process.env.NODE_ENV !== 'production' && scr.loc.includes('localhost')) {
      this.logger.info('encryption: bypassing webex files because this looks to be a test file on localhost');

      return Promise.resolve(scr.loc);
    }

    return this.request({
      method: 'POST',
      service: 'files',
      resource: 'download/endpoints',
      body: {
        endpoints: [
          scr.loc
        ]
      }
    }).then(function (res) {
      var url = scr.loc;
      return _this2._callDownloadUrl(url, scr, res);
    });
  },

  // Call to /bytes API.
  _callDownloadUrl(url, scr, res){
    var _this2 = this;
    return this.request({
      method: 'GET',
      uri: url,
    }).then(function (res) {
      return _this2._helperFunction(res, scr);
    }).catch((err) => {
      if(err.statusCode == 302){
        return Promise.resolve(_this2._helperFunction(res, scr));
      } else {
        return Promise.reject(err);
      }
    });
  }, 

  // Download and decrypt the file
  _helperFunction(res, scr){
    var _this = this;
    var shunt = new _events.EventEmitter();
    var options = {
      method: 'GET',
      uri: res.body.endpoints[scr.loc],
      responseType: 'buffer'
    };

    var ret = this.request(options);

    (0, _common.transferEvents)('progress', options.download, shunt);

    return ret.then(function (res) {
      return _this.decryptBinary(scr, res.body);
    })
  }, 

  encryptBinary(file) {
    return ensureBuffer(file)
      .then((buffer) => SCR.create()
        .then((scr) => scr.encrypt(buffer)
          .then(ensureBuffer)
          // eslint-disable-next-line max-nested-callbacks
          .then((cdata) => ({scr, cdata}))));
  },

  /**
   * Encrypt a SCR (Secure Content Resource) using the supplied key uri.
   *
   * @param {string} key - The uri of a key stored in KMS
   * @param {Object} scr - Plaintext
   * @param {Object} options
   * @param {string} options.onBehalfOf - Fetch the KMS key on behalf of another user (using the user's UUID), active user requires the 'spark.kms_orgagent' role
   * @returns {string} Encrypted SCR
   */
  encryptScr(key, scr, options) {
    /* istanbul ignore if */
    if (!scr.loc) {
      return Promise.reject(new Error('Cannot encrypt `scr` without first setting `loc`'));
    }

    return this.getKey(key, options)
      .then((k) => scr.toJWE(k.jwk));
  },

  /**
   * Encrypt plaintext using the supplied key uri.
   *
   * @param {string} key - The uri of a key stored in KMS
   * @param {string} plaintext
   * @param {Object} options
   * @param {string} options.onBehalfOf - Fetch the KMS key on behalf of another user (using the user's UUID), active user requires the 'spark.kms_orgagent' role
   * @returns {string} Encrypted text
   */
  encryptText(key, plaintext, options) {
    return this.getKey(key, options)
      .then((k) => jose.JWE
        .createEncrypt(this.config.joseOptions, {
          key: k.jwk,
          header: {
            alg: 'dir'
          },
          reference: null
        })
        .final(plaintext, 'utf8'));
  },

  /**
   * Fetch the key associated with the supplied KMS uri.
   *
   * @param {string} uri - The uri of a key stored in KMS
   * @param {Object} options
   * @param {string} options.onBehalfOf - Fetch the KMS key on behalf of another user (using the user's UUID), active user requires the 'spark.kms_orgagent' role
   * @returns {string} Key
   */
  getKey(uri, {onBehalfOf} = {}) {
    if (uri.jwk) {
      return this.kms.asKey(uri);
    }

    let storageKey = uri;

    if (onBehalfOf) {
      storageKey += `/onBehalfOf/${onBehalfOf}`;
    }

    return this.unboundedStorage.get(storageKey)
      .then((keyString) => JSON.parse(keyString))
      .then((keyObject) => this.kms.asKey(keyObject))
      .catch(() => this.kms.fetchKey({uri, onBehalfOf})
        .then(tap((key) => this.unboundedStorage.put(storageKey, JSON.stringify(key, replacer)))));
  }
});

/**
 * JSON.stringify replacer that ensures private key data is serialized.
 * @param {string} k
 * @param {mixed} v
 * @returns {mixed}
 */
function replacer(k, v) {
  if (k === 'jwk') {
    // note: this[k] and v may be different representations of the same value
    // eslint-disable-next-line no-invalid-this
    const json = this[k].toJSON(true);

    return json;
  }

  return v;
}

export default Encryption;
