/*!
 * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.
 */

/* eslint camelcase: [0] */

import url from 'url';

import {assert} from '@webex/test-helper-chai';
import {browserOnly} from '@webex/test-helper-mocha';
import sinon from 'sinon';
import MockWebex from '@webex/test-helper-mock-webex';
import {Credentials, Services} from '@webex/webex-core';
import Authorization from '@webex/plugin-authorization-browser-first-party';
import {base64, patterns} from '@webex/common';
import {merge} from 'lodash';

browserOnly(describe)('plugin-authorization-browser-first-party', () => {
  describe('Authorization', () => {
    function makeWebex(href = 'https://example.com', csrfToken = undefined, config = {}) {
      const mockWindow = {
        history: {
          replaceState(a, b, location) {
            mockWindow.location.href = location;
          }
        },
        location: {
          href
        },
        sessionStorage: {
          getItem: sinon.stub().returns(csrfToken),
          removeItem: sinon.spy(),
          setItem: sinon.spy()
        }
      };

      sinon.spy(mockWindow.history, 'replaceState');

      const webex = new MockWebex({
        children: {
          authorization: Authorization,
          credentials: Credentials,
          services: Services
        },
        request: sinon.stub().returns(Promise.resolve({body: {access_token: 'AT', token_type: 'Fake', refresh_token: 'RT'}})),
        config: merge({
          credentials: {
            idbroker: {
              url: process.env.IDBROKER_BASE_URL,
              defaultUrl: process.env.IDBROKER_BASE_URL
            },
            identity: {
              url: process.env.IDENTITY_BASE_URL,
              defaultUrl: process.env.IDENTITY_BASE_URL
            },
            activationUrl: `${process.env.IDBROKER_BASE_URL || 'https://idbroker.webex.com'}/idb/token/v1/actions/UserActivation/invoke`,
            authorizeUrl: `${process.env.IDBROKER_BASE_URL || 'https://idbroker.webex.com'}/idb/oauth2/v1/authorize`,
            setPasswordUrl: `${process.env.IDBROKER_BASE_URL || 'https://identity.webex.com'}/identity/scim/v1/Users`,
            logoutUrl: `${process.env.IDBROKER_BASE_URL || 'https://idbroker.webex.com'}/idb/oauth2/v1/logout`,
            // eslint-disable-next-line camelcase
            client_id: 'fake',
            // eslint-disable-next-line camelcase
            client_secret: 'fake',
            // eslint-disable-next-line camelcase
            redirect_uri: 'http://example.com',
            // eslint-disable-next-line camelcase
            scope: 'scope:one',
            refreshCallback: () => Promise.resolve()
          }
        }, config),
        getWindow() {
          return mockWindow;
        }
      });

      return webex;
    }

    describe('#initialize()', () => {
      describe('when there is a code in the url', () => {
        it('exchanges it for an access token and sets ready', () => {
          const webex = makeWebex('http://example.com/?code=5');

          assert.isFalse(webex.authorization.ready);
          assert.isFalse(webex.credentials.canAuthorize);

          return webex.authorization.when('change:ready')
            .then(() => {
              assert.calledOnce(webex.request);
              assert.isTrue(webex.authorization.ready);
              assert.isTrue(webex.credentials.canAuthorize);
            });
        });

        it('validates the csrf token', () => {
          const csrfToken = 'abcd';

          assert.throws(() => {
            // eslint-disable-next-line no-unused-vars
            const webex = makeWebex(`http://example.com/?code=5&state=${base64.encode(JSON.stringify({csrf_token: 'someothertoken'}))}`, csrfToken);
          }, /CSRF token someothertoken does not match stored token abcd/);

          assert.throws(() => {
            // eslint-disable-next-line no-unused-vars
            const webex = makeWebex(`http://example.com/?code=5&state=${base64.encode(JSON.stringify({}))}`, csrfToken);
          }, /Expected CSRF token abcd, but not found in redirect query/);

          assert.throws(() => {
            // eslint-disable-next-line no-unused-vars
            const webex = makeWebex('http://example.com/?code=5', csrfToken);
          }, /Expected CSRF token abcd, but not found in redirect query/);

          const webex = makeWebex(`http://example.com/?code=5&state=${base64.encode(JSON.stringify({csrf_token: csrfToken}))}`, csrfToken);

          return webex.authorization.when('change:ready')
            .then(() => {
              assert.isTrue(webex.credentials.canAuthorize);
              assert.called(webex.getWindow().sessionStorage.removeItem);
            });
        });

        it('removes the oauth parameters from the url', () => {
          const csrfToken = 'abcd';

          const webex = makeWebex(`http://example.com/?code=5&state=${base64.encode(JSON.stringify({csrf_token: csrfToken, something: true}))}`, csrfToken);

          return webex.authorization.when('change:ready')
            .then(() => {
              assert.isTrue(webex.credentials.canAuthorize);
              assert.called(webex.getWindow().sessionStorage.removeItem);
              assert.called(webex.getWindow().history.replaceState);
              assert.equal(webex.getWindow().location.href, `http://example.com/?state=${base64.encode(JSON.stringify({something: true}))}`);
            });
        });
      });
      describe('when the url contains an error', () => {
        it('throws a grant error', () => {
          assert.throws(() => {
            makeWebex('http://127.0.0.1:8000/?error=invalid_scope&error_description=The%20requested%20scope%20is%20invalid.');
          }, /The requested scope is invalid./);
        });
      });

      describe('when there is nothing in the url', () => {
        it('sets ready', () => {
          const webex = makeWebex('http://example.com');

          assert.isTrue(webex.authorization.ready);
          assert.isFalse(webex.credentials.canAuthorize);
        });
      });
    });

    describe('#initiateLogin()', () => {
      it('calls #initiateAuthorizationCodeGrant()', () => {
        const webex = makeWebex(undefined, undefined, {
          credentials: {
            clientType: 'confidential'
          }
        });

        sinon.spy(webex.authorization, 'initiateAuthorizationCodeGrant');

        return webex.authorization.initiateLogin()
          .then(() => {
            assert.called(webex.authorization.initiateAuthorizationCodeGrant);
            assert.include(webex.getWindow().location, 'response_type=code');
          });
      });

      it('adds a csrf_token to the login url and sessionStorage', () => {
        const webex = makeWebex(undefined, undefined, {
          credentials: {
            clientType: 'confidential'
          }
        });

        sinon.spy(webex.authorization, 'initiateAuthorizationCodeGrant');

        return webex.authorization.initiateLogin()
          .then(() => {
            assert.called(webex.authorization.initiateAuthorizationCodeGrant);
            assert.include(webex.getWindow().location, 'response_type=code');
            const {query} = url.parse(webex.getWindow().location, true);
            let {state} = query;

            state = JSON.parse(base64.decode(state));
            assert.property(state, 'csrf_token');
            assert.isDefined(state.csrf_token);
            assert.match(state.csrf_token, patterns.uuid);
            assert.called(webex.getWindow().sessionStorage.setItem);
            assert.calledWith(webex.getWindow().sessionStorage.setItem, 'oauth2-csrf-token', state.csrf_token);
          });
      });

      it('sets #isAuthorizing', () => {
        const webex = makeWebex(undefined, undefined, {
          credentials: {
            clientType: 'confidential'
          }
        });

        assert.isFalse(webex.authorization.isAuthorizing);
        const p = webex.authorization.initiateLogin();

        assert.isTrue(webex.authorization.isAuthorizing);

        return p.then(() => assert.isFalse(webex.authorization.isAuthorizing));
      });

      it('sets #isAuthenticating', () => {
        const webex = makeWebex(undefined, undefined, {
          credentials: {
            clientType: 'confidential'
          }
        });

        assert.isFalse(webex.authorization.isAuthenticating);
        const p = webex.authorization.initiateLogin();

        assert.isTrue(webex.authorization.isAuthenticating);

        return p.then(() => assert.isFalse(webex.authorization.isAuthenticating));
      });
    });

    describe('#initiateAuthorizationCodeGrant()', () => {
      it('redirects to the login page with response_type=code', () => {
        const webex = makeWebex(undefined, undefined, {
          credentials: {
            clientType: 'confidential'
          }
        });

        sinon.spy(webex.authorization, 'initiateAuthorizationCodeGrant');

        return webex.authorization.initiateLogin()
          .then(() => {
            assert.called(webex.authorization.initiateAuthorizationCodeGrant);
            assert.include(webex.getWindow().location, 'response_type=code');
          });
      });
    });

    describe('#_cleanUrl()', () => {
      it('removes the state parameter when it has no keys', () => {
        const webex = makeWebex(undefined, undefined, {
          credentials: {
            clientType: 'confidential'
          }
        });
        const location = {
          query: {
            code: 'code',
            state: {
              csrf_token: 'token'
            }
          }
        };

        sinon.spy(webex.authorization, '_cleanUrl');
        webex.authorization._cleanUrl(location);
        assert.called(webex.getWindow().history.replaceState);
        assert.equal(webex.getWindow().location.href, '');
      });

      it('keeps the parameter when it has keys', () => {
        const webex = makeWebex(undefined, undefined, {
          credentials: {
            clientType: 'confidential'
          }
        });
        const location = {
          query: {
            code: 'code',
            state: {
              csrf_token: 'token',
              key: 'value'
            }
          }
        };

        sinon.spy(webex.authorization, '_cleanUrl');
        webex.authorization._cleanUrl(location);
        assert.called(webex.getWindow().history.replaceState);
        const {href} = webex.getWindow().location;

        assert.isDefined(href);
        assert.equal(href, `?state=${base64.encode(JSON.stringify({key: 'value'}))}`);
        assert.notInclude(href, 'csrf_token');
      });
    });
  });
});
