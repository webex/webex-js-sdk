/*!
 * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.
 */

import {assert} from '@webex/test-helper-chai';
import MockWebex from '@webex/test-helper-mock-webex';
import sinon from '@webex/test-helper-sinon';
import Device from '@webex/internal-plugin-wdm';
import lolex from 'lolex';
import {cloneDeep} from 'lodash';

import deviceFixture from '../lib/device-fixture';

describe('plugin-wdm', () => {
  describe('Device', () => {
    let webex;

    beforeEach(() => {
      webex = new MockWebex({
        children: {
          device: Device
        },
        config: {
          device: {
            enableInactivityEnforcement: true,
            isInMeeting: false,
            isInNetwork: false,
            isReachabilityChecked: false
          }
        }
      });

      webex.internal.device.set(cloneDeep(deviceFixture));
      webex.logout = sinon.spy();
    });

    let clock;

    beforeEach(() => {
      clock = lolex.install({now: Date.now()});
    });

    afterEach(() => {
      clock.uninstall();
    });

    describe('autologout policy', () => {
      describe('when some or all of the policy configuration is unspecified', () => {
        it('stays dormant', () => {
          assert.isUndefined(webex.internal.device.logoutTimer);

          webex.internal.device.intranetInactivityCheckUrl = 'http://ping.example.com/ping';
          assert.isUndefined(webex.internal.device.logoutTimer);

          webex.internal.device.intranetInactivityDuration = 2;
          webex.internal.device.inNetworkInactivityDuration = 2;
          assert.isDefined(webex.internal.device.logoutTimer);

          webex.internal.device.unset('intranetInactivityCheckUrl');
          webex.internal.device.unset('inNetworkLogoutTimer');
          webex.internal.device.unset('intranetInactivityDuration');
          webex.internal.device.unset('inNetworkInactivityDuration');
          assert.isUndefined(webex.internal.device.logoutTimer);
        });
      });

      describe('when the local config indicates the policy should be disabled', () => {
        it('stays dormant', () => {
          webex.config.device.enableInactivityEnforcement = false;
          webex.internal.device.set({
            intranetInactivityDuration: 8 * 60 * 60,
            intranetInactivityCheckUrl: 'http://ping.example.com/ping',
            inNetworkInactivityDuration: 8 * 60 * 60
          });
          assert.isUndefined(webex.internal.device.logoutTimer);

          webex.internal.device.intranetInactivityCheckUrl = 'http://ping.example.com/ping';
          assert.isUndefined(webex.internal.device.logoutTimer);

          webex.internal.device.intranetInactivityDuration = 2;
          webex.internal.device.inNetworkInactivityDuration = 2;
          assert.isUndefined(webex.internal.device.logoutTimer);

          webex.internal.device.unset('intranetInactivityCheckUrl');
          assert.isUndefined(webex.internal.device.logoutTimer);
        });
      });

      describe('when the policy configuration is specified', () => {
        // Inactivity Timer
        it('logs the user out according to the policy configuration when ping url can\'t be reached', () => {
          webex.request.returns(Promise.reject());

          webex.internal.device.set({
            intranetInactivityDuration: 8 * 60 * 60,
            intranetInactivityCheckUrl: 'http://ping.example.com/ping',
            isInMeeting: false,
            isInNetwork: false
          });
          assert.calledWith(webex.request, {
            headers: {
              'cisco-no-http-redirect': null,
              'spark-user-agent': null,
              trackingid: null
            },
            method: 'GET',
            uri: 'http://ping.example.com/ping'
          });
          assert.calledOnce(webex.request);
          assert.isDefined(webex.internal.device.logoutTimer);

          clock.tick(8 * 60 * 60 * 1000);
          assert.calledOnce(webex.logout);
        });

        // In Network Inactivity Timer
        it('logs the user out according to the policy configuration when ping url can be reached even when in network', () => {
          webex.request.returns(Promise.resolve({
            statusCode: 200
          }));
          webex.internal.device.set({
            intranetInactivityDuration: 8 * 60 * 60,
            inNetworkInactivityDuration: 8 * 60 * 60,
            intranetInactivityCheckUrl: 'http://ping.example.com/ping',
            isInMeeting: false,
            isInNetwork: false
          });
          assert.calledWith(webex.request, {
            headers: {
              'cisco-no-http-redirect': null,
              'spark-user-agent': null,
              trackingid: null
            },
            method: 'GET',
            uri: 'http://ping.example.com/ping'
          });
          assert.calledOnce(webex.request);
          assert.isDefined(webex.internal.device.logoutTimer);

          clock.tick(8 * 60 * 60 * 1000);
          assert.calledOnce(webex.logout);
        });

        describe('when there is user activity', () => {
          it('resets the logout timer', () => {
            webex.request.returns(Promise.resolve({
              statusCode: 200
            }));
            webex.internal.device.set({
              intranetInactivityDuration: 8 * 60 * 60,
              inNetworkInactivityDuration: 8 * 60 * 60,
              intranetInactivityCheckUrl: 'http://ping.example.com/ping',
              isInMeeting: false,
              isInNetwork: false
            });
            assert.calledWith(webex.request, {
              headers: {
                'cisco-no-http-redirect': null,
                'spark-user-agent': null,
                trackingid: null
              },
              method: 'GET',
              uri: 'http://ping.example.com/ping'
            });
            assert.calledOnce(webex.request);
            assert.isDefined(webex.internal.device.logoutTimer);

            clock.tick(1 * 60 * 60 * 1000);
            webex.emit('user-activity');

            clock.tick(7 * 60 * 60 * 1000);
            assert.notCalled(webex.logout);

            clock.tick(1 * 60 * 60 * 1000);
            assert.calledOnce(webex.logout);
          });

          it('does not call _resetLogoutTimer in arithmetic progression with every post', () => {
            webex.internal.device.set({
              intranetInactivityDuration: 8 * 60 * 60,
              intranetInactivityCheckUrl: 'http://ping.example.com/ping',
              isInMeeting: false,
              isInNetwork: false
            });

            const resetLogoutTimerSpy = sinon.spy(webex.internal.device, '_resetLogoutTimer');

            webex.emit('user-activity');
            clock.tick(1 * 60 * 60 * 1000);
            assert.equal(resetLogoutTimerSpy.callCount, 1);
            resetLogoutTimerSpy.reset();

            webex.emit('user-activity');
            clock.tick(1 * 60 * 60 * 1000);
            assert.equal(resetLogoutTimerSpy.callCount, 1);
            resetLogoutTimerSpy.reset();

            webex.emit('user-activity');
            clock.tick(1 * 60 * 60 * 1000);
            assert.equal(resetLogoutTimerSpy.callCount, 1);
            resetLogoutTimerSpy.reset();

            webex.emit('user-activity');
            clock.tick(1 * 60 * 60 * 1000);
            assert.equal(resetLogoutTimerSpy.callCount, 1);
            resetLogoutTimerSpy.reset();
          });

          it('does not logout when user enters a meeting', () => {
            webex.request.returns(Promise.reject());
            webex.internal.device.set({
              intranetInactivityDuration: 8 * 60 * 60,
              inNetworkInactivityDuration: 8 * 60 * 60,
              intranetInactivityCheckUrl: 'http://ping.example.com/ping',
              isInMeeting: false,
              isInNetwork: false
            });
            assert.calledWith(webex.request, {
              headers: {
                'cisco-no-http-redirect': null,
                'spark-user-agent': null,
                trackingid: null
              },
              method: 'GET',
              uri: 'http://ping.example.com/ping'
            });
            assert.calledOnce(webex.request);
            assert.isDefined(webex.internal.device.logoutTimer);

            clock.tick(1 * 60 * 60 * 1000);
            webex.emit('meeting started');

            clock.tick(7 * 60 * 60 * 1000);
            assert.notCalled(webex.logout);

            webex.emit('meeting ended');
            clock.tick(8 * 60 * 60 * 1000);

            assert.calledOnce(webex.logout);
          });
        });
      });
    });
  });
});
