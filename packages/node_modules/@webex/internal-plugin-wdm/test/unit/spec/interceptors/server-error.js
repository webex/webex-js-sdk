/*!
 * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.
 */

import {assert} from '@webex/test-helper-chai';
import sinon from '@webex/test-helper-sinon';
import Device, {ServerErrorInterceptor} from '@webex/internal-plugin-wdm';
import MockWebex from '@webex/test-helper-mock-webex';
import {WebexHttpError} from '@webex/webex-core';

describe('plugin-wdm', () => {
  describe('ServerErrorInterceptor', () => {
    let interceptor, webex;
    const options = {
      service: 'example',
      uri: 'http://example-1.com/a-service',
      headers: {
        trackingid: 'test'
      }
    };

    beforeEach(() => {
      webex = new MockWebex({
        children: {
          device: Device
        }
      });

      webex.internal.device.url = 'https://wdm-a.example.com/devices/id';
      webex.internal.device.services = {
        exampleServiceUrl: 'http://example.com/a-service'
      };
      webex.internal.metrics.submitClientMetrics = sinon.stub();
      webex.internal.device.serviceCatalog.set({
        service: 'exampleServiceUrl',
        defaultUrl: 'http://example.com/a-service',
        availableHosts: [
          {
            host: 'example-1.com',
            priority: 1
          },
          {
            host: 'example-2.com',
            priority: 2
          }]
      });

      interceptor = new ServerErrorInterceptor({webex});

      webex.internal.device.features.developer.set([{
        key: 'web-high-availability',
        val: 'true',
        value: true,
        mutable: true,
        lastModified: '2015-06-29T20:02:48.033Z'
      }]);
    });

    describe('#onResponseError()', () => {
      beforeEach('sets web-high-availability to false', () => {
        webex.internal.device.features.developer.set([{
          key: 'web-high-availability',
          val: 'false',
          value: false,
          mutable: true,
          lastModified: '2015-06-29T20:02:48.033Z'
        }]);
      });
      [
        new WebexHttpError.InternalServerError({statusCode: 500, options}),
        new WebexHttpError.BadGateway({statusCode: 502, options}),
        new WebexHttpError.ServiceUnavailable({statusCode: 503, options}),
        new WebexHttpError.GatewayTimeout({statusCode: 504, options})
      ].forEach((error) => {
        it(`changes new service url on server error code ${error.statusCode}`, () => assert.isRejected(interceptor.onResponseError(options, error))
          .then(() => webex.internal.device.getServiceUrl('example'))
          .then((url) => {
            assert.equal(url, 'http://example.com/a-service');
          }));
      });

      it('leaves service url as is on other error code', () => assert.isRejected(interceptor.onResponseError(
        options,
        new WebexHttpError.NotFound({statusCode: 404, options})
      ))
        .then(() => webex.internal.device.getServiceUrl('example'))
        .then((url) => {
          assert.equal(url, 'http://example.com/a-service');
        }));
      describe('when web-ha-messasing is not enabled', () => {
        beforeEach('sets web-high-availability to false', () => {
          webex.internal.device.features.developer.set([{
            key: 'web-high-availability',
            val: 'false',
            value: false,
            mutable: true,
            lastModified: '2015-06-29T20:02:48.033Z'
          }]);

          sinon.spy(webex.internal.device, 'markUrlFailedAndGetNew');
        });

        [
          new WebexHttpError.InternalServerError({statusCode: 500, options}),
          new WebexHttpError.Forbidden({statusCode: 403, options})
        ].forEach((errorCode) => {
          it('does not mark url as failed', () => assert.isRejected(interceptor.onResponseError(
            {
              service: 'example',
              uri: 'http://example.com/a-service'
            },
            {
              statusCode: errorCode
            }
          ))
            .then(() => webex.internal.device.getServiceUrl('example'))
            .then((url) => {
              assert.notCalled(webex.internal.device.markUrlFailedAndGetNew);
              assert.equal(url, 'http://example.com/a-service');
            }));
        });
      });
    });
  });
});
