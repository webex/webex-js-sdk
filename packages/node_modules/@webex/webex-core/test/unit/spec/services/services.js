/*!
 * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.
 */

import {assert} from '@webex/test-helper-chai';
import MockWebex from '@webex/test-helper-mock-webex';
import {Services} from '@webex/webex-core';

/* eslint-disable no-underscore-dangle */
describe('webex-core', () => {
  describe('Services', () => {
    let webex;
    let services;

    before('initialize webex', () => {
      webex = new MockWebex({
        children: {
          services: Services
        }
      });
      services = webex.internal.services;
    });

    describe('#namespace', () => {
      it('is accurate to plugin name', () => {
        assert.equal(services.namespace, 'Services');
      });
    });

    describe('#_catalogs', () => {
      it('is a weakmap', () => {
        assert.typeOf(services._catalogs, 'weakmap');
      });
    });

    describe('#list()', () => {
      let serviceList;

      beforeEach('get services list', () => {
        serviceList = services.list();
      });

      it('must return an object', () => {
        assert.typeOf(serviceList, 'object');
      });

      it('returned list must be of shape {Record<string, string>}', () => {
        Object.keys(serviceList).forEach((key) => {
          assert.typeOf(key, 'string');
          assert.typeOf(serviceList[key], 'string');
        });
      });
    });

    describe('#_formatReceivedHostmap()', () => {
      let serviceHostmap;
      let formattedHM;

      beforeEach(() => {
        serviceHostmap = {
          serviceLinks: {
            'example-a': 'https://example-a.com/api/v1',
            'example-b': 'https://example-b.com/api/v1',
            'example-c': 'https://example-c.com/api/v1'
          },
          hostCatalog: {
            'example-a.com': [
              {host: 'example-a-1.com', ttl: -1, priority: 5},
              {host: 'example-a-2.com', ttl: -1, priority: 3},
              {host: 'example-a-3.com', ttl: -1, priority: 1}
            ],
            'example-b.com': [
              {host: 'example-b-1.com', ttl: -1, priority: 5},
              {host: 'example-b-2.com', ttl: -1, priority: 3},
              {host: 'example-b-3.com', ttl: -1, priority: 1}
            ],
            'example-c.com': [
              {host: 'example-c-1.com', ttl: -1, priority: 5},
              {host: 'example-c-2.com', ttl: -1, priority: 3},
              {host: 'example-c-3.com', ttl: -1, priority: 1}
            ]
          },
          format: 'hostmap'
        };
        formattedHM = services._formatReceivedHostmap(serviceHostmap);
      });

      it('creates an array of equal length of serviceLinks', () => {
        assert.equal(Object.keys(serviceHostmap.serviceLinks).length,
          formattedHM.length);
      });

      it('creates an array of equal length of hostMap', () => {
        assert.equal(Object.keys(serviceHostmap.hostCatalog).length,
          formattedHM.length);
      });

      it('creates an array with matching url data', () => {
        formattedHM.forEach((entry) => {
          assert.equal(serviceHostmap.serviceLinks[entry.name],
            entry.defaultUrl);
        });
      });

      it('creates an array with matching host data', () => {
        let foundFormatted;

        Object.keys(serviceHostmap.hostCatalog).forEach((key) => {
          foundFormatted = formattedHM.find(
            (entry) => entry.defaultUrl.includes(key)
          );

          assert.equal(foundFormatted.hosts, serviceHostmap.hostCatalog[key]);
        });
      });

      it('creates an array with matching names', () => {
        assert.hasAllKeys(serviceHostmap.serviceLinks,
          formattedHM.map((item) => item.name));
      });
    });
  });
});
/* eslint-enable no-underscore-dangle */
