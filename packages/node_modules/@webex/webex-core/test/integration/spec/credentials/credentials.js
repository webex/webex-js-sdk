/*!
 * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.
 */

import {browserOnly, nodeOnly} from '@webex/test-helper-mocha';
import {assert} from '@webex/test-helper-chai';
import testUsers from '@webex/test-helper-test-users';
import WebexCore from '@webex/webex-core';
import refreshCallback from '@webex/test-helper-refresh-callback';

/* eslint camelcase: [0] */

describe('webex-core', () => {
  describe('Credentials', () => {
    let user;

    before(() => testUsers.create({count: 1})
      .then(([u]) => {
        user = u;
      }));

    describe('#refresh()', () => {
      nodeOnly(it)('refreshes an access token', () => {
        const webex = new WebexCore({
          credentials: user.token
        });

        return webex.credentials.refresh()
          .then(() => {
            assert.isDefined(user.token.access_token);
            assert.isDefined(webex.credentials.supertoken.access_token);
            assert.notEqual(webex.credentials.supertoken.access_token, user.token.access_token);
          });
      });

      browserOnly(it)('throws without a refresh callback', () => {
        const webex = new WebexCore({
          credentials: user.token
        });

        return assert.isRejected(webex.credentials.refresh());
      });

      browserOnly(it)('refreshes with a refresh callback', () => {
        const webex = new WebexCore({
          credentials: user.token,
          config: {
            credentials: {
              refreshCallback
            }
          }
        });

        return webex.credentials.refresh()
          .then(() => {
            assert.isDefined(user.token.access_token);
            assert.isDefined(webex.credentials.supertoken.access_token);
            assert.notEqual(webex.credentials.supertoken.access_token, user.token.access_token);
          });
      });
    });
  });
});
