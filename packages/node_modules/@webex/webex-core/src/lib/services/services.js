import Url from 'url';

import {base64} from '@webex/common';

import WebexPlugin from '../webex-plugin';

import ServiceCatalog from './service-catalog';

/* eslint-disable no-underscore-dangle */
/**
 * @class
 */
const Services = WebexPlugin.extend({
  namespace: 'Services',

  props: {
    validateDomains: ['boolean', false, true]
  },

  _catalogs: new WeakMap(),

  /**
   * @private
   * Get the current catalog based on the assocaited
   * webex instance.
   * @returns {ServiceCatalog}
   */
  _getCatalog() {
    return this._catalogs.get(this.webex);
  },

  /**
   * Get a service url from the current services list by name
   * from the associated instance catalog.
   * @param {string} name
   * @param {boolean} [priorityHost]
   * @param {string} [serviceGroup]
   * @returns {string|undefined}
   */
  get(name, priorityHost, serviceGroup) {
    const catalog = this._getCatalog();

    return catalog.get(name, priorityHost, serviceGroup);
  },

  /**
   * Determine if the catalog contains a specific service
   *
   * @param {string} serviceName - The service name to validate.
   * @returns {boolean} - True if the service exists.
   */
  hasService(serviceName) {
    return !!(this.get(serviceName));
  },

  /**
   * Determine if a whilelist exists in the service catalog.
   *
   * @returns {boolean} - True if a allowed domains list exists.
   */
  hasAllowedDomains() {
    const catalog = this._getCatalog();

    return (catalog.getAllowedDomains().length > 0);
  },

  /**
   * Generate a service catalog as an object from
   * the associated instance catalog.
   * @param {boolean} [priorityHost] - use highest priority host if set to `true`
   * @param {string} [serviceGroup]
   * @returns {Record<string, string>}
   */
  list(priorityHost, serviceGroup) {
    const catalog = this._getCatalog();

    return catalog.list(priorityHost, serviceGroup);
  },

  /**
   * Mark a priority host service url as failed.
   * This will mark the host associated with the
   * `ServiceUrl` to be removed from the its
   * respective host array, and then return the next
   * viable host from the `ServiceUrls` host array,
   * or the `ServiceUrls` default url if no other priority
   * hosts are available, or if `noPriorityHosts` is set to
   * `true`.
   * @param {string} url
   * @param {boolean} noPriorityHosts
   * @returns {string}
   */
  markFailedUrl(url, noPriorityHosts) {
    const catalog = this._getCatalog();

    return catalog.markFailedUrl(url, noPriorityHosts);
  },

  /**
   * Update a list of `serviceUrls` to the most current
   * catalog via the defined `discoveryUrl` then returns the current
   * list of services.
   * @param {object} [param]
   * @param {string} [param.from] - This accepts `limited` or `signin`
   * @param {object} [param.query] - This accepts `email`, `orgId` or `userId` key values
   * @param {string} [param.query.email] - must be a standard-format email
   * @param {string} [param.query.orgId] - must be an organization id
   * @param {string} [param.query.userId] - must be a user id
   * @param {string} [param.token] - used for signin catalog
   * @returns {Promise<object>}
   */
  updateServices({from, query, token} = {}) {
    const catalog = this._getCatalog();
    let formattedQuery, serviceGroup;

    // map catalog name to service group name.
    switch (from) {
      case 'limited': serviceGroup = 'preauth'; break;
      case 'signin': serviceGroup = 'signin'; break;
      default: serviceGroup = 'postauth'; break;
    }

    // confirm catalog update for group is not in progress.
    if (catalog.status[serviceGroup].collecting) {
      return this.waitForCatalog(serviceGroup);
    }

    catalog.status[serviceGroup].collecting = true;

    if (serviceGroup === 'preauth') {
      const queryKey = query && Object.keys(query)[0];

      if (!['email', 'userId', 'orgId', 'mode'].includes(queryKey)) {
        return Promise.reject(new Error('a query param of email, userId, orgId, or mode is required'));
      }
    }
    // encode email when query key is email
    if (serviceGroup === 'preauth' || serviceGroup === 'signin') {
      const queryKey = Object.keys(query)[0];

      formattedQuery = {};
      formattedQuery[queryKey] = queryKey === 'email' ?
        base64.encode(query.email) : query[queryKey];
    }

    return this._fetchNewServiceHostmap({
      from,
      token,
      query: formattedQuery
    })
      .then((serviceHostMap) => {
        catalog.updateServiceUrls(serviceGroup, serviceHostMap);
        this.updateCredentialsConfig();
        catalog.status[serviceGroup].collecting = false;
      })
      .catch((error) => {
        catalog.status[serviceGroup].collecting = false;

        return Promise.reject(error);
      });
  },

  /**
   * User validation parameter transfer object for {@link validateUser}.
   * @param {object} ValidateUserPTO
   * @property {string} ValidateUserPTO.email - The email of the user.
   * @property {string} [ValidateUserPTO.reqId] - The activation requester.
   */

  /**
   * User validation return transfer object for {@link validateUser}.
   * @param {object} ValidateUserRTO
   * @property {boolean} ValidateUserRTO.activated - If the user is activated.
   * @property {boolean} ValidateUserRTO.exists - If the user exists.
   * @property {string} ValidateUserRTO.details - A descriptive status message.
   * @property {object} ValidateUserRTO.user - **Atlas** service user object.
   */

  /**
   * Validate if a user is activated and update the service catalogs as needed
   * based on the user's activation status.
   *
   * @param {ValidateUserPTO} - The parameter transfer object.
   * @returns {ValidateUserRTO} - The return transfer object.
   */
  validateUser({email, reqId = 'WEBCLIENT'}) {
    this.logger.info('services: validating a user');

    // Validate that an email parameter key was provided.
    if (!email) {
      return Promise.reject(new Error('`email` is required'));
    }

    // Destructure the credentials config object.
    const {canAuthorize} = this.webex.config;

    // Validate that the user is already authorized.
    if (canAuthorize) {
      return this.updateServices()
        .then(() => this.webex.credentials.getUserToken())
        .then((token) => this.sendUserActivation({
          email,
          reqId,
          token: token.toString()
        }))
        .then((userObj) => ({
          activated: true,
          exists: true,
          details: 'user is authorized via a user token',
          user: userObj
        }));
    }

    // Destructure the client authorization details.
    /* eslint-disable camelcase */
    const {client_id, client_secret} = this.webex.credentials.config;

    // Validate that client authentication details exist.
    if (!client_id || !client_secret) {
      return Promise.reject(new Error(
        'client authentication details are not available'
      ));
    }
    /* eslint-enable camelcase */

    // Declare a class-memeber-scoped token for usage within the promise chain.
    let token;

    // Begin client authentication user validation.
    return this.collectPreauthCatalog({email})
      .then(() => {
        // Retrieve the service url from the updated catalog. This is required
        // since `WebexCore` is usually not fully initialized at the time this
        // request completes.
        const idbrokerService = this.get('idbroker', true);

        // Collect the client auth token.
        return this.webex.credentials.getClientToken({
          uri: `${idbrokerService}idb/oauth2/v1/access_token`,
          scope: 'webexsquare:admin webexsquare:get_conversation Identity:SCIM'
        });
      })
      .then((tokenObj) => {
        // Generate the token string.
        token = tokenObj.toString();

        // Collect the signin catalog using the client auth information.
        return this.collectSigninCatalog({email, token});
      })
      // Validate if collecting the signin catalog failed and populate the RTO
      // with the appropriate content.
      .catch((error) => ({
        exists: (error.name !== 'NotFound'),
        activated: false,
        details: (error.name !== 'NotFound') ?
          'user exists but is not activated' :
          'user does not exist and is not activated'
      }))
      // Validate if the previous promise resolved with an RTO and populate the
      // new RTO accordingly.
      .then((rto) => Promise.all([
        rto || {
          activated: true,
          exists: true,
          details: 'user exists and is activated'
        },
        this.sendUserActivation({email, reqId, token})
      ]))
      .then(([rto, user]) => ({...rto, user}));
  },

  /**
   * User activation parameter transfer object for {@link sendUserActivation}.
   * @typedef {object} SendUserActivationPTO
   * @property {string} SendUserActivationPTO.email - The email of the user.
   * @property {string} SendUserActivationPTO.reqId - The activation requester.
   * @property {string} SendUserActivationPTO.token - The client auth token.
   */

  /**
   * Send a request to activate a user using a client token.
   *
   * @param {SendUserActivationPTO} - The Parameter transfer object.
   * @returns {AtlasDTO} - The DTO returned from the **Atlas** service.
   */
  sendUserActivation({email, reqId, token}) {
    this.logger.info('services: sending user activation request');

    // Send the user activation request to the **Atlas** service.
    return this.request({
      service: 'atlas',
      resource: 'users/activations',
      method: 'POST',
      headers: {
        accept: 'application/json',
        authorization: token,
        'x-prelogin-userid': undefined
      },
      body: {email, reqId},
      shouldRefreshAccessToken: false
    })
      // On success, return the **Atlas** user object.
      .then(({body}) => body)
      // On failure, return an empty user object.
      .catch(() => ({}));
  },

  /**
   * simplified method to update the preauth catalog via email
   * @param {object} param
   * @param {string} param.email - must be a standard-format email
   * @returns {Promise<void>}
   */
  collectPreauthCatalog({email} = {}) {
    if (!email) {
      return this.updateServices({from: 'limited', query: {mode: 'DEFAULT_BY_PROXIMITY'}});
    }

    return this.updateServices({from: 'limited', query: {email}});
  },

  /**
   * simplified method to update the signin catalog via email and token
   * @param {object} param
   * @param {string} param.email - must be a standard-format email
   * @param {string} param.token - must be a client token
   * @returns {Promise<void>}
   */
  collectSigninCatalog({email, token} = {}) {
    if (!email) {
      return Promise.reject(new Error('`email` is required'));
    }
    if (!token) {
      return Promise.reject(new Error('`token` is required'));
    }

    return this.updateServices({from: 'signin', query: {email}, token});
  },

  /**
   * Updates credentials config to utilize u2c catalog
   * urls.
   * @returns {void}
   */
  updateCredentialsConfig() {
    const {idbroker, identity} = this.list(true);

    if (idbroker && identity) {
      this.webex.setConfig({
        credentials: {
          idbroker: {
            url: idbroker.slice(0, -1) // remove trailing slash
          },
          identity: {
            url: identity.slice(0, -1) // remove trailing slash
          }
        }
      });
    }
  },

  /**
   * Wait until the service catalog is available,
   * or reject afte ra timeout of 60 seconds.
   * @param {string} serviceGroup
   * @param {number} [timeout] - in seconds
   * @returns {Promise<void>}
   */
  waitForCatalog(serviceGroup, timeout) {
    const catalog = this._getCatalog();

    if (serviceGroup === 'postauth' &&
      this.webex.credentials.canAuthorize &&
      !catalog.status.postauth.collecting
    ) {
      return this.updateServices();
    }

    return catalog.waitForCatalog(serviceGroup, timeout);
  },

  /**
   * @private
   * Organize a received hostmap from a service
   * catalog endpoint.
   * @param {object} serviceHostmap
   * @returns {object}
   */
  _formatReceivedHostmap(serviceHostmap) {
    // map the host catalog items to a formatted hostmap
    const formattedHostmap = Object.keys(serviceHostmap.hostCatalog).reduce(
      (accumulator, key) => {
        if (serviceHostmap.hostCatalog[key].length === 0) {
          return accumulator;
        }

        const serviceName = serviceHostmap.hostCatalog[key][0].id.split(':')[3];
        const defaultUrl = serviceHostmap.serviceLinks[serviceName];

        let serviceItem = accumulator.find(
          (item) => item.name === serviceName
        );

        if (!serviceItem) {
          serviceItem = {
            name: serviceName,
            defaultUrl,
            defaultHost: Url.parse(defaultUrl).hostname,
            hosts: []
          };

          accumulator.push(serviceItem);
        }

        serviceItem.hosts.push(
          // map the default key as a low priority default for cluster matching
          {
            host: key,
            ttl: -1,
            priority: 10,
            id: serviceHostmap.hostCatalog[key][0].id,
            homeCluster: serviceItem.defaultHost === key
          },
          // map the rest of the hosts in their proper locations
          ...serviceHostmap.hostCatalog[key].map(
            (host) => ({
              ...host,
              homeCluster: serviceItem.defaultHost === key
            })
          )
        );

        return accumulator;
      }, []
    );

    // append service links that do not exist in the host catalog
    Object.keys(serviceHostmap.serviceLinks).forEach((key) => {
      const service = formattedHostmap.find((item) => item.name === key);

      if (!service) {
        formattedHostmap.push({
          name: key,
          defaultUrl: serviceHostmap.serviceLinks[key],
          defaultHost: Url.parse(serviceHostmap.serviceLinks[key]).hostname,
          hosts: []
        });
      }
    });

    return formattedHostmap;
  },

  /**
   * Get the clusterId associated with a URL string.
   * @param {string} url
   * @returns {string} - Cluster ID of url provided
   */
  getClusterId(url) {
    const catalog = this._getCatalog();

    return catalog.findClusterId(url);
  },

  /**
   * Get a service value from a provided clusterId. This method will
   * return an object containing both the name and url of a found service.
   * @param {object} params
   * @param {string} params.clusterId - clusterId of found service
   * @param {boolean} [params.priorityHost] - returns priority host url if true
   * @param {string} [params.serviceGroup] - specify service group
   * @returns {object} service
   * @returns {string} service.name
   * @returns {string} service.url
   */
  getServiceFromClusterId(params) {
    const catalog = this._getCatalog();

    return catalog.findServiceFromClusterId(params);
  },

  /**
   * Get a service object from a service url if the service url exists in the
   * catalog.
   *
   * @param {string} url - The url to be validated.
   * @returns {object} - Service object.
   * @returns {object.name} - The name of the service found.
   * @returns {object.priorityUrl} - The priority url of the found service.
   * @returns {object.defaultUrl} - The default url of the found service.
   */
  getServiceFromUrl(url) {
    const service = this._getCatalog().findServiceUrlFromUrl(url);

    if (!service) {
      return undefined;
    }

    return {
      name: service.name,
      priorityUrl: service.get(true),
      defaultUrl: service.get()
    };
  },

  /**
   * Verify that a provided url exists in the service
   * catalog.
   * @param {string} url
   * @returns {boolean} - true if exists, false otherwise
   */
  isServiceUrl(url) {
    const catalog = this._getCatalog();

    return !!(catalog.findServiceUrlFromUrl(url));
  },

  /**
   * Determine if a provided url is in the catalog's allowed domains.
   *
   * @param {string} url - The url to match allowed domains against.
   * @returns {boolean} - True if the url provided is allowed.
   */
  isAllowedDomainUrl(url) {
    const catalog = this._getCatalog();

    return !!(catalog.findAllowedDomain(url));
  },

  /**
   * Converts the host portion of the url from default host
   * to a priority host
   *
   * @param {string} url a service url that contains a default host
   * @returns {string} a service url that contains the top priority host.
   * @throws if url isn't a service url
   */
  convertUrlToPriorityHostUrl(url = '') {
    const data = this.getServiceFromUrl(url);

    if (!data) {
      throw Error(`No service associated with url: [${url}]`);
    }

    return url.replace(data.defaultUrl, data.priorityUrl);
  },

  /**
   * @private
   * Simplified method wrapper for sending a request to get
   * an updated service hostmap.
   * @param {object} [param]
   * @param {string} [param.from] - This accepts `limited` or `signin`
   * @param {object} [param.query] - This accepts `email`, `orgId` or `userId` key values
   * @param {string} [param.query.email] - must be a standard-format email
   * @param {string} [param.query.orgId] - must be an organization id
   * @param {string} [param.query.userId] - must be a user id
   * @param {string} [param.token] - used for signin catalog
   * @returns {Promise<object>}
   */
  _fetchNewServiceHostmap({from, query, token} = {}) {
    const service = 'u2c';
    const resource = from ? `/${from}/catalog` : '/catalog';
    const qs = {...query, format: 'hostmap'};

    const requestObject = {
      method: 'GET', service, resource, qs
    };

    if (token) {
      requestObject.headers = {authorization: token};
    }

    return this.request(requestObject)
      .then(({body}) => this._formatReceivedHostmap(body));
  },

  /**
   * Initializer
   *
   * @instance
   * @memberof Services
   * @returns {Services}
   */
  initialize() {
    const catalog = new ServiceCatalog();

    this._catalogs.set(this.webex, catalog);

    // Listen for configuration changes once.
    this.listenToOnce(this.webex, 'change:config', () => {
      // Destructure the configuration object for the services plugin.
      const {services} = this.webex.config;

      // Validate that the services configuration exists.
      if (services) {
        // Check for discovery services.
        if (services.discovery) {
          // Format the discovery configuration into an injectable array.
          const formattedDiscoveryServices = Object.keys(services.discovery)
            .map((key) => ({
              name: key,
              defaultUrl: services.discovery[key]
            }));

          // Inject formatted services into services catalog.
          catalog.updateServiceUrls('discovery', formattedDiscoveryServices);
        }

        // Check for allowed host domains.
        if (services.allowedDomains) {
          // Store the allowed domains as a property of the catalog.
          catalog.setAllowedDomains(services.allowedDomains);
        }

        // Set `validateDomains` property to match configuration
        this.validateDomains = services.validateDomains;
      }
    });

    // wait for webex instance to be ready before attempting
    // to update the service catalogs
    this.listenToOnce(this.webex, 'ready', () => {
      /* eslint-disable camelcase */
      if (this.webex.credentials.canAuthorize) {
        this.updateServices()
        // this catch prevents crashing in unique situations found
        // primarily in unit testing with the karma suite.
          .catch(
            () => this.logger.warn('services: catalog retrieval failed w/auth')
          );
      }
      else {
        this.collectPreauthCatalog({email: this.webex.config.email});
      }
    });
  }
});
/* eslint-enable no-underscore-dangle */

export default Services;
