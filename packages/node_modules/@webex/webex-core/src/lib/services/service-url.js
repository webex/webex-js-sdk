import Url from 'url';

import AmpState from 'ampersand-state';

/* eslint-disable no-underscore-dangle */
/**
 * @class
 */
const ServiceUrl = AmpState.extend({
  namespace: 'ServiceUrl',

  props: {
    defaultUrl: ['string', true, undefined],
    hosts: ['array', false, () => ([])],
    name: ['string', true, undefined]
  },

  /**
   * Generate a host url based on the host
   * uri provided.
   * @param {string} hostUri
   * @returns {string}
   */
  _generateHostUrl(hostUri) {
    const url = Url.parse(this.defaultUrl);

    // setting url.hostname will not apply during Url.format(), set host via
    // a string literal instead.
    url.host = `${hostUri}${url.port ? `:${url.port}` : ''}`;

    return Url.format(url);
  },

  /**
   * Generate a list of urls based on this
   * `ServiceUrl`'s known hosts.
   * @returns {string[]}
   */
  _getHostUrls() {
    return this.hosts.map((host) => ({
      url: this._generateHostUrl(host.host),
      priority: host.priority
    }));
  },

  /**
   * Get the current host url with the highest
   * priority.
   * @returns {string}
   */
  _getPriorityHostUrl() {
    if (this.hosts.length === 0) {
      return this.defaultUrl;
    }

    return this._generateHostUrl(this.hosts.reduce((previous, current) => (
      (previous.priority > current.priority || !previous.homeCluster) ?
        current : previous
    )).host);
  },

  /**
   * Attempt to remove a host from this `ServiceUrl`
   * and return true if the provided `url` had a host
   * that could be successfully removed or if the url
   * is assocaited with a defaultUrl, and cannot be
   * removed.
   * @param {string} url
   * @returns {boolean}
   */
  removeHost(url) {
    if (url === this.defaultUrl) {
      return true;
    }

    const {hostname} = Url.parse(url);
    const foundHost = this.hosts.find((hostObj) => hostObj.host === hostname);

    this.hosts.splice(this.hosts.indexOf(foundHost), 1);

    return (foundHost !== undefined);
  },

  /**
   * Get the current `defaultUrl` or generate a url
   * using the host with the highest priority via host rendering.
   * @param {boolean} [priorityHost]
   * @returns {string}
   */
  get(priorityHost) {
    if (!priorityHost) {
      return this.defaultUrl;
    }

    return this._getPriorityHostUrl();
  }
});
/* eslint-enable no-underscore-dangle */

export default ServiceUrl;
