
import {assert} from '@webex/test-helper-chai';
import sinon from '@webex/test-helper-sinon';

import MediaUtil from '../../../src/media/util';

import CMR from './cmr';
import testUtils from './testUtils';

require('dotenv').config();

const webexTestUsers = require('./webex-test-users');

let userSet, alice, bob, chris;

describe('plugin-meetings-automation', () => {
  beforeEach(() => {
    MediaUtil.createPeerConnection = sinon.stub().returns(true);
    MediaUtil.createMediaStream = sinon.stub().returns(true);
  });
  describe('plugin-meeting-space-meeting', () => {
    before(() => webexTestUsers.generateTestUsers({count: 3})
      .then((users) => {
        userSet = users;
        alice = userSet[0];
        bob = userSet[1];
        chris = userSet[2];
        alice.name = 'alice';
        bob.name = 'bob';
      })
      .then(() => Promise.all([testUtils.syncAndEndMeeting(alice),
        testUtils.syncAndEndMeeting(bob)]))
      .catch((error) => {
        console.log(error);
      }));

    after(() => {
      const promise = [];

      userSet.forEach((user) => {
        promise.push(user.webex.internal.mercury.disconnect());
      });

      return Promise.all(promise)
        .then(() => webexTestUsers.remove(userSet));
      // TODO: end is not a function on browser object
    });

    describe('Space meeting', () => {
      let space = null;

      it('Alice starts a space meeting', () => alice.webex.internal.conversation.create({participants: [bob, chris]})
        .then((conversation) => {
          assert.lengthOf(conversation.participants.items, 3);
          assert.lengthOf(conversation.activities.items, 1);
          console.log('CONVERSATION', conversation);
          space = conversation;
        })
        .then(function aliceStartsMeeting() {
          return Promise.all([
            testUtils.delayedPromise(alice.webex.meetings.create(space.id)),
            testUtils.waitForEvents([{scope: alice.webex.meetings, event: 'meeting:added', user: alice}])
          ]);
        })
        .then(() => Promise.all([
          testUtils.delayedPromise(alice.meeting.join()),
          testUtils.waitForEvents([
            {scope: bob.webex.meetings, event: 'meeting:added', user: bob},
            {scope: chris.webex.meetings, event: 'meeting:added', user: chris}])
        ]))
        .then(() => testUtils.waitForStateChange(alice.meeting, 'JOINED'))
        .then(() => testUtils.waitForStateChange(bob.meeting, 'IDLE'))
        .then(() => testUtils.waitForStateChange(chris.meeting, 'IDLE'))
        .then(() => bob.meeting.join())
        .then(() => chris.meeting.join())
        // add .then checks for alice response, should see bob and chris member status to isInMeeting = true
        .then(() => testUtils.waitForStateChange(bob.meeting, 'JOINED'))
        .then(() => testUtils.waitForStateChange(chris.meeting, 'JOINED')));

      // it('check the members event', () => {

      // });

      // it('let guest user inside the meeting', () => guest.webex.meetings.create(space.id)
      //   .then((m) => m.join())
      //   .then(() => // boolean isGuest and isNotAdmited);
      //   .then(() => alice.meeting.admit(/* memberId */))
      //   .then(() => testUtils.waitForStateChange(alice.meeting, 'JOINED')));
    });
  });

  describe.skip('Unclaimed PMR', () => {
    before(() => webexTestUsers.generateTestUsers({count: 3})
      .then((users) => {
        userSet = users;
        alice = userSet[0];
        bob = userSet[1];
        chris = userSet[2];
      })
      .then(() => testUtils.syncAndEndMeeting(alice))
      .then(() => CMR.reserve(alice.webex, false))
      .then((cmr) => {
        console.log('CMRR ', cmr);
        alice.cmr = cmr;
      })
      .catch((error) => {
        console.log('WEBEX MEETING error ', error);
      }));

    after(() => {
      const promise = [];

      userSet.forEach((user) => {
        promise.push(user.webex.internal.mercury.disconnect());
      });

      return Promise.all(promise)
        .then(() => CMR.release(alice.webex, alice.cmr.reservationUrl))
        .then(() => webexTestUsers.remove(userSet));
    });

    describe('Successful meeting', () => {
      it('alice joins the unclaimed PMR as attende', () => {
        Promise.all([
          testUtils.delayedPromise(alice.webex.meetings.create(alice.cmr.sipAddress)),
          testUtils.waitForEvents([{scope: alice.webex.meetings, event: 'meeting:added', user: alice}])
        ])
          .then(() => alice.meeting.join({moderator: false}))
          .then(() => testUtils.waitForStateChange(alice.meeting, 'IDLE'))
          .then(function bobChrisJoiningMeeting() {
            return bob.webex.meetings.create(alice.cmr.sipAddress)
              .then((m) => {
                bob.meeting = m;

                return m.join({moderator: false, hostPin: alice.cmr.responseMetaData.hostPin});
              })
              .then(() => chris.webex.meetings.create(alice.cmr.sipAddress))
              .then((m) => {
                chris.meeting = m;

                return m.join({moderator: false});
              })
              .then(() => testUtils.waitForStateChange(bob.meeting, 'JOINED'))
              .then(() => testUtils.waitForStateChange(chris.meeting, 'JOINED'));
          })
          .then(() => alice.meeting.leave())
          .then(() => testUtils.waitForStateChange(alice.meeting, 'LEFT'))
          .then(() => bob.meeting.leave())
          .then(() => testUtils.waitForStateChange(bob.meeting, 'LEFT'))
          .then(() => chris.meeting.leave())
          .then(() => testUtils.waitForStateChange(chris.meeting, 'LEFT'))
          .then(() => Promise.all([
            testUtils.waitForCallEnded(alice, alice.sipAddress),
            testUtils.waitForCallEnded(bob, alice.sipAddress),
            testUtils.waitForCallEnded(chris, alice.sipAddress)]));
      });

      // it('bob joins with out host pin or moderator', () => {
      //   // either we see meeting info after create or we wait for the error to determine
      // });
    });
  });

  // TODO: fix this . getting 408 conflict for leave
  describe.skip('Claimed PMR', () => {
    before(() => webexTestUsers.generateTestUsers({count: 3})
      .then((users) => {
        userSet = users;
        alice = userSet[0];
        bob = userSet[1];
        chris = userSet[2];
        alice.name = 'alice';
        // bob.name = 'bob';
      })
      .then(() => testUtils.syncAndEndMeeting(alice))
      .then(() => CMR.reserve(alice.webex, true))
      .then((cmr) => {
        console.log('CMRR ', cmr);
        alice.cmr = cmr;
      })
      .catch((error) => {
        console.log('WEBEX MEETING error ', error);
      }));

    after(() => {
      const promise = [];

      userSet.forEach((user) => {
        promise.push(user.webex.internal.mercury.disconnect());
      });

      return Promise.all(promise)
        .then(() => CMR.release(alice.webex, alice.cmr.reservationUrl))
        .then(() => webexTestUsers.remove(userSet));
    });

    describe('Successful meeting', () => {
      it('alice starts a space meeting', () => Promise.all([
        testUtils.delayedPromise(alice.webex.meetings.create(alice.cmr.sipAddress)),
        testUtils.waitForEvents([{scope: alice.webex.meetings, event: 'meeting:added', user: alice}])
      ])
        .then(() => alice.meeting.join({moderator: false}))
        .then(() => testUtils.waitForStateChange(alice.meeting, 'JOINED'))
        .then(() => bob.webex.meetings.create(alice.cmr.sipAddress))
        .then((m) => {
          bob.meeting = m;

          return m.join();
        })
        .then(() => testUtils.waitForStateChange(bob.meeting, 'JOINED'))
        .then(function bobChrisJoinMeeting() {
          return chris.webex.meetings.create(alice.cmr.sipAddress)
            .then((m) => {
              chris.meeting = m;

              return m.join({moderator: false});
            })
            .then(() => testUtils.waitForStateChange(chris.meeting, 'JOINED'));
        })
        .then(() => alice.meeting.leave())
        .then(() => bob.meeting.leave())
        .then(() => testUtils.waitForStateChange(alice.meeting, 'LEFT'))
        .then(() => testUtils.waitForStateChange(bob.meeting, 'LEFT'))
        .then(() => chris.meeting.leave())
        .then(() => testUtils.waitForStateChange(chris.meeting, 'LEFT'))
        .then(() => Promise.all([
          testUtils.waitForCallEnded(alice, alice.sipAddress),
          testUtils.waitForCallEnded(bob, alice.sipAddress),
          testUtils.waitForCallEnded(chris, alice.sipAddress)])));
    });
  });
});
