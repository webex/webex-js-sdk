
const testUser = require('@webex/test-helper-test-users');
const WebexCore = require('@webex/webex-core').default;

const config = require('./webex-config');

// Include the plugins which you feel will be used by the webex instance
require('@webex/internal-plugin-mercury');
require('@webex/internal-plugin-user');
require('@webex/internal-plugin-wdm');
require('@webex/internal-plugin-conversation');
require('@webex/plugin-meetings');

const generateTestUsers = (options) => testUser.create({count: options.count})
  .then((userSet) => {
    const mercuryPromise = [];
    const devicePromise = [];

    if (userSet.length === 0) {
      return Promise.reject(new Error('Test user not created'));
    }

    userSet.forEach((user) => {
      user.webex = new WebexCore({
        config: config.webex,
        credentials: {
          authorization: user.token
        }
      });

      console.log(user.webex);
      mercuryPromise.push(user.webex.internal.mercury.connect());
      devicePromise.push(user.webex.internal.device.register());
    });

    return Promise.all(mercuryPromise)
      .then(() => Promise.all(devicePromise))
      .then(() => userSet)
      .catch((error) => {
        console.log(error);
      });
  })
  .catch((error) => {
    console.log('ERROR', error);
  });

const remove = (userSet) => testUser.remove(userSet);

const reserveCMR = (user) => user.webex.request({
  method: 'POST',
  uri: 'https://whistler-prod.onint.ciscospark.com/api/v1/reservations',
  headers: {
    authorization: `Bearer ${user.webex.credentials.supertoken.access_token}`,
    'cisco-no-http-redirect': null,
    'spark-user-agent': null,
    trackingid: `ITCLIENT_ ${user.id} _0_imi:true`
  },
  body: {
    resourceType: 'CMR_3',
    reservedBy: 'SDK_TEST_USER',
    requestMetaData: {
      emailAddress: user.emailAddress,
      loginType: 'loginGuest'
    }
  }
})
  .then((res) => {
    console.log('SUCCESS ', res);
  });

module.exports = {
  generateTestUsers,
  remove,
  reserveCMR
};
