import {assert} from '@webex/test-helper-chai';
import sinon from 'sinon';
import TurnDiscovery from '@webex/plugin-meetings/src/roap/turnDiscovery';

import Roap from '@webex/plugin-meetings/src/roap/';

describe('Roap', () => {
  describe('doTurnDiscovery', () => {
    it('calls this.turnDiscovery.doTurnDiscovery()', async () => {
      const RESULT = {something: 'some value'};
      const meeting = {id: 'some meeting id'};

      const doTurnDiscoveryStub = sinon.stub(TurnDiscovery.prototype, 'doTurnDiscovery').resolves(RESULT);

      const roap = new Roap({}, {parent: 'fake'});

      const result = await roap.doTurnDiscovery(meeting);

      assert.calledOnceWithExactly(doTurnDiscoveryStub, meeting);
      assert.deepEqual(result, RESULT);

      sinon.restore();
    });
  });
});
