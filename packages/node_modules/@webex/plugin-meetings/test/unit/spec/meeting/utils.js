import sinon from 'sinon';
import {assert} from '@webex/test-helper-chai';
import MeetingUtil from '@webex/plugin-meetings/src/meeting/util';

describe('plugin-meetings', () => {
  describe('Meeting utils function', () => {
    const meeting = {};

    beforeEach(() => {
      meeting.closeLocalStream = sinon.stub().returns(Promise.resolve());
      meeting.closeLocalShare = sinon.stub().returns(Promise.resolve());
      meeting.closeRemoteTracks = sinon.stub().returns(Promise.resolve());
      meeting.closePeerConnections = sinon.stub().returns(Promise.resolve());

      meeting.unsetLocalVideoTrack = sinon.stub();
      meeting.unsetLocalShareTrack = sinon.stub();
      meeting.unsetRemoteTracks = sinon.stub();
      meeting.unsetPeerConnections = sinon.stub();
      meeting.cleanMQAInterval = sinon.stub();
      meeting.reconnectionManager = {cleanUp: sinon.stub()};
      meeting.roap = {stop: sinon.stub()};
    });
    describe('#cleanup', () => {
      it('do clean up on meeting object', async () => {
        await MeetingUtil.cleanUp(meeting);
        assert.calledOnce(meeting.closeLocalStream);
        assert.calledOnce(meeting.closeLocalStream);
        assert.calledOnce(meeting.closeLocalShare);
        assert.calledOnce(meeting.closeRemoteTracks);
        assert.calledOnce(meeting.closePeerConnections);

        assert.calledOnce(meeting.unsetLocalVideoTrack);
        assert.calledOnce(meeting.unsetLocalShareTrack);
        assert.calledOnce(meeting.unsetRemoteTracks);
        assert.calledOnce(meeting.unsetPeerConnections);
        assert.calledOnce(meeting.cleanMQAInterval);
        assert.calledOnce(meeting.reconnectionManager.cleanUp);
        assert.calledOnce(meeting.roap.stop);
      });
    });
  });
});

