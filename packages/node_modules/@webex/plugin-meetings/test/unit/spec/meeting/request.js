import sinon from 'sinon';
import {assert} from '@webex/test-helper-chai';
import MockWebex from '@webex/test-helper-mock-webex';
import Meetings from '@webex/plugin-meetings';
import MeetingRequest from '@webex/plugin-meetings/src/meeting/request';

describe('plugin-meetings', () => {
  let meetingsRequest;

  beforeEach(() => {
    const webex = new MockWebex({
      children: {
        meetings: Meetings
      }
    });

    webex.meetings.clientRegion = {
      countryCode: 'US',
      regionCode: 'WEST-COAST'
    };

    meetingsRequest = new MeetingRequest({}, {
      parent: webex
    });

    meetingsRequest.request = sinon.mock().returns(Promise.resolve({}));
  });

  describe('meeting request library', () => {
    describe('#sendDTMF', () => {
      it('sends a POST to the sendDtmf locus endpoint', async () => {
        const locusUrl = 'locusURL';
        const deviceUrl = 'deviceUrl';
        const tones = '1234';

        await meetingsRequest.sendDTMF({
          locusUrl,
          deviceUrl,
          tones
        });
        const requestParams = meetingsRequest.request.getCall(0).args[0];

        assert.equal(requestParams.method, 'POST');
        assert.equal(requestParams.uri, `${locusUrl}/sendDtmf`);
        assert.equal(requestParams.body.dtmf.tones, tones);
        assert.equal(requestParams.body.deviceUrl, deviceUrl);
      });
    });

    describe('#changeVideoLayout', () => {
      it('sends a PUT request to the controls endpoint', async () => {
        const locusUrl = 'locusURL';
        const deviceUrl = 'deviceUrl';
        const layoutType = 'Equal';

        await meetingsRequest.changeVideoLayout({
          locusUrl,
          deviceUrl,
          layoutType
        });
        const requestParams = meetingsRequest.request.getCall(0).args[0];

        assert.equal(requestParams.method, 'PUT');
        assert.equal(requestParams.uri, `${locusUrl}/controls`);
        assert.equal(requestParams.body.layout.type, layoutType);
        assert.equal(requestParams.body.layout.deviceUrl, deviceUrl);
      });
    });

    describe('#joinMeeting', () => {
      it('sends /call requets for join', async () => {
        const locusUrl = 'locusURL';
        const deviceUrl = 'deviceUrl';
        const correlationId = 'random-uuid';
        const roapMessage = 'roap-message';

        await meetingsRequest.joinMeeting({
          locusUrl,
          deviceUrl,
          correlationId,
          roapMessage
        });
        const requestParams = meetingsRequest.request.getCall(0).args[0];

        assert.equal(requestParams.method, 'POST');
        assert.equal(requestParams.uri, `${locusUrl}/participant?alternateRedirect=true`);
        assert.equal(requestParams.body.device.url, deviceUrl);
        assert.equal(requestParams.body.device.countryCode, 'US');
        assert.equal(requestParams.body.device.regionCode, 'WEST-COAST');
      });
    });
  });
});
