import sinon from 'sinon';
import chai from 'chai';
import uuid from 'uuid';
import chaiAsPromised from 'chai-as-promised';
import MockWebex from '@webex/test-helper-mock-webex';
import Meetings from '@webex/plugin-meetings';
import MembersRequest from '@webex/plugin-meetings/src/members/request';

const {assert} = chai;

chai.use(chaiAsPromised);
sinon.assert.expose(chai.assert, {prefix: ''});

describe('plugin-meetings', () => {
  let membersRequest;
  let url1;
  let sandbox;

  beforeEach(() => {
    const webex = new MockWebex({
      children: {
        meetings: Meetings
      }
    });

    sandbox = sinon.createSandbox();

    url1 = `https://example.com/${uuid.v4()}`;

    membersRequest = new MembersRequest({}, {
      parent: webex
    });
    membersRequest.request = sinon.mock().returns(Promise.resolve({}));
  });

  afterEach(() => {
    sandbox.restore();
  });


  describe('members request library', () => {
    describe('#sendDialPadKey', () => {
      it('sends a POST to the sendDtmf locus endpoint', async () => {
        const locusUrl = url1;
        const url = 'https://fakedeviceurl.com';
        const tones = '1';
        const memberId = 'test1';

        await membersRequest.sendDialPadKey({
          url,
          tones,
          memberId,
          locusUrl
        });
        const requestParams = membersRequest.request.getCall(0).args[0];

        assert.equal(requestParams.method, 'POST');
        assert.equal(requestParams.uri, `${locusUrl}/participant/${memberId}/sendDtmf`);
        assert.equal(requestParams.body.dtmf.tones, tones);
        assert.equal(requestParams.body.device.url, url);
      });
    });

    describe('#addMembers', () => {
      it('sends a PUT to the locus endpoint', async () => {
        const options = {
          invitee: {
            phoneNumber: '+18578675309'
          },
          locusUrl: url1
        };

        await membersRequest.addMembers(options);
        const requestParams = membersRequest.request.getCall(0).args[0];

        assert.equal(requestParams.method, 'PUT');
        assert.equal(requestParams.uri, url1);
        assert.equal(requestParams.body.invitees[0].address, '+18578675309');
      });
    });

    describe('#cancelPhoneInvite', () => {
      it('sends a PUT to the locus endpoint', async () => {
        const options = {
          invitee: {
            phoneNumber: '+18578675309'
          },
          locusUrl: url1
        };

        await membersRequest.cancelPhoneInvite(options);
        const requestParams = membersRequest.request.getCall(0).args[0];

        assert.equal(requestParams.method, 'PUT');
        assert.equal(requestParams.uri, url1);
        assert.equal(requestParams.body.invitees[0].address, '+18578675309');
        assert.equal(requestParams.body.actionType, 'REMOVE');
      });
    });
  });
});
