
import {assert} from '@webex/test-helper-chai';
import sinon from 'sinon';
import PeerConnectionManager from '@webex/plugin-meetings/src/peer-connection-manager/index';
import StaticConfig from '@webex/plugin-meetings/src/common/config';

describe('Peerconnection Manager', () => {
  describe('Methods', () => {
    describe('setRemoteSessionDetails', () => {
      it('change the start bitrate on remoteSDP', async () => {
        StaticConfig.set({bandwidth: {audio: 50, video: 500, startBitrate: 2000}});
        let result = null;
        const setRemoteDescription = sinon.stub().callsFake((args) => {
          result = args;

          return Promise.resolve();
        });
        const remoteSdp = 'v=0\r\n' +
        'm=video 5004 UDP/TLS/RTP/SAVPF 102 127 97 99\r\n' +
        'a=fmtp:102 profile-level-id=42e016;packetization-mode=1;max-mbps=244800;max-fs=8160;max-fps=3000;max-dpb=12240;max-rcmd-nalu-size=196608;level-asymmetry-allowed=1\r\n' +
        'a=rtpmap:127 H264/90000\r\n' +
        'a=fmtp:127 profile-level-id=42e016;max-mbps=244800;max-fs=8160;max-fps=3000;max-dpb=12240;max-rcmd-nalu-size=196608;level-asymmetry-allowed=1\r\n';

        const resultSdp = 'v=0\r\n' +
        'm=video 5004 UDP/TLS/RTP/SAVPF 102 127 97 99\r\n' +
        'a=fmtp:102 profile-level-id=42e016;packetization-mode=1;max-mbps=244800;max-fs=8160;max-fps=3000;max-dpb=12240;max-rcmd-nalu-size=196608;level-asymmetry-allowed=1;x-google-start-bitrate=2000\r\n' +
        'a=rtpmap:127 H264/90000\r\n' +
        'a=fmtp:127 profile-level-id=42e016;max-mbps=244800;max-fs=8160;max-fps=3000;max-dpb=12240;max-rcmd-nalu-size=196608;level-asymmetry-allowed=1;x-google-start-bitrate=2000\r\n';
        const peerConnection = {
          signalingState: 'have-local-offer',
          setRemoteDescription

        };

        await PeerConnectionManager.setRemoteSessionDetails(peerConnection, 'answer', remoteSdp, {});

        assert.equal(result.sdp, resultSdp);
      });

      it('dont change the start bitrate on remoteSDP if default value is 0', async () => {
        StaticConfig.set({bandwidth: {audio: 50, video: 500, startBitrate: 0}});
        let result = null;
        const setRemoteDescription = sinon.stub().callsFake((args) => {
          result = args;

          return Promise.resolve();
        });
        const remoteSdp = 'v=0\r\n' +
        'm=video 5004 UDP/TLS/RTP/SAVPF 102 127 97 99\r\n' +
        'a=fmtp:102 profile-level-id=42e016;packetization-mode=1;max-mbps=244800;max-fs=8160;max-fps=3000;max-dpb=12240;max-rcmd-nalu-size=196608;level-asymmetry-allowed=1\r\n' +
        'a=rtpmap:127 H264/90000\r\n' +
        'a=fmtp:127 profile-level-id=42e016;max-mbps=244800;max-fs=8160;max-fps=3000;max-dpb=12240;max-rcmd-nalu-size=196608;level-asymmetry-allowed=1\r\n';

        const peerConnection = {
          signalingState: 'have-local-offer',
          setRemoteDescription

        };

        await PeerConnectionManager.setRemoteSessionDetails(peerConnection, 'answer', remoteSdp, {});

        assert.equal(result.sdp, remoteSdp);
      });
    });
  });
});
