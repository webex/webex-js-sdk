/*!
 * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.
 */

import {assert} from '@webex/test-helper-chai';
import sinon from 'sinon';
import {
  _MEETING_ID_,
  _SIP_URI_,
  _CONVERSATION_URL_,
  _MEETING_LINK_,
  _PERSONAL_ROOM_,
  _LOCUS_ID_,
  _MEETING_UUID_
} from '@webex/plugin-meetings/src/constants';
import MeetingInfoUtil from '@webex/plugin-meetings/src/meeting-info/utilv2';
import WebexCore from '@webex/webex-core';

describe('plugin-meetings', () => {
  describe('Meeting Info Utils V2', () => {
    beforeEach(() => {
      MeetingInfoUtil.getHydraId = sinon.stub().returns(false);
    });

    describe('#getDestinationType', () => {
      it('For destination with type', async () => {
        const res = await MeetingInfoUtil.getDestinationType({
          type: _MEETING_ID_,
          destination: '1234323'
        });

        assert.equal(res.type, _MEETING_ID_);
        assert.equal(res.destination, '1234323');
      });

      it('for meeting link', async () => {
        const res = await MeetingInfoUtil.getDestinationType({
          destination: 'https://cisco.webex.com/meet/arungane'
        });

        assert.equal(res.type, _MEETING_LINK_);
        assert.equal(res.destination, 'https://cisco.webex.com/meet/arungane');
      });

      it('for sip url', async () => {
        const res = await MeetingInfoUtil.getDestinationType({
          destination: 'testing@webex.com'
        });

        assert.equal(res.type, _SIP_URI_);
        assert.equal(res.destination, 'testing@webex.com');
      });

      it('for phone number', async () => {
        const res = await MeetingInfoUtil.getDestinationType({
          destination: '+14252086070'
        });

        assert.equal(res.type, _SIP_URI_);
        assert.equal(res.destination, '+14252086070');
      });

      it('for conversation url ', async () => {
        MeetingInfoUtil.isConversationUrl = sinon.stub().returns(true);
        const res = await MeetingInfoUtil.getDestinationType({
          destination: 'https://conv-a.wbx2.com/conversation/api/v1/conversations/bfb49280'
        });

        assert.equal(res.type, _CONVERSATION_URL_);
        assert.equal(res.destination, 'https://conv-a.wbx2.com/conversation/api/v1/conversations/bfb49280');
      });
    });

    describe('#getRequestBody', () => {
      it('for _PERSONAL_ROOM_', () => {
        const webex = new WebexCore({
          credentials: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJyZWFsbSI6Im15LXJlYWxtIn0.U16gzUsaRW1VVikJA2VeXRHPX716tG1_B42oxzy1UMk'
        });


        const res = MeetingInfoUtil.getRequestBody({
          type: _PERSONAL_ROOM_,
          destination: 'userId_1234',
          webex
        });

        assert.equal(res.orgId, 'my-realm');
        assert.equal(res.userId, 'userId_1234');
      });

      it('for _MEETING_ID_', () => {
        const res = MeetingInfoUtil.getRequestBody({
          type: _MEETING_ID_,
          destination: '1234323'
        });

        assert.equal(res.meetingKey, '1234323');
      });

      it('for _MEETING_LINK_', () => {
        const res = MeetingInfoUtil.getRequestBody({
          type: _MEETING_LINK_,
          destination: 'https://cisco.webex.com/meet/arungane'
        });

        assert.equal(res.meetingUrl, 'https://cisco.webex.com/meet/arungane');
      });

      it('for _SIP_URI_', () => {
        const res = MeetingInfoUtil.getRequestBody({
          type: _SIP_URI_,
          destination: 'testing@webex.com'
        });

        assert.equal(res.sipUrl, 'testing@webex.com');
      });

      it('for _MEETING_UUID_', () => {
        const res = MeetingInfoUtil.getRequestBody({
          type: _MEETING_UUID_,
          destination: 'xsddsdsdsdssdsdsdsdsd'
        });

        assert.equal(res.meetingUUID, 'xsddsdsdsdssdsdsdsdsd');
      });

      it('for _LOCUS_ID_', () => {
        const res = MeetingInfoUtil.getRequestBody({
          type: _LOCUS_ID_,
          destination: {info: {webExMeetingId: '123456'}}
        });

        assert.equal(res.meetingKey, '123456');
      });

      it('for _CONVERSATION_URL_', () => {
        const res = MeetingInfoUtil.getRequestBody({
          type: _CONVERSATION_URL_,
          destination: 'https://conv-a.wbx2.com/conversation/api/v1/conversations/bfb49280'
        });

        assert.equal(res.conversationUrl, 'https://conv-a.wbx2.com/conversation/api/v1/conversations/bfb49280');
      });
    });
  });
});
