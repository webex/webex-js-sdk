import sinon from 'sinon';
import {assert} from '@webex/test-helper-chai';
import MockWebex from '@webex/test-helper-mock-webex';
import Meetings from '@webex/plugin-meetings';
import LocusInfo from '@webex/plugin-meetings/src/locus-info';
import SelfUtils from '@webex/plugin-meetings/src/locus-info/selfUtils';

import {LOCUSINFO} from '../../../../src/constants';


describe('plugin-meetings', () => {
  describe('LocusInfo index', () => {
    const updateMeeting = () => {};
    const locus = {};
    const meetingId = 'meedingId';
    let locusInfo;

    const webex = new MockWebex({
      children: {
        meetings: Meetings
      }
    });

    beforeEach(() => {
      locusInfo = new LocusInfo(
        updateMeeting, locus, webex, meetingId
      );

      locusInfo.parsedLocus = {states: [{one: 'one'}], fullState: {type: 'MEETING'}, info: {sipUri: 'abc@webex.com'}};
    });

    describe('#updateSelf', () => {
      it('should trigger SELF_MUTED_BY_OTHERS on othersMuted', async () => {
        const self = {id: 'id1', controls: {}};

        SelfUtils.getSelves = sinon.stub().returns({
          current: {state: 'JOINED'},
          updates: {
            isMutedByOthers: true
          }
        });

        SelfUtils.getSipUrl = sinon.stub().returns({
          sipUri: 'abc@webex.com'
        });

        locusInfo.emitScoped = sinon.stub();
        locusInfo.updateSelf(self, []);

        assert.calledWith(locusInfo.emitScoped, {
          file: 'locus-info',
          function: 'updateSelf'
        },
        LOCUSINFO.EVENTS.SELF_MUTED_BY_OTHERS,
        self);
      });
    });
  });
});
