/*!
 * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.
 */

import LoggerProxy from '../common/logs/logger-proxy';
import {_ACTIVE_, RECONNECTION, _LEFT_} from '../constants';
import ReconnectionError from '../common/errors/reconnection';
import PeerConnectionManager from '../peer-connection-manager';
import Media from '../media';

/**
 * @export
 * @class ReconnectionManager
*/
export default class ReconnectionManager {
  /**
   * @param {Meeting} meeting
   */
  constructor(meeting) {
    /**
     * Stores ICE reconnection state data.
     *
     * @instance
     * @type {Object}
     * @private
     * @memberof ReconnectionManager
     */
    this.iceState = {
      disconnected: false,
      resolve: () => {},
      timer: undefined,
      timeoutDuration: meeting.config.reconnection.iceReconnectionTimeout
    };

    /**
     * @instance
     * @type {String}
     * @private
     * @memberof ReconnectionManager
    */
    this.status = RECONNECTION.STATE.DEFAULT_STATUS;
    /**
     * @instance
     * @type {Number}
     * @private
     * @memberof ReconnectionManager
    */
    this.tryCount = RECONNECTION.STATE.DEFAULT_TRY_COUNT;
    /**
     * @instance
     * @type {Object}
     * @private
     * @memberof ReconnectionManager
    */
    this.webex = meeting.webex;
    this.configure(meeting);
  }

  /**
   * Sets the iceState to connected and clears any disconnect timeouts and
   * related timeout data within the iceState.
   *
   * @returns {undefined}
   * @public
   * @memberof ReconnectionManager
   */
  iceReconnected() {
    if (this.iceState.disconnected) {
      LoggerProxy.logger.log('ReconnectionManager:index#iceReconnected --> ice has reconnected');

      this.iceState.resolve();
      this.iceState.resolve = () => {};

      if (this.iceState.timer) {
        clearTimeout(this.iceState.timer);
        delete this.iceState.timer;
      }

      this.iceState.disconnected = false;
    }
  }

  /**
   * Set the iceState to disconnected and generates a timeout that waits for the
   * iceState to reconnect and then resolves. If the ice state is already
   * processing a reconnect, it immediately resolves. Rejects if the timeout
   * duration is reached.
   *
   * @returns {Promise<undefined>}
   * @public
   * @memberof ReconnectionManager
   */
  waitForIceReconnect() {
    if (!this.iceState.disconnected) {
      LoggerProxy.logger.log('ReconnectionManager:index#waitForIceReconnect --> waiting for ice reconnect');

      this.iceState.disconnected = true;

      return new Promise((resolve, reject) => {
        this.iceState.timer = setTimeout(() => {
          if (this.iceState.disconnected === false) {
            resolve();
          }
          else {
            this.iceState.disconnected = false;
            reject(new Error(`ice reconnection did not occur in ${this.iceState.timeoutDuration}ms`));
          }
        }, this.iceState.timeoutDuration);

        this.iceState.resolve = resolve;
      });
    }

    // return a resolved promise to prevent multiple catch executions of reconnect
    return Promise.resolve();
  }

  /**
   * @param {Meeting} meeting
   * @returns {undefined}
   * @public
   * @memberof ReconnectionManager
   */
  configure(meeting) {
    this.backOff = meeting.config.reconnection.retry.backOff.start;
  }

  /**
   * @returns {undefined}
   * @public
   * @memberof ReconnectionManager
   */
  reset() {
    this.status = RECONNECTION.STATE.DEFAULT_STATUS;
    this.tryCount = RECONNECTION.STATE.DEFAULT_TRY_COUNT;
  }

  /**
   * @param {Meeting} meeting
   * @returns {Boolean}
   * @returns {ReconnectionError}
   * @private
   * @memberof ReconnectionManager
   */
  validate(meeting) {
    // TODO: re write the validate function
    if (meeting.config.reconnection.enabled) {
      if (
        meeting.locusInfo &&
          meeting.locusInfo.fullState &&
          (
            meeting.locusInfo.fullState.state === _ACTIVE_ &&
            meeting.locusInfo.fullState.active
          )
      ) {
        if (meeting.webex.internal.mercury.connected) {
          if (
            this.status !== RECONNECTION.STATE.DEFAULT_STATUS ||
            this.status !== RECONNECTION.STATE.COMPLETE
          ) {
            return true;
          }

          return new ReconnectionError('Multiple reconnections cannot occur concurrently');
        }

        return new ReconnectionError('mercury is not connected, cannot reconnect');
      }

      return new ReconnectionError('locus server for this call is not active, cannot reconnect');
    }

    return new ReconnectionError('Reconnection is not enabled.');
  }

  /**
   * Initiates a media reconnect for the active meeting
   * @param {Meeting} meeting
   * @returns {Promise}
   * @public
   * @memberof ReconnectionManager
   */
  reconnect(meeting) {
    // TODO: re write the validate function
    const validatedReconnect = this.validate(meeting);

    if (validatedReconnect === true) {
      return this.execute(meeting);
    }

    return Promise.reject(validatedReconnect);
  }

  /**
   * @param {Meeting} meeting
   * @returns {Promise}
   * @private
   * @memberof ReconnectionManager
   */
  execute(meeting) {
    this.status = RECONNECTION.STATE.IN_PROGRESS;

    // Makes sure only join if you are not join else continue with reconnect
    return new Promise((resolve, reject) => {
      // Irrespective of who or when a reconnect is triggred try to join if in left state
      if (meeting.state === _LEFT_) {
        meeting.join()
          .then(() => resolve())
          .catch((error) => reject(error));
      }

      resolve();
    }).then(() => this.reconnectMedia(meeting)
      .then((media) => {
        LoggerProxy.logger.log(`ReconnectionManager:index#execute --> Media reestablished at: ${new Date()}`);
        this.status = RECONNECTION.STATE.COMPLETE;

        return Promise.resolve(media);
      })
      .catch((err) => { // eslint-disable-line
        LoggerProxy.logger.error(`ReconnectionManager:index#execute --> Media reestablishment failed at: ${new Date()}`);
        if (this.tryCount > meeting.config.reconnection.retry.times) {
          this.status = RECONNECTION.STATE.FAILURE;

          return Promise.reject(new ReconnectionError(err));
        }
        // exponential backoff and retry logic
        setTimeout(() =>
          this.reconnect(meeting),
        this.backOff *= meeting.config.reconnection.retry.backOff.rate);
      }));
  }

  /**
   * @param {Meeting} meeting
   * @returns {Promise}
   * @private
   * @memberof ReconnectionManager
   */
  reconnectMedia(meeting) {
    this.tryCount += 1;
    LoggerProxy.logger.log(`ReconnectionManager:index#media --> Begin reestablishment of media at ${new Date()}`);

    ReconnectionManager.setupPeerConnection(meeting);

    return Media.attachMedia(meeting.mediaProperties, {
      meetingId: meeting.id,
      remoteQualityLevel: meeting.mediaProperties.remoteQualityLevel
    })
      .then((peerConnection) => meeting.setRemoteStream(peerConnection))
      .then(() => meeting.roap
        .sendRoapMediaRequest({
          sdp: meeting.mediaProperties.peerConnection.sdp,
          roapSeq: meeting.roapSeq,
          meeting, // or can pass meeting ID
          reconnect: true // Need to check if its a reconnect after rejoin or media inactivity
        }));
  }

  /**
   * @param {Meeting} meeting
   * @returns {undefined}
   * @private
   * @memberof ReconnectionManager
   */
  static setupPeerConnection(meeting) {
    // close pcs, unset to null and create a new one with out closing any streams
    PeerConnectionManager.close(meeting.mediaProperties.peerConnection);
    meeting.mediaProperties.unsetPeerConnection();
    meeting.mediaProperties.reInitiatePeerconnection();

    // update the peerconnection in the stats manager when ever we reconnect
    meeting.statsAnalyzer.updatePeerconnection(meeting.mediaProperties.peerConnection);
  }
}
