/*!
 * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.
 */

/* eslint-disable no-warning-comments */

import LoggerProxy from '../common/logs/logger-proxy';
import {RECONNECTION, _LEFT_} from '../constants';
import ReconnectionError from '../common/errors/reconnection';
import PeerConnectionManager from '../peer-connection-manager';
import {eventType} from '../metrics/config';
import Media from '../media';
import Metrics from '../metrics';

/**
 * @export
 * @class ReconnectionManager
*/
export default class ReconnectionManager {
  /**
   * @param {Meeting} meeting
   */
  constructor(meeting) {
    /**
     * Stores ICE reconnection state data.
     *
     * @instance
     * @type {Object}
     * @private
     * @memberof ReconnectionManager
     */
    this.iceState = {
      disconnected: false,
      resolve: () => {},
      timer: undefined,
      timeoutDuration: meeting.config.reconnection.iceReconnectionTimeout
    };

    /**
     * @instance
     * @type {String}
     * @private
     * @memberof ReconnectionManager
    */
    this.status = RECONNECTION.STATE.DEFAULT_STATUS;
    /**
     * @instance
     * @type {Number}
     * @private
     * @memberof ReconnectionManager
    */
    this.tryCount = RECONNECTION.STATE.DEFAULT_TRY_COUNT;
    /**
     * @instance
     * @type {Object}
     * @private
     * @memberof ReconnectionManager
    */
    this.webex = meeting.webex;
    /**
     * @instance
     * @type {Meeting}
     * @private
     * @memberof ReconnectionManager
     */
    this.meeting = meeting;

    this.backOff = meeting.config.reconnection.retry.backOff.start;

    // Make sure reconnection state is in default
    this.reset();
  }

  /**
   * Sets the iceState to connected and clears any disconnect timeouts and
   * related timeout data within the iceState.
   *
   * @returns {undefined}
   * @public
   * @memberof ReconnectionManager
   */
  iceReconnected() {
    if (this.iceState.disconnected) {
      LoggerProxy.logger.log('ReconnectionManager:index#iceReconnected --> ice has reconnected');

      this.iceState.resolve();
      this.iceState.resolve = () => {};

      if (this.iceState.timer) {
        clearTimeout(this.iceState.timer);
        delete this.iceState.timer;
      }

      this.iceState.disconnected = false;
    }
  }

  /**
   * Set the iceState to disconnected and generates a timeout that waits for the
   * iceState to reconnect and then resolves. If the ice state is already
   * processing a reconnect, it immediately resolves. Rejects if the timeout
   * duration is reached.
   *
   * @returns {Promise<undefined>}
   * @public
   * @memberof ReconnectionManager
   */
  waitForIceReconnect() {
    if (!this.iceState.disconnected) {
      LoggerProxy.logger.log('ReconnectionManager:index#waitForIceReconnect --> waiting for ice reconnect');

      this.iceState.disconnected = true;

      return new Promise((resolve, reject) => {
        this.iceState.timer = setTimeout(() => {
          if (this.iceState.disconnected === false) {
            resolve();
          }
          else {
            this.iceState.disconnected = false;
            reject(new Error(`ice reconnection did not occur in ${this.iceState.timeoutDuration}ms`));
          }
        }, this.iceState.timeoutDuration);

        this.iceState.resolve = resolve;
      });
    }

    // return a resolved promise to prevent multiple catch executions of reconnect
    return Promise.resolve();
  }

  /**
   * @returns {undefined}
   * @public
   * @memberof ReconnectionManager
   */
  reset() {
    this.status = RECONNECTION.STATE.DEFAULT_STATUS;
    this.tryCount = RECONNECTION.STATE.DEFAULT_TRY_COUNT;
  }

  /**
   * @returns {Boolean}
   * @returns {ReconnectionError}
   * @private
   * @memberof ReconnectionManager
   */
  validate() {
    if (this.meeting.config.reconnection.enabled) {
      if (
        this.status !== RECONNECTION.STATE.DEFAULT_STATUS ||
        this.status !== RECONNECTION.STATE.COMPLETE
      ) {
        return true;
      }

      LoggerProxy.logger.info('ReconnectionManager:index#validate --> Reconnection already in progress.');

      return new ReconnectionError('Reconnection already in progress.');
    }

    LoggerProxy.logger.info('ReconnectionManager:index#validate --> Reconnection is not enabled.');

    return new ReconnectionError('Reconnection is not enabled.');
  }

  /**
   * Initiates a media reconnect for the active meeting
   * @param {Object} reconnectOptions
   * @param {boolean} [reconnectOptions.networkChange=false] indicates if a network change event happened
   * @param {boolean} [reconnectOptions.networkDisconnect=false] indicates if a network disconnect event happened
   * @returns {Promise}
   * @public
   * @memberof ReconnectionManager
   */
  reconnect({networkChange = false, networkDisconnect = false}) {
    const validatedReconnect = this.validate();

    if (validatedReconnect === true) {
      Metrics.postEvent({
        event: eventType.MEDIA_RECONNECTING,
        meeting: this.meeting
      });

      return this.executeReconnection({networkChange, networkDisconnect})
        .then(() => {
          Metrics.postEvent({
            event: eventType.MEDIA_RECOVERED,
            meeting: this.meeting
          });
        })
        .catch((reconnectError) => {
          Metrics.postEvent({
            event: eventType.MEDIA_RECONNECTION_FAILED,
            meeting: this.meeting
          });

          throw reconnectError;
        });
    }

    return Promise.reject(validatedReconnect);
  }

  /**
   * @param {Object} reconnectOptions
   * @param {boolean} [reconnectOptions.networkChange=false] indicates if a network change event happened
   * @param {boolean} [reconnectOptions.networkDisconnect=false] indicates if a network disconnect event happened
   * @returns {Promise}
   * @private
   * @memberof ReconnectionManager
   */
  async executeReconnection({networkChange = false, networkDisconnect = false}) {
    this.status = RECONNECTION.STATE.IN_PROGRESS;

    LoggerProxy.logger.info('ReconnectionManager:index#executeReconnection --> Attempting to reconnect to meeting.');

    if (networkChange) {
      // TODO: Calliope Discovery Needed (Out of band, no need to block execution) SPARK-153076
    }

    if (networkDisconnect) {
      try {
        await this.reconnectMercuryWithBackoff();
      }
      catch (error) {
        // TODO: Add Metrics for Reconnect Failed
        LoggerProxy.logger.error('ReconnectionManager:index#executeReconnection --> Unable to reconnect to websocket, giving up.');
        this.status = RECONNECTION.STATE.FAILURE;
        throw (error);
      }
    }

    let rejoinMeeting = false;

    if (this.meeting.state === _LEFT_) {
      try {
        rejoinMeeting = true;
        await this.meeting.join();
      }
      catch (joinError) {
        // TODO: Add Metrics for Reconnect Failed (expected failure)

        // TODO: If meeting was inactive fail the reconnect, otherwise, retry executeReconnection({networkDisconnect: true}) SPARK-153084
        LoggerProxy.logger.error('ReconnectionManager:index#executeReconnection --> Unable to join left meeting, giving up.');
        this.status = RECONNECTION.STATE.FAILURE;
        throw (joinError);
      }
    }

    try {
      const media = await this.reconnectMedia();

      LoggerProxy.logger.log('ReconnectionManager:index#executeReconnection --> Media reestablished');
      this.status = RECONNECTION.STATE.COMPLETE;

      if (rejoinMeeting) {
        // TODO: Emit event for reshare needed SPARK-153084
      }

      return media;
    }
    catch (error) {
      // TODO: Add Metrics for Reconnect Failed
      LoggerProxy.logger.error('ReconnectionManager:index#executeReconnection --> Media reestablishment failed');
      this.status = RECONNECTION.STATE.FAILURE;

      // TODO: Retry the join meeting and reconnect media flow depending on error code SPARK-153085
      throw (error);
    }
  }

  /**
   * @param {Meeting} meeting
   * @returns {Promise}
   * @private
   * @memberof ReconnectionManager
   */
  reconnectMedia() {
    LoggerProxy.logger.log('ReconnectionManager:index#reconnectMedia --> Begin reestablishment of media');

    ReconnectionManager.setupPeerConnection(this.meeting);

    return Media.attachMedia(this.meeting.mediaProperties, {
      meetingId: this.meeting.id,
      remoteQualityLevel: this.meeting.mediaProperties.remoteQualityLevel
    })
      .then((peerConnection) => this.meeting.setRemoteStream(peerConnection))
      .then(() => this.meeting.roap
        .sendRoapMediaRequest({
          sdp: this.meeting.mediaProperties.peerConnection.sdp,
          roapSeq: this.meeting.roapSeq,
          meeting: this.meeting,
          reconnect: true // Need to check if its a reconnect after rejoin or media inactivity
        }));
  }

  /**
   * Attempt to Reconnect Mercury Websocket
   * @returns {Promise}
   * @private
   * @memberof ReconnectionManager
   */
  reconnectMercuryWithBackoff() {
    // TODO: Implement SPARK-153080
    return Promise.reject(new Error('Reconnect to websocket has not been implemented yet.'));
  }

  /**
   * @param {Meeting} meeting
   * @returns {undefined}
   * @private
   * @memberof ReconnectionManager
   */
  static setupPeerConnection(meeting) {
    // close pcs, unset to null and create a new one with out closing any streams
    PeerConnectionManager.close(meeting.mediaProperties.peerConnection);
    meeting.mediaProperties.unsetPeerConnection();
    meeting.mediaProperties.reInitiatePeerconnection();

    // update the peerconnection in the stats manager when ever we reconnect
    meeting.statsAnalyzer.updatePeerconnection(meeting.mediaProperties.peerConnection);
  }
}
