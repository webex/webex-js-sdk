/* eslint-disable require-jsdoc */

import {SparkPlugin} from '@ciscospark/spark-core';
import btoa from 'btoa';

import {
  SIP_URI,
  PERSONAL_ROOM,
  MEETING_ID,
  CONVERSATION_URL,
  LOCUS_ID,
  MEETING_LINK,
  WEBEX_DOT_COM,
  LOCUS,
  GET,
  PUT,
  USE_URI_LOOKUP_FALSE,
  TYPE,
  LOCI,
  MEETINGINFO,
  ALTERNATE_REDIRECT_TRUE
} from '../constants';

function checkforMeetingLink(value) {
  const regex = /\/\/(.*).webex.com\/meet\/(.*)/; // TODO lets remove regex from this equation and user URI matchers and such
  const m = regex.exec(value);
  let sipUrl = null;

  if (m !== null && m.length === 3) {
    // The result can be accessed through the `m`-variable.
    sipUrl = `${m[2]}@${m[1]}.${WEBEX_DOT_COM}`;
  }

  return sipUrl;
}

function getResourceUrl(type, value) {
  let resource = `/${LOCI}/${MEETINGINFO}`;
  let method = GET;
  switch (type) {
    case SIP_URI:
    case PERSONAL_ROOM:
    case MEETING_ID:
      resource = `/${LOCI}/${MEETINGINFO}/${value.value}?${TYPE}=${type}&${USE_URI_LOOKUP_FALSE}`;
      break;
    case CONVERSATION_URL:
      method = PUT;
      break;
    case LOCUS_ID:
      // if locus id just send PUT request
      resource = `/${LOCI}/${value.value}/${MEETINGINFO}`;
      method = PUT;
      break;
    case MEETING_LINK:
      resource = `$/${LOCI}/${MEETINGINFO}/${btoa(value.value)}?${TYPE}=${MEETING_LINK}&${USE_URI_LOOKUP_FALSE}`;
      break;
    default:
  }
  return {
    resource,
    method
  };
}

const MeetingInfoRequest = SparkPlugin.extend({
  fetchMeetingInfo(destination) {
    let value = destination;
    let type = SIP_URI;

    // Making sure all the webEx meeting are converted into SipUrl
    const sipUrl = checkforMeetingLink(value);

    if (sipUrl) {
      type = SIP_URI;
      value = sipUrl;
    }

    const resourceOptions = getResourceUrl(type, value);

    const requestParams = {
      method: resourceOptions.method,
      api: LOCUS,
      resource: resourceOptions.resource
    };

    if (resourceOptions.method === GET) {
      // for handling URL redirections
      requestParams.resource = requestParams.resource.concat(`&${ALTERNATE_REDIRECT_TRUE}`);
    }
    else if (type !== LOCUS_ID) {
      // locus id check is a PUT not sure why
      requestParams.body = {
        value,
        lookupType: type,
        alternateRedirect: true
      };
    }

    return this.spark.request(requestParams).catch((err) =>
      // console.error('', object);// "errorCode": 2404003, "message": "Locus Meeting Information not found";
      Promise.reject(err));
  }
});

export default MeetingInfoRequest;
