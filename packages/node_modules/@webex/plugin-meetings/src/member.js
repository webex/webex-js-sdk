/*!
 * Copyright (c) 2015-2018 Cisco Systems, Inc. See LICENSE file.
 */

/**
 * Events to emit
 * ==============
 *
 * - change (string): audioMuted | videoMuted | left | joined | madeHost | shared
 * // NOTE: /calls API had: waiting | lobby | notified | declined | joined | left
 */
export default class Member {
  /**
   * Create a Member.
   * @param {string} id
   */
  constructor({
    id, isGuest, isHost, isAudioMuted, isVideoMuted, devices
  }) {
    this.id = id;
    // TODO: Make this thenable?
    this.isGuest = isGuest;
    this.isHost = isHost;
    this.isAudioMuted = isAudioMuted;
    this.isVideoMuted = isVideoMuted;
    this.devices = devices;
  }

  /**
   * Update member properties.
   * @returns {Promise}
   */
  async update() {
    return new Promise(async (resolve) => {
      const properties = {
        isGuest: false,
        isHost: false,
        isAudioMuted: false,
        isVideoMuted: false,
        devices: []
      };
      const member = await requestFromServer(properties);
      // TODO: Destructure with this.id
      resolve(member);
      return member;
    });
  }

  /**
   * Mute outgoing audio.
   * @returns {Promise}
   */
  async muteAudio() {
    return this.requestMuteAudio(true);
  }

  /**
   * Unmute outgoing audio.
   * @returns {Promise}
   */
  async unmuteAudio() {
    return this.requestMuteAudio(false);
  }

  /**
   * Request muting/unmuting outgoing audio.
   * @private
   * @param {boolean} mute
   * @returns {Promise}
   */
  async requestMuteAudio(mute) {
    return new Promise(async (resolve, reject) => {
      // Request to mute audio from the server.
      const success = await requestFromServer(mute);
      if (success) {
        // TODO: log success
        this.isAudioMuted = true;
        resolve(this.isAudioMuted);
        return this.isAudioMuted;
      }
      // TODO: log error
      return reject();
    });
  }

  /**
   * Mute outgoing video.
   * @returns {Promise}
   */
  async muteVideo() {
    return this.requestMuteVideo(true);
  }

  /**
   * Unmute outgoing video.
   * @returns {Promise}
   */
  async unmuteVideo() {
    return this.requestMuteVideo(false);
  }

  /**
   * Request muting/unmuting outgoing video.
   * @private
   * @param {boolean} mute
   * @returns {Promise}
   */
  async requestMuteVideo(mute) {
    return new Promise(async (resolve, reject) => {
      // Request to mute audio from the server.
      const success = await requestFromServer(mute);
      if (success) {
        // TODO: log success
        this.isVideoMuted = true;
        resolve(this.isVideoMuted);
        return this.isVideoMuted;
      }
      // TODO: log error
      return reject();
    });
  }

  /**
   * Admit this member into the *Lobby*.
   * @returns {Promise}
   */
  async admit() {
    return new Promise(async (resolve) => {
      const success = await requestFromServer(this.member.id);
      if (success) {
        resolve(this.member.id);
        return this.member.id;
      }

      // TODO: This will be more specific based on
      // the service response.
      throw new Error('Unable to remove member.');
    });
  }

  /**
   * Remove this member from the meeting.
   *
   * This member can be removed only if this is a Webex Teams meeting
   * or if this is a Webex Meeting and the requesting user is a host.
   * @returns {Promise}
   */
  async remove() {
    return new Promise(async (resolve) => {
      const success = await requestFromServer(this.member.id);
      if (success) {
        resolve(this.member.id);
        return this.member.id;
      }

      // TODO: This will be more specific based on
      // the service response.
      throw new Error('Unable to remove member.');
    });
  }

  /**
   * Make this member a meeting host.
   *
   * This member can be made a host only if this is a Webex Teams meeting
   * or if this is a Webex Meeting and the request user is a host.
   * @returns {Promise}
   */
  async makeHost() {
    // This member be made host only
    // if this is a Webex Teams meeting AND
    // the requesting user is a host.
    return new Promise(async (resolve) => {
      const success = await requestFromServer(this.member.id);
      if (success) {
        resolve(this.member.id);
        return this.member.id;
      }

      // TODO: This will be more specific based on
      // the service response.
      throw new Error('Unable to make member a host.');
    });
  }
}

/**
 * Resolve any given value.
 * TODO: Dummy method to illustrate server requests.
 * @private
 * @static
 * @param {*} value - can be anything
 * @returns {Promise}
 */
async function requestFromServer(value) {
  return value;
}
