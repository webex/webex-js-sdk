/*!
 * Copyright (c) 2015-2018 Cisco Systems, Inc. See LICENSE file.
 */
import {SparkPlugin} from '@ciscospark/spark-core';

import {MEETINGS} from '../constants';
import MeetingInfo from '../meeting-info';

import MeetingCollection from './meeting-collection';

/**
 * Maintain a cache of meetings and sync with services.
 * Developers should not have to worry about syncing.
 *
 * Events to emit
 * ==============
 *
 * - create
 * - ready
 * - statusChange: {
 *   connection (string): connecting | connected | disconnecting | disconnected
 *   // NOTE: /calls API had: initializing |lobby | connected | terminating | disconnected
 * }
 * @class
 */
const Meetings = SparkPlugin.extend({
  namespace: MEETINGS,

  pmr: {},

  children: {
    meetingInfo: MeetingInfo
  },

  collections: {
    meetingCollection: MeetingCollection
  },

  meetings: {},

  isConnected: false,

  /**
   * Initializes the Meetings Plugin
   *
   * @returns {null}
   */
  initialize() {},

  /**
   * Create a meeting.
   *
   * In current nomenclature, this would create a `call`.
   * `spaceID` is used in {https://github.com/webex/spark-js-sdk/blob/master/packages/node_modules/@ciscospark/plugin-phone/src/call.js#L1007 `call.dial`}
   * @param {string} destination - {https://www.cisco.com/c/en/us/td/docs/ios-xml/ios/voice/cube/configuration/cube-book/sip-supp-uri-based-dialing.html sipURL} or spaceID, AKA {https://developer.webex.com/endpoint-rooms-roomId-get.html roomID}
   * @returns {Meeting} A new Meeting.
   */
  create(destination) {
    return this.meetingInfo
      .fetchMeetingInfo(destination)
      .then(() => {
        // handle response
      })
      .catch(() => {}) // handle errors
      .then(() => {
        // this will be moved into the the then block above.
        const meeting = this.meetingCollection.add({
          sipUri: destination,
          userId: this.spark.internal.device.userId,
          deviceUrl: this.spark.internal.device.url,
          roapSeq: 0,
          videoMuted: false,
          audioMuted: false,
          meetingInfo: {}
        });

        return meeting;

        // Create the meeting calling the necessary service endpoints.

        // Internally, there are many more destinations:
        //
        // - locusID
        // - meetingURL
        // - globalMeetingID, e.g, *00*meetingID
        // - meetingID
        // - meetingURL
        // - PSTN
        // - phone number
        //
        // Our job is to determine the appropriate one
        // and its corresponding service so that developers
        // need only sipURL or spaceID to get a meeting
        // and its ID.
      });
  },

  // TODO: Enable this once actual code is in place.
  /* eslint-disable no-unused-vars */

  /**
   * Get all meetings.
   * @param {object} options
   * @param {object} options.startDate - get meetings after this start date
   * @param {object} options.endDate - get meetings before this end date
   * @returns {Array} All active and scheduled meetings.
   */
  getAll({startDate, endDate}) {
    // Options may include other parameters to filter this collection
    // of meetings.
    return this.meetingCollection.get();
  },

  /**
   * Get all active meetings.
   * @param {object} options
   * @param {object} options.startDate - get meetings after this start date
   * @param {object} options.endDate - get meetings before this end date
   * @returns {Array} All active meetings.
   */
  getActiveMeetings({startDate, endDate}) {
    return this.meetingCollection.get({active: true});
  },

  /**
   * Get all scheduled meetings.
   * @param {object} options
   * @param {object} options.startDate - get meetings after this start date
   * @param {object} options.endDate - get meetings before this end date
   * @returns {Array} All scheduled meetings.
   */
  getScheduledMeetings({startDate, endDate}) {
    // TODO: We may need to normalize the meeting objects because
    // we are unsure of the shape of objects returned from calendar service.
    const meetings = []; // this may be an object
    return meetings;
  }
});

export default Meetings;
