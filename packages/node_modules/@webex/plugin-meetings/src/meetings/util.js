/* globals window */

import {
  _LOCUS_ID_,
  _INCOMING_,
  _CREATED_,
  LOCUSEVENT,
  CORRELATION_ID
} from '../constants';
import ParameterError from '../common/errors/parameter';
import LoggerProxy from '../common/logs/logger-proxy';

const MeetingsUtil = {};

MeetingsUtil.extractDestination = (destination, type) => {
  let dest = destination;

  if (type === _LOCUS_ID_) {
    if (!(destination && destination.url)) {
      throw new ParameterError('You cannot create a meeting by locus without a locus.url defined');
    }
    dest = destination.url;
  }

  return dest;
};

// ** This is a workaround to fix Firefox and google android not downloading H264 codec on start
MeetingsUtil.triggerH264Codec = async () => {
  try {
    let testPeerconnection = new window.RTCPeerConnection();

    await testPeerconnection.createOffer();
    testPeerconnection.close();
    testPeerconnection = null;
  }
  catch (e) {
    LoggerProxy.logger.info('Meetings:util#triggerH264Codec --> cannot trigger H264 codec download');
  }
};

MeetingsUtil.getMeetingAddedType = (type) => (type === _LOCUS_ID_ ? _INCOMING_ : _CREATED_);

MeetingsUtil.handleRoapMercury = (envelope, meetingCollection) => {
  const {data} = envelope;
  const {eventType} = data;

  if (eventType === LOCUSEVENT.MESSAGE_ROAP) {
    const meeting = meetingCollection.getByKey(CORRELATION_ID, data.correlationId);

    if (meeting) {
      meeting.roap.roapEvent(data);
    }
  }
};

MeetingsUtil.checkForCorrelationId = (deviceUrl, locus) => {
  let devices = [];

  if (locus) {
    if (locus && locus.self && locus.self.devices) {
      devices = locus.self.devices;
    }

    const foundDevice = devices.find((device) => device.url === deviceUrl);

    if (foundDevice && foundDevice.correlationId) {
      return foundDevice.correlationId;
    }
  }

  return false;
};

export default MeetingsUtil;
