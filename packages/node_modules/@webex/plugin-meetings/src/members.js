/*!
 * Copyright (c) 2015-2018 Cisco Systems, Inc. See LICENSE file.
 */

/**
  * Each {Meeting} will have {Members}.
  *
  * Maintain a cache of members and sync with services.
  * Developers should not have to worry about syncing.
  *
  * "Members" are referred to as "participants" in services and
  * {https://developer.webex.com/resource-memberships.html "memberships"}
  * in the API. This term's intent is to clarify the relationships
  * between active meetings, scheduled meetings, and spaces,
  * all of which have people (what we call "members") associated with them.
  *
  * Events to emit
  * ==============
  *
  * Events "bubble up" from {Member}. See {Member}.
  * @class
  */
export default class Members {
  /**
   * Create a Members object.
   * @param {Meeting} meeting
   */
  constructor(meeting) {
    this.meeting = meeting;
    this.members = []; // this may be an object
    this.hosts = /* await */ this.getHosts(); // TODO: Use async/await here?
    // Get the Member version of the current user.
    this.self = {};
  }

  /**
   * Get members of the meeting.
   * @returns {Promise}
   */
  get() {
    return new Promise((resolve) => {
      // If this meeting has a large number of members,
      // we will most likely have to retrieve more
      // and update.
      const moreMembers = [];
      this.members.push.apply(moreMembers, this.members);
      resolve(this.members);
      return this.members;
    });
  }

  /**
   * Get current user.
   * @returns {Member}
   */
  getSelf() {
    // TODO: Do we need? Can we rely on `this.self`?
    return this.self;
  }

  /**
   * Get hosts of the meeting.
   *
   * Only Webex has a concept of hosts who can do more
   * than another meeting member. In Webex Teams,
   * anyone can act as a host.
   * @returns {Array} hosts of the Webex meeting or all members of the Webex Teams meeting
   */
  getHosts() {
    // TODO: Do we need? Can we rely on `this.hosts`?
    const hosts = [];
    return hosts;
  }

  /**
   * Add a member to the meeting.
   *
   * If the meeting is a scheduled meeting,
   * add an *invitee*.
   * @param {Member} member
   * @returns {Promise}
   */
  add(member) {
    return new Promise((resolve) => {
      resolve(member);
      return member;
    });
  }
}
