/*!
 * Copyright (c) 2015-2018 Cisco Systems, Inc. See LICENSE file.
 */

/**
 * Maintain a cache of meetings and sync with services.
 * Developers should not have to worry about syncing.
 *
 * Events to emit
 * ==============
 *
 * - create
 * - ready
 * - statusChange: {
 *   connection (string): connecting | connected | disconnecting | disconnected
 *   // NOTE: /calls API had: initializing |lobby | connected | terminating | disconnected
 * }
 * @class
 */
export default class Meetings {
  /**
   * Create a Meetings object.
   *
   * For now, requires an instance of `spark` as a parameter.
   * Once it follows the established plugin architecture,
   * initializing will change to `spark.meetings.initialize()`.
   * @constructor
   * @param {object} options
   * @param {object} options.spark
   */
  constructor({spark}) {
    this.spark = spark;
    this.initialize();
  }

  /**
   * Initialize the meetings plugin.
   * @returns {undefined}
   */
  initialize() {
    this.isConnected = false;
    this.pmr = {}; // the user's personal meeting room

    // Ensure spark object is ready and valid.
    // If one is not passed, do the initialization.
    // If web socket is not connected, connect.
    // Hook up listeners.
    // Get the PMR and add it as a property on this object.
  }

  /**
   * Create a meeting.
   *
   * In current nomenclature, this would create a `call`.
   * `spaceID` is used in {https://github.com/webex/spark-js-sdk/blob/master/packages/node_modules/@ciscospark/plugin-phone/src/call.js#L1007 `call.dial`}
   * @param {string} destination - {https://www.cisco.com/c/en/us/td/docs/ios-xml/ios/voice/cube/configuration/cube-book/sip-supp-uri-based-dialing.html sipURL} or spaceID, AKA {https://developer.webex.com/endpoint-rooms-roomId-get.html roomID}
   * @returns {Meeting} A new Meeting.
   */
  create(destination) {
    const meeting = {destination};

    // Create the meeting calling the necessary service endpoints.

    // Internally, there are many more destinations:
    //
    // - locusID
    // - meetingURL
    // - globalMeetingID, e.g, *00*meetingID
    // - meetingID
    // - meetingURL
    // - PSTN
    // - phone number
    //
    // Our job is to determine the appropriate one
    // and its corresponding service so that developers
    // need only sipURL or spaceID to get a meeting
    // and its ID.

    return meeting;
  }

  /**
   * Get the meeting.
   * @param {string} meetingID - ID of the desired meeting
   * @returns {Meeting} The desired meeting.
   */
  get(meetingID) {
    const meeting = {meetingID};
    return meeting;
  }

  // TODO: Enable this once actual code is in place.
  /* eslint-disable no-unused-vars */

  /**
   * Get all meetings.
   * @param {object} options
   * @param {object} options.startDate - get meetings after this start date
   * @param {object} options.endDate - get meetings before this end date
   * @returns {Array} All active and scheduled meetings.
   */
  getAll({startDate, endDate}) {
    // Options may include other parameters to filter this collection
    // of meetings.
    const meetings = []; // this may be an object
    return meetings;
  }

  /**
   * Get all active meetings.
   * @param {object} options
   * @param {object} options.startDate - get meetings after this start date
   * @param {object} options.endDate - get meetings before this end date
   * @returns {Array} All active meetings.
   */
  getActiveMeetings({startDate, endDate}) {
    const meetings = []; // this may be an object
    return meetings;
  }

  /**
   * Get all scheduled meetings.
   * @param {object} options
   * @param {object} options.startDate - get meetings after this start date
   * @param {object} options.endDate - get meetings before this end date
   * @returns {Array} All scheduled meetings.
   */
  getScheduledMeetings({startDate, endDate}) {
    // TODO: We may need to normalize the meeting objects because
    // we are unsure of the shape of objects returned from calendar service.
    const meetings = []; // this may be an object
    return meetings;
  }
}
