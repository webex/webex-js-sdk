/*!
 * Copyright (c) 2015-2018 Cisco Systems, Inc. See LICENSE file.
 */

/**
 *
 *
 * @export
 * @class Device
 */
export default class Device {
  /**
   * Create an instance of Device.
   * @param {string} id
   * @param {string} status
   * @param {bool} isPaired
   * @param {string} pairedToken
   * @param {string} type
   * @memberof Device
   */
  constructor({
    id, status, isPaired, pairedToken, type
  }) {
    this.id = id;
    this.status = status;
    this.isPaired = isPaired;
    this.pairedToken = pairedToken;
    this.type = type;
  }

  /**
   *
   * Request pairing of a device, AKA resource.
   * @param {string} id
   * @param {string} token
   * @returns {Promise}
   * @memberof Device
   */
  requestPair(id, token) {
    return new Promise((resolve) => {
      this.id = id;
      this.pairedToken = token;
      resolve(true);
    });
  }

  /**
   * TODO: Can a participant pair with a single device or multiple Devices?
   *
   * Pair with requested device
   * @param {string} pin
   * @returns {Promise}
   * @memberof Device
   */
  pair(pin) {
    return new Promise((resolve) => {
      // do something with the pin/challenge
      this.isPaired = true;
      resolve(pin);
    });
  }

  /**
   *
   * Requires someone to be paired.
   *
   * Join meeting with device
   * @param {string} id
   * @returns {Promise}
   * @memberof Device
   */
  join(id) {
    return new Promise((resolve, reject) => {
      if (!this.isPaired) {
        reject();
      }

      this.id = id;
      resolve(id);
    });
  }

  /**
   * TODO: is this possible?
   *
   * Mute video on the device
   * (Can you mute a video like you can with audio)
   * (Is this supposed to disable video?)
   * @returns {Promise}
   * @memberof Device
   */
  muteVideo() {
    return new Promise((resolve) => resolve({}));
  }

  /**
   * TODO: is this possible?
   *
   * Unmute video on the device
   * (Can you mute a video like you can with audio)
   * (Is this supposed to enable video?)
   * @returns {Promise}
   * @memberof Device
   */
  unmuteVideo() {
    return new Promise((resolve) => resolve({}));
  }

  /**
   *
   * This may not be automatically returned from all services depending on the scenario.
   * We may need to query lyra to get the status of the device, for example.
   *
   * Mute audio on device
   * @returns {Promise}
   * @memberof Device
   */
  muteAudio() {
    return new Promise((resolve) => resolve({}));
  }

  /**
   *
   * This may not be automatically returned from all services depending on the scenario.
   * We may need to query lyra to get the status of the device, for example.
   *
   * Unmute audio on device
   * @returns {Promise}
   * @memberof Device
   */
  unmuteAudio() {
    return new Promise((resolve) => resolve({}));
  }

  /**
   *
   * Unpair current device
   * @returns {Promise}
   * @memberof Device
   */
  unpair() {
    return new Promise((resolve) => resolve({}));
  }

  /**
   *
   * Requires someone to be paired.
   * @returns {Promise}
   * @memberof Device
   */
  leave() {
    return new Promise((resolve, reject) => {
      if (!this.isPaired) {
        reject();
      }

      resolve({});
    });
  }
}
