/* eslint-disable require-jsdoc */

import EventsScope from '../common/events/events-scope';

import defaultStats from './global';

export default class StatsAnalyzer extends EventsScope {
  constructor(config) {
    super();
    this.statsResults = defaultStats;
    this.config = config;
    this.packetLossArraySender = {audio: [], video: [], share: []};
    this.packetLossArrayReceiver = {audio: [], video: [], share: []};
  }

  parseResults = (result, type) => {
    if (!result) {
      return;
    }
    this.outboundrtp(result, type);
    this.inboundrtp(result, type);
    this.track(result, type);
  }

  parsePeerStats = (res) => {
    if (!res) {
      return;
    }
    this.compareSentAndReceived(res);
  }

  processStats = (options) => {
    const {pc, stats, type} = options;

    switch (type) {
      case 'audio':
        this.parseResults(stats.data.rtcOutAudio || stats.data.rtcInAudio, type);
        this.parseResults(stats.data.rtpOutAudio || stats.data.rtpInAudio, type);
        break;
      case 'video':
        this.parseResults(stats.data.rtcOutVideo || stats.data.rtcInVideo, type);
        this.parseResults(stats.data.rtpOutVideo || stats.data.rtpInVideo, type);
        break;
      case 'share':
        this.parseResults(stats.data.rtcOutVideo || stats.data.rtcInVideo, type);
        this.parseResults(stats.data.rtpOutVideo || stats.data.rtpInVideo, type);
        break;
      default:
    }

    pc.getStats().then((res) => {
      res.forEach((r) => {
        if (['remote-inbound-rtp', 'remote-outbound-rtp'].includes(r.type)) { this.parsePeerStats(r); }
      });
    });

    return this.statsResults;
  }

  outboundrtp = (result, type) => {
    if (result.type !== 'outbound-rtp') return;

    const mediaType = type || 'audio';
    const sendrecvType = 'send';

    if (!sendrecvType) return;

    if (result.bytesSent) {
      let kilobytes = 0;

      if (!this.statsResults.internal[mediaType][sendrecvType].prevBytesSent) {
        this.statsResults.internal[mediaType][sendrecvType].prevBytesSent = result.bytesSent;
      }
      if (!this.statsResults.internal[mediaType][sendrecvType].framesEncoded) {
        this.statsResults.internal[mediaType][sendrecvType].framesEncoded = result.framesEncoded;
      }
      if (!this.statsResults.internal[mediaType][sendrecvType].keyFramesEncoded) {
        this.statsResults.internal[mediaType][sendrecvType].keyFramesEncoded = result.keyFramesEncoded;
      }

      const bytes = result.bytesSent - this.statsResults.internal[mediaType][sendrecvType].prevBytesSent;

      this.statsResults.internal[mediaType][sendrecvType].prevBytesSent = result.bytesSent;

      kilobytes = bytes / 1024;

      this.statsResults[mediaType][sendrecvType].availableBandwidth = kilobytes.toFixed(1);
      this.statsResults[mediaType].bytesSent = kilobytes.toFixed(1);

      this.statsResults[mediaType][sendrecvType].framesEncoded = result.framesEncoded - this.statsResults.internal[mediaType][sendrecvType].framesEncoded;
      this.statsResults[mediaType][sendrecvType].keyFramesEncoded = result.keyFramesEncoded - this.statsResults.internal[mediaType][sendrecvType].keyFramesEncoded;

      this.statsResults.internal[mediaType].outboundRtpId = result.id;

      if (!this.statsResults.internal[mediaType][sendrecvType].packetsSent) {
        this.statsResults.internal[mediaType][sendrecvType].packetsSent = result.packetsSent;
      }

      this.statsResults[mediaType][sendrecvType].packetsSent = result.packetsSent - this.statsResults.internal[mediaType][sendrecvType].packetsSent;
      this.statsResults.internal[mediaType][sendrecvType].packetsSent = result.packetsSent;
      this.statsResults[mediaType][sendrecvType].totalPacketsSent = result.packetsSent;
    }
  };


  inboundrtp = (result, type) => {
    if (result.type !== 'inbound-rtp') return;

    const mediaType = type || 'audio';
    const sendrecvType = 'recv';

    if (!sendrecvType) return;

    if (result.bytesReceived) {
      let kilobytes = 0;

      if (!this.statsResults.internal[mediaType][sendrecvType].prevBytesReceived) {
        this.statsResults.internal[mediaType][sendrecvType].prevBytesReceived = result.bytesReceived;
      }

      if (!this.statsResults.internal[mediaType][sendrecvType].pliCount) {
        this.statsResults.internal[mediaType][sendrecvType].pliCount = result.pliCount;
      }

      if (!this.statsResults.internal[mediaType][sendrecvType].packetsLost) {
        this.statsResults.internal[mediaType][sendrecvType].packetsLost = result.packetsLost;
      }

      if (!this.statsResults.internal[mediaType][sendrecvType].packetsReceived) {
        this.statsResults.internal[mediaType][sendrecvType].packetsReceived = result.packetsReceived;
      }

      if (!this.statsResults.internal[mediaType][sendrecvType].lastPacketReceivedTimestamp) {
        this.statsResults.internal[mediaType][sendrecvType].lastPacketReceivedTimestamp = result.lastPacketReceivedTimestamp;
      }

      if (!this.statsResults.internal[mediaType][sendrecvType].nackCount) {
        this.statsResults.internal[mediaType][sendrecvType].nackCount = result.nackCount;
      }

      const bytes = result.bytesReceived - (this.statsResults.internal[mediaType][sendrecvType].prevBytesReceived);

      this.statsResults.internal[mediaType][sendrecvType].prevBytesReceived = result.bytesReceived;

      kilobytes = bytes / 1024;
      this.statsResults[mediaType][sendrecvType].availableBandwidth = kilobytes.toFixed(1);
      this.statsResults[mediaType].bytesReceived = kilobytes.toFixed(1);

      this.statsResults[mediaType][sendrecvType].pliCount = result.pliCount - this.statsResults.internal[mediaType][sendrecvType].pliCount;
      this.statsResults[mediaType][sendrecvType].currentPacketsLost = result.packetsLost - this.statsResults.internal[mediaType][sendrecvType].packetsLost;
      if (this.statsResults[mediaType][sendrecvType].packetsLost < 0) {
        this.statsResults[mediaType][sendrecvType].packetsLost = 0;
      }


      this.statsResults[mediaType][sendrecvType].totalPacketsReceived = result.packetsReceived;
      this.statsResults[mediaType][sendrecvType].packetsReceived = result.packetsReceived - this.statsResults.internal[mediaType][sendrecvType].packetsReceived;
      this.statsResults.internal[mediaType][sendrecvType].packetsReceived = result.packetsReceived;

      //  Check the over all packet Lost ratio
      this.statsResults[mediaType][sendrecvType].avaragePacketsLostRatio = result.packetsLost / result.packetsReceived;
      this.statsResults[mediaType][sendrecvType].currentPacketLossRatio = this.statsResults[mediaType][sendrecvType].currentPacketsLost / this.statsResults.internal[mediaType][sendrecvType].packetsReceived;
      if (this.statsResults[mediaType][sendrecvType].currentPacketLossRatio > 3) {
        // TODO: Emmit receiver packet loss
      }

      this.statsResults[mediaType][sendrecvType].totalPacketsLost = result.packetsLost;
      this.packetLossArrayReceiver[mediaType].push(this.statsResults[mediaType][sendrecvType].packetsLost);
      this.statsResults[mediaType][sendrecvType].lastPacketReceivedTimestamp = result.lastPacketReceivedTimestamp;
      this.statsResults[mediaType][sendrecvType].nackCount = result.nackCount - this.statsResults.internal[mediaType][sendrecvType].nackCount;
    }
  };

  // TODO: check on the DTLS and ice on later
  remotecandidate = (result) => {
    const RemoteCandidateType = {};
    const RemoteTransport = {};
    const RemoteIpAddress = {};
    const RemoteNetworkType = {};

    if (result.type !== 'remotecandidate' && result.type !== 'remote-candidate') return;
    if (!result.id) return;

    if (!RemoteCandidateType[result.id]) {
      RemoteCandidateType[result.id] = [];
    }

    if (!RemoteTransport[result.id]) {
      RemoteTransport[result.id] = [];
    }

    if (!RemoteIpAddress[result.id]) {
      RemoteIpAddress[result.id] = [];
    }
    if (!RemoteNetworkType[result.id]) {
      RemoteNetworkType[result.id] = [];
    }

    if (result.candidateType && RemoteCandidateType[result.id].indexOf(result.candidateType) === -1) {
      RemoteCandidateType[result.id].push(result.candidateType);
    }

    if (result.transport && RemoteTransport[result.id].indexOf(result.transport) === -1) {
      RemoteTransport[result.id].push(result.transport);
    }

    if (result.ipAddress && RemoteIpAddress[result.id].indexOf(`${result.ipAddress}:${result.portNumber}`) === -1) {
      RemoteIpAddress[result.id].push(`${result.ipAddress}:${result.portNumber}`);
    }

    if (result.networkType && RemoteNetworkType[result.id].indexOf(result.networkType) === -1) {
      RemoteNetworkType[result.id].push(result.networkType);
    }

    this.statsResults.internal.candidates[result.id] = {
      candidateType: RemoteCandidateType[result.id],
      ipAddress: RemoteIpAddress[result.id],
      portNumber: result.portNumber,
      networkType: RemoteNetworkType[result.id],
      priority: result.priority,
      transport: RemoteTransport[result.id],
      timestamp: result.timestamp,
      id: result.id,
      type: result.type
    };

    this.statsResults.connectionType.remote.candidateType = RemoteCandidateType[result.id];
    this.statsResults.connectionType.remote.ipAddress = RemoteIpAddress[result.id];
    this.statsResults.connectionType.remote.networkType = RemoteNetworkType[result.id];
    this.statsResults.connectionType.remote.transport = RemoteTransport[result.id];
  };


  track = (result, mediaType) => {
    if (result.type !== 'track') return;

    const sendrecvType = result.remoteSource === true ? 'recv' : 'send';

    if (result.frameWidth && result.frameHeight) {
      this.statsResults.resolutions[mediaType][sendrecvType].width = result.frameWidth;
      this.statsResults.resolutions[mediaType][sendrecvType].height = result.frameHeight;
      this.statsResults.resolutions[mediaType][sendrecvType].framesSent = result.framesSent;
      this.statsResults.resolutions[mediaType][sendrecvType].hugeFramesSent = result.hugeFramesSent;
    }

    if (result.framesReceived && result.framesDecoded && result.framesDropped) {
      this.statsResults.resolutions[mediaType][sendrecvType].framesReceived = result.framesReceived;
      this.statsResults.resolutions[mediaType][sendrecvType].framesDecoded = result.framesDecoded;
      this.statsResults.resolutions[mediaType][sendrecvType].framesDropped = result.framesDropped;
    }

    if (result.trackIdentifier && mediaType !== 'audio') {
      this.statsResults.resolutions[mediaType][sendrecvType].trackIdentifier = result.trackIdentifier;
    }
  };

  compareSentAndReceived = (result) => {
    const mediaType = result.kind === 'audio' ? 'audio' : ['video', 'share'].filter((type) => this.statsResults.internal[type].outboundRtpId === result.localId)[0];

    if (!mediaType) {
      return;
    }

    if (!this.statsResults.internal[mediaType].send.totalPacketsLostOnReceiver) { this.statsResults.internal[mediaType].send.totalPacketsLostOnReceiver = result.packetsLost; }

    const currentPacketLoss = result.packetsLost - this.statsResults.internal[mediaType].send.totalPacketsLostOnReceiver;

    this.statsResults.internal[mediaType].send.totalPacketsLostOnReceiver = result.packetsLost;
    this.statsResults[mediaType].send.packetsLostOnReceiver = currentPacketLoss;
    this.statsResults[mediaType].send.totalPacketsLostOnReceiver = result.packetsLost;
    this.statsResults[mediaType].send.jitter = result.jitter;
    this.statsResults[mediaType].send.roundTripTime = result.roundTripTime;
    this.packetLossArraySender[mediaType].push(currentPacketLoss);

    // Total packloss ratio on this video section of the call
    this.statsResults[mediaType].send.overAllPacketLossRatio = this.statsResults[mediaType].send.totalPacketsLostOnReceiver > 0 ? this.statsResults[mediaType].send.totalPacketsLostOnReceiver * 100 / this.statsResults[mediaType].send.totalPacketsSent : 0;

    this.statsResults[mediaType].send.currentPacketLossRatio = this.statsResults[mediaType].send.packetsLostOnReceiver > 0 ? this.statsResults[mediaType].send.packetsLostOnReceiver * 100 / this.statsResults[mediaType].send.packetsSent : 0;

    if (this.statsResults[mediaType].send.currentPacketLossRatio > 1) {
      // Trigger downgrade video callback
      console.log('HIGH packet Loss');
    }
  }
}

