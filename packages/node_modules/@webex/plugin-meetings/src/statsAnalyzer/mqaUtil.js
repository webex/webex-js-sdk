export const getAudioReceiverMqa = ({audioReceiver, statsResults, lastMqaDataSent}) => {
  const mediaType = 'audio';
  const sendrecvType = 'recv';

  // collect the packets received for the last min
  audioReceiver.streams[0].common.rtpPackets = statsResults[mediaType][sendrecvType].totalPacketsReceived - lastMqaDataSent[mediaType][sendrecvType].totalPacketsReceived;

  // Hop by hop are numbers and not percentage so we compare on what we sent the last min
  audioReceiver.common.mediaHopByHopLost = (statsResults[mediaType][sendrecvType].totalPacketsLost - lastMqaDataSent[mediaType][sendrecvType].totalPacketsLost) || 0;
  audioReceiver.common.rtpHopByHopLost = statsResults[mediaType][sendrecvType].totalPacketsLost - lastMqaDataSent[mediaType][sendrecvType].totalPacketsLost || 0;
  audioReceiver.streams[0].common.rtpJitter = statsResults[mediaType][sendrecvType].rtpJitter;

  audioReceiver.streams[0].common.endToEndLost = statsResults[mediaType][sendrecvType].totalPacketsLost - lastMqaDataSent[mediaType][sendrecvType].totalPacketsLost || 0;
  audioReceiver.streams[0].common.framesReceived = statsResults.resolutions[mediaType][sendrecvType].framesReceived - lastMqaDataSent.resolutions[mediaType][sendrecvType].framesReceived || 0;
  audioReceiver.streams[0].common.receivedFrameRate = audioReceiver.streams[0].common.framesReceived / 60 || 0;
  audioReceiver.streams[0].common.receivedBitrate = (statsResults[mediaType][sendrecvType].totalBytesReceived - lastMqaDataSent[mediaType][sendrecvType].totalBytesReceived) * 8 / 60 || 0;
};


export const getAudioSenderMqa = ({audioSender, statsResults, lastMqaDataSent}) => {
  const mediaType = 'audio';
  const sendrecvType = 'send';

  audioSender.common.remoteJitter = statsResults[mediaType][sendrecvType].remoteJitter;
  audioSender.common.rtpPackets = statsResults[mediaType][sendrecvType].totalPacketsSent - lastMqaDataSent[mediaType][sendrecvType].totalPacketsSent || 0;

  // From candidate-pair
  audioSender.common.availableBitRate = statsResults[mediaType][sendrecvType].availableOutgoingBitrate || 0;
  // Calculate based on how much packets lost of received compated to how to the client sent

  const totalpacketsLostForaMin = statsResults[mediaType][sendrecvType].totalPacketsLostOnReceiver - lastMqaDataSent[mediaType][sendrecvType].totalPacketsLostOnReceiver;

  audioSender.common.remoteLossRate = totalpacketsLostForaMin > 0 ? (totalpacketsLostForaMin) * 100 / audioSender.common.rtpPackets : 0; // This is the packets sent with in last min || 0;
  audioSender.common.roundTripTime = statsResults[mediaType][sendrecvType].roundTripTime * 1000 || 0;
  audioSender.streams[0].common.rtpPackets = statsResults[mediaType][sendrecvType].totalPacketsSent - lastMqaDataSent[mediaType][sendrecvType].totalPacketsSent || 0;

  // Calculate the outgoing bitrate
  const totalBytesSentInaMin = statsResults[mediaType][sendrecvType].totalBytesSent - lastMqaDataSent[mediaType][sendrecvType].totalBytesSent;

  audioSender.streams[0].common.transmittedBitrate = totalBytesSentInaMin ? (totalBytesSentInaMin) * 8 / 60 : 0;
  audioSender.streams[0].transmittedKeyFrames = statsResults[mediaType][sendrecvType].totalKeyFramesEncoded - lastMqaDataSent[mediaType][sendrecvType].totalKeyFramesEncoded || 0;
  audioSender.streams[0].requestedKeyFrames = statsResults[mediaType][sendrecvType].totalFirCount - lastMqaDataSent[mediaType][sendrecvType].totalFirCount || 0;
};


export const getVideoReceiverMqa = ({videoReceiver, statsResults, lastMqaDataSent}) => {
  const mediaType = 'video';
  const sendrecvType = 'recv';

  // collect the packets received for the last min
  videoReceiver.streams[0].common.rtpPackets = statsResults[mediaType][sendrecvType].totalPacketsReceived - lastMqaDataSent[mediaType][sendrecvType].totalPacketsReceived || 0;

  // Hope by hop are numbers and not percentage so we compare on what we sent the last min
  videoReceiver.common.mediaHopByHopLost = (statsResults[mediaType][sendrecvType].totalPacketsLost - lastMqaDataSent[mediaType][sendrecvType].totalPacketsLost) || 0; // TODO: calculate the value
  videoReceiver.common.rtpHopByHopLost = statsResults[mediaType][sendrecvType].totalPacketsLost - lastMqaDataSent[mediaType][sendrecvType].totalPacketsLost || 0; // TODO: calculate the value
  videoReceiver.streams[0].common.rtpJitter = statsResults[mediaType][sendrecvType].rtpJitter;
  videoReceiver.streams[0].common.endToEndLost = statsResults[mediaType][sendrecvType].totalPacketsLost - lastMqaDataSent[mediaType][sendrecvType].totalPacketsLost || 0;// TODO: calculate the value
  videoReceiver.streams[0].common.framesReceived = statsResults.resolutions[mediaType][sendrecvType].framesReceived - lastMqaDataSent.resolutions[mediaType][sendrecvType].framesReceived || 0;
  videoReceiver.streams[0].common.receivedFrameRate = videoReceiver.streams[0].common.framesReceived / 60 || 0;
  videoReceiver.streams[0].common.receivedBitrate = (statsResults[mediaType][sendrecvType].totalBytesReceived - lastMqaDataSent[mediaType][sendrecvType].totalBytesReceived) * 8 / 60 || 0;
};

export const getVideoSenderMqa = ({videoSender, statsResults, lastMqaDataSent}) => {
  const mediaType = 'video';
  const sendrecvType = 'send';

  videoSender.common.remoteJitter = statsResults[mediaType][sendrecvType].remoteJitter;
  videoSender.common.rtpPackets = statsResults[mediaType][sendrecvType].totalPacketsSent - lastMqaDataSent[mediaType][sendrecvType].totalPacketsSent || 0;
  videoSender.common.availableBitRate = statsResults[mediaType][sendrecvType].availableOutgoingBitrate || 0;
  // Calculate based on how much packets lost of received compated to how to the client sent

  const totalpacketsLostForaMin = statsResults[mediaType][sendrecvType].totalPacketsLostOnReceiver - lastMqaDataSent[mediaType][sendrecvType].totalPacketsLostOnReceiver;

  videoSender.common.remoteLossRate = totalpacketsLostForaMin > 0 ? (totalpacketsLostForaMin) * 100 / videoSender.common.rtpPackets : 0; // This is the packets sent with in last min || 0;
  videoSender.common.roundTripTime = statsResults[mediaType][sendrecvType].roundTripTime * 1000 || 0;
  videoSender.streams[0].common.rtpPackets = statsResults[mediaType][sendrecvType].totalPacketsSent - lastMqaDataSent[mediaType][sendrecvType].totalPacketsSent;

  // Calculate the outgoing bitrate
  const totalBytesSentInaMin = statsResults[mediaType][sendrecvType].totalBytesSent - lastMqaDataSent[mediaType][sendrecvType].totalBytesSent;

  videoSender.streams[0].common.transmittedBitrate = totalBytesSentInaMin ? (totalBytesSentInaMin) * 8 / 60 : 0;
  videoSender.streams[0].transmittedKeyFrames = statsResults[mediaType][sendrecvType].totalKeyFramesEncoded - lastMqaDataSent[mediaType][sendrecvType].totalKeyFramesEncoded || 0;
  videoSender.streams[0].requestedKeyFrames = statsResults[mediaType][sendrecvType].totalFirCount - lastMqaDataSent[mediaType][sendrecvType].totalFirCount || 0;

  // From tracks //TODO: calculate a proper one
  const totalFrameSentInaMin = statsResults.resolutions[mediaType][sendrecvType].framesSent - lastMqaDataSent.resolutions[mediaType][sendrecvType].framesSent;

  videoSender.streams[0].common.transmittedFrameRate = totalFrameSentInaMin ? totalFrameSentInaMin / 60 : 0;
  videoSender.streams[0].transmittedHeight = statsResults.resolutions[mediaType][sendrecvType].height;
  videoSender.streams[0].transmittedWidth = statsResults.resolutions[mediaType][sendrecvType].width;
};
