export const getAudioReceiverMqa = (options) => {
  const mediaType = 'audio';
  const sendrecvType = 'recv';
  const {audioReceiver, statsResults, lastMqaDataSent} = options;

  // collect the packets received for the last min
  audioReceiver.streams[0].common.rtpPackets = statsResults[mediaType][sendrecvType].totalPacketsReceived - lastMqaDataSent[mediaType][sendrecvType].totalPacketsReceived;

  // Hope by hop are numbers and not percentage so we compare on what we sent the last min
  audioReceiver.common.mediaHopByHopLost = (statsResults[mediaType][sendrecvType].totalPacketsLost - lastMqaDataSent[mediaType][sendrecvType].totalPacketsLost); // TODO: calculate the value
  audioReceiver.common.rtpHopByHopLost = statsResults[mediaType][sendrecvType].totalPacketsLost - lastMqaDataSent[mediaType][sendrecvType].totalPacketsLost; // TODO: calculate the value
  audioReceiver.streams[0].common.rtpJitter = statsResults[mediaType][sendrecvType].rtpJitter;

  audioReceiver.streams[0].receivedHeight = statsResults.resolutions[mediaType][sendrecvType].height;
  audioReceiver.streams[0].receivedWidth = statsResults.resolutions[mediaType][sendrecvType].width;
  audioReceiver.streams[0].common.endToEndLost = statsResults[mediaType][sendrecvType].totalPacketsLost - lastMqaDataSent[mediaType][sendrecvType].totalPacketsLost;// TODO: calculate the value
  // audioReceiver.streams[0].common.framesReceived = statsResults.resolutions[mediaType][sendrecvType].framesReceived - lastMqaDataSent.resolutions[mediaType][sendrecvType].framesReceived;
  audioReceiver.streams[0].common.receivedFrameRate = audioReceiver.streams[0].common.framesReceived / 60;
  audioReceiver.streams[0].common.receivedBitrate = (statsResults[mediaType][sendrecvType].totalBytesReceived - lastMqaDataSent[mediaType][sendrecvType].totalBytesReceived) * 8 / 60 || 0;
  //
};


export const getAudioSenderMqa = (options) => {
  const mediaType = 'audio';
  const sendrecvType = 'send';
  const {audioSender, statsResults, lastMqaDataSent} = options;

  audioSender.common.remoteJitter = statsResults[mediaType][sendrecvType].remoteJitter;
  audioSender.common.rtpPackets = statsResults[mediaType][sendrecvType].totalPacketsSent - lastMqaDataSent[mediaType][sendrecvType].totalPacketsSent;

  // From candidate-pair
  audioSender.common.availableBitRate = statsResults[mediaType][sendrecvType].availableOutgoingBitrate || 0;
  // Calculate based on how much packets lost of received compated to how to the client sent

  const totalpacketsLostForaMin = statsResults[mediaType][sendrecvType].totalPacketsLostOnReceiver - lastMqaDataSent[mediaType][sendrecvType].totalPacketsLostOnReceiver;

  audioSender.common.remoteLossRate = totalpacketsLostForaMin > 0 ? (totalpacketsLostForaMin) * 100 / audioSender.common.rtpPackets : 0; // This is the packets sent with in last min || 0;

  audioSender.common.roundTripTime = statsResults[mediaType][sendrecvType].roundTripTime * 1000 || 0;


  audioSender.streams[0].common.rtpPackets = statsResults[mediaType][sendrecvType].totalPacketsSent - lastMqaDataSent[mediaType][sendrecvType].totalPacketsSent;

  // Calculate the outgoing bitrate
  const totalBytesSentInaMin = statsResults[mediaType][sendrecvType].totalBytesSent - lastMqaDataSent[mediaType][sendrecvType].totalBytesSent;

  console.log('sent totalBytesSentInaMin ,', totalBytesSentInaMin);
  audioSender.streams[0].common.transmittedBitrate = totalBytesSentInaMin ? (totalBytesSentInaMin) * 8 / 60 : 0;

  audioSender.streams[0].transmittedKeyFrames = statsResults[mediaType][sendrecvType].totalKeyFramesEncoded - lastMqaDataSent[mediaType][sendrecvType].totalKeyFramesEncoded;
  audioSender.streams[0].requestedKeyFrames = statsResults[mediaType][sendrecvType].totalFirCount - lastMqaDataSent[mediaType][sendrecvType].totalFirCount;
};


export const getVideoReceiverMqa = (options) => {
  const mediaType = 'video';
  const sendrecvType = 'recv';
  const {videoReceiver, statsResults, lastMqaDataSent} = options;

  // collect the packets received for the last min
  videoReceiver.streams[0].common.rtpPackets = statsResults[mediaType][sendrecvType].totalPacketsReceived - lastMqaDataSent[mediaType][sendrecvType].totalPacketsReceived;

  // Hope by hop are numbers and not percentage so we compare on what we sent the last min
  videoReceiver.common.mediaHopByHopLost = (statsResults[mediaType][sendrecvType].totalPacketsLost - lastMqaDataSent[mediaType][sendrecvType].totalPacketsLost); // TODO: calculate the value
  videoReceiver.common.rtpHopByHopLost = statsResults[mediaType][sendrecvType].totalPacketsLost - lastMqaDataSent[mediaType][sendrecvType].totalPacketsLost; // TODO: calculate the value
  videoReceiver.streams[0].common.rtpJitter = statsResults[mediaType][sendrecvType].rtpJitter;
  videoReceiver.streams[0].common.endToEndLost = statsResults[mediaType][sendrecvType].totalPacketsLost - lastMqaDataSent[mediaType][sendrecvType].totalPacketsLost;// TODO: calculate the value
  videoReceiver.streams[0].common.framesReceived = statsResults.resolutions[mediaType][sendrecvType].framesReceived - lastMqaDataSent.resolutions[mediaType][sendrecvType].framesReceived;
  videoReceiver.streams[0].common.receivedFrameRate = videoReceiver.streams[0].common.framesReceived / 60;
  videoReceiver.streams[0].common.receivedBitrate = (statsResults[mediaType][sendrecvType].totalBytesReceived - lastMqaDataSent[mediaType][sendrecvType].totalBytesReceived) * 8 / 60 || 0;


  //
};

export const getVideoSenderMqa = (options) => {
  const mediaType = 'video';
  const sendrecvType = 'send';
  const {videoSender, statsResults, lastMqaDataSent} = options;
  // videoReceiver.packetsReceived;
  // dstData.data.frameRateReceived = dstData.data.paintedFrames / (prevData.maxCount * connMonitor.GETSTATS_INTERVAL_s);

  // updateTransport();
  videoSender.common.remoteJitter = statsResults[mediaType][sendrecvType].remoteJitter;
  videoSender.common.rtpPackets = statsResults[mediaType][sendrecvType].totalPacketsSent - lastMqaDataSent[mediaType][sendrecvType].totalPacketsSent;
  // videoSender.common.fecPackets = statsResults[mediaType][sendrecvType].fecPackets; // Not avaliable
  // videoSender.common.remoteReceiveRate = statsResults[mediaType][sendrecvType].reportsReceived;
  console.log('sent rtpPackets ,', videoSender.common.rtpPackets);

  // From candidate-pair
  videoSender.common.availableBitRate = statsResults[mediaType][sendrecvType].availableOutgoingBitrate || 0;
  // Calculate based on how much packets lost of received compated to how to the client sent

  const totalpacketsLostForaMin = statsResults[mediaType][sendrecvType].totalPacketsLostOnReceiver - lastMqaDataSent[mediaType][sendrecvType].totalPacketsLostOnReceiver;

  videoSender.common.remoteLossRate = totalpacketsLostForaMin > 0 ? (totalpacketsLostForaMin) * 100 / videoSender.common.rtpPackets : 0; // This is the packets sent with in last min || 0;
  console.log('sent totalpacketsLostForaMin ,', videoSender.common.remoteLossRate);

  // TODO: convert the time to seconds
  videoSender.common.roundTripTime = statsResults[mediaType][sendrecvType].roundTripTime * 1000 || 0;


  videoSender.streams[0].common.rtpPackets = statsResults[mediaType][sendrecvType].totalPacketsSent - lastMqaDataSent[mediaType][sendrecvType].totalPacketsSent;

  // Calculate the outgoing bitrate
  const totalBytesSentInaMin = statsResults[mediaType][sendrecvType].totalBytesSent - lastMqaDataSent[mediaType][sendrecvType].totalBytesSent;

  console.log('sent totalBytesSentInaMin ,', totalBytesSentInaMin);
  videoSender.streams[0].common.transmittedBitrate = totalBytesSentInaMin ? (totalBytesSentInaMin) * 8 / 60 : 0;

  videoSender.streams[0].transmittedKeyFrames = statsResults[mediaType][sendrecvType].totalKeyFramesEncoded - lastMqaDataSent[mediaType][sendrecvType].totalKeyFramesEncoded;
  videoSender.streams[0].requestedKeyFrames = statsResults[mediaType][sendrecvType].totalFirCount - lastMqaDataSent[mediaType][sendrecvType].totalFirCount;

  // From tracks //TODO: calculate a proper one
  const totalFrameSentInaMin = statsResults.resolutions[mediaType][sendrecvType].framesSent - lastMqaDataSent.resolutions[mediaType][sendrecvType].framesSent;

  videoSender.streams[0].common.transmittedFrameRate = totalFrameSentInaMin ? totalFrameSentInaMin / 60 : 0; // TODO: save last one and compare
  videoSender.streams[0].transmittedHeight = statsResults.resolutions[mediaType][sendrecvType].height;
  videoSender.streams[0].transmittedWidth = statsResults.resolutions[mediaType][sendrecvType].width;
};
