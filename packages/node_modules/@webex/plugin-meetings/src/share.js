/*!
 * Copyright (c) 2015-2018 Cisco Systems, Inc. See LICENSE file.
 */

export const TYPES = {
  application: 'application',
  screen: 'screen',
  stream: 'stream',
  whiteboard: 'whiteboard'
};

export const STATUSES = {
  idle: 'idle',
  ongoing: 'ongoing',
  terminating: 'terminating',
  share_failed: 'share_failed',
  stop_share_failed: 'stop_share_failed',
  starting: 'starting'
};

/**
 * Events to emit
 * ==============
 *
 * - change (object):
 *   - status (string): See STATUSES.
 *   - reason (string)
 */
export default class Share {
  /**
   * Create a Share.
   *
   * TODO: It may be more appropriate for this class
   * to be comprised of helpful static methods.
   * @param {object} options
   * @param {object} options.resolution
   * @param {object} options.framerate
   * @param {string} options.type
   */
  constructor({resolution, framerate, type}) {
    this.resolution = resolution;
    this.framerate = framerate;
    this.status = STATUSES.idle;
    if (Object.values(TYPES).includes(type)) {
      this.type = type;
    }
    else {
      throw new Error(`Must be one of the following types: ${Object.values(TYPES)}`);
    }
  }

  /**
   * Start a screenshare.
   * @returns {Promise}
   */
  async startScreenShare() {
    const mediaStream = {};
    await this.start(mediaStream);
  }

  /**
   * Start an application share.
   * @returns {Promise}
   */
  async startApplicationShare() {
    const mediaStream = {};
    await this.start(mediaStream);
  }

  /**
   * Start a whiteboard share for a Webex Teams meeting.
   *
   * TODO: Define parameters with Saurabh.
   * TODO: Will all meetings created by the SDK also create a space
   * if one does not exist? This would provide people with features like the whiteboard.
   * @returns {Promise}
   */
  async startWhiteboardShare() {
    // Check that this is a Teams meeting. Webex Meetings does not have whiteboards.
    const mediaStream = {};
    await this.start(mediaStream);
  }

  /**
   * Start the share.
   *
   * A {https://developer.mozilla.org/en-US/docs/Web/API/MediaStream/MediaStream MediaStream}
   * can be constructed. For example, entire browser tabs and entire screens can be converted to streams.
   * A *MediaStream* can also be retrieved with {https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia getUserMedia}.
   * @param {MediaStream} mediaStream
   * @returns {Promise}
   */
  async start(mediaStream) {
    // Call relevant APIs, e.g., connect to locus -> calliope -> mercury
    return new Promise(async (resolve) => {
      // Correlate with ROAP; must depend on locus events
      resolve(mediaStream);
    });
  }

  /**
   * Stop this share.
   * @returns {Promise}
   */
  stop() {
    return new Promise((resolve) => {
      resolve();
    });
  }
}
