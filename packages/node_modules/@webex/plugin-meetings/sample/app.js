/* eslint-env browser */

/* global Meetings, ciscospark */

/* eslint-disable camelcase */
/* eslint-disable max-nested-callbacks */
/* eslint-disable no-alert */
/* eslint-disable no-console */
/* eslint-disable require-jsdoc */

// Declare some globals that we'll need throughout
let activeMeeting, spark, meetings;

// First, let's wire our form fields up to localStorage so we don't have to
// retype things everytime we reload the page.

[
  'access-token',
  'invitee'
].forEach((id) => {
  const el = document.getElementById(id);
  el.value = localStorage.getItem(id);
  el.addEventListener('change', (event) => {
    localStorage.setItem(id, event.target.value);
  });
});

function connect() {
  if (!spark) {
    spark = ciscospark.init({
      config: {
        // Any other sdk config we need
      },
      credentials: {
        access_token: document.getElementById('access-token').value
      }
    });

    meetings = new Meetings({spark});
  }

  if (!spark.internal.device.registered) {
    spark.internal.device.register()
      .then(() => {
        // This is just a little helper for our selenium tests and doesn't
        // really matter for the example
        document.body.classList.add('listening');
        document.getElementById('connection-status').innerHTML = 'connected';
      })
      // This is a terrible way to handle errors, but anything more specific is
      // going to depend a lot on your app
      .catch((err) => {
        console.error(err);
        // we'll rethrow here since we didn't really *handle* the error, we just
        // reported it
        throw err;
      });
  }
}

// In order to simplify the state management needed to keep track of our button
// handlers, we'll rely on the current call global object and only hook up event
// handlers once.

document.getElementById('meetings-object').addEventListener('click', () => {
  if (meetings) {
    console.info(meetings);
  }
});

document.getElementById('disconnect').addEventListener('click', () => {
  if (activeMeeting) {
    activeMeeting.disconnect();
  }
});

document.getElementById('start-sending-audio').addEventListener('click', () => {
  if (activeMeeting) {
    activeMeeting.startSendingAudio();
  }
});

document.getElementById('stop-sending-audio').addEventListener('click', () => {
  if (activeMeeting) {
    activeMeeting.stopSendingAudio();
  }
});

document.getElementById('start-sending-video').addEventListener('click', () => {
  if (activeMeeting) {
    activeMeeting.startSendingVideo();
  }
});

document.getElementById('stop-sending-video').addEventListener('click', () => {
  if (activeMeeting) {
    activeMeeting.stopSendingVideo();
  }
});
document.getElementById('start-receiving-audio').addEventListener('click', () => {
  if (activeMeeting) {
    activeMeeting.startReceivingAudio();
  }
});

document.getElementById('stop-receiving-audio').addEventListener('click', () => {
  if (activeMeeting) {
    activeMeeting.stopReceivingAudio();
  }
});

document.getElementById('start-receiving-video').addEventListener('click', () => {
  if (activeMeeting) {
    activeMeeting.startReceivingVideo();
  }
});

document.getElementById('stop-receiving-video').addEventListener('click', () => {
  if (activeMeeting) {
    activeMeeting.stopReceivingVideo();
  }
});

// Now, let's set up incoming call handling
document.getElementById('credentials').addEventListener('submit', (event) => {
  // let's make sure we don't reload the page when we submit the form
  event.preventDefault();
  connect();
});

// And finally, let's wire up dialing
document.getElementById('dialer').addEventListener('submit', (event) => {
  // again, we don't want to reload when we try to dial
  event.preventDefault();
  meetings.create();
});
