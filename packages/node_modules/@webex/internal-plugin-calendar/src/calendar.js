/*!
 * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.
 */

import {WebexPlugin} from '@webex/webex-core';

import CalendarCollection from './collection';

const Calendar = WebexPlugin.extend({
  namespace: 'Calendar',

  register() {
    // Calendar mercury events listener
    this.webex.internal.mercury.on('event:calendar.meeting.create', (envelope) => {
      this._handleCreate(envelope.data);
    });
    this.webex.internal.mercury.on('event:calendar.meeting.update', (envelope) => {
      this._handleUpdate(envelope.data);
    });
    this.webex.internal.mercury.on('event:calendar.meeting.create.minimal', (envelope) => {
      this._handleCreate(envelope.data);
    });
    this.webex.internal.mercury.on('event:calendar.meeting.update.minimal', (envelope) => {
      this._handleUpdate(envelope.data);
    });
    this.webex.internal.mercury.on('event:calendar.meeting.delete', (envelope) => {
      this._handleDelete(envelope.data);
    });
  },

  _handleUpdate(data) {
    const id = CalendarCollection.set(data.calendarMeetingExternal);

    this.trigger('calendar:meeting:update', CalendarCollection.get(id));
  },

  _handleCreate(data) {
    const id = CalendarCollection.set(data.calendarMeetingExternal);

    this.trigger('calendar:meeting:create', CalendarCollection.get(id));
  },

  _handleDelete(data) {
    const item = CalendarCollection.remove(data.calendarMeetingExternal.id);

    this.trigger('calendar:meeting:delete', item);
  },

  // default to yesterday to end of the week so 8 days total
  populate() {
    this.list({fromDate: this.config.fromDate, toDate: this.config.toDate}).then((res) => {
      CalendarCollection.setAll(res);
    });
  },

  sortByDate() {
    // TODO:
  },

  getByType(key, value) {
    if (['spaceURI', 'spaceMeetURL', 'conversationId'].includes(key)) {
      return CalendarCollection.getBy(key, value);
    }
    throw new Error('key must be one of, spaceURI, spaceMeetURL, or conversationId');
  },

  getAll() {
    return CalendarCollection.getAll();
  },

  /**
   * Decrypts an encrypted incoming calendar event
   * @param {Object} event
   * @returns {Promise} Resolves with a decrypted calendar event
   */
  processMeetingEvent(event) {
    return this.webex.transform('inbound', event)
      .then(() => event);
  },

  /**
   * Retrieves a collection of meetings based on the request parameters
   * @param {Object} options
   * @param {Date} options.fromDate the start of the time range
   * @param {Date} options.toDate the end of the time range
   * @returns {Promise} Resolves with an array of meetings
   */
  list(options) {
    options = options || {};

    return this.webex.request({
      method: 'GET',
      service: 'calendar',
      resource: 'calendarEvents',
      qs: options
    })
      .then((res) => res.body.items);
  }
});

export default Calendar;
