/*!
 * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.
 */

/* eslint-disable no-underscore-dangle */
import {assert} from '@webex/test-helper-chai';
import MockWebex from '@webex/test-helper-mock-webex';
import sinon from '@webex/test-helper-sinon';
import Team from '@webex/internal-plugin-team';
import User from '@webex/internal-plugin-user';

describe('plugin-team', () => {
  describe('Team', () => {
    let webex;

    const convoUrl = 'https://conv-test.wbx2.com/conversation';

    beforeEach(() => {
      webex = new MockWebex({
        children: {
          team: Team,
          user: User
        }
      });

      webex.internal.user.recordUUID = sinon.spy();
      webex.internal.device.getServiceUrl = sinon.stub().returns(Promise.resolve(convoUrl));
    });

    describe('#create()', () => {
      it('requires a displayName', () => assert.isRejected(webex.internal.team.create({}), /`params.displayName` is required/));

      it('requires a participants attribute', () => assert.isRejected(webex.internal.team.create({displayName: 'test'}), /`params.participants` is required/));

      it('requires a participants array', () => assert.isRejected(webex.internal.team.create({displayName: 'test', participants: []}), /`params.participants` is required/));
    });

    describe('#createConversation()', () => {
      it('requires a displayName', () => assert.isRejected(webex.internal.team.createConversation({}, {}), /`params.displayName` is required/));

      it('requires a team object with a general conversation', () => assert.isRejected(webex.internal.team.createConversation({}, {displayName: 'test'}), /`team.generalConversationUuid` must be present/));
    });

    describe('#prepareTeamConversation()', () => {
      it('requires a KRO', () => assert.isRejected(webex.internal.team._prepareTeamConversation({}), /Team general conversation must have a KRO/));
    });

    describe('#recordUUIDs', () => {
      it('resolves if there are no teamMembers', () => webex.internal.team._recordUUIDs({})
        .then(() => assert.equal(webex.internal.user.recordUUID.callCount, 0)));

      it('resolves if there isn\'t teamMembers.items', () => webex.internal.team._recordUUIDs({teamMembers: {}})
        .then(() => assert.equal(webex.internal.user.recordUUID.callCount, 0)));
    });

    describe('#_inferTeamUrl', () => {
      const testTeam = {test: 'team'};

      it('Returns given team if no id', () => webex.internal.team._inferTeamUrl(testTeam)
        .then((team) => {
          assert.notCalled(webex.internal.feature.getFeature);
          assert.notCalled(webex.internal.device.getServiceUrl);
          assert.equal(team.test, 'team');
        }));
      describe('HA is disabled', () => {
        beforeEach(() => {
          webex.internal.feature.getFeature = sinon.stub().returns(Promise.resolve(false));
          testTeam.id = 'id1';
        });
        it('returns unmodified team if URL is defined', () => {
          testTeam.url = 'http://example.com';

          return webex.internal.team._inferTeamUrl(testTeam)
            .then((team) => {
              assert.called(webex.internal.feature.getFeature);
              assert.notCalled(webex.internal.device.getServiceUrl);
              assert.equal(team.url, 'http://example.com');
            });
        });
        it('builds URL if not defined', () => {
          delete testTeam.url;

          return webex.internal.team._inferTeamUrl(testTeam)
            .then((team) => {
              assert.called(webex.internal.feature.getFeature);
              assert.called(webex.internal.device.getServiceUrl);
              assert.equal(team.url, `${convoUrl}/teams/id1`);
            });
        });
      });
      describe('HA is enabled', () => {
        beforeEach(() => {
          webex.internal.feature.getFeature = sinon.stub().returns(Promise.resolve(true));
          testTeam.id = 'id1';
        });
        it('builds URL if already defined', () => {
          testTeam.url = 'https://example.com';

          return webex.internal.team._inferTeamUrl(testTeam)
            .then((team) => {
              assert.called(webex.internal.feature.getFeature);
              assert.called(webex.internal.device.getServiceUrl);
              assert.equal(team.url, `${convoUrl}/teams/id1`);
            });
        });
        it('builds URL if not defined', () => {
          delete testTeam.url;

          return webex.internal.team._inferTeamUrl(testTeam)
            .then((team) => {
              assert.called(webex.internal.feature.getFeature);
              assert.called(webex.internal.device.getServiceUrl);
              assert.equal(team.url, `${convoUrl}/teams/id1`);
            });
        });
      });
    });
  });
});
