/*!
 * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.
 */

import '@webex/plugin-logger';
import '@webex/plugin-people';
import '@webex/plugin-rooms';
import '@webex/plugin-memberships';
import '@webex/plugin-messages';
import '@webex/plugin-attachment-actions';
import WebexCore from '@webex/webex-core';
import {assert} from '@webex/test-helper-chai';
import testUsers from '@webex/test-helper-test-users';

describe('plugin-attachment-actions', function () {
  this.timeout(60000);

  let creator, spock;

  before(() => testUsers.create({count: 2})
    .then((users) => {
      [creator, spock] = users;

      creator.webex = new WebexCore({
        credentials: {
          authorization: users[0].token
        }
      });
      spock.webex = new WebexCore({
        credentials: {
          authorization: users[1].token
        }
      });
    }));

  before('register to wdm, set features, and connect to mercury', () => creator.webex.internal.device.register()
    .then(() => creator.webex.internal.feature.setFeature('developer', 'adaptive-cards-api', true))
    .then(() => creator.webex.internal.mercury.connect()));

  after(() => creator.webex && creator.webex.internal.mercury.disconnect());

  before('register to wdm, set features, and connect to mercury', () => spock.webex.internal.device.register()
    .then(() => spock.webex.internal.feature.setFeature('developer', 'adaptive-cards-api', true))
    .then(() => spock.webex.internal.mercury.connect()));

  after(() => spock.webex && spock.webex.internal.mercury.disconnect());

  describe('#attachmentActions', () => {
    describe('#create()', () => {
      it('creates an attachment action and validates the attachment action created', () =>
        creator.webex.messages.create({
          toPersonId: spock.id,
          text: 'Message',
          attachments: [
            {
              contentType: 'application/vnd.microsoft.card.adaptive',
              content: {
                type: 'AdaptiveCard',
                version: '1.0',
                body: [
                  {
                    type: 'Input.Text',
                    id: 'formInput',
                    title: 'New Input.Toggle',
                    placeholder: 'Placeholder text'
                  },
                  {
                    type: 'TextBlock',
                    text: 'Adaptive Cards',
                    separation: 'none'
                  }
                ],
                actions: [
                  {
                    type: 'Action.OpenUrl',
                    url: 'http://adaptivecards.io',
                    title: 'Learn More'
                  }
                ]
              }
            }
          ]
        })
          .then((message) => spock.webex.attachmentActions.create({
            type: 'submit',
            messageId: message.id,
            inputs: {
              formInput: 'test'
            }
          })
            .then((attachmentAction) => {
              assert.isNotNull(attachmentAction.id);
              assert.isNotNull(attachmentAction.created);
              assert.equal(attachmentAction.type, 'submit');
              assert.equal(attachmentAction.messageId, message.id);
              assert.isObject(attachmentAction.inputs);
              assert.propertyVal(attachmentAction.inputs, 'formInput', 'test');
              spock.webex.people.get('me')
                .then((person) => assert.equal(attachmentAction.personId, person.id));
            })));
    });

    describe('#get()', () => {
      let attachmentAction0;

      beforeEach(() => creator.webex.messages.create({
        toPersonId: spock.id,
        text: 'Message',
        attachments: [
          {
            contentType: 'application/vnd.microsoft.card.adaptive',
            content: {
              type: 'AdaptiveCard',
              version: '1.0',
              body: [
                {
                  type: 'Input.Text',
                  id: 'formInput',
                  title: 'New Input.Toggle',
                  placeholder: 'Placeholder text'
                },
                {
                  type: 'TextBlock',
                  text: 'Adaptive Cards',
                  separation: 'none'
                }
              ],
              actions: [
                {
                  type: 'Action.OpenUrl',
                  url: 'http://adaptivecards.io',
                  title: 'Learn More'
                }
              ]
            }
          }
        ]
      })
        .then((message) => spock.webex.attachmentActions.create({
          type: 'submit',
          messageId: message.id,
          inputs: {
            formInput: 'test'
          }
        })
          .then((attachmentAction) => { attachmentAction0 = attachmentAction; })));

      it('retrieves a specific attachment action', () => spock.webex.attachmentActions.get(attachmentAction0)
        .then((attachmentAction) => {
          assert.equal(attachmentAction.id, attachmentAction0.id);
          assert.equal(attachmentAction.type, 'submit');
          assert.equal(attachmentAction.messageId, attachmentAction0.messageId);
          assert.propertyVal(attachmentAction.inputs, 'formInput', 'test');
          assert.equal(attachmentAction.created, attachmentAction0.created);
          spock.webex.people.get('me')
            .then((person) => assert.equal(attachmentAction.personId, person.id));
        }));
    });
  });
});
