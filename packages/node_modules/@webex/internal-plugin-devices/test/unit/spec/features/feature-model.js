import {assert} from '@webex/test-helper-chai';
import {FeatureModel} from '@webex/internal-plugin-devices';

import dto from '../wdm-dto';

describe('plugin-devices', () => {
  describe('feature-model', () => {
    let featureLM;
    let featureNLM;
    let featureModel;

    beforeEach('create feature model', () => {
      [featureLM, featureNLM] = dto.features.developer;
    });

    describe('#constructor()', () => {
      describe('when the feature includes a \'lastModified\' property', () => {
        beforeEach('generate the feature model', () => {
          featureModel = new FeatureModel(featureLM);
        });

        it('should assign value attributes to properties', () => {
          assert.equal(featureLM.key, featureModel.key);
          assert.equal(featureLM.mutable, featureModel.mutable);
          assert.equal(featureLM.type, featureModel.type);
          assert.equal(featureLM.val, featureModel.val);
          assert.equal(featureLM.value, featureModel.value);
        });

        it('should assign the \'lastModified\' value as a \'Date\'', () => {
          assert.instanceOf(featureModel.lastModified, Date);

          assert.equal(
            featureModel.lastModified.toISOString(),
            featureLM.lastModified
          );
        });
      });

      describe('when the feature excludes a \'lastModified\' property', () => {
        beforeEach('generate the feature model', () => {
          featureModel = new FeatureModel(featureNLM);
        });

        it('should assign value attributes to properties', () => {
          assert.equal(featureNLM.key, featureModel.key);
          assert.equal(featureNLM.mutable, featureModel.mutable);
          assert.equal(featureNLM.type, featureModel.type);
          assert.equal(featureNLM.val, featureModel.val);
          assert.equal(featureNLM.value, featureModel.value);
        });

        it('should not assign the \'lastModified\' value', () => {
          assert.isUndefined(featureModel.lastModified);
        });
      });
    });

    describe('#serialize()', () => {
      let serialized;

      describe('when the feature includes a \'lastModified\' property', () => {
        beforeEach('generate the feature model', () => {
          featureModel = new FeatureModel(featureLM);
          serialized = featureModel.serialize();
        });

        it('should assign value attributes to properties', () => {
          assert.equal(featureLM.key, serialized.key);
          assert.equal(featureLM.mutable, serialized.mutable);
          assert.equal(featureLM.type, serialized.type);
          assert.equal(featureLM.val, serialized.val);
          assert.equal(featureLM.value, serialized.value);
        });

        it('should assign the \'lastModified\' value as a \'string\'', () => {
          assert.typeOf(serialized.lastModified, 'string');
          assert.equal(serialized.lastModified, featureLM.lastModified);
        });
      });

      describe('when the feature excludes a \'lastModified\' property', () => {
        beforeEach('generate the feature model', () => {
          featureModel = new FeatureModel(featureNLM);
          serialized = featureModel.serialize();
        });

        it('should assign value attributes to properties', () => {
          assert.equal(featureNLM.key, serialized.key);
          assert.equal(featureNLM.mutable, serialized.mutable);
          assert.equal(featureNLM.type, serialized.type);
          assert.equal(featureNLM.val, serialized.val);
          assert.equal(featureNLM.value, serialized.value);
        });

        it('should not assign the \'lastModified\' value', () => {
          assert.isUndefined(serialized.lastModified);
        });
      });
    });

    describe('#set()', () => {
      describe('when setting only a single key', () => {
        let key;
        let value;

        beforeEach('configure feature and set \'key\' and \'value\'', () => {
          key = 'value';
          value = false;
          featureModel = new FeatureModel(featureLM);
          featureModel.set(key, value);
        });

        it('should assign the value to the appropriate key', () => {
          assert.equal(featureModel[key], value);
        });

        it('should not change other key values', () => {
          assert.equal(featureLM.key, featureModel.key);
          assert.equal(featureLM.mutable, featureModel.mutable);
          assert.equal(featureLM.type, featureModel.type);
          assert.equal(featureLM.val, featureModel.val);
        });
      });

      describe('when setting all properties', () => {
        beforeEach('configure feature model', () => {
          featureModel = new FeatureModel(featureLM);
          featureModel.set(featureNLM);
        });

        it('should assign all values', () => {
          assert.equal(featureNLM.key, featureModel.key);
          assert.equal(featureNLM.mutable, featureModel.mutable);
          assert.equal(featureNLM.type, featureModel.type);
          assert.equal(featureNLM.val, featureModel.val);
          assert.equal(featureNLM.value, featureModel.value);
        });
      });
    });
  });
});
