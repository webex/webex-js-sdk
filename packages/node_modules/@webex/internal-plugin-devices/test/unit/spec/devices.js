import {assert} from '@webex/test-helper-chai';
import {cloneDeep} from 'lodash';
import Devices from '@webex/internal-plugin-devices';
import MockWebex from '@webex/test-helper-mock-webex';

import dto from './wdm-dto';

describe('plugin-devices', () => {
  let webex;
  let devices;

  beforeEach('initialize webex with the devices plugin', () => {
    webex = new MockWebex({
      children: {
        devices: Devices
      }
    });

    const deviceConfig = cloneDeep(dto);

    webex.internal.devices.set(deviceConfig);

    devices = webex.internal.devices;
  });

  describe('derived properties', () => {
    describe('#registered', () => {
      describe('when the device does not have a url', () => {
        beforeEach('remove the device\'s url', () => {
          devices.url = undefined;
        });

        it('should return false', () => {
          assert.isFalse(devices.registered);
        });
      });

      describe('when the device does have a url', () => {
        beforeEach('set the device\'s url', () => {
          devices.url = dto.url;
        });

        it('should return true', () => {
          assert.isTrue(devices.registered);
        });
      });
    });
  });

  describe('#clear()', () => {});
  describe('#setLogoutTimer()', () => {});
  describe('#serialize()', () => {});

  it('temporary pass flag', () => assert.isTrue(true));
});
