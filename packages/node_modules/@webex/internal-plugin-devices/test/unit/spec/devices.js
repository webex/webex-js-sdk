import {assert} from '@webex/test-helper-chai';
import {cloneDeep} from 'lodash';
import Devices from '@webex/internal-plugin-devices';
import MockWebex from '@webex/test-helper-mock-webex';
import sinon from 'sinon';

import dto from './wdm-dto';

describe('plugin-devices', () => {
  describe('Devices', () => {
    let webex;
    let devices;

    beforeEach('initialize webex with the devices plugin', () => {
      webex = new MockWebex({
        children: {
          devices: Devices
        }
      });

      const deviceConfig = cloneDeep(dto);

      webex.internal.devices.set(deviceConfig);

      devices = webex.internal.devices;
    });

    describe('events', () => {
      describe('when a feature is changed', () => {
        let spy;
        let modifiedDTOFeatures;

        beforeEach('setup sinon', () => {
          spy = sinon.spy();
          modifiedDTOFeatures = {
            ...dto.features,
            user: [
              ...dto.features.user,
              ...dto.features.developer
            ]
          };
        });

        it('should trigger a \'change\' event', () => {
          devices.on('change', spy);
          devices.features.set(modifiedDTOFeatures);
          assert.called(spy);
        });

        it('should trigger a \'change:features\' event', () => {
          devices.on('change:features', spy);
          devices.features.set(modifiedDTOFeatures);
          assert.called(spy);
        });
      });
    });

    describe('derived properties', () => {
      describe('#registered', () => {
        describe('when the device does not have a url', () => {
          beforeEach('remove the device\'s url', () => {
            devices.url = undefined;
          });

          it('should return false', () => {
            assert.isFalse(devices.registered);
          });
        });

        describe('when the device does have a url', () => {
          beforeEach('set the device\'s url', () => {
            devices.url = dto.url;
          });

          it('should return true', () => {
            assert.isTrue(devices.registered);
          });
        });
      });
    });

    describe('#clear()', () => {
      it('should clear all features', () => {
        assert.isAbove(devices.features.developer.length, 0);
        devices.clear();
        assert.lengthOf(devices.features.developer, 0);
      });

      it('should not clear the logger', () => {
        assert.property(devices, 'logger');
        assert.isDefined(devices.logger);
        devices.clear();
        assert.property(devices, 'logger');
        assert.isDefined(devices.logger);
      });
    });

    describe('#setLogoutTimer()', () => {
      describe('when the duration parameter is not set', () => {
        it('should not change the existing timer', () => {
          const {logoutTimer} = devices;

          devices.setLogoutTimer();
          assert.equal(devices.logoutTimer, logoutTimer);
        });
      });

      describe('when the duration parameter is zero or negative', () => {
        it('should not change the existing timer', () => {
          const {logoutTimer} = devices;

          devices.setLogoutTimer(-1);
          assert.equal(devices.logoutTimer, logoutTimer);
        });
      });

      describe('when the duration is valid', () => {
        beforeEach(() => {
          devices.resetLogoutTimer = sinon.spy();
        });

        it('should create a \'change:lastUserActivityDate\' listener', () => {
          devices.setLogoutTimer(60000);
          devices.trigger('change:lastUserActivityDate');
          assert.called(devices.resetLogoutTimer);
        });

        it('should set the logout timer', () => {
          const {logoutTimer} = devices;

          devices.setLogoutTimer(60000);
          assert.notEqual(devices.logoutTimer, logoutTimer);
        });
      });
    });

    describe('#serialize()', () => {
      it('should serialize features in a format compatible with wdm', () => {
        assert.deepEqual(devices.serialize().features, dto.features);
      });
    });
  });
});
