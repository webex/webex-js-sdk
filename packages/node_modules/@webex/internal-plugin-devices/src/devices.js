// Internal Dependencies
import {WebexPlugin} from '@webex/webex-core';

const Devices = WebexPlugin.extend({

  // Ampersand property members.

  namespace: 'Devices',

  // Allow for extra properties to prevent the plugin from failing due to
  // **WDM** service DTO changes.
  extraProperties: 'allow',

  children: {
    // Child FeatureModel will be implemented here in a later pull request.
  },

  /**
   * A collection of device properties mostly assigned by the retrieved DTO from
   * the **WDM** service that are mapped against the ampersand properties.
   *
   * @type {Object}
   */
  props: {
    /**
     * This property determines whether or not giphy support is enabled.
     *
     * @type {'ALLOW' | 'BLOCK'}
     */
    clientMessagingGiphy: 'string',

    /**
     * This property should store the company name.
     *
     * @type {string}
     */
    customerCompanyName: 'string',

    /**
     * This property should store the logo url.
     *
     * @type {string}
     */
    customerLogoUrl: 'string',

    /**
     * This property doesn't have any real values, but is sent during device
     * refresh to prevent the **wdm** service from falling back to an iOS device
     * type.
     *
     * @type {string}
     */
    deviceType: 'string',

    /**
     * This property should store the help url.
     *
     * @type {string}
     */
    helpUrl: 'string',

    /**
     * This property should store the intranet inactivity timer duration.
     *
     * @type {number}
     */
    intranetInactivityDuration: 'number',

    /**
     * This property stores the url required to validate if the device is able
     * to actively reach the intranet network.
     *
     * @type {string}
     */
    intranetInactivityCheckUrl: 'string',

    /**
     * This property stores the inactivity timer duration, and could possibly
     * deprecate the `intranetInactivityDuration` property.
     *
     * @type {number}
     */
    inNetworkInactivityDuration: 'number',

    /**
     * This property stores the ECM (external content management) enabled value
     * for the whole organization.
     *
     * @type {boolean}
     */
    ecmEnabledForAllUsers: ['boolean', false, false],

    /**
     * This property stores an array of ECM (external content management)
     * providers that are currently available.
     *
     * @returns {Array<string>}
     */
    ecmSupportedStorageProviders: ['array', false, (() => [])],

    /**
     * This property stores the modification time value retrieved from the
     * **WDM** endpoint formatted as ISO 8601.
     *
     * @type {string}
     */
    modificationTime: 'string',

    /**
     * This property stores the navigation bar color.
     *
     * @type {string}
     */
    navigationBarColor: 'string',

    /**
     * This property stores the partner company's name when available.
     *
     * @type {string}
     */
    partnerCompanyName: 'string',

    /**
     * This property stores the partner company's logo when available.
     *
     * @type {string}
     */
    partnerLogoUrl: 'string',

    /**
     * This property stores the availability of people data from the **WDM**
     * service.
     *
     * @type {boolean}
     */
    peopleInsightsEnabled: 'boolean',

    /**
     * This property stores the reporting site's description when available.
     *
     * @type {string}
     */
    reportingSiteDesc: 'string',

    /**
     * This property stores the reporting site's access url when available.
     *
     * @type {string}
     */
    reportingSiteUrl: 'string',

    /**
     * This property stores the encryption key url when available.
     *
     * @type {string}
     */
    searchEncryptionKeyUrl: 'string',

    /**
     * This property stores the availability of support-provided text from the
     * **WDM** service.
     *
     * @type {boolean}
     */
    showSupportText: 'boolean',

    /**
     * This property stores the support provider's company name when available.
     *
     * @type {string}
     */
    supportProviderCompanyName: 'string',

    /**
     * This property stores the support provider's logo url when available.
     *
     * @type {string}
     */
    supportProviderLogoUrl: 'string',

    /**
     * This property stores the device's url retrieved from a registration
     * request. This property gets set via the initial registration process by a
     * `this.set()` method.
     *
     * @type {string}
     */
    url: 'string',

    /**
     * This property stores the device's userId uuid value, which can also be
     * derived from the device's registerd user's userId retrieved from
     * the **Hydra** service.
     *
     * @type {string}
     */
    userId: 'string',

    /**
     * This property stores whether or not file sharing is enabled
     *
     * @type {'BLOCK_BOTH' | 'BLOCK_UPLOAD'}
     */
    webFileShareControl: 'string',

    /**
     * This property stores the current web socket url used by the registered
     * device.
     *
     * @type {string}
     */
    webSocketUrl: 'string',

    /**
     * This property stores the value indicating whether or not white board file
     * sharing is enabled for the current device.
     *
     * @type {'ALLOW' | 'BLOCK'}
     */
    whiteboardFileShareControl: 'string'
  },

  /**
   * A list of derived properties that populate based when their parent data
   * available via the device's properties.
   *
   * @type {Object}
   */
  derived: {
    /**
     * This property determines if the current device is registered.
     *
     * @type {boolean}
     */
    registered: {
      deps: ['url'],

      /**
       * Checks if the device is registered by validating that the url exists.
       * Amperstand does not allow this to method to be written as an arrow
       * function.
       *
       * @returns {boolean}
       */
      fn() {
        return !!(this.url);
      }
    }
  },

  /**
   * Stores timer data as well as other state details.
   *
   * @type {Object}
   */
  session: {
    /**
     * This property stores the logout timer object
     *
     * @type {any}
     */
    logoutTimer: 'any',

    /**
     * This property stores the date for the last activity the user made
     * with the current device.
     *
     * @type {number}
     */
    lastUserActivityDate: 'number',

    /**
     * This property stores whether or not the reachability check has been
     * performed to prevent the reachability check from performing its
     * operation more than once after a successful check.
     *
     * @returns {boolean}
     */
    isReachabilityChecked: ['boolean', false, false],

    /**
     * This property stores whether or not the current device is in a meeting
     * to prevent an unneeded timeout of a meeting due to inactivity.
     *
     * @type {boolean}
     */
    isInMeeting: 'boolean',

    /**
     * This property identifies if the device is currently in network to prevent
     * the `resetLogoutTimer()` method from being called repeatedly once its
     * known client is connected to the organization's internal network.
     *
     * @type {boolean}
     */
    isInNetwork: 'boolean'
  },

  // Event method members

  meetingStarted() {}, // Handles triggering meeting started events.
  meetingEnded() {}, // Handles triggering meeting ended events.

  // Registration method members

  refresh() {}, // Refreshes the device's registration.
  register() {}, // Registers a device.
  unregister() {}, // Unregisters the device.

  // Helper method members

  canRegister() {}, // Validates if the device can register
  checkNetworkReachability() {}, // Checks for internal network reachability.
  clear() {}, // Selectively clears the device.
  getWebSocketUrl() {}, // Retrieves the priority-mapped web socket url.
  processRegistrationSuccess() {}, // Handles post-registration data mapping.
  resetLogoutTimer() {}, // Resets the logout timer for ephemeral devices.
  setLogoutTimer() {}, // Sets the logout timer for ephemeral devices.
  waitForRegistration() {}, // Eventing method queue actions after registration.

  // Ampersand method members

  initialize() {} // Sets up the plugin as well as its events.
});

export default Devices;
