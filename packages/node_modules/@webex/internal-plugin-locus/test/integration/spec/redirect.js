/*!
 * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.
 */

import {assert} from '@webex/test-helper-chai';
import '@webex/internal-plugin-wdm';
import CiscoSpark from '@webex/webex-core';
import testUsers from '@webex/test-helper-test-users';

describe('internal-plugin-locus', function () {
  this.timeout(30000);
  describe('Locus', () => {
    describe('#redirect', () => {
      let spock;
      const locusServiceUrl = process.env.LOCUS_SERVICE_URL || 'https://locus-intb.ciscospark.com/locus/api/v1/';
      const domain = getDomain(locusServiceUrl);

      before('create users', () => testUsers.create({count: 1})
        .then(([user]) => {
          spock = user;
          spock.spark = new CiscoSpark({
            credentials: {
              authorization: spock.token
            },
            config: {
              device: {
                preDiscoveryServices: {
                  wdmServiceUrl: process.env.WDM_SERVICE_URL || 'https://wdm-intb.ciscospark.com/wdm/api/v1'
                }
              }
            }
          });
        }));

      before('register with wdm', () => spock.spark.internal.device.register());

      it.only('successfully redirects GET requests on /meetinginfo', () => {
        const userId = spock.userName.split('@')[0];
        const uri = `${locusServiceUrl}/loci/meetingInfo/sip:${userId}@${domain}?type=SIP_URI&alternateRedirect=true`;

        return spock.spark.request({
          uri,
          method: 'GET',
          headers: {
            authorization: `Bearer ${spock.spark.credentials.supertoken.access_token}`
          }
        })
          .then((res) => {
            assert.isDefined(res.body.locusUrl);
            assert.notEqual(res.body.locusUrl, uri);
            assert.equal(res.statusCode, 200);
            assert.isAbove(res.options.$redirectCount, 0); // proves redirection
          });
      });

      // INVALID TEST
      it('successfully redirects POST requests on /loci', () => {
        const uri = 'https://locus-intb.ciscospark.com/locus/api/v1/loci/call'; // 1:1 call

        return spock.spark.internal.device.register()
          .then(() => spock.spark.request({
            uri,
            method: 'POST',
            headers: {
              authorization: `Bearer ${spock.spark.credentials.supertoken.access_token}`
            },
            qs: {alternateRedirect: true},
            body: {
              deviceUrl: spock.spark.internal.device.url,
              invitee: {
                // address: 'test@meet-fed.webex.com' // meet-fed... is a prod site; use: test@meet-fed-ats2.webex.com
                address: 'test@meet-fed-ats2.webex.com' // meet-fed... is a prod site; use: test@meet-fed-ats2.webex.com
              }
            }
          })
            // goes into catch since meeting is not hosted on the new test url
            .catch((err) => {
              assert.isDefined(err.options.uri);
              assert.equal(err.options.uri, uri); // does not redirect for a 1:1 call *yet*
              assert.equal(err.options.$redirectCount, 0); // proves redirection // does not redirect
            }));
      });

      // The below tests is required and can be enabled later after discussion
      // with Sambit Mishra. Currently the backend team discovered a bug after
      // running this test which requires a fix in their code.
      it('successfully redirects GET requests on /participant', () => {
        const uri = 'https://locus-intb.ciscospark.com/locus/api/v1/loci/meetingInfo/sip:test-sdk_ci@meet-fed.webex.com?type=SIP_URI&alternateRedirect=true'; // instead of test-sdk_ci use the generated user's ID

        return spock.spark.internal.device.register()
          .then(() => {
            return spock.spark.request({
              uri,
              method: 'GET',
              headers: {
                authorization: `Bearer ${spock.spark.credentials.supertoken.access_token}`
              }
            });
          })
          .then((res) => {
            assert.isDefined(res.body.locusUrl);
            assert.notEqual(res.body.locusUrl, uri);
            assert.equal(res.statusCode, 200);
            assert.isAbove(res.options.$redirectCount, 0); // proves redirection
            // change it to intb1 otherwise it won't test the actual redirect
            const uri = res.body.locusUrl.replace('intb2', 'intb1') + '/participant';
            return spock.spark.request({
              uri,
              method: 'POST',
              headers: {
                authorization: `Bearer ${spock.spark.credentials.supertoken.access_token}`
              },
              qs: {alternateRedirect: true},
              body: {
                deviceUrl: spock.spark.internal.device.url,
                invitee: {
                  // address: 'test@meet-fed.webex.com' // test@meet-fed-ats2.webex.com
                  address: 'test@meet-fed-ats2.webex.com'
                }
              }
            });
          })
          .then((res) => {
            console.log('final res=', res);
          });
      });
    });
  });
});

/**
 * Returns the proper user domain given a service URL.
 *
 * https://locus-intb.ciscospark.com/locus/api/v1/  uses the pattern <user ID>@ss4-integration-ats2.webex.com
 * https://locus-intb2.ciscospark.com/locus/api/v1  uses the pattern <user ID>@meet-fed-ats2.webex.com
 * https://locus-b.wbx2.com/locus/api/v1/           uses the pattern <user ID>@meet-fed.webex.com
 *
 * @param {String} serviceUrl the service URL
 * @returns {String} domain
 */
function getDomain(serviceUrl) {
  let domain;

  if (serviceUrl.includes('wbx2.com')) {
    domain = 'meet-fed.webex.com';
  }
  else if (serviceUrl.includes('-intb.ciscospark.com')) {
    domain = 'ss4-integration-ats2.webex.com';
  }
  else if (serviceUrl.includes('-intb2.ciscospark.com')) {
    domain = 'meet-fed-ats2.webex.com';
  }

  if (!domain) {
    throw new Error(`Invalid service URL: ${serviceUrl}`);
  }

  return domain;
}
