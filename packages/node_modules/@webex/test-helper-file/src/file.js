/*!
 * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.
 */


const fs = require('fs');
const path = require('path');

const Magic = require('mmmagic');
const {isBuffer} = require('@webex/common');

const File = {
  fetch: function fetch(filename) {
    return File.fetchWithoutMagic(filename)
      .then((data) => new Promise((resolve, reject) => {
        const magic = new Magic.Magic(Magic.MAGIC_MIME_TYPE);

        magic.detect(data, (err2, res) => {
          if (err2) {
            reject(err2);

            return;
          }
          data.type = res;
          resolve(data);
        });
      }));
  },

  fetchWithoutMagic: function fetchWithoutMagic(filename) {
    return new Promise((resolve, reject) => {
      const filepath = path.join(__dirname, '../../../@webex/test-helper-server/static', filename);

      fs.readFile(filepath, (err, data) => {
        if (err) {
          reject(err);

          return;
        }
        data.name = filename;
        resolve(data);
      });
    });
  },

  isBufferLike: function isBufferLike(file) {
    return isBuffer(file);
  },

  isBlobLike: function isBlobLike(file) {
    return isBuffer(file);
  },

  isMatchingFile: function isMatchingFile(left, right) {
    if (!File.isBufferLike(left)) {
      throw new Error('`left` must be a `Buffer`');
    }

    if (!File.isBufferLike(right)) {
      throw new Error('`right` must be a `Buffer`');
    }

    // Node 10 doesn't have Buffer#equals()
    if (left.equals) {
      return Promise.resolve(left.equals(right));
    }

    if (left.length !== right.length) {
      return Promise.resolve(false);
    }

    for (let i = 0; i < left.length; i += 1) {
      if (left[i] !== right[i]) {
        return Promise.resolve(false);
      }
    }

    return Promise.resolve(true);
  }
};

module.exports = File;
